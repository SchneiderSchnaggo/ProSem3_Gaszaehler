
ProSem3_Gaszaehler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086a0  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008934  08008934  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008934  08008934  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008934  08008934  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008934  08008934  00018934  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008938  08008938  00018938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800893c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  200001e0  08008b1c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001400  08008b1c  00021400  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3dd  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000303b  00000000  00000000  0002e5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000be8  00000000  00000000  00031628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a40  00000000  00000000  00032210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c80b  00000000  00000000  00032c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010caf  00000000  00000000  0004f45b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093762  00000000  00000000  0006010a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f386c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c4  00000000  00000000  000f38bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001e0 	.word	0x200001e0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800886c 	.word	0x0800886c

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001e4 	.word	0x200001e4
 8000220:	0800886c 	.word	0x0800886c

08000224 <initPins>:
 *  Created on: 16.03.2023
 *      Author: lukas
 */
#include <gpio.h>

void initPins(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	gpioInitPort(GPIOC);
 8000228:	4817      	ldr	r0, [pc, #92]	; (8000288 <initPins+0x64>)
 800022a:	f000 f9eb 	bl	8000604 <gpioInitPort>
	gpioSetupPin(GPIOC, PIN4, OUT_2MHZ);
 800022e:	2202      	movs	r2, #2
 8000230:	2104      	movs	r1, #4
 8000232:	4815      	ldr	r0, [pc, #84]	; (8000288 <initPins+0x64>)
 8000234:	f000 fa32 	bl	800069c <gpioSetupPin>
	gpioSetupMode(GPIOC, PIN4, GP_PP);
 8000238:	2200      	movs	r2, #0
 800023a:	2104      	movs	r1, #4
 800023c:	4812      	ldr	r0, [pc, #72]	; (8000288 <initPins+0x64>)
 800023e:	f000 fa92 	bl	8000766 <gpioSetupMode>
	gpioSetupPin(GPIOC, PIN9, INPUT);
 8000242:	2200      	movs	r2, #0
 8000244:	2109      	movs	r1, #9
 8000246:	4810      	ldr	r0, [pc, #64]	; (8000288 <initPins+0x64>)
 8000248:	f000 fa28 	bl	800069c <gpioSetupPin>
	gpioSetupInput(GPIOC, PIN9, IN_PUPD);
 800024c:	2202      	movs	r2, #2
 800024e:	2109      	movs	r1, #9
 8000250:	480d      	ldr	r0, [pc, #52]	; (8000288 <initPins+0x64>)
 8000252:	f000 fa60 	bl	8000716 <gpioSetupInput>
	gpioSetPullupPulldown(GPIOC, PIN9, true);
 8000256:	2201      	movs	r2, #1
 8000258:	2109      	movs	r1, #9
 800025a:	480b      	ldr	r0, [pc, #44]	; (8000288 <initPins+0x64>)
 800025c:	f000 fad4 	bl	8000808 <gpioSetPullupPulldown>
	gpioInitPort(GPIOB);
 8000260:	480a      	ldr	r0, [pc, #40]	; (800028c <initPins+0x68>)
 8000262:	f000 f9cf 	bl	8000604 <gpioInitPort>
	gpioSetupPin(GPIOB, PIN12, OUT_2MHZ);
 8000266:	2202      	movs	r2, #2
 8000268:	210c      	movs	r1, #12
 800026a:	4808      	ldr	r0, [pc, #32]	; (800028c <initPins+0x68>)
 800026c:	f000 fa16 	bl	800069c <gpioSetupPin>
	gpioSetupMode(GPIOB, PIN12, GP_PP);
 8000270:	2200      	movs	r2, #0
 8000272:	210c      	movs	r1, #12
 8000274:	4805      	ldr	r0, [pc, #20]	; (800028c <initPins+0x68>)
 8000276:	f000 fa76 	bl	8000766 <gpioSetupMode>
	gpioResetPin(GPIOB, PIN12);
 800027a:	210c      	movs	r1, #12
 800027c:	4803      	ldr	r0, [pc, #12]	; (800028c <initPins+0x68>)
 800027e:	f000 faae 	bl	80007de <gpioResetPin>
}
 8000282:	bf00      	nop
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	40011000 	.word	0x40011000
 800028c:	40010c00 	.word	0x40010c00

08000290 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000294:	f000 fdfe 	bl	8000e94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000298:	f000 f807 	bl	80002aa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800029c:	f000 f862 	bl	8000364 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80002a0:	f007 f9c2 	bl	8007628 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  start();
 80002a4:	f000 f885 	bl	80003b2 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a8:	e7fe      	b.n	80002a8 <main+0x18>

080002aa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002aa:	b580      	push	{r7, lr}
 80002ac:	b096      	sub	sp, #88	; 0x58
 80002ae:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002b4:	2228      	movs	r2, #40	; 0x28
 80002b6:	2100      	movs	r1, #0
 80002b8:	4618      	mov	r0, r3
 80002ba:	f007 fe55 	bl	8007f68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002be:	f107 031c 	add.w	r3, r7, #28
 80002c2:	2200      	movs	r2, #0
 80002c4:	601a      	str	r2, [r3, #0]
 80002c6:	605a      	str	r2, [r3, #4]
 80002c8:	609a      	str	r2, [r3, #8]
 80002ca:	60da      	str	r2, [r3, #12]
 80002cc:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	2200      	movs	r2, #0
 80002d2:	601a      	str	r2, [r3, #0]
 80002d4:	605a      	str	r2, [r3, #4]
 80002d6:	609a      	str	r2, [r3, #8]
 80002d8:	60da      	str	r2, [r3, #12]
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002de:	2301      	movs	r3, #1
 80002e0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e8:	2300      	movs	r3, #0
 80002ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002ec:	2301      	movs	r3, #1
 80002ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f0:	2302      	movs	r3, #2
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80002f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002fe:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000300:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000304:	4618      	mov	r0, r3
 8000306:	f002 fbe5 	bl	8002ad4 <HAL_RCC_OscConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000310:	f000 f84a 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000314:	230f      	movs	r3, #15
 8000316:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000318:	2302      	movs	r3, #2
 800031a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800031c:	2300      	movs	r3, #0
 800031e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000320:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000324:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000326:	2300      	movs	r3, #0
 8000328:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800032a:	f107 031c 	add.w	r3, r7, #28
 800032e:	2101      	movs	r1, #1
 8000330:	4618      	mov	r0, r3
 8000332:	f002 fe51 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800033c:	f000 f834 	bl	80003a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000340:	2310      	movs	r3, #16
 8000342:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000344:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000348:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800034a:	1d3b      	adds	r3, r7, #4
 800034c:	4618      	mov	r0, r3
 800034e:	f002 ffa9 	bl	80032a4 <HAL_RCCEx_PeriphCLKConfig>
 8000352:	4603      	mov	r3, r0
 8000354:	2b00      	cmp	r3, #0
 8000356:	d001      	beq.n	800035c <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000358:	f000 f826 	bl	80003a8 <Error_Handler>
  }
}
 800035c:	bf00      	nop
 800035e:	3758      	adds	r7, #88	; 0x58
 8000360:	46bd      	mov	sp, r7
 8000362:	bd80      	pop	{r7, pc}

08000364 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000364:	b480      	push	{r7}
 8000366:	b083      	sub	sp, #12
 8000368:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800036a:	4b0e      	ldr	r3, [pc, #56]	; (80003a4 <MX_GPIO_Init+0x40>)
 800036c:	699b      	ldr	r3, [r3, #24]
 800036e:	4a0d      	ldr	r2, [pc, #52]	; (80003a4 <MX_GPIO_Init+0x40>)
 8000370:	f043 0320 	orr.w	r3, r3, #32
 8000374:	6193      	str	r3, [r2, #24]
 8000376:	4b0b      	ldr	r3, [pc, #44]	; (80003a4 <MX_GPIO_Init+0x40>)
 8000378:	699b      	ldr	r3, [r3, #24]
 800037a:	f003 0320 	and.w	r3, r3, #32
 800037e:	607b      	str	r3, [r7, #4]
 8000380:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_GPIO_Init+0x40>)
 8000384:	699b      	ldr	r3, [r3, #24]
 8000386:	4a07      	ldr	r2, [pc, #28]	; (80003a4 <MX_GPIO_Init+0x40>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6193      	str	r3, [r2, #24]
 800038e:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_GPIO_Init+0x40>)
 8000390:	699b      	ldr	r3, [r3, #24]
 8000392:	f003 0304 	and.w	r3, r3, #4
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

}
 800039a:	bf00      	nop
 800039c:	370c      	adds	r7, #12
 800039e:	46bd      	mov	sp, r7
 80003a0:	bc80      	pop	{r7}
 80003a2:	4770      	bx	lr
 80003a4:	40021000 	.word	0x40021000

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b480      	push	{r7}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>

080003b2 <start>:

bool usartRXFlag = false;
char usartBuff[USART_MSG_LEN];
uint8_t byteNum = 0;

void start(void){
 80003b2:	b580      	push	{r7, lr}
 80003b4:	af00      	add	r7, sp, #0
	initPins();
 80003b6:	f7ff ff35 	bl	8000224 <initPins>
	indicateMagnet();
 80003ba:	f000 f847 	bl	800044c <indicateMagnet>
			//modbusrequest()hier implementieren!
			usartRXFlag = false;
			modbusResponse(usartBuff, sizeof(usartBuff)/sizeof(uint8_t));
		}
	}*/
}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
	...

080003c4 <USART1_IRQHandler>:

void USART1_IRQHandler(void){
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
	cnt = USART_MSG_LEN;
 80003ca:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <USART1_IRQHandler+0x74>)
 80003cc:	2206      	movs	r2, #6
 80003ce:	601a      	str	r2, [r3, #0]
	rcv = USART1->DR & 0x01FF;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <USART1_IRQHandler+0x78>)
 80003d2:	685b      	ldr	r3, [r3, #4]
 80003d4:	b2da      	uxtb	r2, r3
 80003d6:	4b1a      	ldr	r3, [pc, #104]	; (8000440 <USART1_IRQHandler+0x7c>)
 80003d8:	701a      	strb	r2, [r3, #0]
	int i = 0;
 80003da:	2300      	movs	r3, #0
 80003dc:	607b      	str	r3, [r7, #4]
	while((rcv != '\n') && (cnt != 0)){
 80003de:	e012      	b.n	8000406 <USART1_IRQHandler+0x42>
		while(!(USART1->SR & USART_SR_RXNE)){
 80003e0:	bf00      	nop
 80003e2:	4b16      	ldr	r3, [pc, #88]	; (800043c <USART1_IRQHandler+0x78>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	f003 0320 	and.w	r3, r3, #32
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <USART1_IRQHandler+0x1e>
		}

		usartBuff[i++] = rcv;
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	1c5a      	adds	r2, r3, #1
 80003f2:	607a      	str	r2, [r7, #4]
 80003f4:	4a12      	ldr	r2, [pc, #72]	; (8000440 <USART1_IRQHandler+0x7c>)
 80003f6:	7811      	ldrb	r1, [r2, #0]
 80003f8:	4a12      	ldr	r2, [pc, #72]	; (8000444 <USART1_IRQHandler+0x80>)
 80003fa:	54d1      	strb	r1, [r2, r3]
		cnt--;
 80003fc:	4b0e      	ldr	r3, [pc, #56]	; (8000438 <USART1_IRQHandler+0x74>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3b01      	subs	r3, #1
 8000402:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <USART1_IRQHandler+0x74>)
 8000404:	6013      	str	r3, [r2, #0]
	while((rcv != '\n') && (cnt != 0)){
 8000406:	4b0e      	ldr	r3, [pc, #56]	; (8000440 <USART1_IRQHandler+0x7c>)
 8000408:	781b      	ldrb	r3, [r3, #0]
 800040a:	2b0a      	cmp	r3, #10
 800040c:	d003      	beq.n	8000416 <USART1_IRQHandler+0x52>
 800040e:	4b0a      	ldr	r3, [pc, #40]	; (8000438 <USART1_IRQHandler+0x74>)
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d1e4      	bne.n	80003e0 <USART1_IRQHandler+0x1c>
	}
	usartBuff[USART_MSG_LEN] = '\0';
 8000416:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <USART1_IRQHandler+0x80>)
 8000418:	2200      	movs	r2, #0
 800041a:	719a      	strb	r2, [r3, #6]
	//gpioSetPin(GPIOB, PIN12);
	//USARTSendString(USART1, usartBuff);
	//gpioResetPin(GPIOB, PIN12);
	USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
 800041c:	4b07      	ldr	r3, [pc, #28]	; (800043c <USART1_IRQHandler+0x78>)
 800041e:	68db      	ldr	r3, [r3, #12]
 8000420:	4a06      	ldr	r2, [pc, #24]	; (800043c <USART1_IRQHandler+0x78>)
 8000422:	f023 0320 	bic.w	r3, r3, #32
 8000426:	60d3      	str	r3, [r2, #12]
	usartRXFlag = true;
 8000428:	4b07      	ldr	r3, [pc, #28]	; (8000448 <USART1_IRQHandler+0x84>)
 800042a:	2201      	movs	r2, #1
 800042c:	701a      	strb	r2, [r3, #0]
}
 800042e:	bf00      	nop
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	bc80      	pop	{r7}
 8000436:	4770      	bx	lr
 8000438:	20000200 	.word	0x20000200
 800043c:	40013800 	.word	0x40013800
 8000440:	200001fc 	.word	0x200001fc
 8000444:	20000208 	.word	0x20000208
 8000448:	20000204 	.word	0x20000204

0800044c <indicateMagnet>:

//---------
void indicateMagnet(){
 800044c:	b580      	push	{r7, lr}
 800044e:	b086      	sub	sp, #24
 8000450:	af00      	add	r7, sp, #0
	initPins();
 8000452:	f7ff fee7 	bl	8000224 <initPins>
	systickInit(SYSTICK_1S);
 8000456:	2001      	movs	r0, #1
 8000458:	f000 fa6c 	bl	8000934 <systickInit>
	systickSetTicks(1);
 800045c:	2001      	movs	r0, #1
 800045e:	f000 fa7d 	bl	800095c <systickSetTicks>
	initRS485UART();
 8000462:	f000 f891 	bl	8000588 <initRS485UART>
	gpioSetPin(GPIOC, PIN4);
 8000466:	2104      	movs	r1, #4
 8000468:	4826      	ldr	r0, [pc, #152]	; (8000504 <indicateMagnet+0xb8>)
 800046a:	f000 f9a4 	bl	80007b6 <gpioSetPin>
	int tickCNT = 0;
 800046e:	2300      	movs	r3, #0
 8000470:	617b      	str	r3, [r7, #20]
	while(1){
		/*if(isSysTickExpired()){
			gpioTogglePin(GPIOC, PIN4);
			systickSetTicks(1);
		}*/
		USART1->CR1 |= USART_CR1_RXNEIE;
 8000472:	4b25      	ldr	r3, [pc, #148]	; (8000508 <indicateMagnet+0xbc>)
 8000474:	68db      	ldr	r3, [r3, #12]
 8000476:	4a24      	ldr	r2, [pc, #144]	; (8000508 <indicateMagnet+0xbc>)
 8000478:	f043 0320 	orr.w	r3, r3, #32
 800047c:	60d3      	str	r3, [r2, #12]
		if(!gpioGetPinVal(GPIOC, PIN9)){
 800047e:	2109      	movs	r1, #9
 8000480:	4820      	ldr	r0, [pc, #128]	; (8000504 <indicateMagnet+0xb8>)
 8000482:	f000 f9e5 	bl	8000850 <gpioGetPinVal>
 8000486:	4603      	mov	r3, r0
 8000488:	f083 0301 	eor.w	r3, r3, #1
 800048c:	b2db      	uxtb	r3, r3
 800048e:	2b00      	cmp	r3, #0
 8000490:	d013      	beq.n	80004ba <indicateMagnet+0x6e>
			gpioSetPin(GPIOC, PIN4);
 8000492:	2104      	movs	r1, #4
 8000494:	481b      	ldr	r0, [pc, #108]	; (8000504 <indicateMagnet+0xb8>)
 8000496:	f000 f98e 	bl	80007b6 <gpioSetPin>
			gpioSetPin(GPIOB, PIN12);
 800049a:	210c      	movs	r1, #12
 800049c:	481b      	ldr	r0, [pc, #108]	; (800050c <indicateMagnet+0xc0>)
 800049e:	f000 f98a 	bl	80007b6 <gpioSetPin>
			USARTSendString(USART1, "Tick\n");
 80004a2:	491b      	ldr	r1, [pc, #108]	; (8000510 <indicateMagnet+0xc4>)
 80004a4:	4818      	ldr	r0, [pc, #96]	; (8000508 <indicateMagnet+0xbc>)
 80004a6:	f000 fbad 	bl	8000c04 <USARTSendString>
			tickCNT++;
 80004aa:	697b      	ldr	r3, [r7, #20]
 80004ac:	3301      	adds	r3, #1
 80004ae:	617b      	str	r3, [r7, #20]
			gpioResetPin(GPIOB, PIN12);
 80004b0:	210c      	movs	r1, #12
 80004b2:	4816      	ldr	r0, [pc, #88]	; (800050c <indicateMagnet+0xc0>)
 80004b4:	f000 f993 	bl	80007de <gpioResetPin>
 80004b8:	e003      	b.n	80004c2 <indicateMagnet+0x76>
		}
		else{
			gpioResetPin(GPIOC, PIN4);
 80004ba:	2104      	movs	r1, #4
 80004bc:	4811      	ldr	r0, [pc, #68]	; (8000504 <indicateMagnet+0xb8>)
 80004be:	f000 f98e 	bl	80007de <gpioResetPin>
		}
		if(usartRXFlag){
 80004c2:	4b14      	ldr	r3, [pc, #80]	; (8000514 <indicateMagnet+0xc8>)
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d0d3      	beq.n	8000472 <indicateMagnet+0x26>
			usartRXFlag = false;
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <indicateMagnet+0xc8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	701a      	strb	r2, [r3, #0]
			if(usartBuff[0] == 69){
 80004d0:	4b11      	ldr	r3, [pc, #68]	; (8000518 <indicateMagnet+0xcc>)
 80004d2:	781b      	ldrb	r3, [r3, #0]
 80004d4:	2b45      	cmp	r3, #69	; 0x45
 80004d6:	d1cc      	bne.n	8000472 <indicateMagnet+0x26>
				gpioSetPin(GPIOB, PIN12);
 80004d8:	210c      	movs	r1, #12
 80004da:	480c      	ldr	r0, [pc, #48]	; (800050c <indicateMagnet+0xc0>)
 80004dc:	f000 f96b 	bl	80007b6 <gpioSetPin>
				sprintf(ausg, "tick: %d", tickCNT);
 80004e0:	463b      	mov	r3, r7
 80004e2:	697a      	ldr	r2, [r7, #20]
 80004e4:	490d      	ldr	r1, [pc, #52]	; (800051c <indicateMagnet+0xd0>)
 80004e6:	4618      	mov	r0, r3
 80004e8:	f007 fd46 	bl	8007f78 <siprintf>
				USARTSendString(USART1, ausg);
 80004ec:	463b      	mov	r3, r7
 80004ee:	4619      	mov	r1, r3
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <indicateMagnet+0xbc>)
 80004f2:	f000 fb87 	bl	8000c04 <USARTSendString>
				gpioResetPin(GPIOB, PIN12);
 80004f6:	210c      	movs	r1, #12
 80004f8:	4804      	ldr	r0, [pc, #16]	; (800050c <indicateMagnet+0xc0>)
 80004fa:	f000 f970 	bl	80007de <gpioResetPin>
				delay();
 80004fe:	f000 f80f 	bl	8000520 <delay>
		USART1->CR1 |= USART_CR1_RXNEIE;
 8000502:	e7b6      	b.n	8000472 <indicateMagnet+0x26>
 8000504:	40011000 	.word	0x40011000
 8000508:	40013800 	.word	0x40013800
 800050c:	40010c00 	.word	0x40010c00
 8000510:	08008884 	.word	0x08008884
 8000514:	20000204 	.word	0x20000204
 8000518:	20000208 	.word	0x20000208
 800051c:	0800888c 	.word	0x0800888c

08000520 <delay>:
	}
}



void delay(void){
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
	int i=0;
 8000526:	2300      	movs	r3, #0
 8000528:	607b      	str	r3, [r7, #4]
	for(i=0; i < 1600000; i++){}
 800052a:	2300      	movs	r3, #0
 800052c:	607b      	str	r3, [r7, #4]
 800052e:	e002      	b.n	8000536 <delay+0x16>
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	3301      	adds	r3, #1
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	4a04      	ldr	r2, [pc, #16]	; (800054c <delay+0x2c>)
 800053a:	4293      	cmp	r3, r2
 800053c:	ddf8      	ble.n	8000530 <delay+0x10>
}
 800053e:	bf00      	nop
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	bc80      	pop	{r7}
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	001869ff 	.word	0x001869ff

08000550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	4603      	mov	r3, r0
 8000558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800055a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	db0b      	blt.n	800057a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000562:	79fb      	ldrb	r3, [r7, #7]
 8000564:	f003 021f 	and.w	r2, r3, #31
 8000568:	4906      	ldr	r1, [pc, #24]	; (8000584 <__NVIC_EnableIRQ+0x34>)
 800056a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800056e:	095b      	lsrs	r3, r3, #5
 8000570:	2001      	movs	r0, #1
 8000572:	fa00 f202 	lsl.w	r2, r0, r2
 8000576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800057a:	bf00      	nop
 800057c:	370c      	adds	r7, #12
 800057e:	46bd      	mov	sp, r7
 8000580:	bc80      	pop	{r7}
 8000582:	4770      	bx	lr
 8000584:	e000e100 	.word	0xe000e100

08000588 <initRS485UART>:

#include <shalf1.h>
#include <stdbool.h>

//USART in DMA Modus -> Modbus empfängt 5 Bytes
void initRS485UART(void){
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800058c:	b672      	cpsid	i
}
 800058e:	bf00      	nop
	__disable_irq();
	gpioInitPort(GPIOA);
 8000590:	481a      	ldr	r0, [pc, #104]	; (80005fc <initRS485UART+0x74>)
 8000592:	f000 f837 	bl	8000604 <gpioInitPort>
	afioInit();
 8000596:	f000 f973 	bl	8000880 <afioInit>
	USARTEnable(USART1);
 800059a:	4819      	ldr	r0, [pc, #100]	; (8000600 <initRS485UART+0x78>)
 800059c:	f000 f9fa 	bl	8000994 <USARTEnable>
	gpioSetupPin(GPIOA, PIN9, OUT_50MHZ);
 80005a0:	2203      	movs	r2, #3
 80005a2:	2109      	movs	r1, #9
 80005a4:	4815      	ldr	r0, [pc, #84]	; (80005fc <initRS485UART+0x74>)
 80005a6:	f000 f879 	bl	800069c <gpioSetupPin>
	gpioSetupMode(GPIOA, PIN9, AF_PP);
 80005aa:	2202      	movs	r2, #2
 80005ac:	2109      	movs	r1, #9
 80005ae:	4813      	ldr	r0, [pc, #76]	; (80005fc <initRS485UART+0x74>)
 80005b0:	f000 f8d9 	bl	8000766 <gpioSetupMode>
	gpioSetupPin(GPIOA, PIN10, INPUT);
 80005b4:	2200      	movs	r2, #0
 80005b6:	210a      	movs	r1, #10
 80005b8:	4810      	ldr	r0, [pc, #64]	; (80005fc <initRS485UART+0x74>)
 80005ba:	f000 f86f 	bl	800069c <gpioSetupPin>
	gpioSetupInput(GPIOA, PIN10, FLOATING);
 80005be:	2201      	movs	r2, #1
 80005c0:	210a      	movs	r1, #10
 80005c2:	480e      	ldr	r0, [pc, #56]	; (80005fc <initRS485UART+0x74>)
 80005c4:	f000 f8a7 	bl	8000716 <gpioSetupInput>
	USARTIRQ(USART1, USART_IRQ_RXNEIE, true);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2103      	movs	r1, #3
 80005cc:	480c      	ldr	r0, [pc, #48]	; (8000600 <initRS485UART+0x78>)
 80005ce:	f000 fa7d 	bl	8000acc <USARTIRQ>
	//usartSetDmaRxMode(USART1, DMA_RECEIVE_ON);
	//gpioSetupOutput(GPIOA, PIN3, AF_PP);
	USARTSetBaudrate(USART1, 9600);
 80005d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80005d6:	480a      	ldr	r0, [pc, #40]	; (8000600 <initRS485UART+0x78>)
 80005d8:	f000 fa20 	bl	8000a1c <USARTSetBaudrate>
	USARTTXOn(USART1, TRANSMITTER_ON);
 80005dc:	2101      	movs	r1, #1
 80005de:	4808      	ldr	r0, [pc, #32]	; (8000600 <initRS485UART+0x78>)
 80005e0:	f000 fa59 	bl	8000a96 <USARTTXOn>
	USARTRXOn(USART1, RECEIVER_ON);
 80005e4:	2101      	movs	r1, #1
 80005e6:	4806      	ldr	r0, [pc, #24]	; (8000600 <initRS485UART+0x78>)
 80005e8:	f000 fa3a 	bl	8000a60 <USARTRXOn>
	NVIC_EnableIRQ(USART1_IRQn);
 80005ec:	2025      	movs	r0, #37	; 0x25
 80005ee:	f7ff ffaf 	bl	8000550 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80005f2:	b662      	cpsie	i
}
 80005f4:	bf00      	nop
	__enable_irq();
}
 80005f6:	bf00      	nop
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40010800 	.word	0x40010800
 8000600:	40013800 	.word	0x40013800

08000604 <gpioInitPort>:
/*
  * Desc.: enables the Clock for the corresponding GPIO Port
  * @param: (GPIO_TypeDef*) port: Port which should be supplied with Clock
  * @return: none
  */
extern void gpioInitPort(GPIO_TypeDef *port){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
		if (port == GPIOA){
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	4a1d      	ldr	r2, [pc, #116]	; (8000684 <gpioInitPort+0x80>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d106      	bne.n	8000622 <gpioInitPort+0x1e>
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000614:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <gpioInitPort+0x84>)
 8000616:	699b      	ldr	r3, [r3, #24]
 8000618:	4a1b      	ldr	r2, [pc, #108]	; (8000688 <gpioInitPort+0x84>)
 800061a:	f043 0304 	orr.w	r3, r3, #4
 800061e:	6193      	str	r3, [r2, #24]
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
		}
		else if(port == GPIOE){
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
		}
}
 8000620:	e02a      	b.n	8000678 <gpioInitPort+0x74>
		else if(port == GPIOB){
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	4a19      	ldr	r2, [pc, #100]	; (800068c <gpioInitPort+0x88>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d106      	bne.n	8000638 <gpioInitPort+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 800062a:	4b17      	ldr	r3, [pc, #92]	; (8000688 <gpioInitPort+0x84>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a16      	ldr	r2, [pc, #88]	; (8000688 <gpioInitPort+0x84>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6193      	str	r3, [r2, #24]
}
 8000636:	e01f      	b.n	8000678 <gpioInitPort+0x74>
		else if(port == GPIOC){
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	4a15      	ldr	r2, [pc, #84]	; (8000690 <gpioInitPort+0x8c>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d106      	bne.n	800064e <gpioInitPort+0x4a>
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <gpioInitPort+0x84>)
 8000642:	699b      	ldr	r3, [r3, #24]
 8000644:	4a10      	ldr	r2, [pc, #64]	; (8000688 <gpioInitPort+0x84>)
 8000646:	f043 0310 	orr.w	r3, r3, #16
 800064a:	6193      	str	r3, [r2, #24]
}
 800064c:	e014      	b.n	8000678 <gpioInitPort+0x74>
		else if(port == GPIOD){
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4a10      	ldr	r2, [pc, #64]	; (8000694 <gpioInitPort+0x90>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d106      	bne.n	8000664 <gpioInitPort+0x60>
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000656:	4b0c      	ldr	r3, [pc, #48]	; (8000688 <gpioInitPort+0x84>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a0b      	ldr	r2, [pc, #44]	; (8000688 <gpioInitPort+0x84>)
 800065c:	f043 0320 	orr.w	r3, r3, #32
 8000660:	6193      	str	r3, [r2, #24]
}
 8000662:	e009      	b.n	8000678 <gpioInitPort+0x74>
		else if(port == GPIOE){
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a0c      	ldr	r2, [pc, #48]	; (8000698 <gpioInitPort+0x94>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d105      	bne.n	8000678 <gpioInitPort+0x74>
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
 800066c:	4b06      	ldr	r3, [pc, #24]	; (8000688 <gpioInitPort+0x84>)
 800066e:	699b      	ldr	r3, [r3, #24]
 8000670:	4a05      	ldr	r2, [pc, #20]	; (8000688 <gpioInitPort+0x84>)
 8000672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000676:	6193      	str	r3, [r2, #24]
}
 8000678:	bf00      	nop
 800067a:	370c      	adds	r7, #12
 800067c:	46bd      	mov	sp, r7
 800067e:	bc80      	pop	{r7}
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	40010800 	.word	0x40010800
 8000688:	40021000 	.word	0x40021000
 800068c:	40010c00 	.word	0x40010c00
 8000690:	40011000 	.word	0x40011000
 8000694:	40011400 	.word	0x40011400
 8000698:	40011800 	.word	0x40011800

0800069c <gpioSetupPin>:
									OUT_10MHZ,
									OUT_2MHZ,
									OUT_50MHZ
  * @return: none
  */
extern void gpioSetupPin(GPIO_TypeDef *port, PIN_NUM pin, GPIO_MODE pinmode){
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	2b07      	cmp	r3, #7
 80006b0:	d815      	bhi.n	80006de <gpioSetupPin+0x42>
		port -> CRL &= ~(0b1111 << (pin*4));
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	78fa      	ldrb	r2, [r7, #3]
 80006b8:	0092      	lsls	r2, r2, #2
 80006ba:	210f      	movs	r1, #15
 80006bc:	fa01 f202 	lsl.w	r2, r1, r2
 80006c0:	43d2      	mvns	r2, r2
 80006c2:	401a      	ands	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	601a      	str	r2, [r3, #0]
		port ->CRL |= (pinmode << (pin*4));
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	78b9      	ldrb	r1, [r7, #2]
 80006ce:	78fa      	ldrb	r2, [r7, #3]
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	431a      	orrs	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
	}
	else{
		port->CRH &= ~(0b1111 << ((pin-8)*4));
		port->CRH |= (pinmode << ((pin-8)*4));
	}
}
 80006dc:	e016      	b.n	800070c <gpioSetupPin+0x70>
		port->CRH &= ~(0b1111 << ((pin-8)*4));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	685b      	ldr	r3, [r3, #4]
 80006e2:	78fa      	ldrb	r2, [r7, #3]
 80006e4:	3a08      	subs	r2, #8
 80006e6:	0092      	lsls	r2, r2, #2
 80006e8:	210f      	movs	r1, #15
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	43d2      	mvns	r2, r2
 80006f0:	401a      	ands	r2, r3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	605a      	str	r2, [r3, #4]
		port->CRH |= (pinmode << ((pin-8)*4));
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	78b9      	ldrb	r1, [r7, #2]
 80006fc:	78fa      	ldrb	r2, [r7, #3]
 80006fe:	3a08      	subs	r2, #8
 8000700:	0092      	lsls	r2, r2, #2
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	431a      	orrs	r2, r3
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	605a      	str	r2, [r3, #4]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	bc80      	pop	{r7}
 8000714:	4770      	bx	lr

08000716 <gpioSetupInput>:
  * @param: (INPUT_MODE) mode: ANALOG = 0,
								FLOATING,
								IN_PUPD
  * @return: none
  */
extern void gpioSetupInput(GPIO_TypeDef *port, PIN_NUM pin, INPUT_MODE mode){
 8000716:	b480      	push	{r7}
 8000718:	b083      	sub	sp, #12
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	460b      	mov	r3, r1
 8000720:	70fb      	strb	r3, [r7, #3]
 8000722:	4613      	mov	r3, r2
 8000724:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000726:	78fb      	ldrb	r3, [r7, #3]
 8000728:	2b07      	cmp	r3, #7
 800072a:	d80b      	bhi.n	8000744 <gpioSetupInput+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	78b9      	ldrb	r1, [r7, #2]
 8000732:	78fa      	ldrb	r2, [r7, #3]
 8000734:	0092      	lsls	r2, r2, #2
 8000736:	3202      	adds	r2, #2
 8000738:	fa01 f202 	lsl.w	r2, r1, r2
 800073c:	431a      	orrs	r2, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000742:	e00b      	b.n	800075c <gpioSetupInput+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	685b      	ldr	r3, [r3, #4]
 8000748:	78b9      	ldrb	r1, [r7, #2]
 800074a:	78fa      	ldrb	r2, [r7, #3]
 800074c:	3a08      	subs	r2, #8
 800074e:	0092      	lsls	r2, r2, #2
 8000750:	3202      	adds	r2, #2
 8000752:	fa01 f202 	lsl.w	r2, r1, r2
 8000756:	431a      	orrs	r2, r3
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	605a      	str	r2, [r3, #4]
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	bc80      	pop	{r7}
 8000764:	4770      	bx	lr

08000766 <gpioSetupMode>:
								GP_OD, -> general purpose opendrain
								AF_PP, -> alternate function Push pull
								AF_OD  -> alternate function opendrain
  * @return: none
  */
extern void gpioSetupMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode){
 8000766:	b480      	push	{r7}
 8000768:	b083      	sub	sp, #12
 800076a:	af00      	add	r7, sp, #0
 800076c:	6078      	str	r0, [r7, #4]
 800076e:	460b      	mov	r3, r1
 8000770:	70fb      	strb	r3, [r7, #3]
 8000772:	4613      	mov	r3, r2
 8000774:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	2b07      	cmp	r3, #7
 800077a:	d80b      	bhi.n	8000794 <gpioSetupMode+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	78b9      	ldrb	r1, [r7, #2]
 8000782:	78fa      	ldrb	r2, [r7, #3]
 8000784:	0092      	lsls	r2, r2, #2
 8000786:	3202      	adds	r2, #2
 8000788:	fa01 f202 	lsl.w	r2, r1, r2
 800078c:	431a      	orrs	r2, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000792:	e00b      	b.n	80007ac <gpioSetupMode+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	78b9      	ldrb	r1, [r7, #2]
 800079a:	78fa      	ldrb	r2, [r7, #3]
 800079c:	3a08      	subs	r2, #8
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	3202      	adds	r2, #2
 80007a2:	fa01 f202 	lsl.w	r2, r1, r2
 80007a6:	431a      	orrs	r2, r3
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	605a      	str	r2, [r3, #4]
}
 80007ac:	bf00      	nop
 80007ae:	370c      	adds	r7, #12
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bc80      	pop	{r7}
 80007b4:	4770      	bx	lr

080007b6 <gpioSetPin>:
  * Desc.: sets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin){
 80007b6:	b480      	push	{r7}
 80007b8:	b083      	sub	sp, #12
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	460b      	mov	r3, r1
 80007c0:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	691b      	ldr	r3, [r3, #16]
 80007c6:	78fa      	ldrb	r2, [r7, #3]
 80007c8:	2101      	movs	r1, #1
 80007ca:	fa01 f202 	lsl.w	r2, r1, r2
 80007ce:	431a      	orrs	r2, r3
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	611a      	str	r2, [r3, #16]
}
 80007d4:	bf00      	nop
 80007d6:	370c      	adds	r7, #12
 80007d8:	46bd      	mov	sp, r7
 80007da:	bc80      	pop	{r7}
 80007dc:	4770      	bx	lr

080007de <gpioResetPin>:
  * Desc.: resets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin){
 80007de:	b480      	push	{r7}
 80007e0:	b083      	sub	sp, #12
 80007e2:	af00      	add	r7, sp, #0
 80007e4:	6078      	str	r0, [r7, #4]
 80007e6:	460b      	mov	r3, r1
 80007e8:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	691b      	ldr	r3, [r3, #16]
 80007ee:	78fa      	ldrb	r2, [r7, #3]
 80007f0:	3210      	adds	r2, #16
 80007f2:	2101      	movs	r1, #1
 80007f4:	fa01 f202 	lsl.w	r2, r1, r2
 80007f8:	431a      	orrs	r2, r3
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	611a      	str	r2, [r3, #16]
}
 80007fe:	bf00      	nop
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	bc80      	pop	{r7}
 8000806:	4770      	bx	lr

08000808 <gpioSetPullupPulldown>:
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @param: (bool)pullup: true -> activate Pullup; false -> activate Pulldown
  * @return: none
  */
extern void gpioSetPullupPulldown(GPIO_TypeDef *port, PIN_NUM pin, bool pullup){
 8000808:	b480      	push	{r7}
 800080a:	b083      	sub	sp, #12
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	460b      	mov	r3, r1
 8000812:	70fb      	strb	r3, [r7, #3]
 8000814:	4613      	mov	r3, r2
 8000816:	70bb      	strb	r3, [r7, #2]
	if((pullup == true)){
 8000818:	78bb      	ldrb	r3, [r7, #2]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d009      	beq.n	8000832 <gpioSetPullupPulldown+0x2a>
		port -> ODR |=  (1<< pin);
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68db      	ldr	r3, [r3, #12]
 8000822:	78fa      	ldrb	r2, [r7, #3]
 8000824:	2101      	movs	r1, #1
 8000826:	fa01 f202 	lsl.w	r2, r1, r2
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	60da      	str	r2, [r3, #12]
	}
	else{
		port->ODR &= ~(1<<pin);
	}
}
 8000830:	e009      	b.n	8000846 <gpioSetPullupPulldown+0x3e>
		port->ODR &= ~(1<<pin);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	68db      	ldr	r3, [r3, #12]
 8000836:	78fa      	ldrb	r2, [r7, #3]
 8000838:	2101      	movs	r1, #1
 800083a:	fa01 f202 	lsl.w	r2, r1, r2
 800083e:	43d2      	mvns	r2, r2
 8000840:	401a      	ands	r2, r3
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	60da      	str	r2, [r3, #12]
}
 8000846:	bf00      	nop
 8000848:	370c      	adds	r7, #12
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr

08000850 <gpioGetPinVal>:
  * Desc.: returns the current value of a Pin stored in the IDR Register
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: (bool) state of Pin
  */
extern bool gpioGetPinVal(GPIO_TypeDef *port, PIN_NUM pin){
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
 8000858:	460b      	mov	r3, r1
 800085a:	70fb      	strb	r3, [r7, #3]
	return (port->IDR & (1<<pin));
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	689b      	ldr	r3, [r3, #8]
 8000860:	78fa      	ldrb	r2, [r7, #3]
 8000862:	2101      	movs	r1, #1
 8000864:	fa01 f202 	lsl.w	r2, r1, r2
 8000868:	4013      	ands	r3, r2
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	b2db      	uxtb	r3, r3
}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr
	...

08000880 <afioInit>:
/*
  * Desc.: enables the Clock for alternative functions, this Clock must be activated in Order to use alternative pinfunctions!
  * @param: none
  * @return: none
  */
extern void afioInit(){
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <afioInit+0x18>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <afioInit+0x18>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6193      	str	r3, [r2, #24]
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	bc80      	pop	{r7}
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4603      	mov	r3, r0
 80008a4:	6039      	str	r1, [r7, #0]
 80008a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	db0a      	blt.n	80008c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	490c      	ldr	r1, [pc, #48]	; (80008e8 <__NVIC_SetPriority+0x4c>)
 80008b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ba:	0112      	lsls	r2, r2, #4
 80008bc:	b2d2      	uxtb	r2, r2
 80008be:	440b      	add	r3, r1
 80008c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c4:	e00a      	b.n	80008dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c6:	683b      	ldr	r3, [r7, #0]
 80008c8:	b2da      	uxtb	r2, r3
 80008ca:	4908      	ldr	r1, [pc, #32]	; (80008ec <__NVIC_SetPriority+0x50>)
 80008cc:	79fb      	ldrb	r3, [r7, #7]
 80008ce:	f003 030f 	and.w	r3, r3, #15
 80008d2:	3b04      	subs	r3, #4
 80008d4:	0112      	lsls	r2, r2, #4
 80008d6:	b2d2      	uxtb	r2, r2
 80008d8:	440b      	add	r3, r1
 80008da:	761a      	strb	r2, [r3, #24]
}
 80008dc:	bf00      	nop
 80008de:	370c      	adds	r7, #12
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bc80      	pop	{r7}
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	e000e100 	.word	0xe000e100
 80008ec:	e000ed00 	.word	0xe000ed00

080008f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b082      	sub	sp, #8
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	3b01      	subs	r3, #1
 80008fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000900:	d301      	bcc.n	8000906 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000902:	2301      	movs	r3, #1
 8000904:	e00f      	b.n	8000926 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000906:	4a0a      	ldr	r2, [pc, #40]	; (8000930 <SysTick_Config+0x40>)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	3b01      	subs	r3, #1
 800090c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800090e:	210f      	movs	r1, #15
 8000910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000914:	f7ff ffc2 	bl	800089c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000918:	4b05      	ldr	r3, [pc, #20]	; (8000930 <SysTick_Config+0x40>)
 800091a:	2200      	movs	r2, #0
 800091c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800091e:	4b04      	ldr	r3, [pc, #16]	; (8000930 <SysTick_Config+0x40>)
 8000920:	2207      	movs	r2, #7
 8000922:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000924:	2300      	movs	r3, #0
}
 8000926:	4618      	mov	r0, r3
 8000928:	3708      	adds	r7, #8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	e000e010 	.word	0xe000e010

08000934 <systickInit>:
 /*
  * Desc.: sets period of SysTick
  * @param: (uint32_t)divider: 1ms / divider = time of period
  * @return: keine
  */
extern void systickInit(uint32_t timebase){
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
	SystemCoreClockUpdate();
 800093c:	f000 fa12 	bl	8000d64 <SystemCoreClockUpdate>
	SysTick_Config(SystemCoreClock / timebase);
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <systickInit+0x24>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	fbb2 f3f3 	udiv	r3, r2, r3
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ffd0 	bl	80008f0 <SysTick_Config>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000000 	.word	0x20000000

0800095c <systickSetTicks>:
/*
 * Desc.: sets the intervall, depending on Time Base
 * @param: number of Ticks
 * @return: none
 */
extern void systickSetTicks(uint32_t ticks){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	tick = ticks;
 8000964:	4a03      	ldr	r2, [pc, #12]	; (8000974 <systickSetTicks+0x18>)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	6013      	str	r3, [r2, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	bc80      	pop	{r7}
 8000972:	4770      	bx	lr
 8000974:	20000210 	.word	0x20000210

08000978 <SysTick_Handler>:
/*
 * Desc.: SysTick ISR Handler
 * @param: none
 * @return: none
 */
extern void SysTick_Handler(void){
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
	--tick;
 800097c:	4b04      	ldr	r3, [pc, #16]	; (8000990 <SysTick_Handler+0x18>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	3b01      	subs	r3, #1
 8000982:	4a03      	ldr	r2, [pc, #12]	; (8000990 <SysTick_Handler+0x18>)
 8000984:	6013      	str	r3, [r2, #0]
}
 8000986:	bf00      	nop
 8000988:	46bd      	mov	sp, r7
 800098a:	bc80      	pop	{r7}
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000210 	.word	0x20000210

08000994 <USARTEnable>:
/*
  * Desc.: enables Clock for the corresponding USART and activates the USART in it's Control Register
  * @param: (USART_TypeDef*)usart: USART
  * @return: none
  */
void USARTEnable(USART_TypeDef* usart){
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	if(usart == USART1){
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a1b      	ldr	r2, [pc, #108]	; (8000a0c <USARTEnable+0x78>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d10c      	bne.n	80009be <USARTEnable+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80009a4:	4b1a      	ldr	r3, [pc, #104]	; (8000a10 <USARTEnable+0x7c>)
 80009a6:	699b      	ldr	r3, [r3, #24]
 80009a8:	4a19      	ldr	r2, [pc, #100]	; (8000a10 <USARTEnable+0x7c>)
 80009aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009ae:	6193      	str	r3, [r2, #24]
		USART1->CR1 |= USART_CR1_UE;
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <USARTEnable+0x78>)
 80009b2:	68db      	ldr	r3, [r3, #12]
 80009b4:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <USARTEnable+0x78>)
 80009b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009ba:	60d3      	str	r3, [r2, #12]
 80009bc:	e022      	b.n	8000a04 <USARTEnable+0x70>
	}
	else if(usart == USART2){
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <USARTEnable+0x80>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d10c      	bne.n	80009e0 <USARTEnable+0x4c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80009c6:	4b12      	ldr	r3, [pc, #72]	; (8000a10 <USARTEnable+0x7c>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	4a11      	ldr	r2, [pc, #68]	; (8000a10 <USARTEnable+0x7c>)
 80009cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009d0:	61d3      	str	r3, [r2, #28]
		USART2->CR1 |= USART_CR1_UE;
 80009d2:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <USARTEnable+0x80>)
 80009d4:	68db      	ldr	r3, [r3, #12]
 80009d6:	4a0f      	ldr	r2, [pc, #60]	; (8000a14 <USARTEnable+0x80>)
 80009d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009dc:	60d3      	str	r3, [r2, #12]
 80009de:	e011      	b.n	8000a04 <USARTEnable+0x70>
	}
	else if(usart == USART3){
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <USARTEnable+0x84>)
 80009e4:	4293      	cmp	r3, r2
 80009e6:	d10c      	bne.n	8000a02 <USARTEnable+0x6e>
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80009e8:	4b09      	ldr	r3, [pc, #36]	; (8000a10 <USARTEnable+0x7c>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	4a08      	ldr	r2, [pc, #32]	; (8000a10 <USARTEnable+0x7c>)
 80009ee:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009f2:	61d3      	str	r3, [r2, #28]
		USART3->CR1 |= USART_CR1_UE;
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <USARTEnable+0x84>)
 80009f6:	68db      	ldr	r3, [r3, #12]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <USARTEnable+0x84>)
 80009fa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80009fe:	60d3      	str	r3, [r2, #12]
 8000a00:	e000      	b.n	8000a04 <USARTEnable+0x70>
	}
	else{
		return;
 8000a02:	bf00      	nop
	}
}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	40013800 	.word	0x40013800
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40004800 	.word	0x40004800

08000a1c <USARTSetBaudrate>:
  * Desc.: sets the Baudrate for the USART (system clock > 36 MHZ!), default: 115200 bps
  * @param: (USART_TypeDef*)usart: USART
  * @param: (uint16_t) brrVal: Baudrate
  * @return: none
  */
void USARTSetBaudrate(USART_TypeDef* usart, uint16_t brrVal){
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
 8000a24:	460b      	mov	r3, r1
 8000a26:	807b      	strh	r3, [r7, #2]
	if(brrVal != 0){
 8000a28:	887b      	ldrh	r3, [r7, #2]
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d00b      	beq.n	8000a46 <USARTSetBaudrate+0x2a>
		usart -> BRR |= (SystemCoreClock / 2 / brrVal);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	689a      	ldr	r2, [r3, #8]
 8000a32:	4b0a      	ldr	r3, [pc, #40]	; (8000a5c <USARTSetBaudrate+0x40>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	0859      	lsrs	r1, r3, #1
 8000a38:	887b      	ldrh	r3, [r7, #2]
 8000a3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000a3e:	431a      	orrs	r2, r3
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= 0x8B;
	}
}
 8000a44:	e005      	b.n	8000a52 <USARTSetBaudrate+0x36>
		usart->BRR |= 0x8B;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	689b      	ldr	r3, [r3, #8]
 8000a4a:	f043 028b 	orr.w	r2, r3, #139	; 0x8b
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	609a      	str	r2, [r3, #8]
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000000 	.word	0x20000000

08000a60 <USARTRXOn>:
  * Desc.: enables the Receiver of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Receiver shall be activated
  * @return: none
  */
void USARTRXOn(USART_TypeDef* usart, USART_RX on_off){
 8000a60:	b480      	push	{r7}
 8000a62:	b083      	sub	sp, #12
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
	if(on_off == RECEIVER_ON){
 8000a6c:	78fb      	ldrb	r3, [r7, #3]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d106      	bne.n	8000a80 <USARTRXOn+0x20>
		usart->CR1 |= USART_CR1_RE;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68db      	ldr	r3, [r3, #12]
 8000a76:	f043 0204 	orr.w	r2, r3, #4
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	60da      	str	r2, [r3, #12]
	}
	else{
		usart->CR1 &= USART_CR1_RE_Msk;
	}
}
 8000a7e:	e005      	b.n	8000a8c <USARTRXOn+0x2c>
		usart->CR1 &= USART_CR1_RE_Msk;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	68db      	ldr	r3, [r3, #12]
 8000a84:	f003 0204 	and.w	r2, r3, #4
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	60da      	str	r2, [r3, #12]
}
 8000a8c:	bf00      	nop
 8000a8e:	370c      	adds	r7, #12
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <USARTTXOn>:
  * Desc.: enables the Transmitter of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Transmitter shall be activated
  * @return: none
  */
void USARTTXOn(USART_TypeDef* usart, USART_TX on_off){
 8000a96:	b480      	push	{r7}
 8000a98:	b083      	sub	sp, #12
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	6078      	str	r0, [r7, #4]
 8000a9e:	460b      	mov	r3, r1
 8000aa0:	70fb      	strb	r3, [r7, #3]
	if(on_off == TRANSMITTER_ON){
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <USARTTXOn+0x20>
			usart->CR1 |= USART_CR1_TE;
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	f043 0208 	orr.w	r2, r3, #8
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= USART_CR1_TE_Msk;
		}
}
 8000ab4:	e005      	b.n	8000ac2 <USARTTXOn+0x2c>
			usart->CR1 &= USART_CR1_TE_Msk;
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68db      	ldr	r3, [r3, #12]
 8000aba:	f003 0208 	and.w	r2, r3, #8
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	60da      	str	r2, [r3, #12]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr

08000acc <USARTIRQ>:
    									USART_IRQ_LBDIE,(LIN Break Detection Interrupt)
    									USART_IRQ_EIE(Error Interrupt)
  *  @param: (bool) enable_disable: determines if the interrupt shall be enabled or disabled
  * @return: none
  */
extern void USARTIRQ(USART_TypeDef* usart, USART_IRQ_TYPES irq_type, bool enable_disable){
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
 8000ad4:	460b      	mov	r3, r1
 8000ad6:	70fb      	strb	r3, [r7, #3]
 8000ad8:	4613      	mov	r3, r2
 8000ada:	70bb      	strb	r3, [r7, #2]
	switch(irq_type){
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	f200 808b 	bhi.w	8000bfa <USARTIRQ+0x12e>
 8000ae4:	a201      	add	r2, pc, #4	; (adr r2, 8000aec <USARTIRQ+0x20>)
 8000ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aea:	bf00      	nop
 8000aec:	08000b0d 	.word	0x08000b0d
 8000af0:	08000b2f 	.word	0x08000b2f
 8000af4:	08000b51 	.word	0x08000b51
 8000af8:	08000b73 	.word	0x08000b73
 8000afc:	08000bfb 	.word	0x08000bfb
 8000b00:	08000b95 	.word	0x08000b95
 8000b04:	08000bb7 	.word	0x08000bb7
 8000b08:	08000bd9 	.word	0x08000bd9
	case USART_IRQ_TXEIE:
		if(enable_disable){
 8000b0c:	78bb      	ldrb	r3, [r7, #2]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <USARTIRQ+0x54>
			usart->CR1 |= USART_CR1_TXEIE;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
		}
		break;
 8000b1e:	e06d      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	68db      	ldr	r3, [r3, #12]
 8000b24:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	60da      	str	r2, [r3, #12]
		break;
 8000b2c:	e066      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_CTSIE:
		if(enable_disable){
 8000b2e:	78bb      	ldrb	r3, [r7, #2]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <USARTIRQ+0x76>
			usart->CR3 |= USART_CR3_CTSIE;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	695b      	ldr	r3, [r3, #20]
 8000b38:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
		}
		break;
 8000b40:	e05c      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	615a      	str	r2, [r3, #20]
		break;
 8000b4e:	e055      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_TCIE:
		if(enable_disable){
 8000b50:	78bb      	ldrb	r3, [r7, #2]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d006      	beq.n	8000b64 <USARTIRQ+0x98>
			usart->CR1 |= USART_CR1_TCIE;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	68db      	ldr	r3, [r3, #12]
 8000b5a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
		}
		break;
 8000b62:	e04b      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	68db      	ldr	r3, [r3, #12]
 8000b68:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	60da      	str	r2, [r3, #12]
		break;
 8000b70:	e044      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_RXNEIE:
		if(enable_disable){
 8000b72:	78bb      	ldrb	r3, [r7, #2]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d006      	beq.n	8000b86 <USARTIRQ+0xba>
			usart->CR1 |= USART_CR1_RXNEIE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f043 0220 	orr.w	r2, r3, #32
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
		}
		break;
 8000b84:	e03a      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	68db      	ldr	r3, [r3, #12]
 8000b8a:	f023 0220 	bic.w	r2, r3, #32
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	60da      	str	r2, [r3, #12]
		break;
 8000b92:	e033      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_PEIE:
		if(enable_disable){
 8000b94:	78bb      	ldrb	r3, [r7, #2]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d006      	beq.n	8000ba8 <USARTIRQ+0xdc>
			usart->CR1 |= USART_CR1_PEIE;
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	68db      	ldr	r3, [r3, #12]
 8000b9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
		}
		break;
 8000ba6:	e029      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	60da      	str	r2, [r3, #12]
		break;
 8000bb4:	e022      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_LBDIE:
		if(enable_disable){
 8000bb6:	78bb      	ldrb	r3, [r7, #2]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d006      	beq.n	8000bca <USARTIRQ+0xfe>
			usart->CR2 |= USART_CR2_LBDIE;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	611a      	str	r2, [r3, #16]
		}
		else{
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
		}
		break;
 8000bc8:	e018      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	691b      	ldr	r3, [r3, #16]
 8000bce:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	611a      	str	r2, [r3, #16]
		break;
 8000bd6:	e011      	b.n	8000bfc <USARTIRQ+0x130>
	case USART_IRQ_EIE:
		if(enable_disable){
 8000bd8:	78bb      	ldrb	r3, [r7, #2]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d006      	beq.n	8000bec <USARTIRQ+0x120>
			usart->CR3 |= USART_CR3_EIE;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	695b      	ldr	r3, [r3, #20]
 8000be2:	f043 0201 	orr.w	r2, r3, #1
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_EIE_Msk;
		}
		break;
 8000bea:	e007      	b.n	8000bfc <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_EIE_Msk;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	695b      	ldr	r3, [r3, #20]
 8000bf0:	f023 0201 	bic.w	r2, r3, #1
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	615a      	str	r2, [r3, #20]
		break;
 8000bf8:	e000      	b.n	8000bfc <USARTIRQ+0x130>
	default:
		return;
 8000bfa:	bf00      	nop
	}
}
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bc80      	pop	{r7}
 8000c02:	4770      	bx	lr

08000c04 <USARTSendString>:
  * Desc.: send a String over the USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (char*) str: String to be sent
  * @return: none
  */
extern void USARTSendString(USART_TypeDef* usart, char* str){
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	6039      	str	r1, [r7, #0]
	while(*str){
 8000c0e:	e014      	b.n	8000c3a <USARTSendString+0x36>
		USART_WAIT(usart);
 8000c10:	bf00      	nop
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d0f9      	beq.n	8000c12 <USARTSendString+0xe>
		usart->DR = *str++ & 0x01FF;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	1c5a      	adds	r2, r3, #1
 8000c22:	603a      	str	r2, [r7, #0]
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	605a      	str	r2, [r3, #4]
		USART_WAIT(usart);
 8000c2c:	bf00      	nop
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d0f9      	beq.n	8000c2e <USARTSendString+0x2a>
	while(*str){
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d1e6      	bne.n	8000c10 <USARTSendString+0xc>
	}
}
 8000c42:	bf00      	nop
 8000c44:	bf00      	nop
 8000c46:	370c      	adds	r7, #12
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bc80      	pop	{r7}
 8000c4c:	4770      	bx	lr
	...

08000c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000c56:	4b0e      	ldr	r3, [pc, #56]	; (8000c90 <HAL_MspInit+0x40>)
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	4a0d      	ldr	r2, [pc, #52]	; (8000c90 <HAL_MspInit+0x40>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6193      	str	r3, [r2, #24]
 8000c62:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <HAL_MspInit+0x40>)
 8000c64:	699b      	ldr	r3, [r3, #24]
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	607b      	str	r3, [r7, #4]
 8000c6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c6e:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_MspInit+0x40>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_MspInit+0x40>)
 8000c74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c78:	61d3      	str	r3, [r2, #28]
 8000c7a:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_MspInit+0x40>)
 8000c7c:	69db      	ldr	r3, [r3, #28]
 8000c7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c86:	bf00      	nop
 8000c88:	370c      	adds	r7, #12
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bc80      	pop	{r7}
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c98:	e7fe      	b.n	8000c98 <NMI_Handler+0x4>

08000c9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c9a:	b480      	push	{r7}
 8000c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c9e:	e7fe      	b.n	8000c9e <HardFault_Handler+0x4>

08000ca0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ca4:	e7fe      	b.n	8000ca4 <MemManage_Handler+0x4>

08000ca6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000caa:	e7fe      	b.n	8000caa <BusFault_Handler+0x4>

08000cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <UsageFault_Handler+0x4>

08000cb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bc80      	pop	{r7}
 8000cbc:	4770      	bx	lr

08000cbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bc80      	pop	{r7}
 8000cc8:	4770      	bx	lr

08000cca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bc80      	pop	{r7}
 8000cd4:	4770      	bx	lr
	...

08000cd8 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000cde:	f000 fb67 	bl	80013b0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000ee4 	.word	0x20000ee4

08000cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b086      	sub	sp, #24
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000cf4:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <_sbrk+0x5c>)
 8000cf6:	4b15      	ldr	r3, [pc, #84]	; (8000d4c <_sbrk+0x60>)
 8000cf8:	1ad3      	subs	r3, r2, r3
 8000cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d00:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <_sbrk+0x64>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d102      	bne.n	8000d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <_sbrk+0x64>)
 8000d0a:	4a12      	ldr	r2, [pc, #72]	; (8000d54 <_sbrk+0x68>)
 8000d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <_sbrk+0x64>)
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4413      	add	r3, r2
 8000d16:	693a      	ldr	r2, [r7, #16]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d207      	bcs.n	8000d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d1c:	f007 f8fa 	bl	8007f14 <__errno>
 8000d20:	4603      	mov	r3, r0
 8000d22:	220c      	movs	r2, #12
 8000d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d2a:	e009      	b.n	8000d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <_sbrk+0x64>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <_sbrk+0x64>)
 8000d34:	681a      	ldr	r2, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	4413      	add	r3, r2
 8000d3a:	4a05      	ldr	r2, [pc, #20]	; (8000d50 <_sbrk+0x64>)
 8000d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d3e:	68fb      	ldr	r3, [r7, #12]
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	3718      	adds	r7, #24
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20010000 	.word	0x20010000
 8000d4c:	00000400 	.word	0x00000400
 8000d50:	20000214 	.word	0x20000214
 8000d54:	20001400 	.word	0x20001400

08000d58 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bc80      	pop	{r7}
 8000d62:	4770      	bx	lr

08000d64 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate (void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
  uint32_t tmp = 0U, pllmull = 0U, pllsource = 0U;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60bb      	str	r3, [r7, #8]
 8000d72:	2300      	movs	r3, #0
 8000d74:	607b      	str	r3, [r7, #4]
#if defined(STM32F100xB) || defined(STM32F100xE)
  uint32_t prediv1factor = 0U;
#endif /* STM32F100xB or STM32F100xE */
    
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8000d76:	4b2f      	ldr	r3, [pc, #188]	; (8000e34 <SystemCoreClockUpdate+0xd0>)
 8000d78:	685b      	ldr	r3, [r3, #4]
 8000d7a:	f003 030c 	and.w	r3, r3, #12
 8000d7e:	60fb      	str	r3, [r7, #12]
  
  switch (tmp)
 8000d80:	68fb      	ldr	r3, [r7, #12]
 8000d82:	2b08      	cmp	r3, #8
 8000d84:	d011      	beq.n	8000daa <SystemCoreClockUpdate+0x46>
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	2b08      	cmp	r3, #8
 8000d8a:	d83a      	bhi.n	8000e02 <SystemCoreClockUpdate+0x9e>
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d003      	beq.n	8000d9a <SystemCoreClockUpdate+0x36>
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2b04      	cmp	r3, #4
 8000d96:	d004      	beq.n	8000da2 <SystemCoreClockUpdate+0x3e>
 8000d98:	e033      	b.n	8000e02 <SystemCoreClockUpdate+0x9e>
  {
    case 0x00U:  /* HSI used as system clock */
      SystemCoreClock = HSI_VALUE;
 8000d9a:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000d9c:	4a27      	ldr	r2, [pc, #156]	; (8000e3c <SystemCoreClockUpdate+0xd8>)
 8000d9e:	601a      	str	r2, [r3, #0]
      break;
 8000da0:	e033      	b.n	8000e0a <SystemCoreClockUpdate+0xa6>
    case 0x04U:  /* HSE used as system clock */
      SystemCoreClock = HSE_VALUE;
 8000da2:	4b25      	ldr	r3, [pc, #148]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000da4:	4a25      	ldr	r2, [pc, #148]	; (8000e3c <SystemCoreClockUpdate+0xd8>)
 8000da6:	601a      	str	r2, [r3, #0]
      break;
 8000da8:	e02f      	b.n	8000e0a <SystemCoreClockUpdate+0xa6>
    case 0x08U:  /* PLL used as system clock */

      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 8000daa:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <SystemCoreClockUpdate+0xd0>)
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000db2:	60bb      	str	r3, [r7, #8]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <SystemCoreClockUpdate+0xd0>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dbc:	607b      	str	r3, [r7, #4]
      
#if !defined(STM32F105xC) && !defined(STM32F107xC)      
      pllmull = ( pllmull >> 18U) + 2U;
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	0c9b      	lsrs	r3, r3, #18
 8000dc2:	3302      	adds	r3, #2
 8000dc4:	60bb      	str	r3, [r7, #8]
      
      if (pllsource == 0x00U)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d106      	bne.n	8000dda <SystemCoreClockUpdate+0x76>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        SystemCoreClock = (HSI_VALUE >> 1U) * pllmull;
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	4a1c      	ldr	r2, [pc, #112]	; (8000e40 <SystemCoreClockUpdate+0xdc>)
 8000dd0:	fb02 f303 	mul.w	r3, r2, r3
 8000dd4:	4a18      	ldr	r2, [pc, #96]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000dd6:	6013      	str	r3, [r2, #0]
          pll2mull = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> 8U) + 2U; 
          SystemCoreClock = (((HSE_VALUE / prediv2factor) * pll2mull) / prediv1factor) * pllmull;                         
        }
      }
#endif /* STM32F105xC */ 
      break;
 8000dd8:	e017      	b.n	8000e0a <SystemCoreClockUpdate+0xa6>
        if ((RCC->CFGR & RCC_CFGR_PLLXTPRE) != (uint32_t)RESET)
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <SystemCoreClockUpdate+0xd0>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d006      	beq.n	8000df4 <SystemCoreClockUpdate+0x90>
          SystemCoreClock = (HSE_VALUE >> 1U) * pllmull;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	4a15      	ldr	r2, [pc, #84]	; (8000e40 <SystemCoreClockUpdate+0xdc>)
 8000dea:	fb02 f303 	mul.w	r3, r2, r3
 8000dee:	4a12      	ldr	r2, [pc, #72]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000df0:	6013      	str	r3, [r2, #0]
      break;
 8000df2:	e00a      	b.n	8000e0a <SystemCoreClockUpdate+0xa6>
          SystemCoreClock = HSE_VALUE * pllmull;
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <SystemCoreClockUpdate+0xd8>)
 8000df8:	fb02 f303 	mul.w	r3, r2, r3
 8000dfc:	4a0e      	ldr	r2, [pc, #56]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000dfe:	6013      	str	r3, [r2, #0]
      break;
 8000e00:	e003      	b.n	8000e0a <SystemCoreClockUpdate+0xa6>

    default:
      SystemCoreClock = HSI_VALUE;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000e04:	4a0d      	ldr	r2, [pc, #52]	; (8000e3c <SystemCoreClockUpdate+0xd8>)
 8000e06:	601a      	str	r2, [r3, #0]
      break;
 8000e08:	bf00      	nop
  }
  
  /* Compute HCLK clock frequency ----------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	; (8000e34 <SystemCoreClockUpdate+0xd0>)
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	091b      	lsrs	r3, r3, #4
 8000e10:	f003 030f 	and.w	r3, r3, #15
 8000e14:	4a0b      	ldr	r2, [pc, #44]	; (8000e44 <SystemCoreClockUpdate+0xe0>)
 8000e16:	5cd3      	ldrb	r3, [r2, r3]
 8000e18:	60fb      	str	r3, [r7, #12]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;  
 8000e1a:	4b07      	ldr	r3, [pc, #28]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	fa22 f303 	lsr.w	r3, r2, r3
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <SystemCoreClockUpdate+0xd4>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bc80      	pop	{r7}
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	40021000 	.word	0x40021000
 8000e38:	20000000 	.word	0x20000000
 8000e3c:	007a1200 	.word	0x007a1200
 8000e40:	003d0900 	.word	0x003d0900
 8000e44:	080088f0 	.word	0x080088f0

08000e48 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e48:	480c      	ldr	r0, [pc, #48]	; (8000e7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e4a:	490d      	ldr	r1, [pc, #52]	; (8000e80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e50:	e002      	b.n	8000e58 <LoopCopyDataInit>

08000e52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e56:	3304      	adds	r3, #4

08000e58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e5c:	d3f9      	bcc.n	8000e52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e60:	4c0a      	ldr	r4, [pc, #40]	; (8000e8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e64:	e001      	b.n	8000e6a <LoopFillZerobss>

08000e66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e68:	3204      	adds	r2, #4

08000e6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e6c:	d3fb      	bcc.n	8000e66 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e6e:	f7ff ff73 	bl	8000d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f007 f855 	bl	8007f20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e76:	f7ff fa0b 	bl	8000290 <main>
  bx lr
 8000e7a:	4770      	bx	lr
  ldr r0, =_sdata
 8000e7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e80:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8000e84:	0800893c 	.word	0x0800893c
  ldr r2, =_sbss
 8000e88:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8000e8c:	20001400 	.word	0x20001400

08000e90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e90:	e7fe      	b.n	8000e90 <ADC1_2_IRQHandler>
	...

08000e94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <HAL_Init+0x28>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <HAL_Init+0x28>)
 8000e9e:	f043 0310 	orr.w	r3, r3, #16
 8000ea2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ea4:	2003      	movs	r0, #3
 8000ea6:	f000 f911 	bl	80010cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eaa:	200f      	movs	r0, #15
 8000eac:	f000 f808 	bl	8000ec0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000eb0:	f7ff fece 	bl	8000c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40022000 	.word	0x40022000

08000ec0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b082      	sub	sp, #8
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <HAL_InitTick+0x54>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <HAL_InitTick+0x58>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ed6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f929 	bl	8001136 <HAL_SYSTICK_Config>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e00e      	b.n	8000f0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2b0f      	cmp	r3, #15
 8000ef2:	d80a      	bhi.n	8000f0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000efc:	f000 f8f1 	bl	80010e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f00:	4a06      	ldr	r2, [pc, #24]	; (8000f1c <HAL_InitTick+0x5c>)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f06:	2300      	movs	r3, #0
 8000f08:	e000      	b.n	8000f0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
}
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000004 	.word	0x20000004

08000f20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b02      	ldr	r3, [pc, #8]	; (8000f30 <HAL_GetTick+0x10>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bc80      	pop	{r7}
 8000f2e:	4770      	bx	lr
 8000f30:	20000218 	.word	0x20000218

08000f34 <__NVIC_SetPriorityGrouping>:
{
 8000f34:	b480      	push	{r7}
 8000f36:	b085      	sub	sp, #20
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f003 0307 	and.w	r3, r3, #7
 8000f42:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f50:	4013      	ands	r3, r2
 8000f52:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f66:	4a04      	ldr	r2, [pc, #16]	; (8000f78 <__NVIC_SetPriorityGrouping+0x44>)
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	60d3      	str	r3, [r2, #12]
}
 8000f6c:	bf00      	nop
 8000f6e:	3714      	adds	r7, #20
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bc80      	pop	{r7}
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	e000ed00 	.word	0xe000ed00

08000f7c <__NVIC_GetPriorityGrouping>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <__NVIC_GetPriorityGrouping+0x18>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	0a1b      	lsrs	r3, r3, #8
 8000f86:	f003 0307 	and.w	r3, r3, #7
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <__NVIC_EnableIRQ>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	db0b      	blt.n	8000fc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	f003 021f 	and.w	r2, r3, #31
 8000fb0:	4906      	ldr	r1, [pc, #24]	; (8000fcc <__NVIC_EnableIRQ+0x34>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	095b      	lsrs	r3, r3, #5
 8000fb8:	2001      	movs	r0, #1
 8000fba:	fa00 f202 	lsl.w	r2, r0, r2
 8000fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	bc80      	pop	{r7}
 8000fca:	4770      	bx	lr
 8000fcc:	e000e100 	.word	0xe000e100

08000fd0 <__NVIC_SetPriority>:
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	6039      	str	r1, [r7, #0]
 8000fda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	db0a      	blt.n	8000ffa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <__NVIC_SetPriority+0x4c>)
 8000fea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fee:	0112      	lsls	r2, r2, #4
 8000ff0:	b2d2      	uxtb	r2, r2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ff8:	e00a      	b.n	8001010 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffa:	683b      	ldr	r3, [r7, #0]
 8000ffc:	b2da      	uxtb	r2, r3
 8000ffe:	4908      	ldr	r1, [pc, #32]	; (8001020 <__NVIC_SetPriority+0x50>)
 8001000:	79fb      	ldrb	r3, [r7, #7]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	3b04      	subs	r3, #4
 8001008:	0112      	lsls	r2, r2, #4
 800100a:	b2d2      	uxtb	r2, r2
 800100c:	440b      	add	r3, r1
 800100e:	761a      	strb	r2, [r3, #24]
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000e100 	.word	0xe000e100
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <NVIC_EncodePriority>:
{
 8001024:	b480      	push	{r7}
 8001026:	b089      	sub	sp, #36	; 0x24
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	f003 0307 	and.w	r3, r3, #7
 8001036:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	f1c3 0307 	rsb	r3, r3, #7
 800103e:	2b04      	cmp	r3, #4
 8001040:	bf28      	it	cs
 8001042:	2304      	movcs	r3, #4
 8001044:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	3304      	adds	r3, #4
 800104a:	2b06      	cmp	r3, #6
 800104c:	d902      	bls.n	8001054 <NVIC_EncodePriority+0x30>
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3b03      	subs	r3, #3
 8001052:	e000      	b.n	8001056 <NVIC_EncodePriority+0x32>
 8001054:	2300      	movs	r3, #0
 8001056:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	43da      	mvns	r2, r3
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	401a      	ands	r2, r3
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800106c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa01 f303 	lsl.w	r3, r1, r3
 8001076:	43d9      	mvns	r1, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800107c:	4313      	orrs	r3, r2
}
 800107e:	4618      	mov	r0, r3
 8001080:	3724      	adds	r7, #36	; 0x24
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <SysTick_Config>:
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3b01      	subs	r3, #1
 8001094:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001098:	d301      	bcc.n	800109e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800109a:	2301      	movs	r3, #1
 800109c:	e00f      	b.n	80010be <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <SysTick_Config+0x40>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3b01      	subs	r3, #1
 80010a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010a6:	210f      	movs	r1, #15
 80010a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80010ac:	f7ff ff90 	bl	8000fd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <SysTick_Config+0x40>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010b6:	4b04      	ldr	r3, [pc, #16]	; (80010c8 <SysTick_Config+0x40>)
 80010b8:	2207      	movs	r2, #7
 80010ba:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	e000e010 	.word	0xe000e010

080010cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f7ff ff2d 	bl	8000f34 <__NVIC_SetPriorityGrouping>
}
 80010da:	bf00      	nop
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	4603      	mov	r3, r0
 80010ea:	60b9      	str	r1, [r7, #8]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010f4:	f7ff ff42 	bl	8000f7c <__NVIC_GetPriorityGrouping>
 80010f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010fa:	687a      	ldr	r2, [r7, #4]
 80010fc:	68b9      	ldr	r1, [r7, #8]
 80010fe:	6978      	ldr	r0, [r7, #20]
 8001100:	f7ff ff90 	bl	8001024 <NVIC_EncodePriority>
 8001104:	4602      	mov	r2, r0
 8001106:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800110a:	4611      	mov	r1, r2
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff ff5f 	bl	8000fd0 <__NVIC_SetPriority>
}
 8001112:	bf00      	nop
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800111a:	b580      	push	{r7, lr}
 800111c:	b082      	sub	sp, #8
 800111e:	af00      	add	r7, sp, #0
 8001120:	4603      	mov	r3, r0
 8001122:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff35 	bl	8000f98 <__NVIC_EnableIRQ>
}
 800112e:	bf00      	nop
 8001130:	3708      	adds	r7, #8
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800113e:	6878      	ldr	r0, [r7, #4]
 8001140:	f7ff ffa2 	bl	8001088 <SysTick_Config>
 8001144:	4603      	mov	r3, r0
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}

0800114e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800114e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001150:	b08b      	sub	sp, #44	; 0x2c
 8001152:	af06      	add	r7, sp, #24
 8001154:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0fd      	b.n	800135c <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d106      	bne.n	800117a <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2200      	movs	r2, #0
 8001170:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f006 fc23 	bl	80079c0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2203      	movs	r2, #3
 800117e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	4618      	mov	r0, r3
 8001188:	f002 f968 	bl	800345c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	603b      	str	r3, [r7, #0]
 8001192:	687e      	ldr	r6, [r7, #4]
 8001194:	466d      	mov	r5, sp
 8001196:	f106 0410 	add.w	r4, r6, #16
 800119a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800119c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800119e:	6823      	ldr	r3, [r4, #0]
 80011a0:	602b      	str	r3, [r5, #0]
 80011a2:	1d33      	adds	r3, r6, #4
 80011a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011a6:	6838      	ldr	r0, [r7, #0]
 80011a8:	f002 f932 	bl	8003410 <USB_CoreInit>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2202      	movs	r2, #2
 80011b6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e0ce      	b.n	800135c <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2100      	movs	r1, #0
 80011c4:	4618      	mov	r0, r3
 80011c6:	f002 f963 	bl	8003490 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011ca:	2300      	movs	r3, #0
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	e04c      	b.n	800126a <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	4613      	mov	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	4413      	add	r3, r2
 80011dc:	00db      	lsls	r3, r3, #3
 80011de:	440b      	add	r3, r1
 80011e0:	3301      	adds	r3, #1
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80011e6:	7bfb      	ldrb	r3, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	4613      	mov	r3, r2
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	4413      	add	r3, r2
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	440b      	add	r3, r1
 80011f6:	7bfa      	ldrb	r2, [r7, #15]
 80011f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80011fa:	7bfa      	ldrb	r2, [r7, #15]
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	b298      	uxth	r0, r3
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	4613      	mov	r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4413      	add	r3, r2
 8001208:	00db      	lsls	r3, r3, #3
 800120a:	440b      	add	r3, r1
 800120c:	3336      	adds	r3, #54	; 0x36
 800120e:	4602      	mov	r2, r0
 8001210:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	1c5a      	adds	r2, r3, #1
 8001218:	4613      	mov	r3, r2
 800121a:	009b      	lsls	r3, r3, #2
 800121c:	4413      	add	r3, r2
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	440b      	add	r3, r1
 8001222:	3303      	adds	r3, #3
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	4413      	add	r3, r2
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	440b      	add	r3, r1
 8001236:	3338      	adds	r3, #56	; 0x38
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	6879      	ldr	r1, [r7, #4]
 8001240:	4613      	mov	r3, r2
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	4413      	add	r3, r2
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	440b      	add	r3, r1
 800124a:	333c      	adds	r3, #60	; 0x3c
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001250:	7bfa      	ldrb	r2, [r7, #15]
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	4613      	mov	r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4413      	add	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	440b      	add	r3, r1
 800125e:	3340      	adds	r3, #64	; 0x40
 8001260:	2200      	movs	r2, #0
 8001262:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	3301      	adds	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	7bfa      	ldrb	r2, [r7, #15]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	429a      	cmp	r2, r3
 8001272:	d3ad      	bcc.n	80011d0 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001274:	2300      	movs	r3, #0
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e044      	b.n	8001304 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800127a:	7bfa      	ldrb	r2, [r7, #15]
 800127c:	6879      	ldr	r1, [r7, #4]
 800127e:	4613      	mov	r3, r2
 8001280:	009b      	lsls	r3, r3, #2
 8001282:	4413      	add	r3, r2
 8001284:	00db      	lsls	r3, r3, #3
 8001286:	440b      	add	r3, r1
 8001288:	f203 1369 	addw	r3, r3, #361	; 0x169
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001290:	7bfa      	ldrb	r2, [r7, #15]
 8001292:	6879      	ldr	r1, [r7, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	00db      	lsls	r3, r3, #3
 800129c:	440b      	add	r3, r1
 800129e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80012a2:	7bfa      	ldrb	r2, [r7, #15]
 80012a4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	6879      	ldr	r1, [r7, #4]
 80012aa:	4613      	mov	r3, r2
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	4413      	add	r3, r2
 80012b0:	00db      	lsls	r3, r3, #3
 80012b2:	440b      	add	r3, r1
 80012b4:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80012b8:	2200      	movs	r2, #0
 80012ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80012bc:	7bfa      	ldrb	r2, [r7, #15]
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	4613      	mov	r3, r2
 80012c2:	009b      	lsls	r3, r3, #2
 80012c4:	4413      	add	r3, r2
 80012c6:	00db      	lsls	r3, r3, #3
 80012c8:	440b      	add	r3, r1
 80012ca:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80012d2:	7bfa      	ldrb	r2, [r7, #15]
 80012d4:	6879      	ldr	r1, [r7, #4]
 80012d6:	4613      	mov	r3, r2
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	4413      	add	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	440b      	add	r3, r1
 80012e0:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80012e4:	2200      	movs	r2, #0
 80012e6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80012e8:	7bfa      	ldrb	r2, [r7, #15]
 80012ea:	6879      	ldr	r1, [r7, #4]
 80012ec:	4613      	mov	r3, r2
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	00db      	lsls	r3, r3, #3
 80012f4:	440b      	add	r3, r1
 80012f6:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	3301      	adds	r3, #1
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	7bfa      	ldrb	r2, [r7, #15]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	429a      	cmp	r2, r3
 800130c:	d3b5      	bcc.n	800127a <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	603b      	str	r3, [r7, #0]
 8001314:	687e      	ldr	r6, [r7, #4]
 8001316:	466d      	mov	r5, sp
 8001318:	f106 0410 	add.w	r4, r6, #16
 800131c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800131e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	1d33      	adds	r3, r6, #4
 8001326:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001328:	6838      	ldr	r0, [r7, #0]
 800132a:	f002 f8bd 	bl	80034a8 <USB_DevInit>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d005      	beq.n	8001340 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	2202      	movs	r2, #2
 8001338:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800133c:	2301      	movs	r3, #1
 800133e:	e00d      	b.n	800135c <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2200      	movs	r2, #0
 8001344:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2201      	movs	r2, #1
 800134c:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f004 fd6f 	bl	8005e38 <USB_DevDisconnect>

  return HAL_OK;
 800135a:	2300      	movs	r3, #0
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001364 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001372:	2b01      	cmp	r3, #1
 8001374:	d101      	bne.n	800137a <HAL_PCD_Start+0x16>
 8001376:	2302      	movs	r3, #2
 8001378:	e016      	b.n	80013a8 <HAL_PCD_Start+0x44>
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2201      	movs	r2, #1
 800137e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f852 	bl	8003430 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 800138c:	2101      	movs	r1, #1
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f006 fd89 	bl	8007ea6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4618      	mov	r0, r3
 800139a:	f004 fd43 	bl	8005e24 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2200      	movs	r2, #0
 80013a2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80013a6:	2300      	movs	r3, #0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4618      	mov	r0, r3
 80013be:	f004 fd45 	bl	8005e4c <USB_ReadInterrupts>
 80013c2:	4603      	mov	r3, r0
 80013c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80013cc:	d102      	bne.n	80013d4 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80013ce:	6878      	ldr	r0, [r7, #4]
 80013d0:	f000 fb5f 	bl	8001a92 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4618      	mov	r0, r3
 80013da:	f004 fd37 	bl	8005e4c <USB_ReadInterrupts>
 80013de:	4603      	mov	r3, r0
 80013e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013e8:	d112      	bne.n	8001410 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80013f2:	b29a      	uxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013fc:	b292      	uxth	r2, r2
 80013fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	f006 fb57 	bl	8007ab6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001408:	2100      	movs	r1, #0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f923 	bl	8001656 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4618      	mov	r0, r3
 8001416:	f004 fd19 	bl	8005e4c <USB_ReadInterrupts>
 800141a:	4603      	mov	r3, r0
 800141c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001420:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001424:	d10b      	bne.n	800143e <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001438:	b292      	uxth	r2, r2
 800143a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f004 fd02 	bl	8005e4c <USB_ReadInterrupts>
 8001448:	4603      	mov	r3, r0
 800144a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800144e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001452:	d10b      	bne.n	800146c <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800145c:	b29a      	uxth	r2, r3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001466:	b292      	uxth	r2, r2
 8001468:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f004 fceb 	bl	8005e4c <USB_ReadInterrupts>
 8001476:	4603      	mov	r3, r0
 8001478:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800147c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001480:	d126      	bne.n	80014d0 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800148a:	b29a      	uxth	r2, r3
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f022 0204 	bic.w	r2, r2, #4
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80014a2:	b29a      	uxth	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f022 0208 	bic.w	r2, r2, #8
 80014ac:	b292      	uxth	r2, r2
 80014ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f006 fb38 	bl	8007b28 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80014ca:	b292      	uxth	r2, r2
 80014cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f004 fcb9 	bl	8005e4c <USB_ReadInterrupts>
 80014da:	4603      	mov	r3, r0
 80014dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80014e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80014e4:	f040 8082 	bne.w	80015ec <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80014e8:	2300      	movs	r3, #0
 80014ea:	77fb      	strb	r3, [r7, #31]
 80014ec:	e010      	b.n	8001510 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	461a      	mov	r2, r3
 80014f4:	7ffb      	ldrb	r3, [r7, #31]
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	441a      	add	r2, r3
 80014fa:	7ffb      	ldrb	r3, [r7, #31]
 80014fc:	8812      	ldrh	r2, [r2, #0]
 80014fe:	b292      	uxth	r2, r2
 8001500:	005b      	lsls	r3, r3, #1
 8001502:	3320      	adds	r3, #32
 8001504:	443b      	add	r3, r7
 8001506:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800150a:	7ffb      	ldrb	r3, [r7, #31]
 800150c:	3301      	adds	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]
 8001510:	7ffb      	ldrb	r3, [r7, #31]
 8001512:	2b07      	cmp	r3, #7
 8001514:	d9eb      	bls.n	80014ee <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800151e:	b29a      	uxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0201 	orr.w	r2, r2, #1
 8001528:	b292      	uxth	r2, r2
 800152a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001536:	b29a      	uxth	r2, r3
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f022 0201 	bic.w	r2, r2, #1
 8001540:	b292      	uxth	r2, r2
 8001542:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001546:	bf00      	nop
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001550:	b29b      	uxth	r3, r3
 8001552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f6      	beq.n	8001548 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001562:	b29a      	uxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800156c:	b292      	uxth	r2, r2
 800156e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001572:	2300      	movs	r3, #0
 8001574:	77fb      	strb	r3, [r7, #31]
 8001576:	e00f      	b.n	8001598 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001578:	7ffb      	ldrb	r3, [r7, #31]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6812      	ldr	r2, [r2, #0]
 800157e:	4611      	mov	r1, r2
 8001580:	7ffa      	ldrb	r2, [r7, #31]
 8001582:	0092      	lsls	r2, r2, #2
 8001584:	440a      	add	r2, r1
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	3320      	adds	r3, #32
 800158a:	443b      	add	r3, r7
 800158c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001590:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001592:	7ffb      	ldrb	r3, [r7, #31]
 8001594:	3301      	adds	r3, #1
 8001596:	77fb      	strb	r3, [r7, #31]
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	2b07      	cmp	r3, #7
 800159c:	d9ec      	bls.n	8001578 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015a6:	b29a      	uxth	r2, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0208 	orr.w	r2, r2, #8
 80015b0:	b292      	uxth	r2, r2
 80015b2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015be:	b29a      	uxth	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80015c8:	b292      	uxth	r2, r2
 80015ca:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f042 0204 	orr.w	r2, r2, #4
 80015e0:	b292      	uxth	r2, r2
 80015e2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f006 fa84 	bl	8007af4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f004 fc2b 	bl	8005e4c <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001600:	d10e      	bne.n	8001620 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f006 fa3d 	bl	8007a9a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f004 fc11 	bl	8005e4c <USB_ReadInterrupts>
 800162a:	4603      	mov	r3, r0
 800162c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001630:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001634:	d10b      	bne.n	800164e <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800163e:	b29a      	uxth	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001648:	b292      	uxth	r2, r2
 800164a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800164e:	bf00      	nop
 8001650:	3720      	adds	r7, #32
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}

08001656 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001656:	b580      	push	{r7, lr}
 8001658:	b082      	sub	sp, #8
 800165a:	af00      	add	r7, sp, #0
 800165c:	6078      	str	r0, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001668:	2b01      	cmp	r3, #1
 800166a:	d101      	bne.n	8001670 <HAL_PCD_SetAddress+0x1a>
 800166c:	2302      	movs	r3, #2
 800166e:	e013      	b.n	8001698 <HAL_PCD_SetAddress+0x42>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	78fa      	ldrb	r2, [r7, #3]
 800167c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	78fa      	ldrb	r2, [r7, #3]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f004 fbb8 	bl	8005dfe <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2200      	movs	r2, #0
 8001692:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001696:	2300      	movs	r3, #0
}
 8001698:	4618      	mov	r0, r3
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}

080016a0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b084      	sub	sp, #16
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	4608      	mov	r0, r1
 80016aa:	4611      	mov	r1, r2
 80016ac:	461a      	mov	r2, r3
 80016ae:	4603      	mov	r3, r0
 80016b0:	70fb      	strb	r3, [r7, #3]
 80016b2:	460b      	mov	r3, r1
 80016b4:	803b      	strh	r3, [r7, #0]
 80016b6:	4613      	mov	r3, r2
 80016b8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80016ba:	2300      	movs	r3, #0
 80016bc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80016be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	da0e      	bge.n	80016e4 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80016c6:	78fb      	ldrb	r3, [r7, #3]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	1c5a      	adds	r2, r3, #1
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2201      	movs	r2, #1
 80016e0:	705a      	strb	r2, [r3, #1]
 80016e2:	e00e      	b.n	8001702 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80016e4:	78fb      	ldrb	r3, [r7, #3]
 80016e6:	f003 0207 	and.w	r2, r3, #7
 80016ea:	4613      	mov	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	4413      	add	r3, r2
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001702:	78fb      	ldrb	r3, [r7, #3]
 8001704:	f003 0307 	and.w	r3, r3, #7
 8001708:	b2da      	uxtb	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800170e:	883a      	ldrh	r2, [r7, #0]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	78ba      	ldrb	r2, [r7, #2]
 8001718:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	785b      	ldrb	r3, [r3, #1]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d004      	beq.n	800172c <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	b29a      	uxth	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	2b02      	cmp	r3, #2
 8001730:	d102      	bne.n	8001738 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	2200      	movs	r2, #0
 8001736:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800173e:	2b01      	cmp	r3, #1
 8001740:	d101      	bne.n	8001746 <HAL_PCD_EP_Open+0xa6>
 8001742:	2302      	movs	r3, #2
 8001744:	e00e      	b.n	8001764 <HAL_PCD_EP_Open+0xc4>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	68f9      	ldr	r1, [r7, #12]
 8001754:	4618      	mov	r0, r3
 8001756:	f001 fec7 	bl	80034e8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2200      	movs	r2, #0
 800175e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001762:	7afb      	ldrb	r3, [r7, #11]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3710      	adds	r7, #16
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}

0800176c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b084      	sub	sp, #16
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	460b      	mov	r3, r1
 8001776:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001778:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800177c:	2b00      	cmp	r3, #0
 800177e:	da0e      	bge.n	800179e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001780:	78fb      	ldrb	r3, [r7, #3]
 8001782:	f003 0307 	and.w	r3, r3, #7
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	4613      	mov	r3, r2
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	00db      	lsls	r3, r3, #3
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	4413      	add	r3, r2
 8001794:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2201      	movs	r2, #1
 800179a:	705a      	strb	r2, [r3, #1]
 800179c:	e00e      	b.n	80017bc <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800179e:	78fb      	ldrb	r3, [r7, #3]
 80017a0:	f003 0207 	and.w	r2, r3, #7
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	4413      	add	r3, r2
 80017b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	2200      	movs	r2, #0
 80017ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80017bc:	78fb      	ldrb	r3, [r7, #3]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	b2da      	uxtb	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_EP_Close+0x6a>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e00e      	b.n	80017f4 <HAL_PCD_EP_Close+0x88>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 f9e9 	bl	8003bbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	607a      	str	r2, [r7, #4]
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	460b      	mov	r3, r1
 800180a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800180c:	7afb      	ldrb	r3, [r7, #11]
 800180e:	f003 0207 	and.w	r2, r3, #7
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800181e:	68fa      	ldr	r2, [r7, #12]
 8001820:	4413      	add	r3, r2
 8001822:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	687a      	ldr	r2, [r7, #4]
 8001828:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800183c:	7afb      	ldrb	r3, [r7, #11]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	b2da      	uxtb	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001848:	7afb      	ldrb	r3, [r7, #11]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	6979      	ldr	r1, [r7, #20]
 8001858:	4618      	mov	r0, r3
 800185a:	f002 fb9b 	bl	8003f94 <USB_EPStartXfer>
 800185e:	e005      	b.n	800186c <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6979      	ldr	r1, [r7, #20]
 8001866:	4618      	mov	r0, r3
 8001868:	f002 fb94 	bl	8003f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001876:	b480      	push	{r7}
 8001878:	b083      	sub	sp, #12
 800187a:	af00      	add	r7, sp, #0
 800187c:	6078      	str	r0, [r7, #4]
 800187e:	460b      	mov	r3, r1
 8001880:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001882:	78fb      	ldrb	r3, [r7, #3]
 8001884:	f003 0207 	and.w	r2, r3, #7
 8001888:	6879      	ldr	r1, [r7, #4]
 800188a:	4613      	mov	r3, r2
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	440b      	add	r3, r1
 8001894:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001898:	681b      	ldr	r3, [r3, #0]
}
 800189a:	4618      	mov	r0, r3
 800189c:	370c      	adds	r7, #12
 800189e:	46bd      	mov	sp, r7
 80018a0:	bc80      	pop	{r7}
 80018a2:	4770      	bx	lr

080018a4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b086      	sub	sp, #24
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	60f8      	str	r0, [r7, #12]
 80018ac:	607a      	str	r2, [r7, #4]
 80018ae:	603b      	str	r3, [r7, #0]
 80018b0:	460b      	mov	r3, r1
 80018b2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018b4:	7afb      	ldrb	r3, [r7, #11]
 80018b6:	f003 0307 	and.w	r3, r3, #7
 80018ba:	1c5a      	adds	r2, r3, #1
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	68fa      	ldr	r2, [r7, #12]
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	2200      	movs	r2, #0
 80018e8:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2201      	movs	r2, #1
 80018ee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018f0:	7afb      	ldrb	r3, [r7, #11]
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6979      	ldr	r1, [r7, #20]
 800190c:	4618      	mov	r0, r3
 800190e:	f002 fb41 	bl	8003f94 <USB_EPStartXfer>
 8001912:	e005      	b.n	8001920 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	6979      	ldr	r1, [r7, #20]
 800191a:	4618      	mov	r0, r3
 800191c:	f002 fb3a 	bl	8003f94 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800192a:	b580      	push	{r7, lr}
 800192c:	b084      	sub	sp, #16
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
 8001932:	460b      	mov	r3, r1
 8001934:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001936:	78fb      	ldrb	r3, [r7, #3]
 8001938:	f003 0207 	and.w	r2, r3, #7
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	d901      	bls.n	8001948 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e04c      	b.n	80019e2 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001948:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800194c:	2b00      	cmp	r3, #0
 800194e:	da0e      	bge.n	800196e <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001950:	78fb      	ldrb	r3, [r7, #3]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	1c5a      	adds	r2, r3, #1
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	00db      	lsls	r3, r3, #3
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	2201      	movs	r2, #1
 800196a:	705a      	strb	r2, [r3, #1]
 800196c:	e00c      	b.n	8001988 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800196e:	78fa      	ldrb	r2, [r7, #3]
 8001970:	4613      	mov	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	4413      	add	r3, r2
 8001976:	00db      	lsls	r3, r3, #3
 8001978:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800197c:	687a      	ldr	r2, [r7, #4]
 800197e:	4413      	add	r3, r2
 8001980:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2200      	movs	r2, #0
 8001986:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2201      	movs	r2, #1
 800198c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800198e:	78fb      	ldrb	r3, [r7, #3]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	b2da      	uxtb	r2, r3
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_EP_SetStall+0x7e>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e01c      	b.n	80019e2 <HAL_PCD_EP_SetStall+0xb8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f004 f924 	bl	8005c04 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019bc:	78fb      	ldrb	r3, [r7, #3]
 80019be:	f003 0307 	and.w	r3, r3, #7
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d108      	bne.n	80019d8 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80019d0:	4619      	mov	r1, r3
 80019d2:	4610      	mov	r0, r2
 80019d4:	f004 fa49 	bl	8005e6a <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b084      	sub	sp, #16
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	460b      	mov	r3, r1
 80019f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80019f6:	78fb      	ldrb	r3, [r7, #3]
 80019f8:	f003 020f 	and.w	r2, r3, #15
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d901      	bls.n	8001a08 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
 8001a06:	e040      	b.n	8001a8a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	da0e      	bge.n	8001a2e <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a10:	78fb      	ldrb	r3, [r7, #3]
 8001a12:	f003 0307 	and.w	r3, r3, #7
 8001a16:	1c5a      	adds	r2, r3, #1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4413      	add	r3, r2
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	4413      	add	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	705a      	strb	r2, [r3, #1]
 8001a2c:	e00e      	b.n	8001a4c <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	f003 0207 	and.w	r2, r3, #7
 8001a34:	4613      	mov	r3, r2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	4413      	add	r3, r2
 8001a3a:	00db      	lsls	r3, r3, #3
 8001a3c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	4413      	add	r3, r2
 8001a44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2200      	movs	r2, #0
 8001a4a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a52:	78fb      	ldrb	r3, [r7, #3]
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_PCD_EP_ClrStall+0x82>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e00e      	b.n	8001a8a <HAL_PCD_EP_ClrStall+0xa0>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	68f9      	ldr	r1, [r7, #12]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f004 f912 	bl	8005ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3710      	adds	r7, #16
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b08e      	sub	sp, #56	; 0x38
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001a9a:	e2ec      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001aa4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001aa6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001ab2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	f040 8161 	bne.w	8001d7e <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001abc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001abe:	f003 0310 	and.w	r3, r3, #16
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d152      	bne.n	8001b6c <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	881b      	ldrh	r3, [r3, #0]
 8001acc:	b29b      	uxth	r3, r3
 8001ace:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ad6:	81fb      	strh	r3, [r7, #14]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	89fb      	ldrh	r3, [r7, #14]
 8001ade:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ae2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3328      	adds	r3, #40	; 0x28
 8001aee:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	461a      	mov	r2, r3
 8001afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	00db      	lsls	r3, r3, #3
 8001b02:	4413      	add	r3, r2
 8001b04:	3302      	adds	r3, #2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	6812      	ldr	r2, [r2, #0]
 8001b0c:	4413      	add	r3, r2
 8001b0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b12:	881b      	ldrh	r3, [r3, #0]
 8001b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1a:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	441a      	add	r2, r3
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f005 ff9a 	bl	8007a66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	f000 829b 	beq.w	8002076 <PCD_EP_ISR_Handler+0x5e4>
 8001b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f040 8296 	bne.w	8002076 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b50:	b2db      	uxtb	r3, r3
 8001b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001b6a:	e284      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b72:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	881b      	ldrh	r3, [r3, #0]
 8001b7a:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001b7c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001b7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d034      	beq.n	8001bf0 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	461a      	mov	r2, r3
 8001b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	00db      	lsls	r3, r3, #3
 8001b98:	4413      	add	r3, r2
 8001b9a:	3306      	adds	r3, #6
 8001b9c:	005b      	lsls	r3, r3, #1
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6812      	ldr	r2, [r2, #0]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ba8:	881b      	ldrh	r3, [r3, #0]
 8001baa:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bb0:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6818      	ldr	r0, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbe:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bc2:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001bc4:	b29b      	uxth	r3, r3
 8001bc6:	f004 f9a0 	bl	8005f0a <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	b29a      	uxth	r2, r3
 8001bd2:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	823b      	strh	r3, [r7, #16]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	8a3a      	ldrh	r2, [r7, #16]
 8001be0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001be4:	b292      	uxth	r2, r2
 8001be6:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f005 ff0f 	bl	8007a0c <HAL_PCD_SetupStageCallback>
 8001bee:	e242      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001bf0:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f280 823e 	bge.w	8002076 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c06:	4013      	ands	r3, r2
 8001c08:	83bb      	strh	r3, [r7, #28]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	8bba      	ldrh	r2, [r7, #28]
 8001c10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c14:	b292      	uxth	r2, r2
 8001c16:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	461a      	mov	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3306      	adds	r3, #6
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	6812      	ldr	r2, [r2, #0]
 8001c34:	4413      	add	r3, r2
 8001c36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c42:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c46:	69db      	ldr	r3, [r3, #28]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d019      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x1ee>
 8001c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d015      	beq.n	8001c80 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6818      	ldr	r0, [r3, #0]
 8001c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5a:	6959      	ldr	r1, [r3, #20]
 8001c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5e:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c62:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	f004 f950 	bl	8005f0a <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	69db      	ldr	r3, [r3, #28]
 8001c72:	441a      	add	r2, r3
 8001c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c76:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001c78:	2100      	movs	r1, #0
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f005 fed8 	bl	8007a30 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	881b      	ldrh	r3, [r3, #0]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	f040 81f2 	bne.w	8002076 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001cb0:	617b      	str	r3, [r7, #20]
 8001cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d112      	bne.n	8001ce0 <PCD_EP_ISR_Handler+0x24e>
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b29b      	uxth	r3, r3
 8001cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	801a      	strh	r2, [r3, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	881b      	ldrh	r3, [r3, #0]
 8001cce:	b29b      	uxth	r3, r3
 8001cd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	801a      	strh	r2, [r3, #0]
 8001cde:	e02f      	b.n	8001d40 <PCD_EP_ISR_Handler+0x2ae>
 8001ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	2b3e      	cmp	r3, #62	; 0x3e
 8001ce6:	d813      	bhi.n	8001d10 <PCD_EP_ISR_Handler+0x27e>
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	691b      	ldr	r3, [r3, #16]
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	691b      	ldr	r3, [r3, #16]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d002      	beq.n	8001d02 <PCD_EP_ISR_Handler+0x270>
 8001cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cfe:	3301      	adds	r3, #1
 8001d00:	633b      	str	r3, [r7, #48]	; 0x30
 8001d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	029b      	lsls	r3, r3, #10
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	801a      	strh	r2, [r3, #0]
 8001d0e:	e017      	b.n	8001d40 <PCD_EP_ISR_Handler+0x2ae>
 8001d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d12:	691b      	ldr	r3, [r3, #16]
 8001d14:	095b      	lsrs	r3, r3, #5
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d102      	bne.n	8001d2a <PCD_EP_ISR_Handler+0x298>
 8001d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d26:	3b01      	subs	r3, #1
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
 8001d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	029b      	lsls	r3, r3, #10
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	881b      	ldrh	r3, [r3, #0]
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d50:	827b      	strh	r3, [r7, #18]
 8001d52:	8a7b      	ldrh	r3, [r7, #18]
 8001d54:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001d58:	827b      	strh	r3, [r7, #18]
 8001d5a:	8a7b      	ldrh	r3, [r7, #18]
 8001d5c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001d60:	827b      	strh	r3, [r7, #18]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	8a7b      	ldrh	r3, [r7, #18]
 8001d68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001d6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001d70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	8013      	strh	r3, [r2, #0]
 8001d7c:	e17b      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	461a      	mov	r2, r3
 8001d84:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	4413      	add	r3, r2
 8001d8c:	881b      	ldrh	r3, [r3, #0]
 8001d8e:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d90:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f280 80ea 	bge.w	8001f6e <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	461a      	mov	r2, r3
 8001da0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	4413      	add	r3, r2
 8001da8:	881b      	ldrh	r3, [r3, #0]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001db0:	4013      	ands	r3, r2
 8001db2:	853b      	strh	r3, [r7, #40]	; 0x28
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	461a      	mov	r2, r3
 8001dba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001dc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001dcc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	4413      	add	r3, r2
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de4:	7b1b      	ldrb	r3, [r3, #12]
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d122      	bne.n	8001e30 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	461a      	mov	r2, r3
 8001df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	00db      	lsls	r3, r3, #3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3306      	adds	r3, #6
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	6812      	ldr	r2, [r2, #0]
 8001e06:	4413      	add	r3, r2
 8001e08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e12:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	f000 8087 	beq.w	8001f2a <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6818      	ldr	r0, [r3, #0]
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	6959      	ldr	r1, [r3, #20]
 8001e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e26:	88da      	ldrh	r2, [r3, #6]
 8001e28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e2a:	f004 f86e 	bl	8005f0a <USB_ReadPMA>
 8001e2e:	e07c      	b.n	8001f2a <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e32:	78db      	ldrb	r3, [r3, #3]
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d108      	bne.n	8001e4a <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e38:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f927 	bl	8002092 <HAL_PCD_EP_DB_Receive>
 8001e44:	4603      	mov	r3, r0
 8001e46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001e48:	e06f      	b.n	8001f2a <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	b29b      	uxth	r3, r3
 8001e5c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001e60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e64:	847b      	strh	r3, [r7, #34]	; 0x22
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	441a      	add	r2, r3
 8001e74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001e76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001e7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001e7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e82:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001e86:	b29b      	uxth	r3, r3
 8001e88:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	009b      	lsls	r3, r3, #2
 8001e96:	4413      	add	r3, r2
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d021      	beq.n	8001ee8 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001eac:	b29b      	uxth	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	00db      	lsls	r3, r3, #3
 8001eb6:	4413      	add	r3, r2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	687a      	ldr	r2, [r7, #4]
 8001ebe:	6812      	ldr	r2, [r2, #0]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ecc:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001ece:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d02a      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6818      	ldr	r0, [r3, #0]
 8001ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eda:	6959      	ldr	r1, [r3, #20]
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	891a      	ldrh	r2, [r3, #8]
 8001ee0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ee2:	f004 f812 	bl	8005f0a <USB_ReadPMA>
 8001ee6:	e020      	b.n	8001f2a <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001ef0:	b29b      	uxth	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	4413      	add	r3, r2
 8001efc:	3306      	adds	r3, #6
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	4413      	add	r3, r2
 8001f06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f0a:	881b      	ldrh	r3, [r3, #0]
 8001f0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f10:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f12:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d008      	beq.n	8001f2a <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6818      	ldr	r0, [r3, #0]
 8001f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1e:	6959      	ldr	r1, [r3, #20]
 8001f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f22:	895a      	ldrh	r2, [r3, #10]
 8001f24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f26:	f003 fff0 	bl	8005f0a <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f30:	441a      	add	r2, r3
 8001f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f34:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f3c:	441a      	add	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d004      	beq.n	8001f54 <PCD_EP_ISR_Handler+0x4c2>
 8001f4a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d206      	bcs.n	8001f62 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	4619      	mov	r1, r3
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f005 fd68 	bl	8007a30 <HAL_PCD_DataOutStageCallback>
 8001f60:	e005      	b.n	8001f6e <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 f813 	bl	8003f94 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001f6e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d07e      	beq.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001f78:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f7c:	1c5a      	adds	r2, r3, #1
 8001f7e:	4613      	mov	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	00db      	lsls	r3, r3, #3
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	4413      	add	r3, r2
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	461a      	mov	r2, r3
 8001f92:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	4413      	add	r3, r2
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001fa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa6:	843b      	strh	r3, [r7, #32]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	441a      	add	r2, r3
 8001fb6:	8c3b      	ldrh	r3, [r7, #32]
 8001fb8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001fbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001fc0:	b29b      	uxth	r3, r3
 8001fc2:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	78db      	ldrb	r3, [r3, #3]
 8001fc8:	2b03      	cmp	r3, #3
 8001fca:	d00c      	beq.n	8001fe6 <PCD_EP_ISR_Handler+0x554>
 8001fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fce:	78db      	ldrb	r3, [r3, #3]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d146      	bne.n	800206a <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8001fdc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d141      	bne.n	800206a <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fee:	b29b      	uxth	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3302      	adds	r3, #2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6812      	ldr	r2, [r2, #0]
 8002002:	4413      	add	r3, r2
 8002004:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002008:	881b      	ldrh	r3, [r3, #0]
 800200a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800200e:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	699a      	ldr	r2, [r3, #24]
 8002014:	8bfb      	ldrh	r3, [r7, #30]
 8002016:	429a      	cmp	r2, r3
 8002018:	d906      	bls.n	8002028 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800201a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201c:	699a      	ldr	r2, [r3, #24]
 800201e:	8bfb      	ldrh	r3, [r7, #30]
 8002020:	1ad2      	subs	r2, r2, r3
 8002022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002024:	619a      	str	r2, [r3, #24]
 8002026:	e002      	b.n	800202e <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202a:	2200      	movs	r2, #0
 800202c:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	699b      	ldr	r3, [r3, #24]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	781b      	ldrb	r3, [r3, #0]
 800203a:	4619      	mov	r1, r3
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f005 fd12 	bl	8007a66 <HAL_PCD_DataInStageCallback>
 8002042:	e018      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	695a      	ldr	r2, [r3, #20]
 8002048:	8bfb      	ldrh	r3, [r7, #30]
 800204a:	441a      	add	r2, r3
 800204c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204e:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002052:	69da      	ldr	r2, [r3, #28]
 8002054:	8bfb      	ldrh	r3, [r7, #30]
 8002056:	441a      	add	r2, r3
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002062:	4618      	mov	r0, r3
 8002064:	f001 ff96 	bl	8003f94 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002068:	e005      	b.n	8002076 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800206a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800206c:	461a      	mov	r2, r3
 800206e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 f91b 	bl	80022ac <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800207e:	b29b      	uxth	r3, r3
 8002080:	b21b      	sxth	r3, r3
 8002082:	2b00      	cmp	r3, #0
 8002084:	f6ff ad0a 	blt.w	8001a9c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002088:	2300      	movs	r3, #0
}
 800208a:	4618      	mov	r0, r3
 800208c:	3738      	adds	r7, #56	; 0x38
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}

08002092 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002092:	b580      	push	{r7, lr}
 8002094:	b088      	sub	sp, #32
 8002096:	af00      	add	r7, sp, #0
 8002098:	60f8      	str	r0, [r7, #12]
 800209a:	60b9      	str	r1, [r7, #8]
 800209c:	4613      	mov	r3, r2
 800209e:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80020a0:	88fb      	ldrh	r3, [r7, #6]
 80020a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d07e      	beq.n	80021a8 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	461a      	mov	r2, r3
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4413      	add	r3, r2
 80020be:	3302      	adds	r3, #2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	6812      	ldr	r2, [r2, #0]
 80020c6:	4413      	add	r3, r2
 80020c8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020d2:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	699a      	ldr	r2, [r3, #24]
 80020d8:	8b7b      	ldrh	r3, [r7, #26]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d306      	bcc.n	80020ec <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	699a      	ldr	r2, [r3, #24]
 80020e2:	8b7b      	ldrh	r3, [r7, #26]
 80020e4:	1ad2      	subs	r2, r2, r3
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	619a      	str	r2, [r3, #24]
 80020ea:	e002      	b.n	80020f2 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	2200      	movs	r2, #0
 80020f0:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d123      	bne.n	8002142 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461a      	mov	r2, r3
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002110:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002114:	833b      	strh	r3, [r7, #24]
 8002116:	8b3b      	ldrh	r3, [r7, #24]
 8002118:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800211c:	833b      	strh	r3, [r7, #24]
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	441a      	add	r2, r3
 800212c:	8b3b      	ldrh	r3, [r7, #24]
 800212e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002132:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800213a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800213e:	b29b      	uxth	r3, r3
 8002140:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002148:	2b00      	cmp	r3, #0
 800214a:	d01f      	beq.n	800218c <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	461a      	mov	r2, r3
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	4413      	add	r3, r2
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002166:	82fb      	strh	r3, [r7, #22]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	441a      	add	r2, r3
 8002176:	8afb      	ldrh	r3, [r7, #22]
 8002178:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800217c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002180:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002184:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002188:	b29b      	uxth	r3, r3
 800218a:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800218c:	8b7b      	ldrh	r3, [r7, #26]
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8087 	beq.w	80022a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6818      	ldr	r0, [r3, #0]
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	6959      	ldr	r1, [r3, #20]
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	891a      	ldrh	r2, [r3, #8]
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	f003 feb2 	bl	8005f0a <USB_ReadPMA>
 80021a6:	e07c      	b.n	80022a2 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	00db      	lsls	r3, r3, #3
 80021ba:	4413      	add	r3, r2
 80021bc:	3306      	adds	r3, #6
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	68fa      	ldr	r2, [r7, #12]
 80021c2:	6812      	ldr	r2, [r2, #0]
 80021c4:	4413      	add	r3, r2
 80021c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021ca:	881b      	ldrh	r3, [r3, #0]
 80021cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021d0:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	699a      	ldr	r2, [r3, #24]
 80021d6:	8b7b      	ldrh	r3, [r7, #26]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d306      	bcc.n	80021ea <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	8b7b      	ldrh	r3, [r7, #26]
 80021e2:	1ad2      	subs	r2, r2, r3
 80021e4:	68bb      	ldr	r3, [r7, #8]
 80021e6:	619a      	str	r2, [r3, #24]
 80021e8:	e002      	b.n	80021f0 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2200      	movs	r2, #0
 80021ee:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d123      	bne.n	8002240 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	461a      	mov	r2, r3
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	4413      	add	r3, r2
 8002206:	881b      	ldrh	r3, [r3, #0]
 8002208:	b29b      	uxth	r3, r3
 800220a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800220e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002212:	83fb      	strh	r3, [r7, #30]
 8002214:	8bfb      	ldrh	r3, [r7, #30]
 8002216:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800221a:	83fb      	strh	r3, [r7, #30]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	441a      	add	r2, r3
 800222a:	8bfb      	ldrh	r3, [r7, #30]
 800222c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002230:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002234:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002238:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800223c:	b29b      	uxth	r3, r3
 800223e:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002240:	88fb      	ldrh	r3, [r7, #6]
 8002242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11f      	bne.n	800228a <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	461a      	mov	r2, r3
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	4413      	add	r3, r2
 8002258:	881b      	ldrh	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002264:	83bb      	strh	r3, [r7, #28]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	441a      	add	r2, r3
 8002274:	8bbb      	ldrh	r3, [r7, #28]
 8002276:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800227a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800227e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002282:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002286:	b29b      	uxth	r3, r3
 8002288:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800228a:	8b7b      	ldrh	r3, [r7, #26]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6818      	ldr	r0, [r3, #0]
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	6959      	ldr	r1, [r3, #20]
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	895a      	ldrh	r2, [r3, #10]
 800229c:	8b7b      	ldrh	r3, [r7, #26]
 800229e:	f003 fe34 	bl	8005f0a <USB_ReadPMA>
    }
  }

  return count;
 80022a2:	8b7b      	ldrh	r3, [r7, #26]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b0a2      	sub	sp, #136	; 0x88
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	4613      	mov	r3, r2
 80022b8:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ba:	88fb      	ldrh	r3, [r7, #6]
 80022bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f000 81c7 	beq.w	8002654 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	00db      	lsls	r3, r3, #3
 80022d8:	4413      	add	r3, r2
 80022da:	3302      	adds	r3, #2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	6812      	ldr	r2, [r2, #0]
 80022e2:	4413      	add	r3, r2
 80022e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022e8:	881b      	ldrh	r3, [r3, #0]
 80022ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	699a      	ldr	r2, [r3, #24]
 80022f6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80022fa:	429a      	cmp	r2, r3
 80022fc:	d907      	bls.n	800230e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	699a      	ldr	r2, [r3, #24]
 8002302:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002306:	1ad2      	subs	r2, r2, r3
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	619a      	str	r2, [r3, #24]
 800230c:	e002      	b.n	8002314 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	699b      	ldr	r3, [r3, #24]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f040 80b9 	bne.w	8002490 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	785b      	ldrb	r3, [r3, #1]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d126      	bne.n	8002374 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	62bb      	str	r3, [r7, #40]	; 0x28
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002334:	b29b      	uxth	r3, r3
 8002336:	461a      	mov	r2, r3
 8002338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233a:	4413      	add	r3, r2
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	011a      	lsls	r2, r3, #4
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	4413      	add	r3, r2
 8002348:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800234c:	627b      	str	r3, [r7, #36]	; 0x24
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	881b      	ldrh	r3, [r3, #0]
 8002352:	b29b      	uxth	r3, r3
 8002354:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002358:	b29a      	uxth	r2, r3
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	b29b      	uxth	r3, r3
 8002364:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002368:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800236c:	b29a      	uxth	r2, r3
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	801a      	strh	r2, [r3, #0]
 8002372:	e01a      	b.n	80023aa <HAL_PCD_EP_DB_Transmit+0xfe>
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	785b      	ldrb	r3, [r3, #1]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d116      	bne.n	80023aa <HAL_PCD_EP_DB_Transmit+0xfe>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	633b      	str	r3, [r7, #48]	; 0x30
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002390:	4413      	add	r3, r2
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	011a      	lsls	r2, r3, #4
 800239a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800239c:	4413      	add	r3, r2
 800239e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80023a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023a6:	2200      	movs	r2, #0
 80023a8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	623b      	str	r3, [r7, #32]
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d126      	bne.n	8002406 <HAL_PCD_EP_DB_Transmit+0x15a>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	61bb      	str	r3, [r7, #24]
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	461a      	mov	r2, r3
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	4413      	add	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	011a      	lsls	r2, r3, #4
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	4413      	add	r3, r2
 80023da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80023de:	617b      	str	r3, [r7, #20]
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	881b      	ldrh	r3, [r3, #0]
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023fe:	b29a      	uxth	r2, r3
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	801a      	strh	r2, [r3, #0]
 8002404:	e017      	b.n	8002436 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002406:	68bb      	ldr	r3, [r7, #8]
 8002408:	785b      	ldrb	r3, [r3, #1]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d113      	bne.n	8002436 <HAL_PCD_EP_DB_Transmit+0x18a>
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002416:	b29b      	uxth	r3, r3
 8002418:	461a      	mov	r2, r3
 800241a:	6a3b      	ldr	r3, [r7, #32]
 800241c:	4413      	add	r3, r2
 800241e:	623b      	str	r3, [r7, #32]
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	011a      	lsls	r2, r3, #4
 8002426:	6a3b      	ldr	r3, [r7, #32]
 8002428:	4413      	add	r3, r2
 800242a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	2200      	movs	r2, #0
 8002434:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	4619      	mov	r1, r3
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f005 fb12 	bl	8007a66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002442:	88fb      	ldrh	r3, [r7, #6]
 8002444:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 82d4 	beq.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	461a      	mov	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	4413      	add	r3, r2
 800245c:	881b      	ldrh	r3, [r3, #0]
 800245e:	b29b      	uxth	r3, r3
 8002460:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002464:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002468:	827b      	strh	r3, [r7, #18]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	461a      	mov	r2, r3
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	441a      	add	r2, r3
 8002478:	8a7b      	ldrh	r3, [r7, #18]
 800247a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800247e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002482:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002486:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800248a:	b29b      	uxth	r3, r3
 800248c:	8013      	strh	r3, [r2, #0]
 800248e:	e2b2      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002490:	88fb      	ldrh	r3, [r7, #6]
 8002492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d021      	beq.n	80024de <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	781b      	ldrb	r3, [r3, #0]
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	4413      	add	r3, r2
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	461a      	mov	r2, r3
 80024be:	68bb      	ldr	r3, [r7, #8]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	441a      	add	r2, r3
 80024c6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	f040 8286 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	695a      	ldr	r2, [r3, #20]
 80024ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024f2:	441a      	add	r2, r3
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	69da      	ldr	r2, [r3, #28]
 80024fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002500:	441a      	add	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	6a1a      	ldr	r2, [r3, #32]
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	429a      	cmp	r2, r3
 8002510:	d309      	bcc.n	8002526 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	6a1a      	ldr	r2, [r3, #32]
 800251c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800251e:	1ad2      	subs	r2, r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	621a      	str	r2, [r3, #32]
 8002524:	e015      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	6a1b      	ldr	r3, [r3, #32]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d107      	bne.n	800253e <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800252e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002532:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800253c:	e009      	b.n	8002552 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	6a1b      	ldr	r3, [r3, #32]
 800254a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	785b      	ldrb	r3, [r3, #1]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d155      	bne.n	8002606 <HAL_PCD_EP_DB_Transmit+0x35a>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002568:	b29b      	uxth	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800256e:	4413      	add	r3, r2
 8002570:	63bb      	str	r3, [r7, #56]	; 0x38
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	011a      	lsls	r2, r3, #4
 8002578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800257a:	4413      	add	r3, r2
 800257c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002580:	637b      	str	r3, [r7, #52]	; 0x34
 8002582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002584:	2b00      	cmp	r3, #0
 8002586:	d112      	bne.n	80025ae <HAL_PCD_EP_DB_Transmit+0x302>
 8002588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800258a:	881b      	ldrh	r3, [r3, #0]
 800258c:	b29b      	uxth	r3, r3
 800258e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002592:	b29a      	uxth	r2, r3
 8002594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002596:	801a      	strh	r2, [r3, #0]
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	881b      	ldrh	r3, [r3, #0]
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025aa:	801a      	strh	r2, [r3, #0]
 80025ac:	e047      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x392>
 80025ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b0:	2b3e      	cmp	r3, #62	; 0x3e
 80025b2:	d811      	bhi.n	80025d8 <HAL_PCD_EP_DB_Transmit+0x32c>
 80025b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025b6:	085b      	lsrs	r3, r3, #1
 80025b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d002      	beq.n	80025ca <HAL_PCD_EP_DB_Transmit+0x31e>
 80025c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025c6:	3301      	adds	r3, #1
 80025c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	029b      	lsls	r3, r3, #10
 80025d0:	b29a      	uxth	r2, r3
 80025d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025d4:	801a      	strh	r2, [r3, #0]
 80025d6:	e032      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x392>
 80025d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025da:	095b      	lsrs	r3, r3, #5
 80025dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80025de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d102      	bne.n	80025ee <HAL_PCD_EP_DB_Transmit+0x342>
 80025e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025ea:	3b01      	subs	r3, #1
 80025ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80025ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	b29b      	uxth	r3, r3
 80025f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025fe:	b29a      	uxth	r2, r3
 8002600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002602:	801a      	strh	r2, [r3, #0]
 8002604:	e01b      	b.n	800263e <HAL_PCD_EP_DB_Transmit+0x392>
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	785b      	ldrb	r3, [r3, #1]
 800260a:	2b01      	cmp	r3, #1
 800260c:	d117      	bne.n	800263e <HAL_PCD_EP_DB_Transmit+0x392>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800261c:	b29b      	uxth	r3, r3
 800261e:	461a      	mov	r2, r3
 8002620:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002622:	4413      	add	r3, r2
 8002624:	643b      	str	r3, [r7, #64]	; 0x40
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	011a      	lsls	r2, r3, #4
 800262c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800262e:	4413      	add	r3, r2
 8002630:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002638:	b29a      	uxth	r2, r3
 800263a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800263c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6818      	ldr	r0, [r3, #0]
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6959      	ldr	r1, [r3, #20]
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	891a      	ldrh	r2, [r3, #8]
 800264a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800264c:	b29b      	uxth	r3, r3
 800264e:	f003 fc17 	bl	8005e80 <USB_WritePMA>
 8002652:	e1d0      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265c:	b29b      	uxth	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	00db      	lsls	r3, r3, #3
 8002666:	4413      	add	r3, r2
 8002668:	3306      	adds	r3, #6
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	4413      	add	r3, r2
 8002672:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	699a      	ldr	r2, [r3, #24]
 8002684:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002688:	429a      	cmp	r2, r3
 800268a:	d307      	bcc.n	800269c <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	699a      	ldr	r2, [r3, #24]
 8002690:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002694:	1ad2      	subs	r2, r2, r3
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	619a      	str	r2, [r3, #24]
 800269a:	e002      	b.n	80026a2 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	2200      	movs	r2, #0
 80026a0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	699b      	ldr	r3, [r3, #24]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f040 80c4 	bne.w	8002834 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	785b      	ldrb	r3, [r3, #1]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d126      	bne.n	8002702 <HAL_PCD_EP_DB_Transmit+0x456>
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026c8:	4413      	add	r3, r2
 80026ca:	66fb      	str	r3, [r7, #108]	; 0x6c
 80026cc:	68bb      	ldr	r3, [r7, #8]
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	011a      	lsls	r2, r3, #4
 80026d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026d4:	4413      	add	r3, r2
 80026d6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026da:	66bb      	str	r3, [r7, #104]	; 0x68
 80026dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026de:	881b      	ldrh	r3, [r3, #0]
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ea:	801a      	strh	r2, [r3, #0]
 80026ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ee:	881b      	ldrh	r3, [r3, #0]
 80026f0:	b29b      	uxth	r3, r3
 80026f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80026f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80026fa:	b29a      	uxth	r2, r3
 80026fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026fe:	801a      	strh	r2, [r3, #0]
 8002700:	e01a      	b.n	8002738 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	785b      	ldrb	r3, [r3, #1]
 8002706:	2b01      	cmp	r3, #1
 8002708:	d116      	bne.n	8002738 <HAL_PCD_EP_DB_Transmit+0x48c>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	677b      	str	r3, [r7, #116]	; 0x74
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800271e:	4413      	add	r3, r2
 8002720:	677b      	str	r3, [r7, #116]	; 0x74
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	011a      	lsls	r2, r3, #4
 8002728:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800272a:	4413      	add	r3, r2
 800272c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002730:	673b      	str	r3, [r7, #112]	; 0x70
 8002732:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002734:	2200      	movs	r2, #0
 8002736:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	67bb      	str	r3, [r7, #120]	; 0x78
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	785b      	ldrb	r3, [r3, #1]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d12f      	bne.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002756:	b29b      	uxth	r3, r3
 8002758:	461a      	mov	r2, r3
 800275a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275e:	4413      	add	r3, r2
 8002760:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	011a      	lsls	r2, r3, #4
 800276a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800276e:	4413      	add	r3, r2
 8002770:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002774:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002778:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800277c:	881b      	ldrh	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002784:	b29a      	uxth	r2, r3
 8002786:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002790:	881b      	ldrh	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002798:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279c:	b29a      	uxth	r2, r3
 800279e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027a2:	801a      	strh	r2, [r3, #0]
 80027a4:	e017      	b.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027a6:	68bb      	ldr	r3, [r7, #8]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d113      	bne.n	80027d6 <HAL_PCD_EP_DB_Transmit+0x52a>
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b6:	b29b      	uxth	r3, r3
 80027b8:	461a      	mov	r2, r3
 80027ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027bc:	4413      	add	r3, r2
 80027be:	67bb      	str	r3, [r7, #120]	; 0x78
 80027c0:	68bb      	ldr	r3, [r7, #8]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	011a      	lsls	r2, r3, #4
 80027c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80027c8:	4413      	add	r3, r2
 80027ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80027d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80027d2:	2200      	movs	r2, #0
 80027d4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	4619      	mov	r1, r3
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f005 f942 	bl	8007a66 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80027e2:	88fb      	ldrh	r3, [r7, #6]
 80027e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f040 8104 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	461a      	mov	r2, r3
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	4413      	add	r3, r2
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002804:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002808:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	441a      	add	r2, r3
 800281a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]
 8002832:	e0e0      	b.n	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d121      	bne.n	8002882 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	f040 80b4 	bne.w	80029f6 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002896:	441a      	add	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a4:	441a      	add	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d309      	bcc.n	80028ca <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	621a      	str	r2, [r3, #32]
 80028c8:	e015      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 80028d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028e0:	e009      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	2200      	movs	r2, #0
 80028f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	667b      	str	r3, [r7, #100]	; 0x64
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	785b      	ldrb	r3, [r3, #1]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d155      	bne.n	80029b0 <HAL_PCD_EP_DB_Transmit+0x704>
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	65fb      	str	r3, [r7, #92]	; 0x5c
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002912:	b29b      	uxth	r3, r3
 8002914:	461a      	mov	r2, r3
 8002916:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002918:	4413      	add	r3, r2
 800291a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	011a      	lsls	r2, r3, #4
 8002922:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002924:	4413      	add	r3, r2
 8002926:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800292a:	65bb      	str	r3, [r7, #88]	; 0x58
 800292c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800292e:	2b00      	cmp	r3, #0
 8002930:	d112      	bne.n	8002958 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002934:	881b      	ldrh	r3, [r3, #0]
 8002936:	b29b      	uxth	r3, r3
 8002938:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800293c:	b29a      	uxth	r2, r3
 800293e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002940:	801a      	strh	r2, [r3, #0]
 8002942:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002944:	881b      	ldrh	r3, [r3, #0]
 8002946:	b29b      	uxth	r3, r3
 8002948:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800294c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002950:	b29a      	uxth	r2, r3
 8002952:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002954:	801a      	strh	r2, [r3, #0]
 8002956:	e044      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295a:	2b3e      	cmp	r3, #62	; 0x3e
 800295c:	d811      	bhi.n	8002982 <HAL_PCD_EP_DB_Transmit+0x6d6>
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	657b      	str	r3, [r7, #84]	; 0x54
 8002964:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002966:	f003 0301 	and.w	r3, r3, #1
 800296a:	2b00      	cmp	r3, #0
 800296c:	d002      	beq.n	8002974 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800296e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002970:	3301      	adds	r3, #1
 8002972:	657b      	str	r3, [r7, #84]	; 0x54
 8002974:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002976:	b29b      	uxth	r3, r3
 8002978:	029b      	lsls	r3, r3, #10
 800297a:	b29a      	uxth	r2, r3
 800297c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	e02f      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x736>
 8002982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002984:	095b      	lsrs	r3, r3, #5
 8002986:	657b      	str	r3, [r7, #84]	; 0x54
 8002988:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800298a:	f003 031f 	and.w	r3, r3, #31
 800298e:	2b00      	cmp	r3, #0
 8002990:	d102      	bne.n	8002998 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002992:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002994:	3b01      	subs	r3, #1
 8002996:	657b      	str	r3, [r7, #84]	; 0x54
 8002998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800299a:	b29b      	uxth	r3, r3
 800299c:	029b      	lsls	r3, r3, #10
 800299e:	b29b      	uxth	r3, r3
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e018      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x736>
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d114      	bne.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x736>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029c6:	4413      	add	r3, r2
 80029c8:	667b      	str	r3, [r7, #100]	; 0x64
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	011a      	lsls	r2, r3, #4
 80029d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80029d2:	4413      	add	r3, r2
 80029d4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029d8:	663b      	str	r3, [r7, #96]	; 0x60
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6959      	ldr	r1, [r3, #20]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	895a      	ldrh	r2, [r3, #10]
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f003 fa45 	bl	8005e80 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	4413      	add	r3, r2
 8002a04:	881b      	ldrh	r3, [r3, #0]
 8002a06:	b29b      	uxth	r3, r3
 8002a08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a10:	823b      	strh	r3, [r7, #16]
 8002a12:	8a3b      	ldrh	r3, [r7, #16]
 8002a14:	f083 0310 	eor.w	r3, r3, #16
 8002a18:	823b      	strh	r3, [r7, #16]
 8002a1a:	8a3b      	ldrh	r3, [r7, #16]
 8002a1c:	f083 0320 	eor.w	r3, r3, #32
 8002a20:	823b      	strh	r3, [r7, #16]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	461a      	mov	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	441a      	add	r2, r3
 8002a30:	8a3b      	ldrh	r3, [r7, #16]
 8002a32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002a46:	2300      	movs	r3, #0
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3788      	adds	r7, #136	; 0x88
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b087      	sub	sp, #28
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	607b      	str	r3, [r7, #4]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	817b      	strh	r3, [r7, #10]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002a62:	897b      	ldrh	r3, [r7, #10]
 8002a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00b      	beq.n	8002a86 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a6e:	897b      	ldrh	r3, [r7, #10]
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	1c5a      	adds	r2, r3, #1
 8002a76:	4613      	mov	r3, r2
 8002a78:	009b      	lsls	r3, r3, #2
 8002a7a:	4413      	add	r3, r2
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	4413      	add	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e009      	b.n	8002a9a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a86:	897a      	ldrh	r2, [r7, #10]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	4413      	add	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002a9a:	893b      	ldrh	r3, [r7, #8]
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d107      	bne.n	8002ab0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	80da      	strh	r2, [r3, #6]
 8002aae:	e00b      	b.n	8002ac8 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	b29a      	uxth	r2, r3
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	0c1b      	lsrs	r3, r3, #16
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	371c      	adds	r7, #28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e272      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 8087 	beq.w	8002c02 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002af4:	4b92      	ldr	r3, [pc, #584]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 030c 	and.w	r3, r3, #12
 8002afc:	2b04      	cmp	r3, #4
 8002afe:	d00c      	beq.n	8002b1a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b00:	4b8f      	ldr	r3, [pc, #572]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	f003 030c 	and.w	r3, r3, #12
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d112      	bne.n	8002b32 <HAL_RCC_OscConfig+0x5e>
 8002b0c:	4b8c      	ldr	r3, [pc, #560]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b18:	d10b      	bne.n	8002b32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b1a:	4b89      	ldr	r3, [pc, #548]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d06c      	beq.n	8002c00 <HAL_RCC_OscConfig+0x12c>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d168      	bne.n	8002c00 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e24c      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b3a:	d106      	bne.n	8002b4a <HAL_RCC_OscConfig+0x76>
 8002b3c:	4b80      	ldr	r3, [pc, #512]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a7f      	ldr	r2, [pc, #508]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b46:	6013      	str	r3, [r2, #0]
 8002b48:	e02e      	b.n	8002ba8 <HAL_RCC_OscConfig+0xd4>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b7b      	ldr	r3, [pc, #492]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a7a      	ldr	r2, [pc, #488]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b78      	ldr	r3, [pc, #480]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a77      	ldr	r2, [pc, #476]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e01d      	b.n	8002ba8 <HAL_RCC_OscConfig+0xd4>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b74:	d10c      	bne.n	8002b90 <HAL_RCC_OscConfig+0xbc>
 8002b76:	4b72      	ldr	r3, [pc, #456]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a71      	ldr	r2, [pc, #452]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	4b6f      	ldr	r3, [pc, #444]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a6e      	ldr	r2, [pc, #440]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b8c:	6013      	str	r3, [r2, #0]
 8002b8e:	e00b      	b.n	8002ba8 <HAL_RCC_OscConfig+0xd4>
 8002b90:	4b6b      	ldr	r3, [pc, #428]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a6a      	ldr	r2, [pc, #424]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b96:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b9a:	6013      	str	r3, [r2, #0]
 8002b9c:	4b68      	ldr	r3, [pc, #416]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a67      	ldr	r2, [pc, #412]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ba6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d013      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb0:	f7fe f9b6 	bl	8000f20 <HAL_GetTick>
 8002bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bb8:	f7fe f9b2 	bl	8000f20 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e200      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bca:	4b5d      	ldr	r3, [pc, #372]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0f0      	beq.n	8002bb8 <HAL_RCC_OscConfig+0xe4>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7fe f9a2 	bl	8000f20 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be0:	f7fe f99e 	bl	8000f20 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b64      	cmp	r3, #100	; 0x64
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e1ec      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bf2:	4b53      	ldr	r3, [pc, #332]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x10c>
 8002bfe:	e000      	b.n	8002c02 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d063      	beq.n	8002cd6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c0e:	4b4c      	ldr	r3, [pc, #304]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f003 030c 	and.w	r3, r3, #12
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00b      	beq.n	8002c32 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c1a:	4b49      	ldr	r3, [pc, #292]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 030c 	and.w	r3, r3, #12
 8002c22:	2b08      	cmp	r3, #8
 8002c24:	d11c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x18c>
 8002c26:	4b46      	ldr	r3, [pc, #280]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d116      	bne.n	8002c60 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c32:	4b43      	ldr	r3, [pc, #268]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x176>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	691b      	ldr	r3, [r3, #16]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d001      	beq.n	8002c4a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e1c0      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c4a:	4b3d      	ldr	r3, [pc, #244]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	4939      	ldr	r1, [pc, #228]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5e:	e03a      	b.n	8002cd6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	691b      	ldr	r3, [r3, #16]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d020      	beq.n	8002caa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c68:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCC_OscConfig+0x270>)
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c6e:	f7fe f957 	bl	8000f20 <HAL_GetTick>
 8002c72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c74:	e008      	b.n	8002c88 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c76:	f7fe f953 	bl	8000f20 <HAL_GetTick>
 8002c7a:	4602      	mov	r2, r0
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	1ad3      	subs	r3, r2, r3
 8002c80:	2b02      	cmp	r3, #2
 8002c82:	d901      	bls.n	8002c88 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002c84:	2303      	movs	r3, #3
 8002c86:	e1a1      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c88:	4b2d      	ldr	r3, [pc, #180]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d0f0      	beq.n	8002c76 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c94:	4b2a      	ldr	r3, [pc, #168]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	00db      	lsls	r3, r3, #3
 8002ca2:	4927      	ldr	r1, [pc, #156]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	600b      	str	r3, [r1, #0]
 8002ca8:	e015      	b.n	8002cd6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002caa:	4b26      	ldr	r3, [pc, #152]	; (8002d44 <HAL_RCC_OscConfig+0x270>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cb0:	f7fe f936 	bl	8000f20 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cb8:	f7fe f932 	bl	8000f20 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e180      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	4b1d      	ldr	r3, [pc, #116]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 0308 	and.w	r3, r3, #8
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d03a      	beq.n	8002d58 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d019      	beq.n	8002d1e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cea:	4b17      	ldr	r3, [pc, #92]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cf0:	f7fe f916 	bl	8000f20 <HAL_GetTick>
 8002cf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cf6:	e008      	b.n	8002d0a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cf8:	f7fe f912 	bl	8000f20 <HAL_GetTick>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	1ad3      	subs	r3, r2, r3
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d901      	bls.n	8002d0a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d06:	2303      	movs	r3, #3
 8002d08:	e160      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d0a:	4b0d      	ldr	r3, [pc, #52]	; (8002d40 <HAL_RCC_OscConfig+0x26c>)
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d0f0      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d16:	2001      	movs	r0, #1
 8002d18:	f000 faa6 	bl	8003268 <RCC_Delay>
 8002d1c:	e01c      	b.n	8002d58 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d1e:	4b0a      	ldr	r3, [pc, #40]	; (8002d48 <HAL_RCC_OscConfig+0x274>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d24:	f7fe f8fc 	bl	8000f20 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d2a:	e00f      	b.n	8002d4c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe f8f8 	bl	8000f20 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d908      	bls.n	8002d4c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e146      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000
 8002d44:	42420000 	.word	0x42420000
 8002d48:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d4c:	4b92      	ldr	r3, [pc, #584]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1e9      	bne.n	8002d2c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80a6 	beq.w	8002eb2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d66:	2300      	movs	r3, #0
 8002d68:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d6a:	4b8b      	ldr	r3, [pc, #556]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d76:	4b88      	ldr	r3, [pc, #544]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002d78:	69db      	ldr	r3, [r3, #28]
 8002d7a:	4a87      	ldr	r2, [pc, #540]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d80:	61d3      	str	r3, [r2, #28]
 8002d82:	4b85      	ldr	r3, [pc, #532]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_OscConfig+0x4c8>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d118      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d9e:	4b7f      	ldr	r3, [pc, #508]	; (8002f9c <HAL_RCC_OscConfig+0x4c8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7e      	ldr	r2, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x4c8>)
 8002da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002daa:	f7fe f8b9 	bl	8000f20 <HAL_GetTick>
 8002dae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	e008      	b.n	8002dc4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002db2:	f7fe f8b5 	bl	8000f20 <HAL_GetTick>
 8002db6:	4602      	mov	r2, r0
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	1ad3      	subs	r3, r2, r3
 8002dbc:	2b64      	cmp	r3, #100	; 0x64
 8002dbe:	d901      	bls.n	8002dc4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	e103      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc4:	4b75      	ldr	r3, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x4c8>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d0f0      	beq.n	8002db2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d106      	bne.n	8002de6 <HAL_RCC_OscConfig+0x312>
 8002dd8:	4b6f      	ldr	r3, [pc, #444]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	4a6e      	ldr	r2, [pc, #440]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002dde:	f043 0301 	orr.w	r3, r3, #1
 8002de2:	6213      	str	r3, [r2, #32]
 8002de4:	e02d      	b.n	8002e42 <HAL_RCC_OscConfig+0x36e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d10c      	bne.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002dee:	4b6a      	ldr	r3, [pc, #424]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	4a69      	ldr	r2, [pc, #420]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002df4:	f023 0301 	bic.w	r3, r3, #1
 8002df8:	6213      	str	r3, [r2, #32]
 8002dfa:	4b67      	ldr	r3, [pc, #412]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	4a66      	ldr	r2, [pc, #408]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e00:	f023 0304 	bic.w	r3, r3, #4
 8002e04:	6213      	str	r3, [r2, #32]
 8002e06:	e01c      	b.n	8002e42 <HAL_RCC_OscConfig+0x36e>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	2b05      	cmp	r3, #5
 8002e0e:	d10c      	bne.n	8002e2a <HAL_RCC_OscConfig+0x356>
 8002e10:	4b61      	ldr	r3, [pc, #388]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e12:	6a1b      	ldr	r3, [r3, #32]
 8002e14:	4a60      	ldr	r2, [pc, #384]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	6213      	str	r3, [r2, #32]
 8002e1c:	4b5e      	ldr	r3, [pc, #376]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e1e:	6a1b      	ldr	r3, [r3, #32]
 8002e20:	4a5d      	ldr	r2, [pc, #372]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e22:	f043 0301 	orr.w	r3, r3, #1
 8002e26:	6213      	str	r3, [r2, #32]
 8002e28:	e00b      	b.n	8002e42 <HAL_RCC_OscConfig+0x36e>
 8002e2a:	4b5b      	ldr	r3, [pc, #364]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e2c:	6a1b      	ldr	r3, [r3, #32]
 8002e2e:	4a5a      	ldr	r2, [pc, #360]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	6213      	str	r3, [r2, #32]
 8002e36:	4b58      	ldr	r3, [pc, #352]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e38:	6a1b      	ldr	r3, [r3, #32]
 8002e3a:	4a57      	ldr	r2, [pc, #348]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e3c:	f023 0304 	bic.w	r3, r3, #4
 8002e40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d015      	beq.n	8002e76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e4a:	f7fe f869 	bl	8000f20 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e50:	e00a      	b.n	8002e68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e52:	f7fe f865 	bl	8000f20 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d901      	bls.n	8002e68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e0b1      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e68:	4b4b      	ldr	r3, [pc, #300]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	6a1b      	ldr	r3, [r3, #32]
 8002e6c:	f003 0302 	and.w	r3, r3, #2
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d0ee      	beq.n	8002e52 <HAL_RCC_OscConfig+0x37e>
 8002e74:	e014      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e76:	f7fe f853 	bl	8000f20 <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e7c:	e00a      	b.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7e:	f7fe f84f 	bl	8000f20 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e09b      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e94:	4b40      	ldr	r3, [pc, #256]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002e96:	6a1b      	ldr	r3, [r3, #32]
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ee      	bne.n	8002e7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002ea0:	7dfb      	ldrb	r3, [r7, #23]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d105      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ea6:	4b3c      	ldr	r3, [pc, #240]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	4a3b      	ldr	r2, [pc, #236]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	f000 8087 	beq.w	8002fca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ebc:	4b36      	ldr	r3, [pc, #216]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f003 030c 	and.w	r3, r3, #12
 8002ec4:	2b08      	cmp	r3, #8
 8002ec6:	d061      	beq.n	8002f8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	2b02      	cmp	r3, #2
 8002ece:	d146      	bne.n	8002f5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ed0:	4b33      	ldr	r3, [pc, #204]	; (8002fa0 <HAL_RCC_OscConfig+0x4cc>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed6:	f7fe f823 	bl	8000f20 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002edc:	e008      	b.n	8002ef0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ede:	f7fe f81f 	bl	8000f20 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d901      	bls.n	8002ef0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e06d      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d1f0      	bne.n	8002ede <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a1b      	ldr	r3, [r3, #32]
 8002f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f04:	d108      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f06:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4921      	ldr	r1, [pc, #132]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f18:	4b1f      	ldr	r3, [pc, #124]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a19      	ldr	r1, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f28:	430b      	orrs	r3, r1
 8002f2a:	491b      	ldr	r1, [pc, #108]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f30:	4b1b      	ldr	r3, [pc, #108]	; (8002fa0 <HAL_RCC_OscConfig+0x4cc>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f36:	f7fd fff3 	bl	8000f20 <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f3e:	f7fd ffef 	bl	8000f20 <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e03d      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f50:	4b11      	ldr	r3, [pc, #68]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x46a>
 8002f5c:	e035      	b.n	8002fca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <HAL_RCC_OscConfig+0x4cc>)
 8002f60:	2200      	movs	r2, #0
 8002f62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f64:	f7fd ffdc 	bl	8000f20 <HAL_GetTick>
 8002f68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f6a:	e008      	b.n	8002f7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f6c:	f7fd ffd8 	bl	8000f20 <HAL_GetTick>
 8002f70:	4602      	mov	r2, r0
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e026      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f7e:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <HAL_RCC_OscConfig+0x4c4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d1f0      	bne.n	8002f6c <HAL_RCC_OscConfig+0x498>
 8002f8a:	e01e      	b.n	8002fca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	69db      	ldr	r3, [r3, #28]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e019      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
 8002f98:	40021000 	.word	0x40021000
 8002f9c:	40007000 	.word	0x40007000
 8002fa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002fa4:	4b0b      	ldr	r3, [pc, #44]	; (8002fd4 <HAL_RCC_OscConfig+0x500>)
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a1b      	ldr	r3, [r3, #32]
 8002fb4:	429a      	cmp	r2, r3
 8002fb6:	d106      	bne.n	8002fc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e000      	b.n	8002fcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3718      	adds	r7, #24
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	40021000 	.word	0x40021000

08002fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0d0      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d910      	bls.n	800301c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b67      	ldr	r3, [pc, #412]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4965      	ldr	r1, [pc, #404]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b63      	ldr	r3, [pc, #396]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d001      	beq.n	800301c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e0b8      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d020      	beq.n	800306a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003034:	4b59      	ldr	r3, [pc, #356]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	4a58      	ldr	r2, [pc, #352]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800303e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 0308 	and.w	r3, r3, #8
 8003048:	2b00      	cmp	r3, #0
 800304a:	d005      	beq.n	8003058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	4a52      	ldr	r2, [pc, #328]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b50      	ldr	r3, [pc, #320]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	494d      	ldr	r1, [pc, #308]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003066:	4313      	orrs	r3, r2
 8003068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d040      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b01      	cmp	r3, #1
 800307c:	d107      	bne.n	800308e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b47      	ldr	r3, [pc, #284]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d115      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	e07f      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	4b41      	ldr	r3, [pc, #260]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e073      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	4b3d      	ldr	r3, [pc, #244]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e06b      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b6:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4936      	ldr	r1, [pc, #216]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c8:	f7fd ff2a 	bl	8000f20 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7fd ff26 	bl	8000f20 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	; 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e053      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b2d      	ldr	r3, [pc, #180]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 020c 	and.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1eb      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b27      	ldr	r3, [pc, #156]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d210      	bcs.n	8003128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b24      	ldr	r3, [pc, #144]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f023 0207 	bic.w	r2, r3, #7
 800310e:	4922      	ldr	r1, [pc, #136]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	4313      	orrs	r3, r2
 8003114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003116:	4b20      	ldr	r3, [pc, #128]	; (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0307 	and.w	r3, r3, #7
 800311e:	683a      	ldr	r2, [r7, #0]
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e032      	b.n	800318e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	d008      	beq.n	8003146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003134:	4b19      	ldr	r3, [pc, #100]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	4916      	ldr	r1, [pc, #88]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003142:	4313      	orrs	r3, r2
 8003144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d009      	beq.n	8003166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003152:	4b12      	ldr	r3, [pc, #72]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	490e      	ldr	r1, [pc, #56]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003162:	4313      	orrs	r3, r2
 8003164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003166:	f000 f821 	bl	80031ac <HAL_RCC_GetSysClockFreq>
 800316a:	4602      	mov	r2, r0
 800316c:	4b0b      	ldr	r3, [pc, #44]	; (800319c <HAL_RCC_ClockConfig+0x1c4>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	091b      	lsrs	r3, r3, #4
 8003172:	f003 030f 	and.w	r3, r3, #15
 8003176:	490a      	ldr	r1, [pc, #40]	; (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 8003178:	5ccb      	ldrb	r3, [r1, r3]
 800317a:	fa22 f303 	lsr.w	r3, r2, r3
 800317e:	4a09      	ldr	r2, [pc, #36]	; (80031a4 <HAL_RCC_ClockConfig+0x1cc>)
 8003180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003182:	4b09      	ldr	r3, [pc, #36]	; (80031a8 <HAL_RCC_ClockConfig+0x1d0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4618      	mov	r0, r3
 8003188:	f7fd fe9a 	bl	8000ec0 <HAL_InitTick>

  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3710      	adds	r7, #16
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40022000 	.word	0x40022000
 800319c:	40021000 	.word	0x40021000
 80031a0:	080088f0 	.word	0x080088f0
 80031a4:	20000000 	.word	0x20000000
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031ac:	b490      	push	{r4, r7}
 80031ae:	b08a      	sub	sp, #40	; 0x28
 80031b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80031b2:	4b29      	ldr	r3, [pc, #164]	; (8003258 <HAL_RCC_GetSysClockFreq+0xac>)
 80031b4:	1d3c      	adds	r4, r7, #4
 80031b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80031b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80031bc:	f240 2301 	movw	r3, #513	; 0x201
 80031c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80031c2:	2300      	movs	r3, #0
 80031c4:	61fb      	str	r3, [r7, #28]
 80031c6:	2300      	movs	r3, #0
 80031c8:	61bb      	str	r3, [r7, #24]
 80031ca:	2300      	movs	r3, #0
 80031cc:	627b      	str	r3, [r7, #36]	; 0x24
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80031d6:	4b21      	ldr	r3, [pc, #132]	; (800325c <HAL_RCC_GetSysClockFreq+0xb0>)
 80031d8:	685b      	ldr	r3, [r3, #4]
 80031da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d002      	beq.n	80031ec <HAL_RCC_GetSysClockFreq+0x40>
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d003      	beq.n	80031f2 <HAL_RCC_GetSysClockFreq+0x46>
 80031ea:	e02b      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80031ec:	4b1c      	ldr	r3, [pc, #112]	; (8003260 <HAL_RCC_GetSysClockFreq+0xb4>)
 80031ee:	623b      	str	r3, [r7, #32]
      break;
 80031f0:	e02b      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	0c9b      	lsrs	r3, r3, #18
 80031f6:	f003 030f 	and.w	r3, r3, #15
 80031fa:	3328      	adds	r3, #40	; 0x28
 80031fc:	443b      	add	r3, r7
 80031fe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003202:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d012      	beq.n	8003234 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800320e:	4b13      	ldr	r3, [pc, #76]	; (800325c <HAL_RCC_GetSysClockFreq+0xb0>)
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	0c5b      	lsrs	r3, r3, #17
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	3328      	adds	r3, #40	; 0x28
 800321a:	443b      	add	r3, r7
 800321c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003220:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	4a0e      	ldr	r2, [pc, #56]	; (8003260 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003226:	fb03 f202 	mul.w	r2, r3, r2
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003230:	627b      	str	r3, [r7, #36]	; 0x24
 8003232:	e004      	b.n	800323e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	4a0b      	ldr	r2, [pc, #44]	; (8003264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003238:	fb02 f303 	mul.w	r3, r2, r3
 800323c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800323e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003240:	623b      	str	r3, [r7, #32]
      break;
 8003242:	e002      	b.n	800324a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003246:	623b      	str	r3, [r7, #32]
      break;
 8003248:	bf00      	nop
    }
  }
  return sysclockfreq;
 800324a:	6a3b      	ldr	r3, [r7, #32]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3728      	adds	r7, #40	; 0x28
 8003250:	46bd      	mov	sp, r7
 8003252:	bc90      	pop	{r4, r7}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	08008898 	.word	0x08008898
 800325c:	40021000 	.word	0x40021000
 8003260:	007a1200 	.word	0x007a1200
 8003264:	003d0900 	.word	0x003d0900

08003268 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003268:	b480      	push	{r7}
 800326a:	b085      	sub	sp, #20
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003270:	4b0a      	ldr	r3, [pc, #40]	; (800329c <RCC_Delay+0x34>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a0a      	ldr	r2, [pc, #40]	; (80032a0 <RCC_Delay+0x38>)
 8003276:	fba2 2303 	umull	r2, r3, r2, r3
 800327a:	0a5b      	lsrs	r3, r3, #9
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	fb02 f303 	mul.w	r3, r2, r3
 8003282:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003284:	bf00      	nop
  }
  while (Delay --);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	60fa      	str	r2, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f9      	bne.n	8003284 <RCC_Delay+0x1c>
}
 8003290:	bf00      	nop
 8003292:	bf00      	nop
 8003294:	3714      	adds	r7, #20
 8003296:	46bd      	mov	sp, r7
 8003298:	bc80      	pop	{r7}
 800329a:	4770      	bx	lr
 800329c:	20000000 	.word	0x20000000
 80032a0:	10624dd3 	.word	0x10624dd3

080032a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b086      	sub	sp, #24
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80032ac:	2300      	movs	r3, #0
 80032ae:	613b      	str	r3, [r7, #16]
 80032b0:	2300      	movs	r3, #0
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0301 	and.w	r3, r3, #1
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d07d      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032c4:	4b4f      	ldr	r3, [pc, #316]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d10d      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032d0:	4b4c      	ldr	r3, [pc, #304]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d2:	69db      	ldr	r3, [r3, #28]
 80032d4:	4a4b      	ldr	r2, [pc, #300]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032da:	61d3      	str	r3, [r2, #28]
 80032dc:	4b49      	ldr	r3, [pc, #292]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032de:	69db      	ldr	r3, [r3, #28]
 80032e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e4:	60bb      	str	r3, [r7, #8]
 80032e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ec:	4b46      	ldr	r3, [pc, #280]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d118      	bne.n	800332a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f8:	4b43      	ldr	r3, [pc, #268]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a42      	ldr	r2, [pc, #264]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80032fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003304:	f7fd fe0c 	bl	8000f20 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800330a:	e008      	b.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800330c:	f7fd fe08 	bl	8000f20 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b64      	cmp	r3, #100	; 0x64
 8003318:	d901      	bls.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06d      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331e:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332c:	6a1b      	ldr	r3, [r3, #32]
 800332e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003332:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d02e      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003342:	68fa      	ldr	r2, [r7, #12]
 8003344:	429a      	cmp	r2, r3
 8003346:	d027      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003348:	4b2e      	ldr	r3, [pc, #184]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003350:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003352:	4b2e      	ldr	r3, [pc, #184]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003354:	2201      	movs	r2, #1
 8003356:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003358:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800335a:	2200      	movs	r2, #0
 800335c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d014      	beq.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800336e:	f7fd fdd7 	bl	8000f20 <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003374:	e00a      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003376:	f7fd fdd3 	bl	8000f20 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	f241 3288 	movw	r2, #5000	; 0x1388
 8003384:	4293      	cmp	r3, r2
 8003386:	d901      	bls.n	800338c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e036      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800338c:	4b1d      	ldr	r3, [pc, #116]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800338e:	6a1b      	ldr	r3, [r3, #32]
 8003390:	f003 0302 	and.w	r3, r3, #2
 8003394:	2b00      	cmp	r3, #0
 8003396:	d0ee      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003398:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800339a:	6a1b      	ldr	r3, [r3, #32]
 800339c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	4917      	ldr	r1, [pc, #92]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033aa:	7dfb      	ldrb	r3, [r7, #23]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033b0:	4b14      	ldr	r3, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	4a13      	ldr	r2, [pc, #76]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ba:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80033c8:	4b0e      	ldr	r3, [pc, #56]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	490b      	ldr	r1, [pc, #44]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0310 	and.w	r3, r3, #16
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d008      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80033e6:	4b07      	ldr	r3, [pc, #28]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
 8003408:	40007000 	.word	0x40007000
 800340c:	42420440 	.word	0x42420440

08003410 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003410:	b084      	sub	sp, #16
 8003412:	b480      	push	{r7}
 8003414:	b083      	sub	sp, #12
 8003416:	af00      	add	r7, sp, #0
 8003418:	6078      	str	r0, [r7, #4]
 800341a:	f107 0014 	add.w	r0, r7, #20
 800341e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003422:	2300      	movs	r3, #0
}
 8003424:	4618      	mov	r0, r3
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	b004      	add	sp, #16
 800342e:	4770      	bx	lr

08003430 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003440:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003444:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	b29a      	uxth	r2, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	4618      	mov	r0, r3
 8003454:	3714      	adds	r7, #20
 8003456:	46bd      	mov	sp, r7
 8003458:	bc80      	pop	{r7}
 800345a:	4770      	bx	lr

0800345c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003464:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003468:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003470:	b29a      	uxth	r2, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	b29b      	uxth	r3, r3
 8003476:	43db      	mvns	r3, r3
 8003478:	b29b      	uxth	r3, r3
 800347a:	4013      	ands	r3, r2
 800347c:	b29a      	uxth	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	bc80      	pop	{r7}
 800348e:	4770      	bx	lr

08003490 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
 8003498:	460b      	mov	r3, r1
 800349a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	370c      	adds	r7, #12
 80034a2:	46bd      	mov	sp, r7
 80034a4:	bc80      	pop	{r7}
 80034a6:	4770      	bx	lr

080034a8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80034a8:	b084      	sub	sp, #16
 80034aa:	b480      	push	{r7}
 80034ac:	b083      	sub	sp, #12
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	f107 0014 	add.w	r0, r7, #20
 80034b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	370c      	adds	r7, #12
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bc80      	pop	{r7}
 80034e4:	b004      	add	sp, #16
 80034e6:	4770      	bx	lr

080034e8 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b09b      	sub	sp, #108	; 0x6c
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	4413      	add	r3, r2
 8003502:	881b      	ldrh	r3, [r3, #0]
 8003504:	b29b      	uxth	r3, r3
 8003506:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	78db      	ldrb	r3, [r3, #3]
 8003516:	2b03      	cmp	r3, #3
 8003518:	d81f      	bhi.n	800355a <USB_ActivateEndpoint+0x72>
 800351a:	a201      	add	r2, pc, #4	; (adr r2, 8003520 <USB_ActivateEndpoint+0x38>)
 800351c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003520:	08003531 	.word	0x08003531
 8003524:	0800354d 	.word	0x0800354d
 8003528:	08003563 	.word	0x08003563
 800352c:	0800353f 	.word	0x0800353f
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003530:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003534:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003538:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800353c:	e012      	b.n	8003564 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800353e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003542:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003546:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 800354a:	e00b      	b.n	8003564 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 800354c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003550:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003554:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003558:	e004      	b.n	8003564 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003560:	e000      	b.n	8003564 <USB_ActivateEndpoint+0x7c>
      break;
 8003562:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	441a      	add	r2, r3
 800356e:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003572:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003576:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800357a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800357e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003582:	b29b      	uxth	r3, r3
 8003584:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	b29b      	uxth	r3, r3
 8003594:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359c:	b29a      	uxth	r2, r3
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	b29b      	uxth	r3, r3
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	781b      	ldrb	r3, [r3, #0]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	441a      	add	r2, r3
 80035b4:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80035b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80035bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80035c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	7b1b      	ldrb	r3, [r3, #12]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 8149 	bne.w	8003868 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	785b      	ldrb	r3, [r3, #1]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	f000 8084 	beq.w	80036e8 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	617b      	str	r3, [r7, #20]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	4413      	add	r3, r2
 80035f2:	617b      	str	r3, [r7, #20]
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	011a      	lsls	r2, r3, #4
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	4413      	add	r3, r2
 80035fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	88db      	ldrh	r3, [r3, #6]
 8003608:	085b      	lsrs	r3, r3, #1
 800360a:	b29b      	uxth	r3, r3
 800360c:	005b      	lsls	r3, r3, #1
 800360e:	b29a      	uxth	r2, r3
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003614:	687a      	ldr	r2, [r7, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	881b      	ldrh	r3, [r3, #0]
 8003620:	81fb      	strh	r3, [r7, #14]
 8003622:	89fb      	ldrh	r3, [r7, #14]
 8003624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01b      	beq.n	8003664 <USB_ActivateEndpoint+0x17c>
 800362c:	687a      	ldr	r2, [r7, #4]
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	009b      	lsls	r3, r3, #2
 8003634:	4413      	add	r3, r2
 8003636:	881b      	ldrh	r3, [r3, #0]
 8003638:	b29b      	uxth	r3, r3
 800363a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800363e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003642:	81bb      	strh	r3, [r7, #12]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	441a      	add	r2, r3
 800364e:	89bb      	ldrh	r3, [r7, #12]
 8003650:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003654:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003658:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800365c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003660:	b29b      	uxth	r3, r3
 8003662:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	78db      	ldrb	r3, [r3, #3]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d020      	beq.n	80036ae <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	b29b      	uxth	r3, r3
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003682:	813b      	strh	r3, [r7, #8]
 8003684:	893b      	ldrh	r3, [r7, #8]
 8003686:	f083 0320 	eor.w	r3, r3, #32
 800368a:	813b      	strh	r3, [r7, #8]
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	441a      	add	r2, r3
 8003696:	893b      	ldrh	r3, [r7, #8]
 8003698:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800369c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036a8:	b29b      	uxth	r3, r3
 80036aa:	8013      	strh	r3, [r2, #0]
 80036ac:	e27f      	b.n	8003bae <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	4413      	add	r3, r2
 80036b8:	881b      	ldrh	r3, [r3, #0]
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80036c4:	817b      	strh	r3, [r7, #10]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	441a      	add	r2, r3
 80036d0:	897b      	ldrh	r3, [r7, #10]
 80036d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	8013      	strh	r3, [r2, #0]
 80036e6:	e262      	b.n	8003bae <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80036f2:	b29b      	uxth	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036f8:	4413      	add	r3, r2
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	011a      	lsls	r2, r3, #4
 8003702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003704:	4413      	add	r3, r2
 8003706:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800370a:	62bb      	str	r3, [r7, #40]	; 0x28
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	88db      	ldrh	r3, [r3, #6]
 8003710:	085b      	lsrs	r3, r3, #1
 8003712:	b29b      	uxth	r3, r3
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800371a:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	627b      	str	r3, [r7, #36]	; 0x24
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003726:	b29b      	uxth	r3, r3
 8003728:	461a      	mov	r2, r3
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	4413      	add	r3, r2
 800372e:	627b      	str	r3, [r7, #36]	; 0x24
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	011a      	lsls	r2, r3, #4
 8003736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003738:	4413      	add	r3, r2
 800373a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800373e:	623b      	str	r3, [r7, #32]
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	691b      	ldr	r3, [r3, #16]
 8003744:	2b00      	cmp	r3, #0
 8003746:	d112      	bne.n	800376e <USB_ActivateEndpoint+0x286>
 8003748:	6a3b      	ldr	r3, [r7, #32]
 800374a:	881b      	ldrh	r3, [r3, #0]
 800374c:	b29b      	uxth	r3, r3
 800374e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003752:	b29a      	uxth	r2, r3
 8003754:	6a3b      	ldr	r3, [r7, #32]
 8003756:	801a      	strh	r2, [r3, #0]
 8003758:	6a3b      	ldr	r3, [r7, #32]
 800375a:	881b      	ldrh	r3, [r3, #0]
 800375c:	b29b      	uxth	r3, r3
 800375e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003762:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003766:	b29a      	uxth	r2, r3
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	801a      	strh	r2, [r3, #0]
 800376c:	e02f      	b.n	80037ce <USB_ActivateEndpoint+0x2e6>
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	2b3e      	cmp	r3, #62	; 0x3e
 8003774:	d813      	bhi.n	800379e <USB_ActivateEndpoint+0x2b6>
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	085b      	lsrs	r3, r3, #1
 800377c:	663b      	str	r3, [r7, #96]	; 0x60
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	691b      	ldr	r3, [r3, #16]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <USB_ActivateEndpoint+0x2a8>
 800378a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378c:	3301      	adds	r3, #1
 800378e:	663b      	str	r3, [r7, #96]	; 0x60
 8003790:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003792:	b29b      	uxth	r3, r3
 8003794:	029b      	lsls	r3, r3, #10
 8003796:	b29a      	uxth	r2, r3
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	801a      	strh	r2, [r3, #0]
 800379c:	e017      	b.n	80037ce <USB_ActivateEndpoint+0x2e6>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	095b      	lsrs	r3, r3, #5
 80037a4:	663b      	str	r3, [r7, #96]	; 0x60
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d102      	bne.n	80037b8 <USB_ActivateEndpoint+0x2d0>
 80037b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037b4:	3b01      	subs	r3, #1
 80037b6:	663b      	str	r3, [r7, #96]	; 0x60
 80037b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	029b      	lsls	r3, r3, #10
 80037be:	b29b      	uxth	r3, r3
 80037c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80037c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	83fb      	strh	r3, [r7, #30]
 80037dc:	8bfb      	ldrh	r3, [r7, #30]
 80037de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01b      	beq.n	800381e <USB_ActivateEndpoint+0x336>
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	4413      	add	r3, r2
 80037f0:	881b      	ldrh	r3, [r3, #0]
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037fc:	83bb      	strh	r3, [r7, #28]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	781b      	ldrb	r3, [r3, #0]
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	441a      	add	r2, r3
 8003808:	8bbb      	ldrh	r3, [r7, #28]
 800380a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800380e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003812:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003816:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800381a:	b29b      	uxth	r3, r3
 800381c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800381e:	687a      	ldr	r2, [r7, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	4413      	add	r3, r2
 8003828:	881b      	ldrh	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003830:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003834:	837b      	strh	r3, [r7, #26]
 8003836:	8b7b      	ldrh	r3, [r7, #26]
 8003838:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800383c:	837b      	strh	r3, [r7, #26]
 800383e:	8b7b      	ldrh	r3, [r7, #26]
 8003840:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003844:	837b      	strh	r3, [r7, #26]
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	441a      	add	r2, r3
 8003850:	8b7b      	ldrh	r3, [r7, #26]
 8003852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800385a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800385e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003862:	b29b      	uxth	r3, r3
 8003864:	8013      	strh	r3, [r2, #0]
 8003866:	e1a2      	b.n	8003bae <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	4413      	add	r3, r2
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	b29b      	uxth	r3, r3
 8003876:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800387a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800387e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	441a      	add	r2, r3
 800388c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003898:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800389c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	65bb      	str	r3, [r7, #88]	; 0x58
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038b4:	4413      	add	r3, r2
 80038b6:	65bb      	str	r3, [r7, #88]	; 0x58
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	781b      	ldrb	r3, [r3, #0]
 80038bc:	011a      	lsls	r2, r3, #4
 80038be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80038c0:	4413      	add	r3, r2
 80038c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80038c6:	657b      	str	r3, [r7, #84]	; 0x54
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	891b      	ldrh	r3, [r3, #8]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	005b      	lsls	r3, r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	653b      	str	r3, [r7, #80]	; 0x50
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	461a      	mov	r2, r3
 80038e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038e8:	4413      	add	r3, r2
 80038ea:	653b      	str	r3, [r7, #80]	; 0x50
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	011a      	lsls	r2, r3, #4
 80038f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80038fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	895b      	ldrh	r3, [r3, #10]
 8003900:	085b      	lsrs	r3, r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	005b      	lsls	r3, r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	785b      	ldrb	r3, [r3, #1]
 8003910:	2b00      	cmp	r3, #0
 8003912:	f040 8091 	bne.w	8003a38 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	881b      	ldrh	r3, [r3, #0]
 8003922:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003924:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d01b      	beq.n	8003966 <USB_ActivateEndpoint+0x47e>
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	881b      	ldrh	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003940:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003944:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	441a      	add	r2, r3
 8003950:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003952:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003956:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800395a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800395e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003962:	b29b      	uxth	r3, r3
 8003964:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4413      	add	r3, r2
 8003970:	881b      	ldrh	r3, [r3, #0]
 8003972:	873b      	strh	r3, [r7, #56]	; 0x38
 8003974:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01b      	beq.n	80039b6 <USB_ActivateEndpoint+0x4ce>
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	4413      	add	r3, r2
 8003988:	881b      	ldrh	r3, [r3, #0]
 800398a:	b29b      	uxth	r3, r3
 800398c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003990:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003994:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003996:	687a      	ldr	r2, [r7, #4]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	441a      	add	r2, r3
 80039a0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80039a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ae:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	881b      	ldrh	r3, [r3, #0]
 80039c2:	b29b      	uxth	r3, r3
 80039c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039cc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039ce:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039d0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039d4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039d6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039dc:	86bb      	strh	r3, [r7, #52]	; 0x34
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	441a      	add	r2, r3
 80039e8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80039ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80039fe:	687a      	ldr	r2, [r7, #4]
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	4413      	add	r3, r2
 8003a08:	881b      	ldrh	r3, [r3, #0]
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a14:	867b      	strh	r3, [r7, #50]	; 0x32
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	441a      	add	r2, r3
 8003a20:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003a22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	8013      	strh	r3, [r2, #0]
 8003a36:	e0ba      	b.n	8003bae <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a38:	687a      	ldr	r2, [r7, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4413      	add	r3, r2
 8003a42:	881b      	ldrh	r3, [r3, #0]
 8003a44:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003a48:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003a4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d01d      	beq.n	8003a90 <USB_ActivateEndpoint+0x5a8>
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a6a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	009b      	lsls	r3, r3, #2
 8003a76:	441a      	add	r2, r3
 8003a78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003a7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a8c:	b29b      	uxth	r3, r3
 8003a8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	4413      	add	r3, r2
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003aa0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01d      	beq.n	8003ae8 <USB_ActivateEndpoint+0x600>
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	881b      	ldrh	r3, [r3, #0]
 8003ab8:	b29b      	uxth	r3, r3
 8003aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003abe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	441a      	add	r2, r3
 8003ad0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003ad4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ad8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ae0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	78db      	ldrb	r3, [r3, #3]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d024      	beq.n	8003b3a <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	009b      	lsls	r3, r3, #2
 8003af8:	4413      	add	r3, r2
 8003afa:	881b      	ldrh	r3, [r3, #0]
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b06:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b0a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b0e:	f083 0320 	eor.w	r3, r3, #32
 8003b12:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	441a      	add	r2, r3
 8003b20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003b24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	8013      	strh	r3, [r2, #0]
 8003b38:	e01d      	b.n	8003b76 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	009b      	lsls	r3, r3, #2
 8003b42:	4413      	add	r3, r2
 8003b44:	881b      	ldrh	r3, [r3, #0]
 8003b46:	b29b      	uxth	r3, r3
 8003b48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b4c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b50:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	441a      	add	r2, r3
 8003b5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003b62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	4413      	add	r3, r2
 8003b80:	881b      	ldrh	r3, [r3, #0]
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b88:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b8c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	441a      	add	r2, r3
 8003b98:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003b9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ba2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ba6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003bae:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	376c      	adds	r7, #108	; 0x6c
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr

08003bbc <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b08d      	sub	sp, #52	; 0x34
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
 8003bc4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	7b1b      	ldrb	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	f040 808e 	bne.w	8003cec <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	785b      	ldrb	r3, [r3, #1]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d044      	beq.n	8003c62 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bd8:	687a      	ldr	r2, [r7, #4]
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	81bb      	strh	r3, [r7, #12]
 8003be6:	89bb      	ldrh	r3, [r7, #12]
 8003be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d01b      	beq.n	8003c28 <USB_DeactivateEndpoint+0x6c>
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	781b      	ldrb	r3, [r3, #0]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	881b      	ldrh	r3, [r3, #0]
 8003bfc:	b29b      	uxth	r3, r3
 8003bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c06:	817b      	strh	r3, [r7, #10]
 8003c08:	687a      	ldr	r2, [r7, #4]
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	781b      	ldrb	r3, [r3, #0]
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	441a      	add	r2, r3
 8003c12:	897b      	ldrh	r3, [r7, #10]
 8003c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4413      	add	r3, r2
 8003c32:	881b      	ldrh	r3, [r3, #0]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c3e:	813b      	strh	r3, [r7, #8]
 8003c40:	687a      	ldr	r2, [r7, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	441a      	add	r2, r3
 8003c4a:	893b      	ldrh	r3, [r7, #8]
 8003c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c5c:	b29b      	uxth	r3, r3
 8003c5e:	8013      	strh	r3, [r2, #0]
 8003c60:	e192      	b.n	8003f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	781b      	ldrb	r3, [r3, #0]
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	4413      	add	r3, r2
 8003c6c:	881b      	ldrh	r3, [r3, #0]
 8003c6e:	827b      	strh	r3, [r7, #18]
 8003c70:	8a7b      	ldrh	r3, [r7, #18]
 8003c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d01b      	beq.n	8003cb2 <USB_DeactivateEndpoint+0xf6>
 8003c7a:	687a      	ldr	r2, [r7, #4]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	4413      	add	r3, r2
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	823b      	strh	r3, [r7, #16]
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	441a      	add	r2, r3
 8003c9c:	8a3b      	ldrh	r3, [r7, #16]
 8003c9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ca2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ca6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003caa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	781b      	ldrb	r3, [r3, #0]
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	4413      	add	r3, r2
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cc8:	81fb      	strh	r3, [r7, #14]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	441a      	add	r2, r3
 8003cd4:	89fb      	ldrh	r3, [r7, #14]
 8003cd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ce2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	8013      	strh	r3, [r2, #0]
 8003cea:	e14d      	b.n	8003f88 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	785b      	ldrb	r3, [r3, #1]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	f040 80a5 	bne.w	8003e40 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	881b      	ldrh	r3, [r3, #0]
 8003d02:	843b      	strh	r3, [r7, #32]
 8003d04:	8c3b      	ldrh	r3, [r7, #32]
 8003d06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d01b      	beq.n	8003d46 <USB_DeactivateEndpoint+0x18a>
 8003d0e:	687a      	ldr	r2, [r7, #4]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	4413      	add	r3, r2
 8003d18:	881b      	ldrh	r3, [r3, #0]
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d24:	83fb      	strh	r3, [r7, #30]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	441a      	add	r2, r3
 8003d30:	8bfb      	ldrh	r3, [r7, #30]
 8003d32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d3a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d42:	b29b      	uxth	r3, r3
 8003d44:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	83bb      	strh	r3, [r7, #28]
 8003d54:	8bbb      	ldrh	r3, [r7, #28]
 8003d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d01b      	beq.n	8003d96 <USB_DeactivateEndpoint+0x1da>
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	4413      	add	r3, r2
 8003d68:	881b      	ldrh	r3, [r3, #0]
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d74:	837b      	strh	r3, [r7, #26]
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	441a      	add	r2, r3
 8003d80:	8b7b      	ldrh	r3, [r7, #26]
 8003d82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	833b      	strh	r3, [r7, #24]
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	8b3b      	ldrh	r3, [r7, #24]
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	82fb      	strh	r3, [r7, #22]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	441a      	add	r2, r3
 8003df0:	8afb      	ldrh	r3, [r7, #22]
 8003df2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003df6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	4413      	add	r3, r2
 8003e10:	881b      	ldrh	r3, [r3, #0]
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e1c:	82bb      	strh	r3, [r7, #20]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	441a      	add	r2, r3
 8003e28:	8abb      	ldrh	r3, [r7, #20]
 8003e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e3a:	b29b      	uxth	r3, r3
 8003e3c:	8013      	strh	r3, [r2, #0]
 8003e3e:	e0a3      	b.n	8003f88 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	4413      	add	r3, r2
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003e4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d01b      	beq.n	8003e90 <USB_DeactivateEndpoint+0x2d4>
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	4413      	add	r3, r2
 8003e62:	881b      	ldrh	r3, [r3, #0]
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e6e:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	441a      	add	r2, r3
 8003e7a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003e7c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e80:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e84:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	009b      	lsls	r3, r3, #2
 8003e98:	4413      	add	r3, r2
 8003e9a:	881b      	ldrh	r3, [r3, #0]
 8003e9c:	857b      	strh	r3, [r7, #42]	; 0x2a
 8003e9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8003ea0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01b      	beq.n	8003ee0 <USB_DeactivateEndpoint+0x324>
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	b29b      	uxth	r3, r3
 8003eb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ebe:	853b      	strh	r3, [r7, #40]	; 0x28
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	009b      	lsls	r3, r3, #2
 8003ec8:	441a      	add	r2, r3
 8003eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003ecc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ed0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8003ee0:	687a      	ldr	r2, [r7, #4]
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	009b      	lsls	r3, r3, #2
 8003ee8:	4413      	add	r3, r2
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ef6:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	4413      	add	r3, r2
 8003f22:	881b      	ldrh	r3, [r3, #0]
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f2e:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	441a      	add	r2, r3
 8003f3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	4413      	add	r3, r2
 8003f5a:	881b      	ldrh	r3, [r3, #0]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f66:	847b      	strh	r3, [r7, #34]	; 0x22
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	009b      	lsls	r3, r3, #2
 8003f70:	441a      	add	r2, r3
 8003f72:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003f74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f84:	b29b      	uxth	r3, r3
 8003f86:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3734      	adds	r7, #52	; 0x34
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bc80      	pop	{r7}
 8003f92:	4770      	bx	lr

08003f94 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b0cc      	sub	sp, #304	; 0x130
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003f9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8003fa2:	6018      	str	r0, [r3, #0]
 8003fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fac:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	785b      	ldrb	r3, [r3, #1]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	f041 817d 	bne.w	80052ba <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8003fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699a      	ldr	r2, [r3, #24]
 8003fcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d908      	bls.n	8003fee <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8003fdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003fe0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8003fec:	e007      	b.n	8003ffe <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8003fee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8003ff2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8003ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	7b1b      	ldrb	r3, [r3, #12]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d152      	bne.n	80040b4 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800400e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6959      	ldr	r1, [r3, #20]
 800401a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800401e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	88da      	ldrh	r2, [r3, #6]
 8004026:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800402a:	b29b      	uxth	r3, r3
 800402c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004030:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004034:	6800      	ldr	r0, [r0, #0]
 8004036:	f001 ff23 	bl	8005e80 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800403a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800403e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004042:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004046:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	601a      	str	r2, [r3, #0]
 800404e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004052:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800405c:	b29b      	uxth	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004064:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004068:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800406c:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	440a      	add	r2, r1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800407a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	011a      	lsls	r2, r3, #4
 8004084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004088:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4413      	add	r3, r2
 8004090:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004098:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800409c:	601a      	str	r2, [r3, #0]
 800409e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040a8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	801a      	strh	r2, [r3, #0]
 80040b0:	f001 b8b5 	b.w	800521e <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80040b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	78db      	ldrb	r3, [r3, #3]
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	f040 84c6 	bne.w	8004a52 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80040c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6a1a      	ldr	r2, [r3, #32]
 80040d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	429a      	cmp	r2, r3
 80040e0:	f240 8443 	bls.w	800496a <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80040e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80040f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	881b      	ldrh	r3, [r3, #0]
 8004100:	b29b      	uxth	r3, r3
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800410e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	441a      	add	r2, r3
 8004128:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800412c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004130:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004134:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004138:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800413c:	b29b      	uxth	r3, r3
 800413e:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004150:	1ad2      	subs	r2, r2, r3
 8004152:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004156:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800415e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004162:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	781b      	ldrb	r3, [r3, #0]
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	4413      	add	r3, r2
 8004178:	881b      	ldrh	r3, [r3, #0]
 800417a:	b29b      	uxth	r3, r3
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 823e 	beq.w	8004602 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800418e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004192:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004196:	6812      	ldr	r2, [r2, #0]
 8004198:	601a      	str	r2, [r3, #0]
 800419a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800419e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	785b      	ldrb	r3, [r3, #1]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 809a 	bne.w	80042e0 <USB_EPStartXfer+0x34c>
 80041ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041b4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041b8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80041bc:	6812      	ldr	r2, [r2, #0]
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041c4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	4619      	mov	r1, r3
 80041d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041de:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80041e2:	6812      	ldr	r2, [r2, #0]
 80041e4:	440a      	add	r2, r1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	781b      	ldrb	r3, [r3, #0]
 80041f4:	011a      	lsls	r2, r3, #4
 80041f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041fa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4413      	add	r3, r2
 8004202:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004206:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800420a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004214:	2b00      	cmp	r3, #0
 8004216:	d122      	bne.n	800425e <USB_EPStartXfer+0x2ca>
 8004218:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800421c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	881b      	ldrh	r3, [r3, #0]
 8004224:	b29b      	uxth	r3, r3
 8004226:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800422a:	b29a      	uxth	r2, r3
 800422c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004230:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	801a      	strh	r2, [r3, #0]
 8004238:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800423c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	881b      	ldrh	r3, [r3, #0]
 8004244:	b29b      	uxth	r3, r3
 8004246:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800424a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800424e:	b29a      	uxth	r2, r3
 8004250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004254:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	801a      	strh	r2, [r3, #0]
 800425c:	e079      	b.n	8004352 <USB_EPStartXfer+0x3be>
 800425e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004262:	2b3e      	cmp	r3, #62	; 0x3e
 8004264:	d81b      	bhi.n	800429e <USB_EPStartXfer+0x30a>
 8004266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800426a:	085b      	lsrs	r3, r3, #1
 800426c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004270:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004274:	f003 0301 	and.w	r3, r3, #1
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <USB_EPStartXfer+0x2f2>
 800427c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004280:	3301      	adds	r3, #1
 8004282:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004286:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800428a:	b29b      	uxth	r3, r3
 800428c:	029b      	lsls	r3, r3, #10
 800428e:	b29a      	uxth	r2, r3
 8004290:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004294:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	801a      	strh	r2, [r3, #0]
 800429c:	e059      	b.n	8004352 <USB_EPStartXfer+0x3be>
 800429e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042a2:	095b      	lsrs	r3, r3, #5
 80042a4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80042a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042ac:	f003 031f 	and.w	r3, r3, #31
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <USB_EPStartXfer+0x32a>
 80042b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042b8:	3b01      	subs	r3, #1
 80042ba:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80042be:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	029b      	lsls	r3, r3, #10
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80042cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	801a      	strh	r2, [r3, #0]
 80042de:	e038      	b.n	8004352 <USB_EPStartXfer+0x3be>
 80042e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	785b      	ldrb	r3, [r3, #1]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d130      	bne.n	8004352 <USB_EPStartXfer+0x3be>
 80042f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042fe:	b29b      	uxth	r3, r3
 8004300:	4619      	mov	r1, r3
 8004302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004306:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800430a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800430e:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004312:	6812      	ldr	r2, [r2, #0]
 8004314:	440a      	add	r2, r1
 8004316:	601a      	str	r2, [r3, #0]
 8004318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	011a      	lsls	r2, r3, #4
 8004326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800432a:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4413      	add	r3, r2
 8004332:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800433a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004344:	b29a      	uxth	r2, r3
 8004346:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	895b      	ldrh	r3, [r3, #10]
 800435e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004366:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	6959      	ldr	r1, [r3, #20]
 800436e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004372:	b29b      	uxth	r3, r3
 8004374:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004378:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800437c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004380:	6800      	ldr	r0, [r0, #0]
 8004382:	f001 fd7d 	bl	8005e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8004386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800438a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695a      	ldr	r2, [r3, #20]
 8004392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004396:	441a      	add	r2, r3
 8004398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6a1a      	ldr	r2, [r3, #32]
 80043b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	429a      	cmp	r2, r3
 80043be:	d90f      	bls.n	80043e0 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80043c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	6a1a      	ldr	r2, [r3, #32]
 80043cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d0:	1ad2      	subs	r2, r2, r3
 80043d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	621a      	str	r2, [r3, #32]
 80043de:	e00e      	b.n	80043fe <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80043e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80043f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2200      	movs	r2, #0
 80043fc:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80043fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004402:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	785b      	ldrb	r3, [r3, #1]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f040 809a 	bne.w	8004544 <USB_EPStartXfer+0x5b0>
 8004410:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004414:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004418:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800441c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004420:	6812      	ldr	r2, [r2, #0]
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004428:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004432:	b29b      	uxth	r3, r3
 8004434:	4619      	mov	r1, r3
 8004436:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800443e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004442:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004446:	6812      	ldr	r2, [r2, #0]
 8004448:	440a      	add	r2, r1
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	011a      	lsls	r2, r3, #4
 800445a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445e:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4413      	add	r3, r2
 8004466:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004478:	2b00      	cmp	r3, #0
 800447a:	d122      	bne.n	80044c2 <USB_EPStartXfer+0x52e>
 800447c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004480:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	881b      	ldrh	r3, [r3, #0]
 8004488:	b29b      	uxth	r3, r3
 800448a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800448e:	b29a      	uxth	r2, r3
 8004490:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004494:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	801a      	strh	r2, [r3, #0]
 800449c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	881b      	ldrh	r3, [r3, #0]
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80044ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	801a      	strh	r2, [r3, #0]
 80044c0:	e083      	b.n	80045ca <USB_EPStartXfer+0x636>
 80044c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044c6:	2b3e      	cmp	r3, #62	; 0x3e
 80044c8:	d81b      	bhi.n	8004502 <USB_EPStartXfer+0x56e>
 80044ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ce:	085b      	lsrs	r3, r3, #1
 80044d0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d004      	beq.n	80044ea <USB_EPStartXfer+0x556>
 80044e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80044e4:	3301      	adds	r3, #1
 80044e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80044ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	029b      	lsls	r3, r3, #10
 80044f2:	b29a      	uxth	r2, r3
 80044f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	801a      	strh	r2, [r3, #0]
 8004500:	e063      	b.n	80045ca <USB_EPStartXfer+0x636>
 8004502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800450c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004510:	f003 031f 	and.w	r3, r3, #31
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <USB_EPStartXfer+0x58e>
 8004518:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800451c:	3b01      	subs	r3, #1
 800451e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004522:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004526:	b29b      	uxth	r3, r3
 8004528:	029b      	lsls	r3, r3, #10
 800452a:	b29b      	uxth	r3, r3
 800452c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004534:	b29a      	uxth	r2, r3
 8004536:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800453a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	801a      	strh	r2, [r3, #0]
 8004542:	e042      	b.n	80045ca <USB_EPStartXfer+0x636>
 8004544:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004548:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	785b      	ldrb	r3, [r3, #1]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d13a      	bne.n	80045ca <USB_EPStartXfer+0x636>
 8004554:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004558:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800455c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004560:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004564:	6812      	ldr	r2, [r2, #0]
 8004566:	601a      	str	r2, [r3, #0]
 8004568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004576:	b29b      	uxth	r3, r3
 8004578:	4619      	mov	r1, r3
 800457a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004582:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004586:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800458a:	6812      	ldr	r2, [r2, #0]
 800458c:	440a      	add	r2, r1
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004594:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	011a      	lsls	r2, r3, #4
 800459e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a2:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80045ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045bc:	b29a      	uxth	r2, r3
 80045be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c2:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80045ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	891b      	ldrh	r3, [r3, #8]
 80045d6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80045da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	6959      	ldr	r1, [r3, #20]
 80045e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80045f0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80045f4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80045f8:	6800      	ldr	r0, [r0, #0]
 80045fa:	f001 fc41 	bl	8005e80 <USB_WritePMA>
 80045fe:	f000 be0e 	b.w	800521e <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	785b      	ldrb	r3, [r3, #1]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d16d      	bne.n	80046ee <USB_EPStartXfer+0x75a>
 8004612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004616:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	64bb      	str	r3, [r7, #72]	; 0x48
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800462c:	b29b      	uxth	r3, r3
 800462e:	461a      	mov	r2, r3
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	4413      	add	r3, r2
 8004634:	64bb      	str	r3, [r7, #72]	; 0x48
 8004636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800463a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	011a      	lsls	r2, r3, #4
 8004644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004646:	4413      	add	r3, r2
 8004648:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
 800464e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d112      	bne.n	800467c <USB_EPStartXfer+0x6e8>
 8004656:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004658:	881b      	ldrh	r3, [r3, #0]
 800465a:	b29b      	uxth	r3, r3
 800465c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004660:	b29a      	uxth	r2, r3
 8004662:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004664:	801a      	strh	r2, [r3, #0]
 8004666:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004668:	881b      	ldrh	r3, [r3, #0]
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004678:	801a      	strh	r2, [r3, #0]
 800467a:	e063      	b.n	8004744 <USB_EPStartXfer+0x7b0>
 800467c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004680:	2b3e      	cmp	r3, #62	; 0x3e
 8004682:	d817      	bhi.n	80046b4 <USB_EPStartXfer+0x720>
 8004684:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004688:	085b      	lsrs	r3, r3, #1
 800468a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800468e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004692:	f003 0301 	and.w	r3, r3, #1
 8004696:	2b00      	cmp	r3, #0
 8004698:	d004      	beq.n	80046a4 <USB_EPStartXfer+0x710>
 800469a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800469e:	3301      	adds	r3, #1
 80046a0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046a4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	029b      	lsls	r3, r3, #10
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	e047      	b.n	8004744 <USB_EPStartXfer+0x7b0>
 80046b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046b8:	095b      	lsrs	r3, r3, #5
 80046ba:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c2:	f003 031f 	and.w	r3, r3, #31
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d104      	bne.n	80046d4 <USB_EPStartXfer+0x740>
 80046ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046ce:	3b01      	subs	r3, #1
 80046d0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80046d4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80046d8:	b29b      	uxth	r3, r3
 80046da:	029b      	lsls	r3, r3, #10
 80046dc:	b29b      	uxth	r3, r3
 80046de:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e6:	b29a      	uxth	r2, r3
 80046e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80046ea:	801a      	strh	r2, [r3, #0]
 80046ec:	e02a      	b.n	8004744 <USB_EPStartXfer+0x7b0>
 80046ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	785b      	ldrb	r3, [r3, #1]
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d122      	bne.n	8004744 <USB_EPStartXfer+0x7b0>
 80046fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004702:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	653b      	str	r3, [r7, #80]	; 0x50
 800470a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004718:	b29b      	uxth	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800471e:	4413      	add	r3, r2
 8004720:	653b      	str	r3, [r7, #80]	; 0x50
 8004722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	011a      	lsls	r2, r3, #4
 8004730:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004732:	4413      	add	r3, r2
 8004734:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004738:	64fb      	str	r3, [r7, #76]	; 0x4c
 800473a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473e:	b29a      	uxth	r2, r3
 8004740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004742:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004748:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	891b      	ldrh	r3, [r3, #8]
 8004750:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	6959      	ldr	r1, [r3, #20]
 8004760:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004764:	b29b      	uxth	r3, r3
 8004766:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800476a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800476e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004772:	6800      	ldr	r0, [r0, #0]
 8004774:	f001 fb84 	bl	8005e80 <USB_WritePMA>
            ep->xfer_buff += len;
 8004778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	695a      	ldr	r2, [r3, #20]
 8004784:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004788:	441a      	add	r2, r3
 800478a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004796:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800479a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6a1a      	ldr	r2, [r3, #32]
 80047a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	691b      	ldr	r3, [r3, #16]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	d90f      	bls.n	80047d2 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 80047b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6a1a      	ldr	r2, [r3, #32]
 80047be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047c2:	1ad2      	subs	r2, r2, r3
 80047c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	621a      	str	r2, [r3, #32]
 80047d0:	e00e      	b.n	80047f0 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80047d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	6a1b      	ldr	r3, [r3, #32]
 80047de:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80047e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	2200      	movs	r2, #0
 80047ee:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80047f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	643b      	str	r3, [r7, #64]	; 0x40
 80047fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004800:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	785b      	ldrb	r3, [r3, #1]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d16d      	bne.n	80048e8 <USB_EPStartXfer+0x954>
 800480c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004810:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	63bb      	str	r3, [r7, #56]	; 0x38
 8004818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004826:	b29b      	uxth	r3, r3
 8004828:	461a      	mov	r2, r3
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	4413      	add	r3, r2
 800482e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004830:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004834:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	781b      	ldrb	r3, [r3, #0]
 800483c:	011a      	lsls	r2, r3, #4
 800483e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004840:	4413      	add	r3, r2
 8004842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004846:	637b      	str	r3, [r7, #52]	; 0x34
 8004848:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800484c:	2b00      	cmp	r3, #0
 800484e:	d112      	bne.n	8004876 <USB_EPStartXfer+0x8e2>
 8004850:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004852:	881b      	ldrh	r3, [r3, #0]
 8004854:	b29b      	uxth	r3, r3
 8004856:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800485a:	b29a      	uxth	r2, r3
 800485c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800485e:	801a      	strh	r2, [r3, #0]
 8004860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004862:	881b      	ldrh	r3, [r3, #0]
 8004864:	b29b      	uxth	r3, r3
 8004866:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800486a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800486e:	b29a      	uxth	r2, r3
 8004870:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004872:	801a      	strh	r2, [r3, #0]
 8004874:	e05d      	b.n	8004932 <USB_EPStartXfer+0x99e>
 8004876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487a:	2b3e      	cmp	r3, #62	; 0x3e
 800487c:	d817      	bhi.n	80048ae <USB_EPStartXfer+0x91a>
 800487e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004882:	085b      	lsrs	r3, r3, #1
 8004884:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004888:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d004      	beq.n	800489e <USB_EPStartXfer+0x90a>
 8004894:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004898:	3301      	adds	r3, #1
 800489a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800489e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	029b      	lsls	r3, r3, #10
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048aa:	801a      	strh	r2, [r3, #0]
 80048ac:	e041      	b.n	8004932 <USB_EPStartXfer+0x99e>
 80048ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b2:	095b      	lsrs	r3, r3, #5
 80048b4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80048b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048bc:	f003 031f 	and.w	r3, r3, #31
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <USB_EPStartXfer+0x93a>
 80048c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048c8:	3b01      	subs	r3, #1
 80048ca:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80048ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	029b      	lsls	r3, r3, #10
 80048d6:	b29b      	uxth	r3, r3
 80048d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	e024      	b.n	8004932 <USB_EPStartXfer+0x99e>
 80048e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d11c      	bne.n	8004932 <USB_EPStartXfer+0x99e>
 80048f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004906:	b29b      	uxth	r3, r3
 8004908:	461a      	mov	r2, r3
 800490a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800490c:	4413      	add	r3, r2
 800490e:	643b      	str	r3, [r7, #64]	; 0x40
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	011a      	lsls	r2, r3, #4
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	4413      	add	r3, r2
 8004922:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004926:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004928:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492c:	b29a      	uxth	r2, r3
 800492e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004930:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	895b      	ldrh	r3, [r3, #10]
 800493e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004946:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	6959      	ldr	r1, [r3, #20]
 800494e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004952:	b29b      	uxth	r3, r3
 8004954:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004958:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800495c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004960:	6800      	ldr	r0, [r0, #0]
 8004962:	f001 fa8d 	bl	8005e80 <USB_WritePMA>
 8004966:	f000 bc5a 	b.w	800521e <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800496a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800497a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 80049a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	441a      	add	r2, r3
 80049be:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 80049c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049d2:	b29b      	uxth	r3, r3
 80049d4:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049f0:	b29b      	uxth	r3, r3
 80049f2:	461a      	mov	r2, r3
 80049f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049f6:	4413      	add	r3, r2
 80049f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	781b      	ldrb	r3, [r3, #0]
 8004a06:	011a      	lsls	r2, r3, #4
 8004a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a0a:	4413      	add	r3, r2
 8004a0c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a10:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a1a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004a1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	891b      	ldrh	r3, [r3, #8]
 8004a28:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6959      	ldr	r1, [r3, #20]
 8004a38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a3c:	b29b      	uxth	r3, r3
 8004a3e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a42:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a46:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a4a:	6800      	ldr	r0, [r0, #0]
 8004a4c:	f001 fa18 	bl	8005e80 <USB_WritePMA>
 8004a50:	e3e5      	b.n	800521e <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004a52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	781b      	ldrb	r3, [r3, #0]
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4413      	add	r3, r2
 8004a6c:	881b      	ldrh	r3, [r3, #0]
 8004a6e:	b29b      	uxth	r3, r3
 8004a70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a78:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a84:	681a      	ldr	r2, [r3, #0]
 8004a86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	441a      	add	r2, r3
 8004a96:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004a9a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a9e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aa2:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004aa6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6a1a      	ldr	r2, [r3, #32]
 8004aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abe:	1ad2      	subs	r2, r2, r3
 8004ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004acc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ad0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ad4:	681a      	ldr	r2, [r3, #0]
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	f000 81bc 	beq.w	8004e6c <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004b02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d16d      	bne.n	8004bee <USB_EPStartXfer+0xc5a>
 8004b12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	461a      	mov	r2, r3
 8004b30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b32:	4413      	add	r3, r2
 8004b34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	011a      	lsls	r2, r3, #4
 8004b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b46:	4413      	add	r3, r2
 8004b48:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004b4c:	677b      	str	r3, [r7, #116]	; 0x74
 8004b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d112      	bne.n	8004b7c <USB_EPStartXfer+0xbe8>
 8004b56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b58:	881b      	ldrh	r3, [r3, #0]
 8004b5a:	b29b      	uxth	r3, r3
 8004b5c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004b60:	b29a      	uxth	r2, r3
 8004b62:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b64:	801a      	strh	r2, [r3, #0]
 8004b66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b68:	881b      	ldrh	r3, [r3, #0]
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b70:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b74:	b29a      	uxth	r2, r3
 8004b76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b78:	801a      	strh	r2, [r3, #0]
 8004b7a:	e060      	b.n	8004c3e <USB_EPStartXfer+0xcaa>
 8004b7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b80:	2b3e      	cmp	r3, #62	; 0x3e
 8004b82:	d817      	bhi.n	8004bb4 <USB_EPStartXfer+0xc20>
 8004b84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004b8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d004      	beq.n	8004ba4 <USB_EPStartXfer+0xc10>
 8004b9a:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004ba4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	029b      	lsls	r3, r3, #10
 8004bac:	b29a      	uxth	r2, r3
 8004bae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb0:	801a      	strh	r2, [r3, #0]
 8004bb2:	e044      	b.n	8004c3e <USB_EPStartXfer+0xcaa>
 8004bb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004bbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bc2:	f003 031f 	and.w	r3, r3, #31
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d104      	bne.n	8004bd4 <USB_EPStartXfer+0xc40>
 8004bca:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bce:	3b01      	subs	r3, #1
 8004bd0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004bd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	029b      	lsls	r3, r3, #10
 8004bdc:	b29b      	uxth	r3, r3
 8004bde:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004be2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004be6:	b29a      	uxth	r2, r3
 8004be8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bea:	801a      	strh	r2, [r3, #0]
 8004bec:	e027      	b.n	8004c3e <USB_EPStartXfer+0xcaa>
 8004bee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	785b      	ldrb	r3, [r3, #1]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d11f      	bne.n	8004c3e <USB_EPStartXfer+0xcaa>
 8004bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c02:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c14:	4413      	add	r3, r2
 8004c16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	011a      	lsls	r2, r3, #4
 8004c28:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c32:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004c3c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	895b      	ldrh	r3, [r3, #10]
 8004c4a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6959      	ldr	r1, [r3, #20]
 8004c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004c64:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004c68:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004c6c:	6800      	ldr	r0, [r0, #0]
 8004c6e:	f001 f907 	bl	8005e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8004c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c82:	441a      	add	r2, r3
 8004c84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	6a1a      	ldr	r2, [r3, #32]
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d90f      	bls.n	8004ccc <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004cac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	6a1a      	ldr	r2, [r3, #32]
 8004cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbc:	1ad2      	subs	r2, r2, r3
 8004cbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	621a      	str	r2, [r3, #32]
 8004cca:	e00e      	b.n	8004cea <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004ccc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 8295 	beq.w	800521e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004cf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	785b      	ldrb	r3, [r3, #1]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d16d      	bne.n	8004de0 <USB_EPStartXfer+0xe4c>
 8004d04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d24:	4413      	add	r3, r2
 8004d26:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004d3e:	667b      	str	r3, [r7, #100]	; 0x64
 8004d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d112      	bne.n	8004d6e <USB_EPStartXfer+0xdda>
 8004d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4a:	881b      	ldrh	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d5a:	881b      	ldrh	r3, [r3, #0]
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d66:	b29a      	uxth	r2, r3
 8004d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e063      	b.n	8004e36 <USB_EPStartXfer+0xea2>
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d72:	2b3e      	cmp	r3, #62	; 0x3e
 8004d74:	d817      	bhi.n	8004da6 <USB_EPStartXfer+0xe12>
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d84:	f003 0301 	and.w	r3, r3, #1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d004      	beq.n	8004d96 <USB_EPStartXfer+0xe02>
 8004d8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d90:	3301      	adds	r3, #1
 8004d92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004d96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d9a:	b29b      	uxth	r3, r3
 8004d9c:	029b      	lsls	r3, r3, #10
 8004d9e:	b29a      	uxth	r2, r3
 8004da0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004da2:	801a      	strh	r2, [r3, #0]
 8004da4:	e047      	b.n	8004e36 <USB_EPStartXfer+0xea2>
 8004da6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004daa:	095b      	lsrs	r3, r3, #5
 8004dac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004db4:	f003 031f 	and.w	r3, r3, #31
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d104      	bne.n	8004dc6 <USB_EPStartXfer+0xe32>
 8004dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	029b      	lsls	r3, r3, #10
 8004dce:	b29b      	uxth	r3, r3
 8004dd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004dd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ddc:	801a      	strh	r2, [r3, #0]
 8004dde:	e02a      	b.n	8004e36 <USB_EPStartXfer+0xea2>
 8004de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	785b      	ldrb	r3, [r3, #1]
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d122      	bne.n	8004e36 <USB_EPStartXfer+0xea2>
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e10:	4413      	add	r3, r2
 8004e12:	673b      	str	r3, [r7, #112]	; 0x70
 8004e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	011a      	lsls	r2, r3, #4
 8004e22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e24:	4413      	add	r3, r2
 8004e26:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e2a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e30:	b29a      	uxth	r2, r3
 8004e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	891b      	ldrh	r3, [r3, #8]
 8004e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e64:	6800      	ldr	r0, [r0, #0]
 8004e66:	f001 f80b 	bl	8005e80 <USB_WritePMA>
 8004e6a:	e1d8      	b.n	800521e <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	785b      	ldrb	r3, [r3, #1]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d178      	bne.n	8004f6e <USB_EPStartXfer+0xfda>
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ea0:	4413      	add	r3, r2
 8004ea2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	011a      	lsls	r2, r3, #4
 8004eb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004eb8:	4413      	add	r3, r2
 8004eba:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004ebe:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ec2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d116      	bne.n	8004ef8 <USB_EPStartXfer+0xf64>
 8004eca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ece:	881b      	ldrh	r3, [r3, #0]
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004edc:	801a      	strh	r2, [r3, #0]
 8004ede:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ee2:	881b      	ldrh	r3, [r3, #0]
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004eea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ef4:	801a      	strh	r2, [r3, #0]
 8004ef6:	e06b      	b.n	8004fd0 <USB_EPStartXfer+0x103c>
 8004ef8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efc:	2b3e      	cmp	r3, #62	; 0x3e
 8004efe:	d818      	bhi.n	8004f32 <USB_EPStartXfer+0xf9e>
 8004f00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f04:	085b      	lsrs	r3, r3, #1
 8004f06:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d004      	beq.n	8004f20 <USB_EPStartXfer+0xf8c>
 8004f16:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f24:	b29b      	uxth	r3, r3
 8004f26:	029b      	lsls	r3, r3, #10
 8004f28:	b29a      	uxth	r2, r3
 8004f2a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f2e:	801a      	strh	r2, [r3, #0]
 8004f30:	e04e      	b.n	8004fd0 <USB_EPStartXfer+0x103c>
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	095b      	lsrs	r3, r3, #5
 8004f38:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f40:	f003 031f 	and.w	r3, r3, #31
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d104      	bne.n	8004f52 <USB_EPStartXfer+0xfbe>
 8004f48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004f52:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8004f56:	b29b      	uxth	r3, r3
 8004f58:	029b      	lsls	r3, r3, #10
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004f6a:	801a      	strh	r2, [r3, #0]
 8004f6c:	e030      	b.n	8004fd0 <USB_EPStartXfer+0x103c>
 8004f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	785b      	ldrb	r3, [r3, #1]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d128      	bne.n	8004fd0 <USB_EPStartXfer+0x103c>
 8004f7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	461a      	mov	r2, r3
 8004f9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fa2:	4413      	add	r3, r2
 8004fa4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004fa8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	011a      	lsls	r2, r3, #4
 8004fb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004fba:	4413      	add	r3, r2
 8004fbc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004fce:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	891b      	ldrh	r3, [r3, #8]
 8004fdc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	6959      	ldr	r1, [r3, #20]
 8004fec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ff6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ffa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004ffe:	6800      	ldr	r0, [r0, #0]
 8005000:	f000 ff3e 	bl	8005e80 <USB_WritePMA>
          ep->xfer_buff += len;
 8005004:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005008:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	695a      	ldr	r2, [r3, #20]
 8005010:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005014:	441a      	add	r2, r3
 8005016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005026:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	6a1a      	ldr	r2, [r3, #32]
 800502e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005032:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	429a      	cmp	r2, r3
 800503c:	d90f      	bls.n	800505e <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a1a      	ldr	r2, [r3, #32]
 800504a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	621a      	str	r2, [r3, #32]
 800505c:	e00e      	b.n	800507c <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800506e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005072:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	2200      	movs	r2, #0
 800507a:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800507c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005080:	2b00      	cmp	r3, #0
 8005082:	f000 80cc 	beq.w	800521e <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	785b      	ldrb	r3, [r3, #1]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d178      	bne.n	8005196 <USB_EPStartXfer+0x1202>
 80050a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	461a      	mov	r2, r3
 80050c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050c8:	4413      	add	r3, r2
 80050ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80050ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	011a      	lsls	r2, r3, #4
 80050dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050e0:	4413      	add	r3, r2
 80050e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050e6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d116      	bne.n	8005120 <USB_EPStartXfer+0x118c>
 80050f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050f6:	881b      	ldrh	r3, [r3, #0]
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050fe:	b29a      	uxth	r2, r3
 8005100:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005104:	801a      	strh	r2, [r3, #0]
 8005106:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800510a:	881b      	ldrh	r3, [r3, #0]
 800510c:	b29b      	uxth	r3, r3
 800510e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005112:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005116:	b29a      	uxth	r2, r3
 8005118:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800511c:	801a      	strh	r2, [r3, #0]
 800511e:	e064      	b.n	80051ea <USB_EPStartXfer+0x1256>
 8005120:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005124:	2b3e      	cmp	r3, #62	; 0x3e
 8005126:	d818      	bhi.n	800515a <USB_EPStartXfer+0x11c6>
 8005128:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512c:	085b      	lsrs	r3, r3, #1
 800512e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005136:	f003 0301 	and.w	r3, r3, #1
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <USB_EPStartXfer+0x11b4>
 800513e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005142:	3301      	adds	r3, #1
 8005144:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005148:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800514c:	b29b      	uxth	r3, r3
 800514e:	029b      	lsls	r3, r3, #10
 8005150:	b29a      	uxth	r2, r3
 8005152:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005156:	801a      	strh	r2, [r3, #0]
 8005158:	e047      	b.n	80051ea <USB_EPStartXfer+0x1256>
 800515a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515e:	095b      	lsrs	r3, r3, #5
 8005160:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005164:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005168:	f003 031f 	and.w	r3, r3, #31
 800516c:	2b00      	cmp	r3, #0
 800516e:	d104      	bne.n	800517a <USB_EPStartXfer+0x11e6>
 8005170:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005174:	3b01      	subs	r3, #1
 8005176:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800517a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800517e:	b29b      	uxth	r3, r3
 8005180:	029b      	lsls	r3, r3, #10
 8005182:	b29b      	uxth	r3, r3
 8005184:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005188:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518c:	b29a      	uxth	r2, r3
 800518e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005192:	801a      	strh	r2, [r3, #0]
 8005194:	e029      	b.n	80051ea <USB_EPStartXfer+0x1256>
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	785b      	ldrb	r3, [r3, #1]
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	d121      	bne.n	80051ea <USB_EPStartXfer+0x1256>
 80051a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	461a      	mov	r2, r3
 80051b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051bc:	4413      	add	r3, r2
 80051be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80051c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	011a      	lsls	r2, r3, #4
 80051d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80051d4:	4413      	add	r3, r2
 80051d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80051da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80051de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e2:	b29a      	uxth	r2, r3
 80051e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80051e8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	895b      	ldrh	r3, [r3, #10]
 80051f6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	6959      	ldr	r1, [r3, #20]
 8005206:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800520a:	b29b      	uxth	r3, r3
 800520c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005210:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005214:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005218:	6800      	ldr	r0, [r0, #0]
 800521a:	f000 fe31 	bl	8005e80 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681a      	ldr	r2, [r3, #0]
 8005228:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800522c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	781b      	ldrb	r3, [r3, #0]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	881b      	ldrh	r3, [r3, #0]
 800523a:	b29b      	uxth	r3, r3
 800523c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005240:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005244:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005248:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800524c:	8013      	strh	r3, [r2, #0]
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005256:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800525a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800525e:	8812      	ldrh	r2, [r2, #0]
 8005260:	f082 0210 	eor.w	r2, r2, #16
 8005264:	801a      	strh	r2, [r3, #0]
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800526e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005272:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005276:	8812      	ldrh	r2, [r2, #0]
 8005278:	f082 0220 	eor.w	r2, r2, #32
 800527c:	801a      	strh	r2, [r3, #0]
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	441a      	add	r2, r3
 8005298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529c:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80052a0:	881b      	ldrh	r3, [r3, #0]
 80052a2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80052a6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80052aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052b2:	b29b      	uxth	r3, r3
 80052b4:	8013      	strh	r3, [r2, #0]
 80052b6:	f000 bc9f 	b.w	8005bf8 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80052ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	7b1b      	ldrb	r3, [r3, #12]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	f040 80ae 	bne.w	8005428 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80052cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	699a      	ldr	r2, [r3, #24]
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d917      	bls.n	8005318 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 80052f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005308:	1ad2      	subs	r2, r2, r3
 800530a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800530e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	619a      	str	r2, [r3, #24]
 8005316:	e00e      	b.n	8005336 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005328:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800532c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005336:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005344:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005348:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005352:	b29b      	uxth	r3, r3
 8005354:	461a      	mov	r2, r3
 8005356:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800535a:	4413      	add	r3, r2
 800535c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781b      	ldrb	r3, [r3, #0]
 800536c:	011a      	lsls	r2, r3, #4
 800536e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005372:	4413      	add	r3, r2
 8005374:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005378:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800537c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d116      	bne.n	80053b2 <USB_EPStartXfer+0x141e>
 8005384:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005388:	881b      	ldrh	r3, [r3, #0]
 800538a:	b29b      	uxth	r3, r3
 800538c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005390:	b29a      	uxth	r2, r3
 8005392:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005396:	801a      	strh	r2, [r3, #0]
 8005398:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800539c:	881b      	ldrh	r3, [r3, #0]
 800539e:	b29b      	uxth	r3, r3
 80053a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053ae:	801a      	strh	r2, [r3, #0]
 80053b0:	e3e8      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
 80053b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b6:	2b3e      	cmp	r3, #62	; 0x3e
 80053b8:	d818      	bhi.n	80053ec <USB_EPStartXfer+0x1458>
 80053ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053be:	085b      	lsrs	r3, r3, #1
 80053c0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80053c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d004      	beq.n	80053da <USB_EPStartXfer+0x1446>
 80053d0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053d4:	3301      	adds	r3, #1
 80053d6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80053da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80053de:	b29b      	uxth	r3, r3
 80053e0:	029b      	lsls	r3, r3, #10
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	e3cb      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
 80053ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	f003 031f 	and.w	r3, r3, #31
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d104      	bne.n	800540c <USB_EPStartXfer+0x1478>
 8005402:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005406:	3b01      	subs	r3, #1
 8005408:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800540c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005410:	b29b      	uxth	r3, r3
 8005412:	029b      	lsls	r3, r3, #10
 8005414:	b29b      	uxth	r3, r3
 8005416:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800541a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800541e:	b29a      	uxth	r2, r3
 8005420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005424:	801a      	strh	r2, [r3, #0]
 8005426:	e3ad      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	78db      	ldrb	r3, [r3, #3]
 8005434:	2b02      	cmp	r3, #2
 8005436:	f040 8200 	bne.w	800583a <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	785b      	ldrb	r3, [r3, #1]
 8005446:	2b00      	cmp	r3, #0
 8005448:	f040 8091 	bne.w	800556e <USB_EPStartXfer+0x15da>
 800544c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005450:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005470:	4413      	add	r3, r2
 8005472:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	011a      	lsls	r2, r3, #4
 8005484:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005488:	4413      	add	r3, r2
 800548a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800548e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d116      	bne.n	80054d0 <USB_EPStartXfer+0x153c>
 80054a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054a6:	881b      	ldrh	r3, [r3, #0]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054ae:	b29a      	uxth	r2, r3
 80054b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054b4:	801a      	strh	r2, [r3, #0]
 80054b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054ba:	881b      	ldrh	r3, [r3, #0]
 80054bc:	b29b      	uxth	r3, r3
 80054be:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054c2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054c6:	b29a      	uxth	r2, r3
 80054c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80054cc:	801a      	strh	r2, [r3, #0]
 80054ce:	e083      	b.n	80055d8 <USB_EPStartXfer+0x1644>
 80054d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b3e      	cmp	r3, #62	; 0x3e
 80054de:	d820      	bhi.n	8005522 <USB_EPStartXfer+0x158e>
 80054e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	691b      	ldr	r3, [r3, #16]
 80054ec:	085b      	lsrs	r3, r3, #1
 80054ee:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b00      	cmp	r3, #0
 8005504:	d004      	beq.n	8005510 <USB_EPStartXfer+0x157c>
 8005506:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800550a:	3301      	adds	r3, #1
 800550c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005510:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005514:	b29b      	uxth	r3, r3
 8005516:	029b      	lsls	r3, r3, #10
 8005518:	b29a      	uxth	r2, r3
 800551a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800551e:	801a      	strh	r2, [r3, #0]
 8005520:	e05a      	b.n	80055d8 <USB_EPStartXfer+0x1644>
 8005522:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005526:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005534:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005538:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	f003 031f 	and.w	r3, r3, #31
 8005544:	2b00      	cmp	r3, #0
 8005546:	d104      	bne.n	8005552 <USB_EPStartXfer+0x15be>
 8005548:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800554c:	3b01      	subs	r3, #1
 800554e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005552:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005556:	b29b      	uxth	r3, r3
 8005558:	029b      	lsls	r3, r3, #10
 800555a:	b29b      	uxth	r3, r3
 800555c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005560:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005564:	b29a      	uxth	r2, r3
 8005566:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800556a:	801a      	strh	r2, [r3, #0]
 800556c:	e034      	b.n	80055d8 <USB_EPStartXfer+0x1644>
 800556e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005572:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	785b      	ldrb	r3, [r3, #1]
 800557a:	2b01      	cmp	r3, #1
 800557c:	d12c      	bne.n	80055d8 <USB_EPStartXfer+0x1644>
 800557e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005582:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800558c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005590:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800559a:	b29b      	uxth	r3, r3
 800559c:	461a      	mov	r2, r3
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a2:	4413      	add	r3, r2
 80055a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80055a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	011a      	lsls	r2, r3, #4
 80055b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055ba:	4413      	add	r3, r2
 80055bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	b29a      	uxth	r2, r3
 80055d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	785b      	ldrb	r3, [r3, #1]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	f040 8091 	bne.w	800571a <USB_EPStartXfer+0x1786>
 80055f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005614:	b29b      	uxth	r3, r3
 8005616:	461a      	mov	r2, r3
 8005618:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800561c:	4413      	add	r3, r2
 800561e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	781b      	ldrb	r3, [r3, #0]
 800562e:	011a      	lsls	r2, r3, #4
 8005630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005634:	4413      	add	r3, r2
 8005636:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800563a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800563e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005642:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d116      	bne.n	800567c <USB_EPStartXfer+0x16e8>
 800564e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005652:	881b      	ldrh	r3, [r3, #0]
 8005654:	b29b      	uxth	r3, r3
 8005656:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800565a:	b29a      	uxth	r2, r3
 800565c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005660:	801a      	strh	r2, [r3, #0]
 8005662:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005666:	881b      	ldrh	r3, [r3, #0]
 8005668:	b29b      	uxth	r3, r3
 800566a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005672:	b29a      	uxth	r2, r3
 8005674:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005678:	801a      	strh	r2, [r3, #0]
 800567a:	e07c      	b.n	8005776 <USB_EPStartXfer+0x17e2>
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	2b3e      	cmp	r3, #62	; 0x3e
 800568a:	d820      	bhi.n	80056ce <USB_EPStartXfer+0x173a>
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	085b      	lsrs	r3, r3, #1
 800569a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800569e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	691b      	ldr	r3, [r3, #16]
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d004      	beq.n	80056bc <USB_EPStartXfer+0x1728>
 80056b2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056b6:	3301      	adds	r3, #1
 80056b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	029b      	lsls	r3, r3, #10
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80056ca:	801a      	strh	r2, [r3, #0]
 80056cc:	e053      	b.n	8005776 <USB_EPStartXfer+0x17e2>
 80056ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	691b      	ldr	r3, [r3, #16]
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691b      	ldr	r3, [r3, #16]
 80056ec:	f003 031f 	and.w	r3, r3, #31
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d104      	bne.n	80056fe <USB_EPStartXfer+0x176a>
 80056f4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80056f8:	3b01      	subs	r3, #1
 80056fa:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80056fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005702:	b29b      	uxth	r3, r3
 8005704:	029b      	lsls	r3, r3, #10
 8005706:	b29b      	uxth	r3, r3
 8005708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800570c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005710:	b29a      	uxth	r2, r3
 8005712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005716:	801a      	strh	r2, [r3, #0]
 8005718:	e02d      	b.n	8005776 <USB_EPStartXfer+0x17e2>
 800571a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800571e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	785b      	ldrb	r3, [r3, #1]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d125      	bne.n	8005776 <USB_EPStartXfer+0x17e2>
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005738:	b29b      	uxth	r3, r3
 800573a:	461a      	mov	r2, r3
 800573c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005740:	4413      	add	r3, r2
 8005742:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800574a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	011a      	lsls	r2, r3, #4
 8005754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005758:	4413      	add	r3, r2
 800575a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800575e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005762:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005766:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	b29a      	uxth	r2, r3
 8005770:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005774:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	69db      	ldr	r3, [r3, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 81fe 	beq.w	8005b84 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005788:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005796:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	4413      	add	r3, r2
 80057a2:	881b      	ldrh	r3, [r3, #0]
 80057a4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057a8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80057ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d005      	beq.n	80057c0 <USB_EPStartXfer+0x182c>
 80057b4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80057b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d10d      	bne.n	80057dc <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80057c0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80057c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	f040 81db 	bne.w	8005b84 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80057ce:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80057d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f040 81d4 	bne.w	8005b84 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	009b      	lsls	r3, r3, #2
 80057f4:	4413      	add	r3, r2
 80057f6:	881b      	ldrh	r3, [r3, #0]
 80057f8:	b29b      	uxth	r3, r3
 80057fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005802:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800580e:	681a      	ldr	r2, [r3, #0]
 8005810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	009b      	lsls	r3, r3, #2
 800581e:	441a      	add	r2, r3
 8005820:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800582c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005830:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005834:	b29b      	uxth	r3, r3
 8005836:	8013      	strh	r3, [r2, #0]
 8005838:	e1a4      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b01      	cmp	r3, #1
 8005848:	f040 819a 	bne.w	8005b80 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	699a      	ldr	r2, [r3, #24]
 8005858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	429a      	cmp	r2, r3
 8005866:	d917      	bls.n	8005898 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005868:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	699a      	ldr	r2, [r3, #24]
 8005884:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005888:	1ad2      	subs	r2, r2, r3
 800588a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	619a      	str	r2, [r3, #24]
 8005896:	e00e      	b.n	80058b6 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	699b      	ldr	r3, [r3, #24]
 80058a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 80058a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	2200      	movs	r2, #0
 80058b4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80058b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d178      	bne.n	80059b8 <USB_EPStartXfer+0x1a24>
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e2:	b29b      	uxth	r3, r3
 80058e4:	461a      	mov	r2, r3
 80058e6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80058ea:	4413      	add	r3, r2
 80058ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80058f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	011a      	lsls	r2, r3, #4
 80058fe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005902:	4413      	add	r3, r2
 8005904:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005908:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	2b00      	cmp	r3, #0
 8005912:	d116      	bne.n	8005942 <USB_EPStartXfer+0x19ae>
 8005914:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005918:	881b      	ldrh	r3, [r3, #0]
 800591a:	b29b      	uxth	r3, r3
 800591c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005920:	b29a      	uxth	r2, r3
 8005922:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005926:	801a      	strh	r2, [r3, #0]
 8005928:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800592c:	881b      	ldrh	r3, [r3, #0]
 800592e:	b29b      	uxth	r3, r3
 8005930:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005934:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005938:	b29a      	uxth	r2, r3
 800593a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800593e:	801a      	strh	r2, [r3, #0]
 8005940:	e06b      	b.n	8005a1a <USB_EPStartXfer+0x1a86>
 8005942:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005946:	2b3e      	cmp	r3, #62	; 0x3e
 8005948:	d818      	bhi.n	800597c <USB_EPStartXfer+0x19e8>
 800594a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594e:	085b      	lsrs	r3, r3, #1
 8005950:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005954:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d004      	beq.n	800596a <USB_EPStartXfer+0x19d6>
 8005960:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005964:	3301      	adds	r3, #1
 8005966:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800596a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29a      	uxth	r2, r3
 8005974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005978:	801a      	strh	r2, [r3, #0]
 800597a:	e04e      	b.n	8005a1a <USB_EPStartXfer+0x1a86>
 800597c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005980:	095b      	lsrs	r3, r3, #5
 8005982:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005986:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800598a:	f003 031f 	and.w	r3, r3, #31
 800598e:	2b00      	cmp	r3, #0
 8005990:	d104      	bne.n	800599c <USB_EPStartXfer+0x1a08>
 8005992:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005996:	3b01      	subs	r3, #1
 8005998:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800599c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	029b      	lsls	r3, r3, #10
 80059a4:	b29b      	uxth	r3, r3
 80059a6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059aa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059ae:	b29a      	uxth	r2, r3
 80059b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80059b4:	801a      	strh	r2, [r3, #0]
 80059b6:	e030      	b.n	8005a1a <USB_EPStartXfer+0x1a86>
 80059b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	785b      	ldrb	r3, [r3, #1]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d128      	bne.n	8005a1a <USB_EPStartXfer+0x1a86>
 80059c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	461a      	mov	r2, r3
 80059e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059ec:	4413      	add	r3, r2
 80059ee:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80059f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	011a      	lsls	r2, r3, #4
 8005a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a04:	4413      	add	r3, r2
 8005a06:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a0a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a12:	b29a      	uxth	r2, r3
 8005a14:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005a18:	801a      	strh	r2, [r3, #0]
 8005a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a1e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005a28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	785b      	ldrb	r3, [r3, #1]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d178      	bne.n	8005b2a <USB_EPStartXfer+0x1b96>
 8005a38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a4a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	461a      	mov	r2, r3
 8005a58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	011a      	lsls	r2, r3, #4
 8005a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a74:	4413      	add	r3, r2
 8005a76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a7a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d116      	bne.n	8005ab4 <USB_EPStartXfer+0x1b20>
 8005a86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a8a:	881b      	ldrh	r3, [r3, #0]
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a98:	801a      	strh	r2, [r3, #0]
 8005a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a9e:	881b      	ldrh	r3, [r3, #0]
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aaa:	b29a      	uxth	r2, r3
 8005aac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ab0:	801a      	strh	r2, [r3, #0]
 8005ab2:	e067      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
 8005ab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab8:	2b3e      	cmp	r3, #62	; 0x3e
 8005aba:	d818      	bhi.n	8005aee <USB_EPStartXfer+0x1b5a>
 8005abc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac0:	085b      	lsrs	r3, r3, #1
 8005ac2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ac6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aca:	f003 0301 	and.w	r3, r3, #1
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d004      	beq.n	8005adc <USB_EPStartXfer+0x1b48>
 8005ad2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005adc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	029b      	lsls	r3, r3, #10
 8005ae4:	b29a      	uxth	r2, r3
 8005ae6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005aea:	801a      	strh	r2, [r3, #0]
 8005aec:	e04a      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
 8005aee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005af8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005afc:	f003 031f 	and.w	r3, r3, #31
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d104      	bne.n	8005b0e <USB_EPStartXfer+0x1b7a>
 8005b04:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b12:	b29b      	uxth	r3, r3
 8005b14:	029b      	lsls	r3, r3, #10
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b1c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b20:	b29a      	uxth	r2, r3
 8005b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b26:	801a      	strh	r2, [r3, #0]
 8005b28:	e02c      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
 8005b2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	785b      	ldrb	r3, [r3, #1]
 8005b36:	2b01      	cmp	r3, #1
 8005b38:	d124      	bne.n	8005b84 <USB_EPStartXfer+0x1bf0>
 8005b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	461a      	mov	r2, r3
 8005b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b50:	4413      	add	r3, r2
 8005b52:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	781b      	ldrb	r3, [r3, #0]
 8005b62:	011a      	lsls	r2, r3, #4
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	4413      	add	r3, r2
 8005b6a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b76:	b29a      	uxth	r2, r3
 8005b78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b7c:	801a      	strh	r2, [r3, #0]
 8005b7e:	e001      	b.n	8005b84 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	e03a      	b.n	8005bfa <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8c:	681a      	ldr	r2, [r3, #0]
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	781b      	ldrb	r3, [r3, #0]
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	4413      	add	r3, r2
 8005b9e:	881b      	ldrh	r3, [r3, #0]
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005bae:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005bb2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005bb6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005bba:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005bbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005bc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005bc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bce:	681a      	ldr	r2, [r3, #0]
 8005bd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	781b      	ldrb	r3, [r3, #0]
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	441a      	add	r2, r3
 8005be0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005be4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005be8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b085      	sub	sp, #20
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	785b      	ldrb	r3, [r3, #1]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d020      	beq.n	8005c58 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	683b      	ldr	r3, [r7, #0]
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	881b      	ldrh	r3, [r3, #0]
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c2c:	81bb      	strh	r3, [r7, #12]
 8005c2e:	89bb      	ldrh	r3, [r7, #12]
 8005c30:	f083 0310 	eor.w	r3, r3, #16
 8005c34:	81bb      	strh	r3, [r7, #12]
 8005c36:	687a      	ldr	r2, [r7, #4]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	009b      	lsls	r3, r3, #2
 8005c3e:	441a      	add	r2, r3
 8005c40:	89bb      	ldrh	r3, [r7, #12]
 8005c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	8013      	strh	r3, [r2, #0]
 8005c56:	e01f      	b.n	8005c98 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	881b      	ldrh	r3, [r3, #0]
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c6e:	81fb      	strh	r3, [r7, #14]
 8005c70:	89fb      	ldrh	r3, [r7, #14]
 8005c72:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005c76:	81fb      	strh	r3, [r7, #14]
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	441a      	add	r2, r3
 8005c82:	89fb      	ldrh	r3, [r7, #14]
 8005c84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005c98:	2300      	movs	r3, #0
}
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	bc80      	pop	{r7}
 8005ca2:	4770      	bx	lr

08005ca4 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	7b1b      	ldrb	r3, [r3, #12]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 809d 	bne.w	8005df2 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d04c      	beq.n	8005d5a <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	4413      	add	r3, r2
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	823b      	strh	r3, [r7, #16]
 8005cce:	8a3b      	ldrh	r3, [r7, #16]
 8005cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d01b      	beq.n	8005d10 <USB_EPClearStall+0x6c>
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4413      	add	r3, r2
 8005ce2:	881b      	ldrh	r3, [r3, #0]
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cee:	81fb      	strh	r3, [r7, #14]
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	781b      	ldrb	r3, [r3, #0]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	441a      	add	r2, r3
 8005cfa:	89fb      	ldrh	r3, [r7, #14]
 8005cfc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d08:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	78db      	ldrb	r3, [r3, #3]
 8005d14:	2b01      	cmp	r3, #1
 8005d16:	d06c      	beq.n	8005df2 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005d18:	687a      	ldr	r2, [r7, #4]
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	4413      	add	r3, r2
 8005d22:	881b      	ldrh	r3, [r3, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d2e:	81bb      	strh	r3, [r7, #12]
 8005d30:	89bb      	ldrh	r3, [r7, #12]
 8005d32:	f083 0320 	eor.w	r3, r3, #32
 8005d36:	81bb      	strh	r3, [r7, #12]
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	441a      	add	r2, r3
 8005d42:	89bb      	ldrh	r3, [r7, #12]
 8005d44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	8013      	strh	r3, [r2, #0]
 8005d58:	e04b      	b.n	8005df2 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005d5a:	687a      	ldr	r2, [r7, #4]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	4413      	add	r3, r2
 8005d64:	881b      	ldrh	r3, [r3, #0]
 8005d66:	82fb      	strh	r3, [r7, #22]
 8005d68:	8afb      	ldrh	r3, [r7, #22]
 8005d6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d01b      	beq.n	8005daa <USB_EPClearStall+0x106>
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	4413      	add	r3, r2
 8005d7c:	881b      	ldrh	r3, [r3, #0]
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d88:	82bb      	strh	r3, [r7, #20]
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	441a      	add	r2, r3
 8005d94:	8abb      	ldrh	r3, [r7, #20]
 8005d96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005da2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc0:	827b      	strh	r3, [r7, #18]
 8005dc2:	8a7b      	ldrh	r3, [r7, #18]
 8005dc4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005dc8:	827b      	strh	r3, [r7, #18]
 8005dca:	8a7b      	ldrh	r3, [r7, #18]
 8005dcc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005dd0:	827b      	strh	r3, [r7, #18]
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	441a      	add	r2, r3
 8005ddc:	8a7b      	ldrh	r3, [r7, #18]
 8005dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005df2:	2300      	movs	r3, #0
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	371c      	adds	r7, #28
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b083      	sub	sp, #12
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
 8005e06:	460b      	mov	r3, r1
 8005e08:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005e0a:	78fb      	ldrb	r3, [r7, #3]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2280      	movs	r2, #128	; 0x80
 8005e14:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005e18:	2300      	movs	r3, #0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	370c      	adds	r7, #12
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e2c:	2300      	movs	r3, #0
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	370c      	adds	r7, #12
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b083      	sub	sp, #12
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	370c      	adds	r7, #12
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bc80      	pop	{r7}
 8005e4a:	4770      	bx	lr

08005e4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bc80      	pop	{r7}
 8005e68:	4770      	bx	lr

08005e6a <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
 8005e72:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	370c      	adds	r7, #12
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bc80      	pop	{r7}
 8005e7e:	4770      	bx	lr

08005e80 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b08d      	sub	sp, #52	; 0x34
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	60f8      	str	r0, [r7, #12]
 8005e88:	60b9      	str	r1, [r7, #8]
 8005e8a:	4611      	mov	r1, r2
 8005e8c:	461a      	mov	r2, r3
 8005e8e:	460b      	mov	r3, r1
 8005e90:	80fb      	strh	r3, [r7, #6]
 8005e92:	4613      	mov	r3, r2
 8005e94:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8005e96:	88bb      	ldrh	r3, [r7, #4]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	085b      	lsrs	r3, r3, #1
 8005e9c:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	005a      	lsls	r2, r3, #1
 8005eaa:	69fb      	ldr	r3, [r7, #28]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005eb2:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8005eb4:	6a3b      	ldr	r3, [r7, #32]
 8005eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005eb8:	e01e      	b.n	8005ef8 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8005eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8005ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec2:	3301      	adds	r3, #1
 8005ec4:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8005ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec8:	781b      	ldrb	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	021b      	lsls	r3, r3, #8
 8005ece:	b29b      	uxth	r3, r3
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	69bb      	ldr	r3, [r7, #24]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	b29a      	uxth	r2, r3
 8005edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ede:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8005ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee2:	3302      	adds	r3, #2
 8005ee4:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8005ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee8:	3302      	adds	r3, #2
 8005eea:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8005eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eee:	3301      	adds	r3, #1
 8005ef0:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8005ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ef4:	3b01      	subs	r3, #1
 8005ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1dd      	bne.n	8005eba <USB_WritePMA+0x3a>
  }
}
 8005efe:	bf00      	nop
 8005f00:	bf00      	nop
 8005f02:	3734      	adds	r7, #52	; 0x34
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bc80      	pop	{r7}
 8005f08:	4770      	bx	lr

08005f0a <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b08b      	sub	sp, #44	; 0x2c
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	60f8      	str	r0, [r7, #12]
 8005f12:	60b9      	str	r1, [r7, #8]
 8005f14:	4611      	mov	r1, r2
 8005f16:	461a      	mov	r2, r3
 8005f18:	460b      	mov	r3, r1
 8005f1a:	80fb      	strh	r3, [r7, #6]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8005f20:	88bb      	ldrh	r3, [r7, #4]
 8005f22:	085b      	lsrs	r3, r3, #1
 8005f24:	b29b      	uxth	r3, r3
 8005f26:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005f30:	88fb      	ldrh	r3, [r7, #6]
 8005f32:	005a      	lsls	r2, r3, #1
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	4413      	add	r3, r2
 8005f38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f3c:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8005f3e:	69bb      	ldr	r3, [r7, #24]
 8005f40:	627b      	str	r3, [r7, #36]	; 0x24
 8005f42:	e01b      	b.n	8005f7c <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8005f44:	6a3b      	ldr	r3, [r7, #32]
 8005f46:	881b      	ldrh	r3, [r3, #0]
 8005f48:	b29b      	uxth	r3, r3
 8005f4a:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8005f4c:	6a3b      	ldr	r3, [r7, #32]
 8005f4e:	3302      	adds	r3, #2
 8005f50:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	0a1b      	lsrs	r3, r3, #8
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	3301      	adds	r3, #1
 8005f6e:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8005f70:	6a3b      	ldr	r3, [r7, #32]
 8005f72:	3302      	adds	r3, #2
 8005f74:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	627b      	str	r3, [r7, #36]	; 0x24
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e0      	bne.n	8005f44 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005f82:	88bb      	ldrh	r3, [r7, #4]
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d007      	beq.n	8005f9e <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8005f8e:	6a3b      	ldr	r3, [r7, #32]
 8005f90:	881b      	ldrh	r3, [r3, #0]
 8005f92:	b29b      	uxth	r3, r3
 8005f94:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005f96:	693b      	ldr	r3, [r7, #16]
 8005f98:	b2da      	uxtb	r2, r3
 8005f9a:	69fb      	ldr	r3, [r7, #28]
 8005f9c:	701a      	strb	r2, [r3, #0]
  }
}
 8005f9e:	bf00      	nop
 8005fa0:	372c      	adds	r7, #44	; 0x2c
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bc80      	pop	{r7}
 8005fa6:	4770      	bx	lr

08005fa8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b084      	sub	sp, #16
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8005fb4:	2300      	movs	r3, #0
 8005fb6:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	7c1b      	ldrb	r3, [r3, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d115      	bne.n	8005fec <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	2181      	movs	r1, #129	; 0x81
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f001 fe30 	bl	8007c2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2201      	movs	r2, #1
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005fd8:	2202      	movs	r2, #2
 8005fda:	2101      	movs	r1, #1
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 fe26 	bl	8007c2e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8005fea:	e012      	b.n	8006012 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005fec:	2340      	movs	r3, #64	; 0x40
 8005fee:	2202      	movs	r2, #2
 8005ff0:	2181      	movs	r1, #129	; 0x81
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f001 fe1b 	bl	8007c2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005ffe:	2340      	movs	r3, #64	; 0x40
 8006000:	2202      	movs	r2, #2
 8006002:	2101      	movs	r1, #1
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fe12 	bl	8007c2e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2201      	movs	r2, #1
 800600e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8006012:	2308      	movs	r3, #8
 8006014:	2203      	movs	r2, #3
 8006016:	2182      	movs	r1, #130	; 0x82
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f001 fe08 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2201      	movs	r2, #1
 8006022:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006024:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006028:	f001 ff28 	bl	8007e7c <USBD_static_malloc>
 800602c:	4602      	mov	r2, r0
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	2b00      	cmp	r3, #0
 800603c:	d102      	bne.n	8006044 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800603e:	2301      	movs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
 8006042:	e026      	b.n	8006092 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2200      	movs	r2, #0
 800605a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2200      	movs	r2, #0
 8006062:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	7c1b      	ldrb	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d109      	bne.n	8006082 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006074:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006078:	2101      	movs	r1, #1
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 fec8 	bl	8007e10 <USBD_LL_PrepareReceive>
 8006080:	e007      	b.n	8006092 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006088:	2340      	movs	r3, #64	; 0x40
 800608a:	2101      	movs	r1, #1
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 febf 	bl	8007e10 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006092:	7bfb      	ldrb	r3, [r7, #15]
}
 8006094:	4618      	mov	r0, r3
 8006096:	3710      	adds	r7, #16
 8006098:	46bd      	mov	sp, r7
 800609a:	bd80      	pop	{r7, pc}

0800609c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b084      	sub	sp, #16
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
 80060a4:	460b      	mov	r3, r1
 80060a6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80060a8:	2300      	movs	r3, #0
 80060aa:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80060ac:	2181      	movs	r1, #129	; 0x81
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f001 fde3 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80060ba:	2101      	movs	r1, #1
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fddc 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80060ca:	2182      	movs	r1, #130	; 0x82
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	f001 fdd4 	bl	8007c7a <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00e      	beq.n	8006100 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060f2:	4618      	mov	r0, r3
 80060f4:	f001 fece 	bl	8007e94 <USBD_static_free>
    pdev->pClassData = NULL;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006100:	7bfb      	ldrb	r3, [r7, #15]
}
 8006102:	4618      	mov	r0, r3
 8006104:	3710      	adds	r7, #16
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}

0800610a <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800610a:	b580      	push	{r7, lr}
 800610c:	b086      	sub	sp, #24
 800610e:	af00      	add	r7, sp, #0
 8006110:	6078      	str	r0, [r7, #4]
 8006112:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800611a:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800611c:	2300      	movs	r3, #0
 800611e:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006124:	2300      	movs	r3, #0
 8006126:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006130:	2b00      	cmp	r3, #0
 8006132:	d039      	beq.n	80061a8 <USBD_CDC_Setup+0x9e>
 8006134:	2b20      	cmp	r3, #32
 8006136:	d17f      	bne.n	8006238 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	88db      	ldrh	r3, [r3, #6]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d029      	beq.n	8006194 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	781b      	ldrb	r3, [r3, #0]
 8006144:	b25b      	sxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	da11      	bge.n	800616e <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 8006156:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	88d2      	ldrh	r2, [r2, #6]
 800615c:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800615e:	6939      	ldr	r1, [r7, #16]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	88db      	ldrh	r3, [r3, #6]
 8006164:	461a      	mov	r2, r3
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f001 f9d9 	bl	800751e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 800616c:	e06b      	b.n	8006246 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	785a      	ldrb	r2, [r3, #1]
 8006172:	693b      	ldr	r3, [r7, #16]
 8006174:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	88db      	ldrh	r3, [r3, #6]
 800617c:	b2da      	uxtb	r2, r3
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006184:	6939      	ldr	r1, [r7, #16]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	88db      	ldrh	r3, [r3, #6]
 800618a:	461a      	mov	r2, r3
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f001 f9f4 	bl	800757a <USBD_CtlPrepareRx>
      break;
 8006192:	e058      	b.n	8006246 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	7850      	ldrb	r0, [r2, #1]
 80061a0:	2200      	movs	r2, #0
 80061a2:	6839      	ldr	r1, [r7, #0]
 80061a4:	4798      	blx	r3
      break;
 80061a6:	e04e      	b.n	8006246 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80061a8:	683b      	ldr	r3, [r7, #0]
 80061aa:	785b      	ldrb	r3, [r3, #1]
 80061ac:	2b0b      	cmp	r3, #11
 80061ae:	d02e      	beq.n	800620e <USBD_CDC_Setup+0x104>
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	dc38      	bgt.n	8006226 <USBD_CDC_Setup+0x11c>
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d002      	beq.n	80061be <USBD_CDC_Setup+0xb4>
 80061b8:	2b0a      	cmp	r3, #10
 80061ba:	d014      	beq.n	80061e6 <USBD_CDC_Setup+0xdc>
 80061bc:	e033      	b.n	8006226 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c4:	2b03      	cmp	r3, #3
 80061c6:	d107      	bne.n	80061d8 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80061c8:	f107 030c 	add.w	r3, r7, #12
 80061cc:	2202      	movs	r2, #2
 80061ce:	4619      	mov	r1, r3
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f001 f9a4 	bl	800751e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061d6:	e02e      	b.n	8006236 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f001 f935 	bl	800744a <USBD_CtlError>
            ret = USBD_FAIL;
 80061e0:	2302      	movs	r3, #2
 80061e2:	75fb      	strb	r3, [r7, #23]
          break;
 80061e4:	e027      	b.n	8006236 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061ec:	2b03      	cmp	r3, #3
 80061ee:	d107      	bne.n	8006200 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80061f0:	f107 030f 	add.w	r3, r7, #15
 80061f4:	2201      	movs	r2, #1
 80061f6:	4619      	mov	r1, r3
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 f990 	bl	800751e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80061fe:	e01a      	b.n	8006236 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006200:	6839      	ldr	r1, [r7, #0]
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f001 f921 	bl	800744a <USBD_CtlError>
            ret = USBD_FAIL;
 8006208:	2302      	movs	r3, #2
 800620a:	75fb      	strb	r3, [r7, #23]
          break;
 800620c:	e013      	b.n	8006236 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006214:	2b03      	cmp	r3, #3
 8006216:	d00d      	beq.n	8006234 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006218:	6839      	ldr	r1, [r7, #0]
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 f915 	bl	800744a <USBD_CtlError>
            ret = USBD_FAIL;
 8006220:	2302      	movs	r3, #2
 8006222:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006224:	e006      	b.n	8006234 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006226:	6839      	ldr	r1, [r7, #0]
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 f90e 	bl	800744a <USBD_CtlError>
          ret = USBD_FAIL;
 800622e:	2302      	movs	r3, #2
 8006230:	75fb      	strb	r3, [r7, #23]
          break;
 8006232:	e000      	b.n	8006236 <USBD_CDC_Setup+0x12c>
          break;
 8006234:	bf00      	nop
      }
      break;
 8006236:	e006      	b.n	8006246 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f001 f905 	bl	800744a <USBD_CtlError>
      ret = USBD_FAIL;
 8006240:	2302      	movs	r3, #2
 8006242:	75fb      	strb	r3, [r7, #23]
      break;
 8006244:	bf00      	nop
  }

  return ret;
 8006246:	7dfb      	ldrb	r3, [r7, #23]
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
 8006258:	460b      	mov	r3, r1
 800625a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006262:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800626a:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006272:	2b00      	cmp	r3, #0
 8006274:	d03a      	beq.n	80062ec <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006276:	78fa      	ldrb	r2, [r7, #3]
 8006278:	6879      	ldr	r1, [r7, #4]
 800627a:	4613      	mov	r3, r2
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	4413      	add	r3, r2
 8006280:	009b      	lsls	r3, r3, #2
 8006282:	440b      	add	r3, r1
 8006284:	331c      	adds	r3, #28
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d029      	beq.n	80062e0 <USBD_CDC_DataIn+0x90>
 800628c:	78fa      	ldrb	r2, [r7, #3]
 800628e:	6879      	ldr	r1, [r7, #4]
 8006290:	4613      	mov	r3, r2
 8006292:	009b      	lsls	r3, r3, #2
 8006294:	4413      	add	r3, r2
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	331c      	adds	r3, #28
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	78f9      	ldrb	r1, [r7, #3]
 80062a0:	68b8      	ldr	r0, [r7, #8]
 80062a2:	460b      	mov	r3, r1
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	440b      	add	r3, r1
 80062a8:	00db      	lsls	r3, r3, #3
 80062aa:	4403      	add	r3, r0
 80062ac:	3338      	adds	r3, #56	; 0x38
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	fbb2 f1f3 	udiv	r1, r2, r3
 80062b4:	fb01 f303 	mul.w	r3, r1, r3
 80062b8:	1ad3      	subs	r3, r2, r3
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d110      	bne.n	80062e0 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80062be:	78fa      	ldrb	r2, [r7, #3]
 80062c0:	6879      	ldr	r1, [r7, #4]
 80062c2:	4613      	mov	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	4413      	add	r3, r2
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	440b      	add	r3, r1
 80062cc:	331c      	adds	r3, #28
 80062ce:	2200      	movs	r2, #0
 80062d0:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80062d2:	78f9      	ldrb	r1, [r7, #3]
 80062d4:	2300      	movs	r3, #0
 80062d6:	2200      	movs	r2, #0
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f001 fd76 	bl	8007dca <USBD_LL_Transmit>
 80062de:	e003      	b.n	80062e8 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 80062e8:	2300      	movs	r3, #0
 80062ea:	e000      	b.n	80062ee <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 80062ec:	2302      	movs	r3, #2
  }
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80062f6:	b580      	push	{r7, lr}
 80062f8:	b084      	sub	sp, #16
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
 80062fe:	460b      	mov	r3, r1
 8006300:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006308:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800630a:	78fb      	ldrb	r3, [r7, #3]
 800630c:	4619      	mov	r1, r3
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f001 fda1 	bl	8007e56 <USBD_LL_GetRxDataSize>
 8006314:	4602      	mov	r2, r0
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006322:	2b00      	cmp	r3, #0
 8006324:	d00d      	beq.n	8006342 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	68fa      	ldr	r2, [r7, #12]
 8006330:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006334:	68fa      	ldr	r2, [r7, #12]
 8006336:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800633a:	4611      	mov	r1, r2
 800633c:	4798      	blx	r3

    return USBD_OK;
 800633e:	2300      	movs	r3, #0
 8006340:	e000      	b.n	8006344 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006342:	2302      	movs	r3, #2
  }
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}

0800634c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800635a:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006362:	2b00      	cmp	r3, #0
 8006364:	d015      	beq.n	8006392 <USBD_CDC_EP0_RxReady+0x46>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800636c:	2bff      	cmp	r3, #255	; 0xff
 800636e:	d010      	beq.n	8006392 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800637e:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006380:	68fa      	ldr	r2, [r7, #12]
 8006382:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006386:	b292      	uxth	r2, r2
 8006388:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	22ff      	movs	r2, #255	; 0xff
 800638e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006392:	2300      	movs	r3, #0
}
 8006394:	4618      	mov	r0, r3
 8006396:	3710      	adds	r7, #16
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800639c:	b480      	push	{r7}
 800639e:	b083      	sub	sp, #12
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2243      	movs	r2, #67	; 0x43
 80063a8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80063aa:	4b03      	ldr	r3, [pc, #12]	; (80063b8 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	20000094 	.word	0x20000094

080063bc <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80063bc:	b480      	push	{r7}
 80063be:	b083      	sub	sp, #12
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2243      	movs	r2, #67	; 0x43
 80063c8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80063ca:	4b03      	ldr	r3, [pc, #12]	; (80063d8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	370c      	adds	r7, #12
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bc80      	pop	{r7}
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop
 80063d8:	20000050 	.word	0x20000050

080063dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063dc:	b480      	push	{r7}
 80063de:	b083      	sub	sp, #12
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2243      	movs	r2, #67	; 0x43
 80063e8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 80063ea:	4b03      	ldr	r3, [pc, #12]	; (80063f8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bc80      	pop	{r7}
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	200000d8 	.word	0x200000d8

080063fc <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	220a      	movs	r2, #10
 8006408:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800640a:	4b03      	ldr	r3, [pc, #12]	; (8006418 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800640c:	4618      	mov	r0, r3
 800640e:	370c      	adds	r7, #12
 8006410:	46bd      	mov	sp, r7
 8006412:	bc80      	pop	{r7}
 8006414:	4770      	bx	lr
 8006416:	bf00      	nop
 8006418:	2000000c 	.word	0x2000000c

0800641c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006426:	2302      	movs	r3, #2
 8006428:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d005      	beq.n	800643c <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	683a      	ldr	r2, [r7, #0]
 8006434:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006438:	2300      	movs	r3, #0
 800643a:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800643c:	7bfb      	ldrb	r3, [r7, #15]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3714      	adds	r7, #20
 8006442:	46bd      	mov	sp, r7
 8006444:	bc80      	pop	{r7}
 8006446:	4770      	bx	lr

08006448 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800645c:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	68ba      	ldr	r2, [r7, #8]
 8006462:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006466:	88fa      	ldrh	r2, [r7, #6]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800646e:	2300      	movs	r3, #0
}
 8006470:	4618      	mov	r0, r3
 8006472:	371c      	adds	r7, #28
 8006474:	46bd      	mov	sp, r7
 8006476:	bc80      	pop	{r7}
 8006478:	4770      	bx	lr

0800647a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800647a:	b480      	push	{r7}
 800647c:	b085      	sub	sp, #20
 800647e:	af00      	add	r7, sp, #0
 8006480:	6078      	str	r0, [r7, #4]
 8006482:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648a:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	683a      	ldr	r2, [r7, #0]
 8006490:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3714      	adds	r7, #20
 800649a:	46bd      	mov	sp, r7
 800649c:	bc80      	pop	{r7}
 800649e:	4770      	bx	lr

080064a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064ae:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d017      	beq.n	80064ea <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	7c1b      	ldrb	r3, [r3, #16]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d109      	bne.n	80064d6 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80064cc:	2101      	movs	r1, #1
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f001 fc9e 	bl	8007e10 <USBD_LL_PrepareReceive>
 80064d4:	e007      	b.n	80064e6 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064dc:	2340      	movs	r3, #64	; 0x40
 80064de:	2101      	movs	r1, #1
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 fc95 	bl	8007e10 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80064e6:	2300      	movs	r3, #0
 80064e8:	e000      	b.n	80064ec <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80064ea:	2302      	movs	r3, #2
  }
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	4613      	mov	r3, r2
 8006500:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006508:	2302      	movs	r3, #2
 800650a:	e01a      	b.n	8006542 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006512:	2b00      	cmp	r3, #0
 8006514:	d003      	beq.n	800651e <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	2200      	movs	r2, #0
 800651a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d003      	beq.n	800652c <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	79fa      	ldrb	r2, [r7, #7]
 8006538:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800653a:	68f8      	ldr	r0, [r7, #12]
 800653c:	f001 fb02 	bl	8007b44 <USBD_LL_Init>

  return USBD_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800654a:	b480      	push	{r7}
 800654c:	b085      	sub	sp, #20
 800654e:	af00      	add	r7, sp, #0
 8006550:	6078      	str	r0, [r7, #4]
 8006552:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006554:	2300      	movs	r3, #0
 8006556:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b00      	cmp	r3, #0
 800655c:	d006      	beq.n	800656c <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	683a      	ldr	r2, [r7, #0]
 8006562:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006566:	2300      	movs	r3, #0
 8006568:	73fb      	strb	r3, [r7, #15]
 800656a:	e001      	b.n	8006570 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800656c:	2302      	movs	r3, #2
 800656e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006570:	7bfb      	ldrb	r3, [r7, #15]
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	bc80      	pop	{r7}
 800657a:	4770      	bx	lr

0800657c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b082      	sub	sp, #8
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 fb37 	bl	8007bf8 <USBD_LL_Start>

  return USBD_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	3708      	adds	r7, #8
 8006590:	46bd      	mov	sp, r7
 8006592:	bd80      	pop	{r7, pc}

08006594 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006594:	b480      	push	{r7}
 8006596:	b083      	sub	sp, #12
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	370c      	adds	r7, #12
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bc80      	pop	{r7}
 80065a6:	4770      	bx	lr

080065a8 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	460b      	mov	r3, r1
 80065b2:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80065b4:	2302      	movs	r3, #2
 80065b6:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00c      	beq.n	80065dc <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	78fa      	ldrb	r2, [r7, #3]
 80065cc:	4611      	mov	r1, r2
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d101      	bne.n	80065dc <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80065d8:	2300      	movs	r3, #0
 80065da:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80065dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b082      	sub	sp, #8
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	78fa      	ldrb	r2, [r7, #3]
 80065fc:	4611      	mov	r1, r2
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3

  return USBD_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b082      	sub	sp, #8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800661c:	6839      	ldr	r1, [r7, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fed7 	bl	80073d2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006632:	461a      	mov	r2, r3
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006640:	f003 031f 	and.w	r3, r3, #31
 8006644:	2b02      	cmp	r3, #2
 8006646:	d016      	beq.n	8006676 <USBD_LL_SetupStage+0x6a>
 8006648:	2b02      	cmp	r3, #2
 800664a:	d81c      	bhi.n	8006686 <USBD_LL_SetupStage+0x7a>
 800664c:	2b00      	cmp	r3, #0
 800664e:	d002      	beq.n	8006656 <USBD_LL_SetupStage+0x4a>
 8006650:	2b01      	cmp	r3, #1
 8006652:	d008      	beq.n	8006666 <USBD_LL_SetupStage+0x5a>
 8006654:	e017      	b.n	8006686 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800665c:	4619      	mov	r1, r3
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9ca 	bl	80069f8 <USBD_StdDevReq>
      break;
 8006664:	e01a      	b.n	800669c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fa2c 	bl	8006acc <USBD_StdItfReq>
      break;
 8006674:	e012      	b.n	800669c <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 800667c:	4619      	mov	r1, r3
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f000 fa6c 	bl	8006b5c <USBD_StdEPReq>
      break;
 8006684:	e00a      	b.n	800669c <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800668c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006690:	b2db      	uxtb	r3, r3
 8006692:	4619      	mov	r1, r3
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f001 fb0f 	bl	8007cb8 <USBD_LL_StallEP>
      break;
 800669a:	bf00      	nop
  }

  return USBD_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b086      	sub	sp, #24
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	60f8      	str	r0, [r7, #12]
 80066ae:	460b      	mov	r3, r1
 80066b0:	607a      	str	r2, [r7, #4]
 80066b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80066b4:	7afb      	ldrb	r3, [r7, #11]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d14b      	bne.n	8006752 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80066c0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80066c8:	2b03      	cmp	r3, #3
 80066ca:	d134      	bne.n	8006736 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	68da      	ldr	r2, [r3, #12]
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d919      	bls.n	800670c <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	68da      	ldr	r2, [r3, #12]
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	1ad2      	subs	r2, r2, r3
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	697b      	ldr	r3, [r7, #20]
 80066ec:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066ee:	429a      	cmp	r2, r3
 80066f0:	d203      	bcs.n	80066fa <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	e002      	b.n	8006700 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80066fe:	b29b      	uxth	r3, r3
 8006700:	461a      	mov	r2, r3
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	68f8      	ldr	r0, [r7, #12]
 8006706:	f000 ff56 	bl	80075b6 <USBD_CtlContinueRx>
 800670a:	e038      	b.n	800677e <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006712:	691b      	ldr	r3, [r3, #16]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d00a      	beq.n	800672e <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800671e:	2b03      	cmp	r3, #3
 8006720:	d105      	bne.n	800672e <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	68f8      	ldr	r0, [r7, #12]
 800672c:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800672e:	68f8      	ldr	r0, [r7, #12]
 8006730:	f000 ff53 	bl	80075da <USBD_CtlSendStatus>
 8006734:	e023      	b.n	800677e <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800673c:	2b05      	cmp	r3, #5
 800673e:	d11e      	bne.n	800677e <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2200      	movs	r2, #0
 8006744:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006748:	2100      	movs	r1, #0
 800674a:	68f8      	ldr	r0, [r7, #12]
 800674c:	f001 fab4 	bl	8007cb8 <USBD_LL_StallEP>
 8006750:	e015      	b.n	800677e <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006758:	699b      	ldr	r3, [r3, #24]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d00d      	beq.n	800677a <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006764:	2b03      	cmp	r3, #3
 8006766:	d108      	bne.n	800677a <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	7afa      	ldrb	r2, [r7, #11]
 8006772:	4611      	mov	r1, r2
 8006774:	68f8      	ldr	r0, [r7, #12]
 8006776:	4798      	blx	r3
 8006778:	e001      	b.n	800677e <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800677a:	2302      	movs	r3, #2
 800677c:	e000      	b.n	8006780 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800677e:	2300      	movs	r3, #0
}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}

08006788 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	60f8      	str	r0, [r7, #12]
 8006790:	460b      	mov	r3, r1
 8006792:	607a      	str	r2, [r7, #4]
 8006794:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d17f      	bne.n	800689c <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	3314      	adds	r3, #20
 80067a0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067a8:	2b02      	cmp	r3, #2
 80067aa:	d15c      	bne.n	8006866 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	68da      	ldr	r2, [r3, #12]
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	429a      	cmp	r2, r3
 80067b6:	d915      	bls.n	80067e4 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	68da      	ldr	r2, [r3, #12]
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	1ad2      	subs	r2, r2, r3
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	68db      	ldr	r3, [r3, #12]
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	461a      	mov	r2, r3
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	68f8      	ldr	r0, [r7, #12]
 80067d2:	f000 fec0 	bl	8007556 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067d6:	2300      	movs	r3, #0
 80067d8:	2200      	movs	r2, #0
 80067da:	2100      	movs	r1, #0
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f001 fb17 	bl	8007e10 <USBD_LL_PrepareReceive>
 80067e2:	e04e      	b.n	8006882 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	6912      	ldr	r2, [r2, #16]
 80067ec:	fbb3 f1f2 	udiv	r1, r3, r2
 80067f0:	fb01 f202 	mul.w	r2, r1, r2
 80067f4:	1a9b      	subs	r3, r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d11c      	bne.n	8006834 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80067fa:	697b      	ldr	r3, [r7, #20]
 80067fc:	689a      	ldr	r2, [r3, #8]
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006802:	429a      	cmp	r2, r3
 8006804:	d316      	bcc.n	8006834 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006810:	429a      	cmp	r2, r3
 8006812:	d20f      	bcs.n	8006834 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006814:	2200      	movs	r2, #0
 8006816:	2100      	movs	r1, #0
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fe9c 	bl	8007556 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2200      	movs	r2, #0
 8006822:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006826:	2300      	movs	r3, #0
 8006828:	2200      	movs	r2, #0
 800682a:	2100      	movs	r1, #0
 800682c:	68f8      	ldr	r0, [r7, #12]
 800682e:	f001 faef 	bl	8007e10 <USBD_LL_PrepareReceive>
 8006832:	e026      	b.n	8006882 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800683a:	68db      	ldr	r3, [r3, #12]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d00a      	beq.n	8006856 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006846:	2b03      	cmp	r3, #3
 8006848:	d105      	bne.n	8006856 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68f8      	ldr	r0, [r7, #12]
 8006854:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006856:	2180      	movs	r1, #128	; 0x80
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f001 fa2d 	bl	8007cb8 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800685e:	68f8      	ldr	r0, [r7, #12]
 8006860:	f000 fece 	bl	8007600 <USBD_CtlReceiveStatus>
 8006864:	e00d      	b.n	8006882 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800686c:	2b04      	cmp	r3, #4
 800686e:	d004      	beq.n	800687a <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006876:	2b00      	cmp	r3, #0
 8006878:	d103      	bne.n	8006882 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800687a:	2180      	movs	r1, #128	; 0x80
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f001 fa1b 	bl	8007cb8 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006888:	2b01      	cmp	r3, #1
 800688a:	d11d      	bne.n	80068c8 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800688c:	68f8      	ldr	r0, [r7, #12]
 800688e:	f7ff fe81 	bl	8006594 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800689a:	e015      	b.n	80068c8 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068a2:	695b      	ldr	r3, [r3, #20]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00d      	beq.n	80068c4 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 80068ae:	2b03      	cmp	r3, #3
 80068b0:	d108      	bne.n	80068c4 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b8:	695b      	ldr	r3, [r3, #20]
 80068ba:	7afa      	ldrb	r2, [r7, #11]
 80068bc:	4611      	mov	r1, r2
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	4798      	blx	r3
 80068c2:	e001      	b.n	80068c8 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068c4:	2302      	movs	r3, #2
 80068c6:	e000      	b.n	80068ca <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b082      	sub	sp, #8
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068da:	2340      	movs	r3, #64	; 0x40
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f9a4 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2201      	movs	r2, #1
 80068ea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	2240      	movs	r2, #64	; 0x40
 80068f2:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80068f6:	2340      	movs	r3, #64	; 0x40
 80068f8:	2200      	movs	r2, #0
 80068fa:	2180      	movs	r1, #128	; 0x80
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f001 f996 	bl	8007c2e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2201      	movs	r2, #1
 8006906:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	2240      	movs	r2, #64	; 0x40
 800690c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2201      	movs	r2, #1
 8006912:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2200      	movs	r2, #0
 800691a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2200      	movs	r2, #0
 8006922:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	2b00      	cmp	r3, #0
 8006934:	d009      	beq.n	800694a <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	687a      	ldr	r2, [r7, #4]
 8006940:	6852      	ldr	r2, [r2, #4]
 8006942:	b2d2      	uxtb	r2, r2
 8006944:	4611      	mov	r1, r2
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	4798      	blx	r3
  }

  return USBD_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006954:	b480      	push	{r7}
 8006956:	b083      	sub	sp, #12
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
 800695c:	460b      	mov	r3, r1
 800695e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	78fa      	ldrb	r2, [r7, #3]
 8006964:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	bc80      	pop	{r7}
 8006970:	4770      	bx	lr

08006972 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006972:	b480      	push	{r7}
 8006974:	b083      	sub	sp, #12
 8006976:	af00      	add	r7, sp, #0
 8006978:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	2204      	movs	r2, #4
 800698a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800698e:	2300      	movs	r3, #0
}
 8006990:	4618      	mov	r0, r3
 8006992:	370c      	adds	r7, #12
 8006994:	46bd      	mov	sp, r7
 8006996:	bc80      	pop	{r7}
 8006998:	4770      	bx	lr

0800699a <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800699a:	b480      	push	{r7}
 800699c:	b083      	sub	sp, #12
 800699e:	af00      	add	r7, sp, #0
 80069a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a8:	2b04      	cmp	r3, #4
 80069aa:	d105      	bne.n	80069b8 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80069b8:	2300      	movs	r3, #0
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	370c      	adds	r7, #12
 80069be:	46bd      	mov	sp, r7
 80069c0:	bc80      	pop	{r7}
 80069c2:	4770      	bx	lr

080069c4 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b082      	sub	sp, #8
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069d2:	2b03      	cmp	r3, #3
 80069d4:	d10b      	bne.n	80069ee <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069dc:	69db      	ldr	r3, [r3, #28]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d005      	beq.n	80069ee <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069ee:	2300      	movs	r3, #0
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3708      	adds	r7, #8
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a0e:	2b40      	cmp	r3, #64	; 0x40
 8006a10:	d005      	beq.n	8006a1e <USBD_StdDevReq+0x26>
 8006a12:	2b40      	cmp	r3, #64	; 0x40
 8006a14:	d84f      	bhi.n	8006ab6 <USBD_StdDevReq+0xbe>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d009      	beq.n	8006a2e <USBD_StdDevReq+0x36>
 8006a1a:	2b20      	cmp	r3, #32
 8006a1c:	d14b      	bne.n	8006ab6 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	6839      	ldr	r1, [r7, #0]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	4798      	blx	r3
      break;
 8006a2c:	e048      	b.n	8006ac0 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	785b      	ldrb	r3, [r3, #1]
 8006a32:	2b09      	cmp	r3, #9
 8006a34:	d839      	bhi.n	8006aaa <USBD_StdDevReq+0xb2>
 8006a36:	a201      	add	r2, pc, #4	; (adr r2, 8006a3c <USBD_StdDevReq+0x44>)
 8006a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3c:	08006a8d 	.word	0x08006a8d
 8006a40:	08006aa1 	.word	0x08006aa1
 8006a44:	08006aab 	.word	0x08006aab
 8006a48:	08006a97 	.word	0x08006a97
 8006a4c:	08006aab 	.word	0x08006aab
 8006a50:	08006a6f 	.word	0x08006a6f
 8006a54:	08006a65 	.word	0x08006a65
 8006a58:	08006aab 	.word	0x08006aab
 8006a5c:	08006a83 	.word	0x08006a83
 8006a60:	08006a79 	.word	0x08006a79
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f9dc 	bl	8006e24 <USBD_GetDescriptor>
          break;
 8006a6c:	e022      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fb3f 	bl	80070f4 <USBD_SetAddress>
          break;
 8006a76:	e01d      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006a78:	6839      	ldr	r1, [r7, #0]
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 fb7e 	bl	800717c <USBD_SetConfig>
          break;
 8006a80:	e018      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 fc07 	bl	8007298 <USBD_GetConfig>
          break;
 8006a8a:	e013      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a8c:	6839      	ldr	r1, [r7, #0]
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 fc37 	bl	8007302 <USBD_GetStatus>
          break;
 8006a94:	e00e      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a96:	6839      	ldr	r1, [r7, #0]
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f000 fc65 	bl	8007368 <USBD_SetFeature>
          break;
 8006a9e:	e009      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006aa0:	6839      	ldr	r1, [r7, #0]
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 fc74 	bl	8007390 <USBD_ClrFeature>
          break;
 8006aa8:	e004      	b.n	8006ab4 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f000 fccc 	bl	800744a <USBD_CtlError>
          break;
 8006ab2:	bf00      	nop
      }
      break;
 8006ab4:	e004      	b.n	8006ac0 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ab6:	6839      	ldr	r1, [r7, #0]
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f000 fcc6 	bl	800744a <USBD_CtlError>
      break;
 8006abe:	bf00      	nop
  }

  return ret;
 8006ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop

08006acc <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	781b      	ldrb	r3, [r3, #0]
 8006ade:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ae2:	2b40      	cmp	r3, #64	; 0x40
 8006ae4:	d005      	beq.n	8006af2 <USBD_StdItfReq+0x26>
 8006ae6:	2b40      	cmp	r3, #64	; 0x40
 8006ae8:	d82e      	bhi.n	8006b48 <USBD_StdItfReq+0x7c>
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <USBD_StdItfReq+0x26>
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d12a      	bne.n	8006b48 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006af8:	3b01      	subs	r3, #1
 8006afa:	2b02      	cmp	r3, #2
 8006afc:	d81d      	bhi.n	8006b3a <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	889b      	ldrh	r3, [r3, #4]
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d813      	bhi.n	8006b30 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	6839      	ldr	r1, [r7, #0]
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	4798      	blx	r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d110      	bne.n	8006b44 <USBD_StdItfReq+0x78>
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fd56 	bl	80075da <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b2e:	e009      	b.n	8006b44 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fc89 	bl	800744a <USBD_CtlError>
          break;
 8006b38:	e004      	b.n	8006b44 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fc84 	bl	800744a <USBD_CtlError>
          break;
 8006b42:	e000      	b.n	8006b46 <USBD_StdItfReq+0x7a>
          break;
 8006b44:	bf00      	nop
      }
      break;
 8006b46:	e004      	b.n	8006b52 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fc7d 	bl	800744a <USBD_CtlError>
      break;
 8006b50:	bf00      	nop
  }

  return USBD_OK;
 8006b52:	2300      	movs	r3, #0
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	889b      	ldrh	r3, [r3, #4]
 8006b6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x30>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	f200 8146 	bhi.w	8006e0e <USBD_StdEPReq+0x2b2>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d00a      	beq.n	8006b9c <USBD_StdEPReq+0x40>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	f040 8141 	bne.w	8006e0e <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	4798      	blx	r3
      break;
 8006b9a:	e13d      	b.n	8006e18 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	781b      	ldrb	r3, [r3, #0]
 8006ba0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d10a      	bne.n	8006bbe <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	6839      	ldr	r1, [r7, #0]
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	4798      	blx	r3
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006bba:	7bfb      	ldrb	r3, [r7, #15]
 8006bbc:	e12d      	b.n	8006e1a <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	785b      	ldrb	r3, [r3, #1]
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d007      	beq.n	8006bd6 <USBD_StdEPReq+0x7a>
 8006bc6:	2b03      	cmp	r3, #3
 8006bc8:	f300 811b 	bgt.w	8006e02 <USBD_StdEPReq+0x2a6>
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d072      	beq.n	8006cb6 <USBD_StdEPReq+0x15a>
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d03a      	beq.n	8006c4a <USBD_StdEPReq+0xee>
 8006bd4:	e115      	b.n	8006e02 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d002      	beq.n	8006be6 <USBD_StdEPReq+0x8a>
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d015      	beq.n	8006c10 <USBD_StdEPReq+0xb4>
 8006be4:	e02b      	b.n	8006c3e <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d00c      	beq.n	8006c06 <USBD_StdEPReq+0xaa>
 8006bec:	7bbb      	ldrb	r3, [r7, #14]
 8006bee:	2b80      	cmp	r3, #128	; 0x80
 8006bf0:	d009      	beq.n	8006c06 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f001 f85e 	bl	8007cb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006bfc:	2180      	movs	r1, #128	; 0x80
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f001 f85a 	bl	8007cb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c04:	e020      	b.n	8006c48 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006c06:	6839      	ldr	r1, [r7, #0]
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f000 fc1e 	bl	800744a <USBD_CtlError>
              break;
 8006c0e:	e01b      	b.n	8006c48 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	885b      	ldrh	r3, [r3, #2]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10e      	bne.n	8006c36 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006c18:	7bbb      	ldrb	r3, [r7, #14]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00b      	beq.n	8006c36 <USBD_StdEPReq+0xda>
 8006c1e:	7bbb      	ldrb	r3, [r7, #14]
 8006c20:	2b80      	cmp	r3, #128	; 0x80
 8006c22:	d008      	beq.n	8006c36 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	88db      	ldrh	r3, [r3, #6]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d104      	bne.n	8006c36 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006c2c:	7bbb      	ldrb	r3, [r7, #14]
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 f841 	bl	8007cb8 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fccf 	bl	80075da <USBD_CtlSendStatus>

              break;
 8006c3c:	e004      	b.n	8006c48 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006c3e:	6839      	ldr	r1, [r7, #0]
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fc02 	bl	800744a <USBD_CtlError>
              break;
 8006c46:	bf00      	nop
          }
          break;
 8006c48:	e0e0      	b.n	8006e0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c50:	2b02      	cmp	r3, #2
 8006c52:	d002      	beq.n	8006c5a <USBD_StdEPReq+0xfe>
 8006c54:	2b03      	cmp	r3, #3
 8006c56:	d015      	beq.n	8006c84 <USBD_StdEPReq+0x128>
 8006c58:	e026      	b.n	8006ca8 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c5a:	7bbb      	ldrb	r3, [r7, #14]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00c      	beq.n	8006c7a <USBD_StdEPReq+0x11e>
 8006c60:	7bbb      	ldrb	r3, [r7, #14]
 8006c62:	2b80      	cmp	r3, #128	; 0x80
 8006c64:	d009      	beq.n	8006c7a <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006c66:	7bbb      	ldrb	r3, [r7, #14]
 8006c68:	4619      	mov	r1, r3
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f001 f824 	bl	8007cb8 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006c70:	2180      	movs	r1, #128	; 0x80
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f001 f820 	bl	8007cb8 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c78:	e01c      	b.n	8006cb4 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006c7a:	6839      	ldr	r1, [r7, #0]
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fbe4 	bl	800744a <USBD_CtlError>
              break;
 8006c82:	e017      	b.n	8006cb4 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	885b      	ldrh	r3, [r3, #2]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d112      	bne.n	8006cb2 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d004      	beq.n	8006ca0 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006c96:	7bbb      	ldrb	r3, [r7, #14]
 8006c98:	4619      	mov	r1, r3
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f001 f82b 	bl	8007cf6 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f000 fc9a 	bl	80075da <USBD_CtlSendStatus>
              }
              break;
 8006ca6:	e004      	b.n	8006cb2 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006ca8:	6839      	ldr	r1, [r7, #0]
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f000 fbcd 	bl	800744a <USBD_CtlError>
              break;
 8006cb0:	e000      	b.n	8006cb4 <USBD_StdEPReq+0x158>
              break;
 8006cb2:	bf00      	nop
          }
          break;
 8006cb4:	e0aa      	b.n	8006e0c <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d002      	beq.n	8006cc6 <USBD_StdEPReq+0x16a>
 8006cc0:	2b03      	cmp	r3, #3
 8006cc2:	d032      	beq.n	8006d2a <USBD_StdEPReq+0x1ce>
 8006cc4:	e097      	b.n	8006df6 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006cc6:	7bbb      	ldrb	r3, [r7, #14]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <USBD_StdEPReq+0x180>
 8006ccc:	7bbb      	ldrb	r3, [r7, #14]
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d004      	beq.n	8006cdc <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006cd2:	6839      	ldr	r1, [r7, #0]
 8006cd4:	6878      	ldr	r0, [r7, #4]
 8006cd6:	f000 fbb8 	bl	800744a <USBD_CtlError>
                break;
 8006cda:	e091      	b.n	8006e00 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006cdc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	da0b      	bge.n	8006cfc <USBD_StdEPReq+0x1a0>
 8006ce4:	7bbb      	ldrb	r3, [r7, #14]
 8006ce6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006cea:	4613      	mov	r3, r2
 8006cec:	009b      	lsls	r3, r3, #2
 8006cee:	4413      	add	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	3310      	adds	r3, #16
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	4413      	add	r3, r2
 8006cf8:	3304      	adds	r3, #4
 8006cfa:	e00b      	b.n	8006d14 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006cfc:	7bbb      	ldrb	r3, [r7, #14]
 8006cfe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d02:	4613      	mov	r3, r2
 8006d04:	009b      	lsls	r3, r3, #2
 8006d06:	4413      	add	r3, r2
 8006d08:	009b      	lsls	r3, r3, #2
 8006d0a:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d0e:	687a      	ldr	r2, [r7, #4]
 8006d10:	4413      	add	r3, r2
 8006d12:	3304      	adds	r3, #4
 8006d14:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2200      	movs	r2, #0
 8006d1a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	4619      	mov	r1, r3
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 fbfb 	bl	800751e <USBD_CtlSendData>
              break;
 8006d28:	e06a      	b.n	8006e00 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da11      	bge.n	8006d56 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006d32:	7bbb      	ldrb	r3, [r7, #14]
 8006d34:	f003 020f 	and.w	r2, r3, #15
 8006d38:	6879      	ldr	r1, [r7, #4]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	009b      	lsls	r3, r3, #2
 8006d3e:	4413      	add	r3, r2
 8006d40:	009b      	lsls	r3, r3, #2
 8006d42:	440b      	add	r3, r1
 8006d44:	3318      	adds	r3, #24
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d117      	bne.n	8006d7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d4c:	6839      	ldr	r1, [r7, #0]
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fb7b 	bl	800744a <USBD_CtlError>
                  break;
 8006d54:	e054      	b.n	8006e00 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	6879      	ldr	r1, [r7, #4]
 8006d5e:	4613      	mov	r3, r2
 8006d60:	009b      	lsls	r3, r3, #2
 8006d62:	4413      	add	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	440b      	add	r3, r1
 8006d68:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d104      	bne.n	8006d7c <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fb68 	bl	800744a <USBD_CtlError>
                  break;
 8006d7a:	e041      	b.n	8006e00 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	da0b      	bge.n	8006d9c <USBD_StdEPReq+0x240>
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	009b      	lsls	r3, r3, #2
 8006d8e:	4413      	add	r3, r2
 8006d90:	009b      	lsls	r3, r3, #2
 8006d92:	3310      	adds	r3, #16
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	4413      	add	r3, r2
 8006d98:	3304      	adds	r3, #4
 8006d9a:	e00b      	b.n	8006db4 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d9c:	7bbb      	ldrb	r3, [r7, #14]
 8006d9e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006da2:	4613      	mov	r3, r2
 8006da4:	009b      	lsls	r3, r3, #2
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	3304      	adds	r3, #4
 8006db4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d002      	beq.n	8006dc2 <USBD_StdEPReq+0x266>
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	2b80      	cmp	r3, #128	; 0x80
 8006dc0:	d103      	bne.n	8006dca <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	601a      	str	r2, [r3, #0]
 8006dc8:	e00e      	b.n	8006de8 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006dca:	7bbb      	ldrb	r3, [r7, #14]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 ffb0 	bl	8007d34 <USBD_LL_IsStallEP>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d003      	beq.n	8006de2 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	2201      	movs	r2, #1
 8006dde:	601a      	str	r2, [r3, #0]
 8006de0:	e002      	b.n	8006de8 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	2200      	movs	r2, #0
 8006de6:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2202      	movs	r2, #2
 8006dec:	4619      	mov	r1, r3
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fb95 	bl	800751e <USBD_CtlSendData>
              break;
 8006df4:	e004      	b.n	8006e00 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006df6:	6839      	ldr	r1, [r7, #0]
 8006df8:	6878      	ldr	r0, [r7, #4]
 8006dfa:	f000 fb26 	bl	800744a <USBD_CtlError>
              break;
 8006dfe:	bf00      	nop
          }
          break;
 8006e00:	e004      	b.n	8006e0c <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006e02:	6839      	ldr	r1, [r7, #0]
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb20 	bl	800744a <USBD_CtlError>
          break;
 8006e0a:	bf00      	nop
      }
      break;
 8006e0c:	e004      	b.n	8006e18 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006e0e:	6839      	ldr	r1, [r7, #0]
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 fb1a 	bl	800744a <USBD_CtlError>
      break;
 8006e16:	bf00      	nop
  }

  return ret;
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3710      	adds	r7, #16
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}
	...

08006e24 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b084      	sub	sp, #16
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006e32:	2300      	movs	r3, #0
 8006e34:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006e36:	2300      	movs	r3, #0
 8006e38:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	885b      	ldrh	r3, [r3, #2]
 8006e3e:	0a1b      	lsrs	r3, r3, #8
 8006e40:	b29b      	uxth	r3, r3
 8006e42:	3b01      	subs	r3, #1
 8006e44:	2b06      	cmp	r3, #6
 8006e46:	f200 8128 	bhi.w	800709a <USBD_GetDescriptor+0x276>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBD_GetDescriptor+0x2c>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006e6d 	.word	0x08006e6d
 8006e54:	08006e85 	.word	0x08006e85
 8006e58:	08006ec5 	.word	0x08006ec5
 8006e5c:	0800709b 	.word	0x0800709b
 8006e60:	0800709b 	.word	0x0800709b
 8006e64:	0800703b 	.word	0x0800703b
 8006e68:	08007067 	.word	0x08007067
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	687a      	ldr	r2, [r7, #4]
 8006e76:	7c12      	ldrb	r2, [r2, #16]
 8006e78:	f107 0108 	add.w	r1, r7, #8
 8006e7c:	4610      	mov	r0, r2
 8006e7e:	4798      	blx	r3
 8006e80:	60f8      	str	r0, [r7, #12]
      break;
 8006e82:	e112      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	7c1b      	ldrb	r3, [r3, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d10d      	bne.n	8006ea8 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e94:	f107 0208 	add.w	r2, r7, #8
 8006e98:	4610      	mov	r0, r2
 8006e9a:	4798      	blx	r3
 8006e9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	2202      	movs	r2, #2
 8006ea4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006ea6:	e100      	b.n	80070aa <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eb0:	f107 0208 	add.w	r2, r7, #8
 8006eb4:	4610      	mov	r0, r2
 8006eb6:	4798      	blx	r3
 8006eb8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3301      	adds	r3, #1
 8006ebe:	2202      	movs	r2, #2
 8006ec0:	701a      	strb	r2, [r3, #0]
      break;
 8006ec2:	e0f2      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	885b      	ldrh	r3, [r3, #2]
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b05      	cmp	r3, #5
 8006ecc:	f200 80ac 	bhi.w	8007028 <USBD_GetDescriptor+0x204>
 8006ed0:	a201      	add	r2, pc, #4	; (adr r2, 8006ed8 <USBD_GetDescriptor+0xb4>)
 8006ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ed6:	bf00      	nop
 8006ed8:	08006ef1 	.word	0x08006ef1
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f59 	.word	0x08006f59
 8006ee4:	08006f8d 	.word	0x08006f8d
 8006ee8:	08006fc1 	.word	0x08006fc1
 8006eec:	08006ff5 	.word	0x08006ff5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ef6:	685b      	ldr	r3, [r3, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d00b      	beq.n	8006f14 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	687a      	ldr	r2, [r7, #4]
 8006f06:	7c12      	ldrb	r2, [r2, #16]
 8006f08:	f107 0108 	add.w	r1, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f12:	e091      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 fa97 	bl	800744a <USBD_CtlError>
            err++;
 8006f1c:	7afb      	ldrb	r3, [r7, #11]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	72fb      	strb	r3, [r7, #11]
          break;
 8006f22:	e089      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d00b      	beq.n	8006f48 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	687a      	ldr	r2, [r7, #4]
 8006f3a:	7c12      	ldrb	r2, [r2, #16]
 8006f3c:	f107 0108 	add.w	r1, r7, #8
 8006f40:	4610      	mov	r0, r2
 8006f42:	4798      	blx	r3
 8006f44:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f46:	e077      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fa7d 	bl	800744a <USBD_CtlError>
            err++;
 8006f50:	7afb      	ldrb	r3, [r7, #11]
 8006f52:	3301      	adds	r3, #1
 8006f54:	72fb      	strb	r3, [r7, #11]
          break;
 8006f56:	e06f      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00b      	beq.n	8006f7c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f6a:	68db      	ldr	r3, [r3, #12]
 8006f6c:	687a      	ldr	r2, [r7, #4]
 8006f6e:	7c12      	ldrb	r2, [r2, #16]
 8006f70:	f107 0108 	add.w	r1, r7, #8
 8006f74:	4610      	mov	r0, r2
 8006f76:	4798      	blx	r3
 8006f78:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f7a:	e05d      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f7c:	6839      	ldr	r1, [r7, #0]
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fa63 	bl	800744a <USBD_CtlError>
            err++;
 8006f84:	7afb      	ldrb	r3, [r7, #11]
 8006f86:	3301      	adds	r3, #1
 8006f88:	72fb      	strb	r3, [r7, #11]
          break;
 8006f8a:	e055      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f92:	691b      	ldr	r3, [r3, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d00b      	beq.n	8006fb0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	7c12      	ldrb	r2, [r2, #16]
 8006fa4:	f107 0108 	add.w	r1, r7, #8
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
 8006fac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fae:	e043      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fb0:	6839      	ldr	r1, [r7, #0]
 8006fb2:	6878      	ldr	r0, [r7, #4]
 8006fb4:	f000 fa49 	bl	800744a <USBD_CtlError>
            err++;
 8006fb8:	7afb      	ldrb	r3, [r7, #11]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	72fb      	strb	r3, [r7, #11]
          break;
 8006fbe:	e03b      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fc6:	695b      	ldr	r3, [r3, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fd2:	695b      	ldr	r3, [r3, #20]
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	7c12      	ldrb	r2, [r2, #16]
 8006fd8:	f107 0108 	add.w	r1, r7, #8
 8006fdc:	4610      	mov	r0, r2
 8006fde:	4798      	blx	r3
 8006fe0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fe2:	e029      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fe4:	6839      	ldr	r1, [r7, #0]
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fa2f 	bl	800744a <USBD_CtlError>
            err++;
 8006fec:	7afb      	ldrb	r3, [r7, #11]
 8006fee:	3301      	adds	r3, #1
 8006ff0:	72fb      	strb	r3, [r7, #11]
          break;
 8006ff2:	e021      	b.n	8007038 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d00b      	beq.n	8007018 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	7c12      	ldrb	r2, [r2, #16]
 800700c:	f107 0108 	add.w	r1, r7, #8
 8007010:	4610      	mov	r0, r2
 8007012:	4798      	blx	r3
 8007014:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007016:	e00f      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007018:	6839      	ldr	r1, [r7, #0]
 800701a:	6878      	ldr	r0, [r7, #4]
 800701c:	f000 fa15 	bl	800744a <USBD_CtlError>
            err++;
 8007020:	7afb      	ldrb	r3, [r7, #11]
 8007022:	3301      	adds	r3, #1
 8007024:	72fb      	strb	r3, [r7, #11]
          break;
 8007026:	e007      	b.n	8007038 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fa0d 	bl	800744a <USBD_CtlError>
          err++;
 8007030:	7afb      	ldrb	r3, [r7, #11]
 8007032:	3301      	adds	r3, #1
 8007034:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007036:	e038      	b.n	80070aa <USBD_GetDescriptor+0x286>
 8007038:	e037      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	7c1b      	ldrb	r3, [r3, #16]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d109      	bne.n	8007056 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	f107 0208 	add.w	r2, r7, #8
 800704e:	4610      	mov	r0, r2
 8007050:	4798      	blx	r3
 8007052:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007054:	e029      	b.n	80070aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 f9f6 	bl	800744a <USBD_CtlError>
        err++;
 800705e:	7afb      	ldrb	r3, [r7, #11]
 8007060:	3301      	adds	r3, #1
 8007062:	72fb      	strb	r3, [r7, #11]
      break;
 8007064:	e021      	b.n	80070aa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7c1b      	ldrb	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007076:	f107 0208 	add.w	r2, r7, #8
 800707a:	4610      	mov	r0, r2
 800707c:	4798      	blx	r3
 800707e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	3301      	adds	r3, #1
 8007084:	2207      	movs	r2, #7
 8007086:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007088:	e00f      	b.n	80070aa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 f9dc 	bl	800744a <USBD_CtlError>
        err++;
 8007092:	7afb      	ldrb	r3, [r7, #11]
 8007094:	3301      	adds	r3, #1
 8007096:	72fb      	strb	r3, [r7, #11]
      break;
 8007098:	e007      	b.n	80070aa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800709a:	6839      	ldr	r1, [r7, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f9d4 	bl	800744a <USBD_CtlError>
      err++;
 80070a2:	7afb      	ldrb	r3, [r7, #11]
 80070a4:	3301      	adds	r3, #1
 80070a6:	72fb      	strb	r3, [r7, #11]
      break;
 80070a8:	bf00      	nop
  }

  if (err != 0U)
 80070aa:	7afb      	ldrb	r3, [r7, #11]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d11c      	bne.n	80070ea <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80070b0:	893b      	ldrh	r3, [r7, #8]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d011      	beq.n	80070da <USBD_GetDescriptor+0x2b6>
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	88db      	ldrh	r3, [r3, #6]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00d      	beq.n	80070da <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	88da      	ldrh	r2, [r3, #6]
 80070c2:	893b      	ldrh	r3, [r7, #8]
 80070c4:	4293      	cmp	r3, r2
 80070c6:	bf28      	it	cs
 80070c8:	4613      	movcs	r3, r2
 80070ca:	b29b      	uxth	r3, r3
 80070cc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80070ce:	893b      	ldrh	r3, [r7, #8]
 80070d0:	461a      	mov	r2, r3
 80070d2:	68f9      	ldr	r1, [r7, #12]
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 fa22 	bl	800751e <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	88db      	ldrh	r3, [r3, #6]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d104      	bne.n	80070ec <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	f000 fa79 	bl	80075da <USBD_CtlSendStatus>
 80070e8:	e000      	b.n	80070ec <USBD_GetDescriptor+0x2c8>
    return;
 80070ea:	bf00      	nop
    }
  }
}
 80070ec:	3710      	adds	r7, #16
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}
 80070f2:	bf00      	nop

080070f4 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	889b      	ldrh	r3, [r3, #4]
 8007102:	2b00      	cmp	r3, #0
 8007104:	d130      	bne.n	8007168 <USBD_SetAddress+0x74>
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	88db      	ldrh	r3, [r3, #6]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d12c      	bne.n	8007168 <USBD_SetAddress+0x74>
 800710e:	683b      	ldr	r3, [r7, #0]
 8007110:	885b      	ldrh	r3, [r3, #2]
 8007112:	2b7f      	cmp	r3, #127	; 0x7f
 8007114:	d828      	bhi.n	8007168 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	885b      	ldrh	r3, [r3, #2]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007120:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007128:	2b03      	cmp	r3, #3
 800712a:	d104      	bne.n	8007136 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800712c:	6839      	ldr	r1, [r7, #0]
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f000 f98b 	bl	800744a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007134:	e01d      	b.n	8007172 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	7bfa      	ldrb	r2, [r7, #15]
 800713a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800713e:	7bfb      	ldrb	r3, [r7, #15]
 8007140:	4619      	mov	r1, r3
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fe22 	bl	8007d8c <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa46 	bl	80075da <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800714e:	7bfb      	ldrb	r3, [r7, #15]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d004      	beq.n	800715e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2202      	movs	r2, #2
 8007158:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715c:	e009      	b.n	8007172 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007166:	e004      	b.n	8007172 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007168:	6839      	ldr	r1, [r7, #0]
 800716a:	6878      	ldr	r0, [r7, #4]
 800716c:	f000 f96d 	bl	800744a <USBD_CtlError>
  }
}
 8007170:	bf00      	nop
 8007172:	bf00      	nop
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
	...

0800717c <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
 8007184:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	b2da      	uxtb	r2, r3
 800718c:	4b41      	ldr	r3, [pc, #260]	; (8007294 <USBD_SetConfig+0x118>)
 800718e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007190:	4b40      	ldr	r3, [pc, #256]	; (8007294 <USBD_SetConfig+0x118>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2b01      	cmp	r3, #1
 8007196:	d904      	bls.n	80071a2 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f955 	bl	800744a <USBD_CtlError>
 80071a0:	e075      	b.n	800728e <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a8:	2b02      	cmp	r3, #2
 80071aa:	d002      	beq.n	80071b2 <USBD_SetConfig+0x36>
 80071ac:	2b03      	cmp	r3, #3
 80071ae:	d023      	beq.n	80071f8 <USBD_SetConfig+0x7c>
 80071b0:	e062      	b.n	8007278 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80071b2:	4b38      	ldr	r3, [pc, #224]	; (8007294 <USBD_SetConfig+0x118>)
 80071b4:	781b      	ldrb	r3, [r3, #0]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d01a      	beq.n	80071f0 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80071ba:	4b36      	ldr	r3, [pc, #216]	; (8007294 <USBD_SetConfig+0x118>)
 80071bc:	781b      	ldrb	r3, [r3, #0]
 80071be:	461a      	mov	r2, r3
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2203      	movs	r2, #3
 80071c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80071cc:	4b31      	ldr	r3, [pc, #196]	; (8007294 <USBD_SetConfig+0x118>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f7ff f9e8 	bl	80065a8 <USBD_SetClassConfig>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b02      	cmp	r3, #2
 80071dc:	d104      	bne.n	80071e8 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80071de:	6839      	ldr	r1, [r7, #0]
 80071e0:	6878      	ldr	r0, [r7, #4]
 80071e2:	f000 f932 	bl	800744a <USBD_CtlError>
            return;
 80071e6:	e052      	b.n	800728e <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f000 f9f6 	bl	80075da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80071ee:	e04e      	b.n	800728e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	f000 f9f2 	bl	80075da <USBD_CtlSendStatus>
        break;
 80071f6:	e04a      	b.n	800728e <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80071f8:	4b26      	ldr	r3, [pc, #152]	; (8007294 <USBD_SetConfig+0x118>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d112      	bne.n	8007226 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2202      	movs	r2, #2
 8007204:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007208:	4b22      	ldr	r3, [pc, #136]	; (8007294 <USBD_SetConfig+0x118>)
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	461a      	mov	r2, r3
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007212:	4b20      	ldr	r3, [pc, #128]	; (8007294 <USBD_SetConfig+0x118>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	4619      	mov	r1, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f7ff f9e4 	bl	80065e6 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f9db 	bl	80075da <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007224:	e033      	b.n	800728e <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007226:	4b1b      	ldr	r3, [pc, #108]	; (8007294 <USBD_SetConfig+0x118>)
 8007228:	781b      	ldrb	r3, [r3, #0]
 800722a:	461a      	mov	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	685b      	ldr	r3, [r3, #4]
 8007230:	429a      	cmp	r2, r3
 8007232:	d01d      	beq.n	8007270 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	b2db      	uxtb	r3, r3
 800723a:	4619      	mov	r1, r3
 800723c:	6878      	ldr	r0, [r7, #4]
 800723e:	f7ff f9d2 	bl	80065e6 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007242:	4b14      	ldr	r3, [pc, #80]	; (8007294 <USBD_SetConfig+0x118>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	461a      	mov	r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <USBD_SetConfig+0x118>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	4619      	mov	r1, r3
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f7ff f9a8 	bl	80065a8 <USBD_SetClassConfig>
 8007258:	4603      	mov	r3, r0
 800725a:	2b02      	cmp	r3, #2
 800725c:	d104      	bne.n	8007268 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f8f2 	bl	800744a <USBD_CtlError>
            return;
 8007266:	e012      	b.n	800728e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f9b6 	bl	80075da <USBD_CtlSendStatus>
        break;
 800726e:	e00e      	b.n	800728e <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f9b2 	bl	80075da <USBD_CtlSendStatus>
        break;
 8007276:	e00a      	b.n	800728e <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007278:	6839      	ldr	r1, [r7, #0]
 800727a:	6878      	ldr	r0, [r7, #4]
 800727c:	f000 f8e5 	bl	800744a <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007280:	4b04      	ldr	r3, [pc, #16]	; (8007294 <USBD_SetConfig+0x118>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	4619      	mov	r1, r3
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f7ff f9ad 	bl	80065e6 <USBD_ClrClassConfig>
        break;
 800728c:	bf00      	nop
    }
  }
}
 800728e:	3708      	adds	r7, #8
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	2000021c 	.word	0x2000021c

08007298 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b082      	sub	sp, #8
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	88db      	ldrh	r3, [r3, #6]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d004      	beq.n	80072b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f8cc 	bl	800744a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80072b2:	e022      	b.n	80072fa <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072ba:	2b02      	cmp	r3, #2
 80072bc:	dc02      	bgt.n	80072c4 <USBD_GetConfig+0x2c>
 80072be:	2b00      	cmp	r3, #0
 80072c0:	dc03      	bgt.n	80072ca <USBD_GetConfig+0x32>
 80072c2:	e015      	b.n	80072f0 <USBD_GetConfig+0x58>
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d00b      	beq.n	80072e0 <USBD_GetConfig+0x48>
 80072c8:	e012      	b.n	80072f0 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	3308      	adds	r3, #8
 80072d4:	2201      	movs	r2, #1
 80072d6:	4619      	mov	r1, r3
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f920 	bl	800751e <USBD_CtlSendData>
        break;
 80072de:	e00c      	b.n	80072fa <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3304      	adds	r3, #4
 80072e4:	2201      	movs	r2, #1
 80072e6:	4619      	mov	r1, r3
 80072e8:	6878      	ldr	r0, [r7, #4]
 80072ea:	f000 f918 	bl	800751e <USBD_CtlSendData>
        break;
 80072ee:	e004      	b.n	80072fa <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80072f0:	6839      	ldr	r1, [r7, #0]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 f8a9 	bl	800744a <USBD_CtlError>
        break;
 80072f8:	bf00      	nop
}
 80072fa:	bf00      	nop
 80072fc:	3708      	adds	r7, #8
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}

08007302 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007302:	b580      	push	{r7, lr}
 8007304:	b082      	sub	sp, #8
 8007306:	af00      	add	r7, sp, #0
 8007308:	6078      	str	r0, [r7, #4]
 800730a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007312:	3b01      	subs	r3, #1
 8007314:	2b02      	cmp	r3, #2
 8007316:	d81e      	bhi.n	8007356 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	88db      	ldrh	r3, [r3, #6]
 800731c:	2b02      	cmp	r3, #2
 800731e:	d004      	beq.n	800732a <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 f891 	bl	800744a <USBD_CtlError>
        break;
 8007328:	e01a      	b.n	8007360 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2201      	movs	r2, #1
 800732e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007336:	2b00      	cmp	r3, #0
 8007338:	d005      	beq.n	8007346 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f043 0202 	orr.w	r2, r3, #2
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	330c      	adds	r3, #12
 800734a:	2202      	movs	r2, #2
 800734c:	4619      	mov	r1, r3
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f8e5 	bl	800751e <USBD_CtlSendData>
      break;
 8007354:	e004      	b.n	8007360 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007356:	6839      	ldr	r1, [r7, #0]
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 f876 	bl	800744a <USBD_CtlError>
      break;
 800735e:	bf00      	nop
  }
}
 8007360:	bf00      	nop
 8007362:	3708      	adds	r7, #8
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b082      	sub	sp, #8
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
 8007370:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	885b      	ldrh	r3, [r3, #2]
 8007376:	2b01      	cmp	r3, #1
 8007378:	d106      	bne.n	8007388 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	2201      	movs	r2, #1
 800737e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 f929 	bl	80075da <USBD_CtlSendStatus>
  }
}
 8007388:	bf00      	nop
 800738a:	3708      	adds	r7, #8
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073a0:	3b01      	subs	r3, #1
 80073a2:	2b02      	cmp	r3, #2
 80073a4:	d80b      	bhi.n	80073be <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	885b      	ldrh	r3, [r3, #2]
 80073aa:	2b01      	cmp	r3, #1
 80073ac:	d10c      	bne.n	80073c8 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f000 f90f 	bl	80075da <USBD_CtlSendStatus>
      }
      break;
 80073bc:	e004      	b.n	80073c8 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80073be:	6839      	ldr	r1, [r7, #0]
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 f842 	bl	800744a <USBD_CtlError>
      break;
 80073c6:	e000      	b.n	80073ca <USBD_ClrFeature+0x3a>
      break;
 80073c8:	bf00      	nop
  }
}
 80073ca:	bf00      	nop
 80073cc:	3708      	adds	r7, #8
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80073d2:	b480      	push	{r7}
 80073d4:	b083      	sub	sp, #12
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	6078      	str	r0, [r7, #4]
 80073da:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	781a      	ldrb	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	785a      	ldrb	r2, [r3, #1]
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80073ec:	683b      	ldr	r3, [r7, #0]
 80073ee:	3302      	adds	r3, #2
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	b29a      	uxth	r2, r3
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	3303      	adds	r3, #3
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	021b      	lsls	r3, r3, #8
 80073fe:	b29b      	uxth	r3, r3
 8007400:	4413      	add	r3, r2
 8007402:	b29a      	uxth	r2, r3
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007408:	683b      	ldr	r3, [r7, #0]
 800740a:	3304      	adds	r3, #4
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b29a      	uxth	r2, r3
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	3305      	adds	r3, #5
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	b29b      	uxth	r3, r3
 8007418:	021b      	lsls	r3, r3, #8
 800741a:	b29b      	uxth	r3, r3
 800741c:	4413      	add	r3, r2
 800741e:	b29a      	uxth	r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	3306      	adds	r3, #6
 8007428:	781b      	ldrb	r3, [r3, #0]
 800742a:	b29a      	uxth	r2, r3
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	3307      	adds	r3, #7
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	b29b      	uxth	r3, r3
 8007434:	021b      	lsls	r3, r3, #8
 8007436:	b29b      	uxth	r3, r3
 8007438:	4413      	add	r3, r2
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	80da      	strh	r2, [r3, #6]

}
 8007440:	bf00      	nop
 8007442:	370c      	adds	r7, #12
 8007444:	46bd      	mov	sp, r7
 8007446:	bc80      	pop	{r7}
 8007448:	4770      	bx	lr

0800744a <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b082      	sub	sp, #8
 800744e:	af00      	add	r7, sp, #0
 8007450:	6078      	str	r0, [r7, #4]
 8007452:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007454:	2180      	movs	r1, #128	; 0x80
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fc2e 	bl	8007cb8 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 800745c:	2100      	movs	r1, #0
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fc2a 	bl	8007cb8 <USBD_LL_StallEP>
}
 8007464:	bf00      	nop
 8007466:	3708      	adds	r7, #8
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b086      	sub	sp, #24
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007478:	2300      	movs	r3, #0
 800747a:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d032      	beq.n	80074e8 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007482:	68f8      	ldr	r0, [r7, #12]
 8007484:	f000 f834 	bl	80074f0 <USBD_GetLen>
 8007488:	4603      	mov	r3, r0
 800748a:	3301      	adds	r3, #1
 800748c:	b29b      	uxth	r3, r3
 800748e:	005b      	lsls	r3, r3, #1
 8007490:	b29a      	uxth	r2, r3
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007496:	7dfb      	ldrb	r3, [r7, #23]
 8007498:	1c5a      	adds	r2, r3, #1
 800749a:	75fa      	strb	r2, [r7, #23]
 800749c:	461a      	mov	r2, r3
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	4413      	add	r3, r2
 80074a2:	687a      	ldr	r2, [r7, #4]
 80074a4:	7812      	ldrb	r2, [r2, #0]
 80074a6:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80074a8:	7dfb      	ldrb	r3, [r7, #23]
 80074aa:	1c5a      	adds	r2, r3, #1
 80074ac:	75fa      	strb	r2, [r7, #23]
 80074ae:	461a      	mov	r2, r3
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	4413      	add	r3, r2
 80074b4:	2203      	movs	r2, #3
 80074b6:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80074b8:	e012      	b.n	80074e0 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	1c5a      	adds	r2, r3, #1
 80074be:	60fa      	str	r2, [r7, #12]
 80074c0:	7dfa      	ldrb	r2, [r7, #23]
 80074c2:	1c51      	adds	r1, r2, #1
 80074c4:	75f9      	strb	r1, [r7, #23]
 80074c6:	4611      	mov	r1, r2
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	440a      	add	r2, r1
 80074cc:	781b      	ldrb	r3, [r3, #0]
 80074ce:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80074d0:	7dfb      	ldrb	r3, [r7, #23]
 80074d2:	1c5a      	adds	r2, r3, #1
 80074d4:	75fa      	strb	r2, [r7, #23]
 80074d6:	461a      	mov	r2, r3
 80074d8:	68bb      	ldr	r3, [r7, #8]
 80074da:	4413      	add	r3, r2
 80074dc:	2200      	movs	r2, #0
 80074de:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	781b      	ldrb	r3, [r3, #0]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d1e8      	bne.n	80074ba <USBD_GetString+0x4e>
    }
  }
}
 80074e8:	bf00      	nop
 80074ea:	3718      	adds	r7, #24
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}

080074f0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b085      	sub	sp, #20
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80074f8:	2300      	movs	r3, #0
 80074fa:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80074fc:	e005      	b.n	800750a <USBD_GetLen+0x1a>
  {
    len++;
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	3301      	adds	r3, #1
 8007502:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	3301      	adds	r3, #1
 8007508:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	781b      	ldrb	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1f5      	bne.n	80074fe <USBD_GetLen+0xe>
  }

  return len;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	bc80      	pop	{r7}
 800751c:	4770      	bx	lr

0800751e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800751e:	b580      	push	{r7, lr}
 8007520:	b084      	sub	sp, #16
 8007522:	af00      	add	r7, sp, #0
 8007524:	60f8      	str	r0, [r7, #12]
 8007526:	60b9      	str	r1, [r7, #8]
 8007528:	4613      	mov	r3, r2
 800752a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2202      	movs	r2, #2
 8007530:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007534:	88fa      	ldrh	r2, [r7, #6]
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800753a:	88fa      	ldrh	r2, [r7, #6]
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007540:	88fb      	ldrh	r3, [r7, #6]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	2100      	movs	r1, #0
 8007546:	68f8      	ldr	r0, [r7, #12]
 8007548:	f000 fc3f 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 800754c:	2300      	movs	r3, #0
}
 800754e:	4618      	mov	r0, r3
 8007550:	3710      	adds	r7, #16
 8007552:	46bd      	mov	sp, r7
 8007554:	bd80      	pop	{r7, pc}

08007556 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007556:	b580      	push	{r7, lr}
 8007558:	b084      	sub	sp, #16
 800755a:	af00      	add	r7, sp, #0
 800755c:	60f8      	str	r0, [r7, #12]
 800755e:	60b9      	str	r1, [r7, #8]
 8007560:	4613      	mov	r3, r2
 8007562:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007564:	88fb      	ldrh	r3, [r7, #6]
 8007566:	68ba      	ldr	r2, [r7, #8]
 8007568:	2100      	movs	r1, #0
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 fc2d 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	4613      	mov	r3, r2
 8007586:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2203      	movs	r2, #3
 800758c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007590:	88fa      	ldrh	r2, [r7, #6]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007598:	88fa      	ldrh	r2, [r7, #6]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075a0:	88fb      	ldrh	r3, [r7, #6]
 80075a2:	68ba      	ldr	r2, [r7, #8]
 80075a4:	2100      	movs	r1, #0
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fc32 	bl	8007e10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075ac:	2300      	movs	r3, #0
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}

080075b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b084      	sub	sp, #16
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	4613      	mov	r3, r2
 80075c2:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80075c4:	88fb      	ldrh	r3, [r7, #6]
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	2100      	movs	r1, #0
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 fc20 	bl	8007e10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b082      	sub	sp, #8
 80075de:	af00      	add	r7, sp, #0
 80075e0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2204      	movs	r2, #4
 80075e6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80075ea:	2300      	movs	r3, #0
 80075ec:	2200      	movs	r2, #0
 80075ee:	2100      	movs	r1, #0
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fbea 	bl	8007dca <USBD_LL_Transmit>

  return USBD_OK;
 80075f6:	2300      	movs	r3, #0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2205      	movs	r2, #5
 800760c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007610:	2300      	movs	r3, #0
 8007612:	2200      	movs	r2, #0
 8007614:	2100      	movs	r1, #0
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 fbfa 	bl	8007e10 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
	...

08007628 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800762c:	2200      	movs	r2, #0
 800762e:	4912      	ldr	r1, [pc, #72]	; (8007678 <MX_USB_DEVICE_Init+0x50>)
 8007630:	4812      	ldr	r0, [pc, #72]	; (800767c <MX_USB_DEVICE_Init+0x54>)
 8007632:	f7fe ff5f 	bl	80064f4 <USBD_Init>
 8007636:	4603      	mov	r3, r0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d001      	beq.n	8007640 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800763c:	f7f8 feb4 	bl	80003a8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007640:	490f      	ldr	r1, [pc, #60]	; (8007680 <MX_USB_DEVICE_Init+0x58>)
 8007642:	480e      	ldr	r0, [pc, #56]	; (800767c <MX_USB_DEVICE_Init+0x54>)
 8007644:	f7fe ff81 	bl	800654a <USBD_RegisterClass>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d001      	beq.n	8007652 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800764e:	f7f8 feab 	bl	80003a8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007652:	490c      	ldr	r1, [pc, #48]	; (8007684 <MX_USB_DEVICE_Init+0x5c>)
 8007654:	4809      	ldr	r0, [pc, #36]	; (800767c <MX_USB_DEVICE_Init+0x54>)
 8007656:	f7fe fee1 	bl	800641c <USBD_CDC_RegisterInterface>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d001      	beq.n	8007664 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007660:	f7f8 fea2 	bl	80003a8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007664:	4805      	ldr	r0, [pc, #20]	; (800767c <MX_USB_DEVICE_Init+0x54>)
 8007666:	f7fe ff89 	bl	800657c <USBD_Start>
 800766a:	4603      	mov	r3, r0
 800766c:	2b00      	cmp	r3, #0
 800766e:	d001      	beq.n	8007674 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007670:	f7f8 fe9a 	bl	80003a8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007674:	bf00      	nop
 8007676:	bd80      	pop	{r7, pc}
 8007678:	2000012c 	.word	0x2000012c
 800767c:	20000220 	.word	0x20000220
 8007680:	20000018 	.word	0x20000018
 8007684:	2000011c 	.word	0x2000011c

08007688 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800768c:	2200      	movs	r2, #0
 800768e:	4905      	ldr	r1, [pc, #20]	; (80076a4 <CDC_Init_FS+0x1c>)
 8007690:	4805      	ldr	r0, [pc, #20]	; (80076a8 <CDC_Init_FS+0x20>)
 8007692:	f7fe fed9 	bl	8006448 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007696:	4905      	ldr	r1, [pc, #20]	; (80076ac <CDC_Init_FS+0x24>)
 8007698:	4803      	ldr	r0, [pc, #12]	; (80076a8 <CDC_Init_FS+0x20>)
 800769a:	f7fe feee 	bl	800647a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800769e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	200008e4 	.word	0x200008e4
 80076a8:	20000220 	.word	0x20000220
 80076ac:	200004e4 	.word	0x200004e4

080076b0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80076b0:	b480      	push	{r7}
 80076b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80076b4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bc80      	pop	{r7}
 80076bc:	4770      	bx	lr
	...

080076c0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	4603      	mov	r3, r0
 80076c8:	6039      	str	r1, [r7, #0]
 80076ca:	71fb      	strb	r3, [r7, #7]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80076d0:	79fb      	ldrb	r3, [r7, #7]
 80076d2:	2b23      	cmp	r3, #35	; 0x23
 80076d4:	d84a      	bhi.n	800776c <CDC_Control_FS+0xac>
 80076d6:	a201      	add	r2, pc, #4	; (adr r2, 80076dc <CDC_Control_FS+0x1c>)
 80076d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076dc:	0800776d 	.word	0x0800776d
 80076e0:	0800776d 	.word	0x0800776d
 80076e4:	0800776d 	.word	0x0800776d
 80076e8:	0800776d 	.word	0x0800776d
 80076ec:	0800776d 	.word	0x0800776d
 80076f0:	0800776d 	.word	0x0800776d
 80076f4:	0800776d 	.word	0x0800776d
 80076f8:	0800776d 	.word	0x0800776d
 80076fc:	0800776d 	.word	0x0800776d
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800776d 	.word	0x0800776d
 8007708:	0800776d 	.word	0x0800776d
 800770c:	0800776d 	.word	0x0800776d
 8007710:	0800776d 	.word	0x0800776d
 8007714:	0800776d 	.word	0x0800776d
 8007718:	0800776d 	.word	0x0800776d
 800771c:	0800776d 	.word	0x0800776d
 8007720:	0800776d 	.word	0x0800776d
 8007724:	0800776d 	.word	0x0800776d
 8007728:	0800776d 	.word	0x0800776d
 800772c:	0800776d 	.word	0x0800776d
 8007730:	0800776d 	.word	0x0800776d
 8007734:	0800776d 	.word	0x0800776d
 8007738:	0800776d 	.word	0x0800776d
 800773c:	0800776d 	.word	0x0800776d
 8007740:	0800776d 	.word	0x0800776d
 8007744:	0800776d 	.word	0x0800776d
 8007748:	0800776d 	.word	0x0800776d
 800774c:	0800776d 	.word	0x0800776d
 8007750:	0800776d 	.word	0x0800776d
 8007754:	0800776d 	.word	0x0800776d
 8007758:	0800776d 	.word	0x0800776d
 800775c:	0800776d 	.word	0x0800776d
 8007760:	0800776d 	.word	0x0800776d
 8007764:	0800776d 	.word	0x0800776d
 8007768:	0800776d 	.word	0x0800776d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800776c:	bf00      	nop
  }

  return (USBD_OK);
 800776e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007770:	4618      	mov	r0, r3
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	bc80      	pop	{r7}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800777c:	b580      	push	{r7, lr}
 800777e:	b082      	sub	sp, #8
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
 8007784:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	4805      	ldr	r0, [pc, #20]	; (80077a0 <CDC_Receive_FS+0x24>)
 800778a:	f7fe fe76 	bl	800647a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800778e:	4804      	ldr	r0, [pc, #16]	; (80077a0 <CDC_Receive_FS+0x24>)
 8007790:	f7fe fe86 	bl	80064a0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007794:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007796:	4618      	mov	r0, r3
 8007798:	3708      	adds	r7, #8
 800779a:	46bd      	mov	sp, r7
 800779c:	bd80      	pop	{r7, pc}
 800779e:	bf00      	nop
 80077a0:	20000220 	.word	0x20000220

080077a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077a4:	b480      	push	{r7}
 80077a6:	b083      	sub	sp, #12
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	6039      	str	r1, [r7, #0]
 80077ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80077b0:	683b      	ldr	r3, [r7, #0]
 80077b2:	2212      	movs	r2, #18
 80077b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80077b6:	4b03      	ldr	r3, [pc, #12]	; (80077c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	bc80      	pop	{r7}
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20000148 	.word	0x20000148

080077c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	4603      	mov	r3, r0
 80077d0:	6039      	str	r1, [r7, #0]
 80077d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80077d4:	683b      	ldr	r3, [r7, #0]
 80077d6:	2204      	movs	r2, #4
 80077d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80077da:	4b03      	ldr	r3, [pc, #12]	; (80077e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80077dc:	4618      	mov	r0, r3
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bc80      	pop	{r7}
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	2000015c 	.word	0x2000015c

080077ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b082      	sub	sp, #8
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	4603      	mov	r3, r0
 80077f4:	6039      	str	r1, [r7, #0]
 80077f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80077f8:	79fb      	ldrb	r3, [r7, #7]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d105      	bne.n	800780a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	4907      	ldr	r1, [pc, #28]	; (8007820 <USBD_FS_ProductStrDescriptor+0x34>)
 8007802:	4808      	ldr	r0, [pc, #32]	; (8007824 <USBD_FS_ProductStrDescriptor+0x38>)
 8007804:	f7ff fe32 	bl	800746c <USBD_GetString>
 8007808:	e004      	b.n	8007814 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800780a:	683a      	ldr	r2, [r7, #0]
 800780c:	4904      	ldr	r1, [pc, #16]	; (8007820 <USBD_FS_ProductStrDescriptor+0x34>)
 800780e:	4805      	ldr	r0, [pc, #20]	; (8007824 <USBD_FS_ProductStrDescriptor+0x38>)
 8007810:	f7ff fe2c 	bl	800746c <USBD_GetString>
  }
  return USBD_StrDesc;
 8007814:	4b02      	ldr	r3, [pc, #8]	; (8007820 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	20000ce4 	.word	0x20000ce4
 8007824:	080088a8 	.word	0x080088a8

08007828 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b082      	sub	sp, #8
 800782c:	af00      	add	r7, sp, #0
 800782e:	4603      	mov	r3, r0
 8007830:	6039      	str	r1, [r7, #0]
 8007832:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007834:	683a      	ldr	r2, [r7, #0]
 8007836:	4904      	ldr	r1, [pc, #16]	; (8007848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007838:	4804      	ldr	r0, [pc, #16]	; (800784c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800783a:	f7ff fe17 	bl	800746c <USBD_GetString>
  return USBD_StrDesc;
 800783e:	4b02      	ldr	r3, [pc, #8]	; (8007848 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007840:	4618      	mov	r0, r3
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	20000ce4 	.word	0x20000ce4
 800784c:	080088c0 	.word	0x080088c0

08007850 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	6039      	str	r1, [r7, #0]
 800785a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	221a      	movs	r2, #26
 8007860:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007862:	f000 f843 	bl	80078ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007866:	4b02      	ldr	r3, [pc, #8]	; (8007870 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007868:	4618      	mov	r0, r3
 800786a:	3708      	adds	r7, #8
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}
 8007870:	20000160 	.word	0x20000160

08007874 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b082      	sub	sp, #8
 8007878:	af00      	add	r7, sp, #0
 800787a:	4603      	mov	r3, r0
 800787c:	6039      	str	r1, [r7, #0]
 800787e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007880:	79fb      	ldrb	r3, [r7, #7]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d105      	bne.n	8007892 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007886:	683a      	ldr	r2, [r7, #0]
 8007888:	4907      	ldr	r1, [pc, #28]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800788a:	4808      	ldr	r0, [pc, #32]	; (80078ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800788c:	f7ff fdee 	bl	800746c <USBD_GetString>
 8007890:	e004      	b.n	800789c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007892:	683a      	ldr	r2, [r7, #0]
 8007894:	4904      	ldr	r1, [pc, #16]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007896:	4805      	ldr	r0, [pc, #20]	; (80078ac <USBD_FS_ConfigStrDescriptor+0x38>)
 8007898:	f7ff fde8 	bl	800746c <USBD_GetString>
  }
  return USBD_StrDesc;
 800789c:	4b02      	ldr	r3, [pc, #8]	; (80078a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3708      	adds	r7, #8
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000ce4 	.word	0x20000ce4
 80078ac:	080088d4 	.word	0x080088d4

080078b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	4603      	mov	r3, r0
 80078b8:	6039      	str	r1, [r7, #0]
 80078ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078bc:	79fb      	ldrb	r3, [r7, #7]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	4907      	ldr	r1, [pc, #28]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078c6:	4808      	ldr	r0, [pc, #32]	; (80078e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078c8:	f7ff fdd0 	bl	800746c <USBD_GetString>
 80078cc:	e004      	b.n	80078d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80078ce:	683a      	ldr	r2, [r7, #0]
 80078d0:	4904      	ldr	r1, [pc, #16]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80078d2:	4805      	ldr	r0, [pc, #20]	; (80078e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80078d4:	f7ff fdca 	bl	800746c <USBD_GetString>
  }
  return USBD_StrDesc;
 80078d8:	4b02      	ldr	r3, [pc, #8]	; (80078e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3708      	adds	r7, #8
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}
 80078e2:	bf00      	nop
 80078e4:	20000ce4 	.word	0x20000ce4
 80078e8:	080088e0 	.word	0x080088e0

080078ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b084      	sub	sp, #16
 80078f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80078f2:	4b0f      	ldr	r3, [pc, #60]	; (8007930 <Get_SerialNum+0x44>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80078f8:	4b0e      	ldr	r3, [pc, #56]	; (8007934 <Get_SerialNum+0x48>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80078fe:	4b0e      	ldr	r3, [pc, #56]	; (8007938 <Get_SerialNum+0x4c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	4413      	add	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007912:	2208      	movs	r2, #8
 8007914:	4909      	ldr	r1, [pc, #36]	; (800793c <Get_SerialNum+0x50>)
 8007916:	68f8      	ldr	r0, [r7, #12]
 8007918:	f000 f814 	bl	8007944 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800791c:	2204      	movs	r2, #4
 800791e:	4908      	ldr	r1, [pc, #32]	; (8007940 <Get_SerialNum+0x54>)
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f000 f80f 	bl	8007944 <IntToUnicode>
  }
}
 8007926:	bf00      	nop
 8007928:	3710      	adds	r7, #16
 800792a:	46bd      	mov	sp, r7
 800792c:	bd80      	pop	{r7, pc}
 800792e:	bf00      	nop
 8007930:	1ffff7e8 	.word	0x1ffff7e8
 8007934:	1ffff7ec 	.word	0x1ffff7ec
 8007938:	1ffff7f0 	.word	0x1ffff7f0
 800793c:	20000162 	.word	0x20000162
 8007940:	20000172 	.word	0x20000172

08007944 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007944:	b480      	push	{r7}
 8007946:	b087      	sub	sp, #28
 8007948:	af00      	add	r7, sp, #0
 800794a:	60f8      	str	r0, [r7, #12]
 800794c:	60b9      	str	r1, [r7, #8]
 800794e:	4613      	mov	r3, r2
 8007950:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007952:	2300      	movs	r3, #0
 8007954:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007956:	2300      	movs	r3, #0
 8007958:	75fb      	strb	r3, [r7, #23]
 800795a:	e027      	b.n	80079ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	0f1b      	lsrs	r3, r3, #28
 8007960:	2b09      	cmp	r3, #9
 8007962:	d80b      	bhi.n	800797c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	0f1b      	lsrs	r3, r3, #28
 8007968:	b2da      	uxtb	r2, r3
 800796a:	7dfb      	ldrb	r3, [r7, #23]
 800796c:	005b      	lsls	r3, r3, #1
 800796e:	4619      	mov	r1, r3
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	440b      	add	r3, r1
 8007974:	3230      	adds	r2, #48	; 0x30
 8007976:	b2d2      	uxtb	r2, r2
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	e00a      	b.n	8007992 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	0f1b      	lsrs	r3, r3, #28
 8007980:	b2da      	uxtb	r2, r3
 8007982:	7dfb      	ldrb	r3, [r7, #23]
 8007984:	005b      	lsls	r3, r3, #1
 8007986:	4619      	mov	r1, r3
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	440b      	add	r3, r1
 800798c:	3237      	adds	r2, #55	; 0x37
 800798e:	b2d2      	uxtb	r2, r2
 8007990:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	011b      	lsls	r3, r3, #4
 8007996:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007998:	7dfb      	ldrb	r3, [r7, #23]
 800799a:	005b      	lsls	r3, r3, #1
 800799c:	3301      	adds	r3, #1
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	2200      	movs	r2, #0
 80079a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80079a6:	7dfb      	ldrb	r3, [r7, #23]
 80079a8:	3301      	adds	r3, #1
 80079aa:	75fb      	strb	r3, [r7, #23]
 80079ac:	7dfa      	ldrb	r2, [r7, #23]
 80079ae:	79fb      	ldrb	r3, [r7, #7]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d3d3      	bcc.n	800795c <IntToUnicode+0x18>
  }
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop
 80079b8:	371c      	adds	r7, #28
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bc80      	pop	{r7}
 80079be:	4770      	bx	lr

080079c0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a0d      	ldr	r2, [pc, #52]	; (8007a04 <HAL_PCD_MspInit+0x44>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d113      	bne.n	80079fa <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80079d2:	4b0d      	ldr	r3, [pc, #52]	; (8007a08 <HAL_PCD_MspInit+0x48>)
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	4a0c      	ldr	r2, [pc, #48]	; (8007a08 <HAL_PCD_MspInit+0x48>)
 80079d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80079dc:	61d3      	str	r3, [r2, #28]
 80079de:	4b0a      	ldr	r3, [pc, #40]	; (8007a08 <HAL_PCD_MspInit+0x48>)
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 80079ea:	2200      	movs	r2, #0
 80079ec:	2100      	movs	r1, #0
 80079ee:	2014      	movs	r0, #20
 80079f0:	f7f9 fb77 	bl	80010e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80079f4:	2014      	movs	r0, #20
 80079f6:	f7f9 fb90 	bl	800111a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80079fa:	bf00      	nop
 80079fc:	3710      	adds	r7, #16
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	40005c00 	.word	0x40005c00
 8007a08:	40021000 	.word	0x40021000

08007a0c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b082      	sub	sp, #8
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007a20:	4619      	mov	r1, r3
 8007a22:	4610      	mov	r0, r2
 8007a24:	f7fe fdf2 	bl	800660c <USBD_LL_SetupStage>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b082      	sub	sp, #8
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
 8007a38:	460b      	mov	r3, r1
 8007a3a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a42:	78fa      	ldrb	r2, [r7, #3]
 8007a44:	6879      	ldr	r1, [r7, #4]
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	00db      	lsls	r3, r3, #3
 8007a4e:	440b      	add	r3, r1
 8007a50:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	78fb      	ldrb	r3, [r7, #3]
 8007a58:	4619      	mov	r1, r3
 8007a5a:	f7fe fe24 	bl	80066a6 <USBD_LL_DataOutStage>
}
 8007a5e:	bf00      	nop
 8007a60:	3708      	adds	r7, #8
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}

08007a66 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a66:	b580      	push	{r7, lr}
 8007a68:	b082      	sub	sp, #8
 8007a6a:	af00      	add	r7, sp, #0
 8007a6c:	6078      	str	r0, [r7, #4]
 8007a6e:	460b      	mov	r3, r1
 8007a70:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007a78:	78fa      	ldrb	r2, [r7, #3]
 8007a7a:	6879      	ldr	r1, [r7, #4]
 8007a7c:	4613      	mov	r3, r2
 8007a7e:	009b      	lsls	r3, r3, #2
 8007a80:	4413      	add	r3, r2
 8007a82:	00db      	lsls	r3, r3, #3
 8007a84:	440b      	add	r3, r1
 8007a86:	333c      	adds	r3, #60	; 0x3c
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	78fb      	ldrb	r3, [r7, #3]
 8007a8c:	4619      	mov	r1, r3
 8007a8e:	f7fe fe7b 	bl	8006788 <USBD_LL_DataInStage>
}
 8007a92:	bf00      	nop
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b082      	sub	sp, #8
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7fe ff8b 	bl	80069c4 <USBD_LL_SOF>
}
 8007aae:	bf00      	nop
 8007ab0:	3708      	adds	r7, #8
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b084      	sub	sp, #16
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d001      	beq.n	8007ace <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007aca:	f7f8 fc6d 	bl	80003a8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ad4:	7bfa      	ldrb	r2, [r7, #15]
 8007ad6:	4611      	mov	r1, r2
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f7fe ff3b 	bl	8006954 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f7fe fef4 	bl	80068d2 <USBD_LL_Reset>
}
 8007aea:	bf00      	nop
 8007aec:	3710      	adds	r7, #16
 8007aee:	46bd      	mov	sp, r7
 8007af0:	bd80      	pop	{r7, pc}
	...

08007af4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b02:	4618      	mov	r0, r3
 8007b04:	f7fe ff35 	bl	8006972 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	699b      	ldr	r3, [r3, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d005      	beq.n	8007b1c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007b10:	4b04      	ldr	r3, [pc, #16]	; (8007b24 <HAL_PCD_SuspendCallback+0x30>)
 8007b12:	691b      	ldr	r3, [r3, #16]
 8007b14:	4a03      	ldr	r2, [pc, #12]	; (8007b24 <HAL_PCD_SuspendCallback+0x30>)
 8007b16:	f043 0306 	orr.w	r3, r3, #6
 8007b1a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007b1c:	bf00      	nop
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}
 8007b24:	e000ed00 	.word	0xe000ed00

08007b28 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fe ff2f 	bl	800699a <USBD_LL_Resume>
}
 8007b3c:	bf00      	nop
 8007b3e:	3708      	adds	r7, #8
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}

08007b44 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	b082      	sub	sp, #8
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007b4c:	4a28      	ldr	r2, [pc, #160]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	4a26      	ldr	r2, [pc, #152]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b58:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007b5c:	4b24      	ldr	r3, [pc, #144]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b5e:	4a25      	ldr	r2, [pc, #148]	; (8007bf4 <USBD_LL_Init+0xb0>)
 8007b60:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007b62:	4b23      	ldr	r3, [pc, #140]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b64:	2208      	movs	r2, #8
 8007b66:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007b68:	4b21      	ldr	r3, [pc, #132]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b6a:	2202      	movs	r2, #2
 8007b6c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007b6e:	4b20      	ldr	r3, [pc, #128]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b70:	2200      	movs	r2, #0
 8007b72:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007b74:	4b1e      	ldr	r3, [pc, #120]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b76:	2200      	movs	r2, #0
 8007b78:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007b7a:	4b1d      	ldr	r3, [pc, #116]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007b80:	481b      	ldr	r0, [pc, #108]	; (8007bf0 <USBD_LL_Init+0xac>)
 8007b82:	f7f9 fae4 	bl	800114e <HAL_PCD_Init>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d001      	beq.n	8007b90 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007b8c:	f7f8 fc0c 	bl	80003a8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007b96:	2318      	movs	r3, #24
 8007b98:	2200      	movs	r2, #0
 8007b9a:	2100      	movs	r1, #0
 8007b9c:	f7fa ff58 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ba6:	2358      	movs	r3, #88	; 0x58
 8007ba8:	2200      	movs	r2, #0
 8007baa:	2180      	movs	r1, #128	; 0x80
 8007bac:	f7fa ff50 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bb6:	23c0      	movs	r3, #192	; 0xc0
 8007bb8:	2200      	movs	r2, #0
 8007bba:	2181      	movs	r1, #129	; 0x81
 8007bbc:	f7fa ff48 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bc6:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007bca:	2200      	movs	r2, #0
 8007bcc:	2101      	movs	r1, #1
 8007bce:	f7fa ff3f 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007bd8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007bdc:	2200      	movs	r2, #0
 8007bde:	2182      	movs	r1, #130	; 0x82
 8007be0:	f7fa ff36 	bl	8002a50 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007be4:	2300      	movs	r3, #0
}
 8007be6:	4618      	mov	r0, r3
 8007be8:	3708      	adds	r7, #8
 8007bea:	46bd      	mov	sp, r7
 8007bec:	bd80      	pop	{r7, pc}
 8007bee:	bf00      	nop
 8007bf0:	20000ee4 	.word	0x20000ee4
 8007bf4:	40005c00 	.word	0x40005c00

08007bf8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b084      	sub	sp, #16
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c00:	2300      	movs	r3, #0
 8007c02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c04:	2300      	movs	r3, #0
 8007c06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c0e:	4618      	mov	r0, r3
 8007c10:	f7f9 fba8 	bl	8001364 <HAL_PCD_Start>
 8007c14:	4603      	mov	r3, r0
 8007c16:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c18:	7bfb      	ldrb	r3, [r7, #15]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 f94e 	bl	8007ebc <USBD_Get_USB_Status>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c24:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c26:	4618      	mov	r0, r3
 8007c28:	3710      	adds	r7, #16
 8007c2a:	46bd      	mov	sp, r7
 8007c2c:	bd80      	pop	{r7, pc}

08007c2e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007c2e:	b580      	push	{r7, lr}
 8007c30:	b084      	sub	sp, #16
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6078      	str	r0, [r7, #4]
 8007c36:	4608      	mov	r0, r1
 8007c38:	4611      	mov	r1, r2
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	4603      	mov	r3, r0
 8007c3e:	70fb      	strb	r3, [r7, #3]
 8007c40:	460b      	mov	r3, r1
 8007c42:	70bb      	strb	r3, [r7, #2]
 8007c44:	4613      	mov	r3, r2
 8007c46:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007c56:	78bb      	ldrb	r3, [r7, #2]
 8007c58:	883a      	ldrh	r2, [r7, #0]
 8007c5a:	78f9      	ldrb	r1, [r7, #3]
 8007c5c:	f7f9 fd20 	bl	80016a0 <HAL_PCD_EP_Open>
 8007c60:	4603      	mov	r3, r0
 8007c62:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c64:	7bfb      	ldrb	r3, [r7, #15]
 8007c66:	4618      	mov	r0, r3
 8007c68:	f000 f928 	bl	8007ebc <USBD_Get_USB_Status>
 8007c6c:	4603      	mov	r3, r0
 8007c6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}

08007c7a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b084      	sub	sp, #16
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	6078      	str	r0, [r7, #4]
 8007c82:	460b      	mov	r3, r1
 8007c84:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c86:	2300      	movs	r3, #0
 8007c88:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007c94:	78fa      	ldrb	r2, [r7, #3]
 8007c96:	4611      	mov	r1, r2
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f7f9 fd67 	bl	800176c <HAL_PCD_EP_Close>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	f000 f909 	bl	8007ebc <USBD_Get_USB_Status>
 8007caa:	4603      	mov	r3, r0
 8007cac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cae:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	3710      	adds	r7, #16
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd80      	pop	{r7, pc}

08007cb8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b084      	sub	sp, #16
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cc8:	2300      	movs	r3, #0
 8007cca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007cd2:	78fa      	ldrb	r2, [r7, #3]
 8007cd4:	4611      	mov	r1, r2
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7f9 fe27 	bl	800192a <HAL_PCD_EP_SetStall>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ce0:	7bfb      	ldrb	r3, [r7, #15]
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 f8ea 	bl	8007ebc <USBD_Get_USB_Status>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007cec:	7bbb      	ldrb	r3, [r7, #14]
}
 8007cee:	4618      	mov	r0, r3
 8007cf0:	3710      	adds	r7, #16
 8007cf2:	46bd      	mov	sp, r7
 8007cf4:	bd80      	pop	{r7, pc}

08007cf6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007cf6:	b580      	push	{r7, lr}
 8007cf8:	b084      	sub	sp, #16
 8007cfa:	af00      	add	r7, sp, #0
 8007cfc:	6078      	str	r0, [r7, #4]
 8007cfe:	460b      	mov	r3, r1
 8007d00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d06:	2300      	movs	r3, #0
 8007d08:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d10:	78fa      	ldrb	r2, [r7, #3]
 8007d12:	4611      	mov	r1, r2
 8007d14:	4618      	mov	r0, r3
 8007d16:	f7f9 fe68 	bl	80019ea <HAL_PCD_EP_ClrStall>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 f8cb 	bl	8007ebc <USBD_Get_USB_Status>
 8007d26:	4603      	mov	r3, r0
 8007d28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3710      	adds	r7, #16
 8007d30:	46bd      	mov	sp, r7
 8007d32:	bd80      	pop	{r7, pc}

08007d34 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007d34:	b480      	push	{r7}
 8007d36:	b085      	sub	sp, #20
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	6078      	str	r0, [r7, #4]
 8007d3c:	460b      	mov	r3, r1
 8007d3e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d46:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007d48:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	da0c      	bge.n	8007d6a <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007d50:	78fb      	ldrb	r3, [r7, #3]
 8007d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d56:	68f9      	ldr	r1, [r7, #12]
 8007d58:	1c5a      	adds	r2, r3, #1
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	00db      	lsls	r3, r3, #3
 8007d62:	440b      	add	r3, r1
 8007d64:	3302      	adds	r3, #2
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	e00b      	b.n	8007d82 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007d6a:	78fb      	ldrb	r3, [r7, #3]
 8007d6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007d70:	68f9      	ldr	r1, [r7, #12]
 8007d72:	4613      	mov	r3, r2
 8007d74:	009b      	lsls	r3, r3, #2
 8007d76:	4413      	add	r3, r2
 8007d78:	00db      	lsls	r3, r3, #3
 8007d7a:	440b      	add	r3, r1
 8007d7c:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007d80:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3714      	adds	r7, #20
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bc80      	pop	{r7}
 8007d8a:	4770      	bx	lr

08007d8c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	4611      	mov	r1, r2
 8007daa:	4618      	mov	r0, r3
 8007dac:	f7f9 fc53 	bl	8001656 <HAL_PCD_SetAddress>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007db4:	7bfb      	ldrb	r3, [r7, #15]
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 f880 	bl	8007ebc <USBD_Get_USB_Status>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	3710      	adds	r7, #16
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	bd80      	pop	{r7, pc}

08007dca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007dca:	b580      	push	{r7, lr}
 8007dcc:	b086      	sub	sp, #24
 8007dce:	af00      	add	r7, sp, #0
 8007dd0:	60f8      	str	r0, [r7, #12]
 8007dd2:	607a      	str	r2, [r7, #4]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	72fb      	strb	r3, [r7, #11]
 8007dda:	4613      	mov	r3, r2
 8007ddc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dec:	893b      	ldrh	r3, [r7, #8]
 8007dee:	7af9      	ldrb	r1, [r7, #11]
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	f7f9 fd57 	bl	80018a4 <HAL_PCD_EP_Transmit>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	4618      	mov	r0, r3
 8007dfe:	f000 f85d 	bl	8007ebc <USBD_Get_USB_Status>
 8007e02:	4603      	mov	r3, r0
 8007e04:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e06:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e08:	4618      	mov	r0, r3
 8007e0a:	3718      	adds	r7, #24
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	bd80      	pop	{r7, pc}

08007e10 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	607a      	str	r2, [r7, #4]
 8007e1a:	461a      	mov	r2, r3
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	72fb      	strb	r3, [r7, #11]
 8007e20:	4613      	mov	r3, r2
 8007e22:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e24:	2300      	movs	r3, #0
 8007e26:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007e32:	893b      	ldrh	r3, [r7, #8]
 8007e34:	7af9      	ldrb	r1, [r7, #11]
 8007e36:	687a      	ldr	r2, [r7, #4]
 8007e38:	f7f9 fce0 	bl	80017fc <HAL_PCD_EP_Receive>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 f83a 	bl	8007ebc <USBD_Get_USB_Status>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007e4c:	7dbb      	ldrb	r3, [r7, #22]
}
 8007e4e:	4618      	mov	r0, r3
 8007e50:	3718      	adds	r7, #24
 8007e52:	46bd      	mov	sp, r7
 8007e54:	bd80      	pop	{r7, pc}

08007e56 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e56:	b580      	push	{r7, lr}
 8007e58:	b082      	sub	sp, #8
 8007e5a:	af00      	add	r7, sp, #0
 8007e5c:	6078      	str	r0, [r7, #4]
 8007e5e:	460b      	mov	r3, r1
 8007e60:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e68:	78fa      	ldrb	r2, [r7, #3]
 8007e6a:	4611      	mov	r1, r2
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	f7f9 fd02 	bl	8001876 <HAL_PCD_EP_GetRxCount>
 8007e72:	4603      	mov	r3, r0
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3708      	adds	r7, #8
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007e7c:	b480      	push	{r7}
 8007e7e:	b083      	sub	sp, #12
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007e84:	4b02      	ldr	r3, [pc, #8]	; (8007e90 <USBD_static_malloc+0x14>)
}
 8007e86:	4618      	mov	r0, r3
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	bc80      	pop	{r7}
 8007e8e:	4770      	bx	lr
 8007e90:	200011d0 	.word	0x200011d0

08007e94 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b083      	sub	sp, #12
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]

}
 8007e9c:	bf00      	nop
 8007e9e:	370c      	adds	r7, #12
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bc80      	pop	{r7}
 8007ea4:	4770      	bx	lr

08007ea6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
 8007eae:	460b      	mov	r3, r1
 8007eb0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bc80      	pop	{r7}
 8007eba:	4770      	bx	lr

08007ebc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b085      	sub	sp, #20
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec6:	2300      	movs	r3, #0
 8007ec8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007eca:	79fb      	ldrb	r3, [r7, #7]
 8007ecc:	2b03      	cmp	r3, #3
 8007ece:	d817      	bhi.n	8007f00 <USBD_Get_USB_Status+0x44>
 8007ed0:	a201      	add	r2, pc, #4	; (adr r2, 8007ed8 <USBD_Get_USB_Status+0x1c>)
 8007ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed6:	bf00      	nop
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007eef 	.word	0x08007eef
 8007ee0:	08007ef5 	.word	0x08007ef5
 8007ee4:	08007efb 	.word	0x08007efb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007ee8:	2300      	movs	r3, #0
 8007eea:	73fb      	strb	r3, [r7, #15]
    break;
 8007eec:	e00b      	b.n	8007f06 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007eee:	2302      	movs	r3, #2
 8007ef0:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef2:	e008      	b.n	8007f06 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	73fb      	strb	r3, [r7, #15]
    break;
 8007ef8:	e005      	b.n	8007f06 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007efa:	2302      	movs	r3, #2
 8007efc:	73fb      	strb	r3, [r7, #15]
    break;
 8007efe:	e002      	b.n	8007f06 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007f00:	2302      	movs	r3, #2
 8007f02:	73fb      	strb	r3, [r7, #15]
    break;
 8007f04:	bf00      	nop
  }
  return usb_status;
 8007f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	3714      	adds	r7, #20
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bc80      	pop	{r7}
 8007f10:	4770      	bx	lr
 8007f12:	bf00      	nop

08007f14 <__errno>:
 8007f14:	4b01      	ldr	r3, [pc, #4]	; (8007f1c <__errno+0x8>)
 8007f16:	6818      	ldr	r0, [r3, #0]
 8007f18:	4770      	bx	lr
 8007f1a:	bf00      	nop
 8007f1c:	2000017c 	.word	0x2000017c

08007f20 <__libc_init_array>:
 8007f20:	b570      	push	{r4, r5, r6, lr}
 8007f22:	2600      	movs	r6, #0
 8007f24:	4d0c      	ldr	r5, [pc, #48]	; (8007f58 <__libc_init_array+0x38>)
 8007f26:	4c0d      	ldr	r4, [pc, #52]	; (8007f5c <__libc_init_array+0x3c>)
 8007f28:	1b64      	subs	r4, r4, r5
 8007f2a:	10a4      	asrs	r4, r4, #2
 8007f2c:	42a6      	cmp	r6, r4
 8007f2e:	d109      	bne.n	8007f44 <__libc_init_array+0x24>
 8007f30:	f000 fc9c 	bl	800886c <_init>
 8007f34:	2600      	movs	r6, #0
 8007f36:	4d0a      	ldr	r5, [pc, #40]	; (8007f60 <__libc_init_array+0x40>)
 8007f38:	4c0a      	ldr	r4, [pc, #40]	; (8007f64 <__libc_init_array+0x44>)
 8007f3a:	1b64      	subs	r4, r4, r5
 8007f3c:	10a4      	asrs	r4, r4, #2
 8007f3e:	42a6      	cmp	r6, r4
 8007f40:	d105      	bne.n	8007f4e <__libc_init_array+0x2e>
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f48:	4798      	blx	r3
 8007f4a:	3601      	adds	r6, #1
 8007f4c:	e7ee      	b.n	8007f2c <__libc_init_array+0xc>
 8007f4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f52:	4798      	blx	r3
 8007f54:	3601      	adds	r6, #1
 8007f56:	e7f2      	b.n	8007f3e <__libc_init_array+0x1e>
 8007f58:	08008934 	.word	0x08008934
 8007f5c:	08008934 	.word	0x08008934
 8007f60:	08008934 	.word	0x08008934
 8007f64:	08008938 	.word	0x08008938

08007f68 <memset>:
 8007f68:	4603      	mov	r3, r0
 8007f6a:	4402      	add	r2, r0
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d100      	bne.n	8007f72 <memset+0xa>
 8007f70:	4770      	bx	lr
 8007f72:	f803 1b01 	strb.w	r1, [r3], #1
 8007f76:	e7f9      	b.n	8007f6c <memset+0x4>

08007f78 <siprintf>:
 8007f78:	b40e      	push	{r1, r2, r3}
 8007f7a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f7e:	b500      	push	{lr}
 8007f80:	b09c      	sub	sp, #112	; 0x70
 8007f82:	ab1d      	add	r3, sp, #116	; 0x74
 8007f84:	9002      	str	r0, [sp, #8]
 8007f86:	9006      	str	r0, [sp, #24]
 8007f88:	9107      	str	r1, [sp, #28]
 8007f8a:	9104      	str	r1, [sp, #16]
 8007f8c:	4808      	ldr	r0, [pc, #32]	; (8007fb0 <siprintf+0x38>)
 8007f8e:	4909      	ldr	r1, [pc, #36]	; (8007fb4 <siprintf+0x3c>)
 8007f90:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f94:	9105      	str	r1, [sp, #20]
 8007f96:	6800      	ldr	r0, [r0, #0]
 8007f98:	a902      	add	r1, sp, #8
 8007f9a:	9301      	str	r3, [sp, #4]
 8007f9c:	f000 f868 	bl	8008070 <_svfiprintf_r>
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	9b02      	ldr	r3, [sp, #8]
 8007fa4:	701a      	strb	r2, [r3, #0]
 8007fa6:	b01c      	add	sp, #112	; 0x70
 8007fa8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fac:	b003      	add	sp, #12
 8007fae:	4770      	bx	lr
 8007fb0:	2000017c 	.word	0x2000017c
 8007fb4:	ffff0208 	.word	0xffff0208

08007fb8 <__ssputs_r>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	688e      	ldr	r6, [r1, #8]
 8007fbe:	4682      	mov	sl, r0
 8007fc0:	429e      	cmp	r6, r3
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	4690      	mov	r8, r2
 8007fc6:	461f      	mov	r7, r3
 8007fc8:	d838      	bhi.n	800803c <__ssputs_r+0x84>
 8007fca:	898a      	ldrh	r2, [r1, #12]
 8007fcc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fd0:	d032      	beq.n	8008038 <__ssputs_r+0x80>
 8007fd2:	6825      	ldr	r5, [r4, #0]
 8007fd4:	6909      	ldr	r1, [r1, #16]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	eba5 0901 	sub.w	r9, r5, r1
 8007fdc:	6965      	ldr	r5, [r4, #20]
 8007fde:	444b      	add	r3, r9
 8007fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	429d      	cmp	r5, r3
 8007fec:	bf38      	it	cc
 8007fee:	461d      	movcc	r5, r3
 8007ff0:	0553      	lsls	r3, r2, #21
 8007ff2:	d531      	bpl.n	8008058 <__ssputs_r+0xa0>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f000 fb6f 	bl	80086d8 <_malloc_r>
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	b950      	cbnz	r0, 8008014 <__ssputs_r+0x5c>
 8007ffe:	230c      	movs	r3, #12
 8008000:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008004:	f8ca 3000 	str.w	r3, [sl]
 8008008:	89a3      	ldrh	r3, [r4, #12]
 800800a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800800e:	81a3      	strh	r3, [r4, #12]
 8008010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008014:	464a      	mov	r2, r9
 8008016:	6921      	ldr	r1, [r4, #16]
 8008018:	f000 face 	bl	80085b8 <memcpy>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008022:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	6126      	str	r6, [r4, #16]
 800802a:	444e      	add	r6, r9
 800802c:	6026      	str	r6, [r4, #0]
 800802e:	463e      	mov	r6, r7
 8008030:	6165      	str	r5, [r4, #20]
 8008032:	eba5 0509 	sub.w	r5, r5, r9
 8008036:	60a5      	str	r5, [r4, #8]
 8008038:	42be      	cmp	r6, r7
 800803a:	d900      	bls.n	800803e <__ssputs_r+0x86>
 800803c:	463e      	mov	r6, r7
 800803e:	4632      	mov	r2, r6
 8008040:	4641      	mov	r1, r8
 8008042:	6820      	ldr	r0, [r4, #0]
 8008044:	f000 fac6 	bl	80085d4 <memmove>
 8008048:	68a3      	ldr	r3, [r4, #8]
 800804a:	2000      	movs	r0, #0
 800804c:	1b9b      	subs	r3, r3, r6
 800804e:	60a3      	str	r3, [r4, #8]
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	4433      	add	r3, r6
 8008054:	6023      	str	r3, [r4, #0]
 8008056:	e7db      	b.n	8008010 <__ssputs_r+0x58>
 8008058:	462a      	mov	r2, r5
 800805a:	f000 fbb1 	bl	80087c0 <_realloc_r>
 800805e:	4606      	mov	r6, r0
 8008060:	2800      	cmp	r0, #0
 8008062:	d1e1      	bne.n	8008028 <__ssputs_r+0x70>
 8008064:	4650      	mov	r0, sl
 8008066:	6921      	ldr	r1, [r4, #16]
 8008068:	f000 face 	bl	8008608 <_free_r>
 800806c:	e7c7      	b.n	8007ffe <__ssputs_r+0x46>
	...

08008070 <_svfiprintf_r>:
 8008070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008074:	4698      	mov	r8, r3
 8008076:	898b      	ldrh	r3, [r1, #12]
 8008078:	4607      	mov	r7, r0
 800807a:	061b      	lsls	r3, r3, #24
 800807c:	460d      	mov	r5, r1
 800807e:	4614      	mov	r4, r2
 8008080:	b09d      	sub	sp, #116	; 0x74
 8008082:	d50e      	bpl.n	80080a2 <_svfiprintf_r+0x32>
 8008084:	690b      	ldr	r3, [r1, #16]
 8008086:	b963      	cbnz	r3, 80080a2 <_svfiprintf_r+0x32>
 8008088:	2140      	movs	r1, #64	; 0x40
 800808a:	f000 fb25 	bl	80086d8 <_malloc_r>
 800808e:	6028      	str	r0, [r5, #0]
 8008090:	6128      	str	r0, [r5, #16]
 8008092:	b920      	cbnz	r0, 800809e <_svfiprintf_r+0x2e>
 8008094:	230c      	movs	r3, #12
 8008096:	603b      	str	r3, [r7, #0]
 8008098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800809c:	e0d1      	b.n	8008242 <_svfiprintf_r+0x1d2>
 800809e:	2340      	movs	r3, #64	; 0x40
 80080a0:	616b      	str	r3, [r5, #20]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9309      	str	r3, [sp, #36]	; 0x24
 80080a6:	2320      	movs	r3, #32
 80080a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080ac:	2330      	movs	r3, #48	; 0x30
 80080ae:	f04f 0901 	mov.w	r9, #1
 80080b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80080b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800825c <_svfiprintf_r+0x1ec>
 80080ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080be:	4623      	mov	r3, r4
 80080c0:	469a      	mov	sl, r3
 80080c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c6:	b10a      	cbz	r2, 80080cc <_svfiprintf_r+0x5c>
 80080c8:	2a25      	cmp	r2, #37	; 0x25
 80080ca:	d1f9      	bne.n	80080c0 <_svfiprintf_r+0x50>
 80080cc:	ebba 0b04 	subs.w	fp, sl, r4
 80080d0:	d00b      	beq.n	80080ea <_svfiprintf_r+0x7a>
 80080d2:	465b      	mov	r3, fp
 80080d4:	4622      	mov	r2, r4
 80080d6:	4629      	mov	r1, r5
 80080d8:	4638      	mov	r0, r7
 80080da:	f7ff ff6d 	bl	8007fb8 <__ssputs_r>
 80080de:	3001      	adds	r0, #1
 80080e0:	f000 80aa 	beq.w	8008238 <_svfiprintf_r+0x1c8>
 80080e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e6:	445a      	add	r2, fp
 80080e8:	9209      	str	r2, [sp, #36]	; 0x24
 80080ea:	f89a 3000 	ldrb.w	r3, [sl]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	f000 80a2 	beq.w	8008238 <_svfiprintf_r+0x1c8>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80080fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fe:	f10a 0a01 	add.w	sl, sl, #1
 8008102:	9304      	str	r3, [sp, #16]
 8008104:	9307      	str	r3, [sp, #28]
 8008106:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800810a:	931a      	str	r3, [sp, #104]	; 0x68
 800810c:	4654      	mov	r4, sl
 800810e:	2205      	movs	r2, #5
 8008110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008114:	4851      	ldr	r0, [pc, #324]	; (800825c <_svfiprintf_r+0x1ec>)
 8008116:	f000 fa41 	bl	800859c <memchr>
 800811a:	9a04      	ldr	r2, [sp, #16]
 800811c:	b9d8      	cbnz	r0, 8008156 <_svfiprintf_r+0xe6>
 800811e:	06d0      	lsls	r0, r2, #27
 8008120:	bf44      	itt	mi
 8008122:	2320      	movmi	r3, #32
 8008124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008128:	0711      	lsls	r1, r2, #28
 800812a:	bf44      	itt	mi
 800812c:	232b      	movmi	r3, #43	; 0x2b
 800812e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008132:	f89a 3000 	ldrb.w	r3, [sl]
 8008136:	2b2a      	cmp	r3, #42	; 0x2a
 8008138:	d015      	beq.n	8008166 <_svfiprintf_r+0xf6>
 800813a:	4654      	mov	r4, sl
 800813c:	2000      	movs	r0, #0
 800813e:	f04f 0c0a 	mov.w	ip, #10
 8008142:	9a07      	ldr	r2, [sp, #28]
 8008144:	4621      	mov	r1, r4
 8008146:	f811 3b01 	ldrb.w	r3, [r1], #1
 800814a:	3b30      	subs	r3, #48	; 0x30
 800814c:	2b09      	cmp	r3, #9
 800814e:	d94e      	bls.n	80081ee <_svfiprintf_r+0x17e>
 8008150:	b1b0      	cbz	r0, 8008180 <_svfiprintf_r+0x110>
 8008152:	9207      	str	r2, [sp, #28]
 8008154:	e014      	b.n	8008180 <_svfiprintf_r+0x110>
 8008156:	eba0 0308 	sub.w	r3, r0, r8
 800815a:	fa09 f303 	lsl.w	r3, r9, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	46a2      	mov	sl, r4
 8008162:	9304      	str	r3, [sp, #16]
 8008164:	e7d2      	b.n	800810c <_svfiprintf_r+0x9c>
 8008166:	9b03      	ldr	r3, [sp, #12]
 8008168:	1d19      	adds	r1, r3, #4
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	9103      	str	r1, [sp, #12]
 800816e:	2b00      	cmp	r3, #0
 8008170:	bfbb      	ittet	lt
 8008172:	425b      	neglt	r3, r3
 8008174:	f042 0202 	orrlt.w	r2, r2, #2
 8008178:	9307      	strge	r3, [sp, #28]
 800817a:	9307      	strlt	r3, [sp, #28]
 800817c:	bfb8      	it	lt
 800817e:	9204      	strlt	r2, [sp, #16]
 8008180:	7823      	ldrb	r3, [r4, #0]
 8008182:	2b2e      	cmp	r3, #46	; 0x2e
 8008184:	d10c      	bne.n	80081a0 <_svfiprintf_r+0x130>
 8008186:	7863      	ldrb	r3, [r4, #1]
 8008188:	2b2a      	cmp	r3, #42	; 0x2a
 800818a:	d135      	bne.n	80081f8 <_svfiprintf_r+0x188>
 800818c:	9b03      	ldr	r3, [sp, #12]
 800818e:	3402      	adds	r4, #2
 8008190:	1d1a      	adds	r2, r3, #4
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	9203      	str	r2, [sp, #12]
 8008196:	2b00      	cmp	r3, #0
 8008198:	bfb8      	it	lt
 800819a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800819e:	9305      	str	r3, [sp, #20]
 80081a0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8008260 <_svfiprintf_r+0x1f0>
 80081a4:	2203      	movs	r2, #3
 80081a6:	4650      	mov	r0, sl
 80081a8:	7821      	ldrb	r1, [r4, #0]
 80081aa:	f000 f9f7 	bl	800859c <memchr>
 80081ae:	b140      	cbz	r0, 80081c2 <_svfiprintf_r+0x152>
 80081b0:	2340      	movs	r3, #64	; 0x40
 80081b2:	eba0 000a 	sub.w	r0, r0, sl
 80081b6:	fa03 f000 	lsl.w	r0, r3, r0
 80081ba:	9b04      	ldr	r3, [sp, #16]
 80081bc:	3401      	adds	r4, #1
 80081be:	4303      	orrs	r3, r0
 80081c0:	9304      	str	r3, [sp, #16]
 80081c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c6:	2206      	movs	r2, #6
 80081c8:	4826      	ldr	r0, [pc, #152]	; (8008264 <_svfiprintf_r+0x1f4>)
 80081ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081ce:	f000 f9e5 	bl	800859c <memchr>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d038      	beq.n	8008248 <_svfiprintf_r+0x1d8>
 80081d6:	4b24      	ldr	r3, [pc, #144]	; (8008268 <_svfiprintf_r+0x1f8>)
 80081d8:	bb1b      	cbnz	r3, 8008222 <_svfiprintf_r+0x1b2>
 80081da:	9b03      	ldr	r3, [sp, #12]
 80081dc:	3307      	adds	r3, #7
 80081de:	f023 0307 	bic.w	r3, r3, #7
 80081e2:	3308      	adds	r3, #8
 80081e4:	9303      	str	r3, [sp, #12]
 80081e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e8:	4433      	add	r3, r6
 80081ea:	9309      	str	r3, [sp, #36]	; 0x24
 80081ec:	e767      	b.n	80080be <_svfiprintf_r+0x4e>
 80081ee:	460c      	mov	r4, r1
 80081f0:	2001      	movs	r0, #1
 80081f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081f6:	e7a5      	b.n	8008144 <_svfiprintf_r+0xd4>
 80081f8:	2300      	movs	r3, #0
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4619      	mov	r1, r3
 8008200:	3401      	adds	r4, #1
 8008202:	9305      	str	r3, [sp, #20]
 8008204:	4620      	mov	r0, r4
 8008206:	f810 2b01 	ldrb.w	r2, [r0], #1
 800820a:	3a30      	subs	r2, #48	; 0x30
 800820c:	2a09      	cmp	r2, #9
 800820e:	d903      	bls.n	8008218 <_svfiprintf_r+0x1a8>
 8008210:	2b00      	cmp	r3, #0
 8008212:	d0c5      	beq.n	80081a0 <_svfiprintf_r+0x130>
 8008214:	9105      	str	r1, [sp, #20]
 8008216:	e7c3      	b.n	80081a0 <_svfiprintf_r+0x130>
 8008218:	4604      	mov	r4, r0
 800821a:	2301      	movs	r3, #1
 800821c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008220:	e7f0      	b.n	8008204 <_svfiprintf_r+0x194>
 8008222:	ab03      	add	r3, sp, #12
 8008224:	9300      	str	r3, [sp, #0]
 8008226:	462a      	mov	r2, r5
 8008228:	4638      	mov	r0, r7
 800822a:	4b10      	ldr	r3, [pc, #64]	; (800826c <_svfiprintf_r+0x1fc>)
 800822c:	a904      	add	r1, sp, #16
 800822e:	f3af 8000 	nop.w
 8008232:	1c42      	adds	r2, r0, #1
 8008234:	4606      	mov	r6, r0
 8008236:	d1d6      	bne.n	80081e6 <_svfiprintf_r+0x176>
 8008238:	89ab      	ldrh	r3, [r5, #12]
 800823a:	065b      	lsls	r3, r3, #25
 800823c:	f53f af2c 	bmi.w	8008098 <_svfiprintf_r+0x28>
 8008240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008242:	b01d      	add	sp, #116	; 0x74
 8008244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008248:	ab03      	add	r3, sp, #12
 800824a:	9300      	str	r3, [sp, #0]
 800824c:	462a      	mov	r2, r5
 800824e:	4638      	mov	r0, r7
 8008250:	4b06      	ldr	r3, [pc, #24]	; (800826c <_svfiprintf_r+0x1fc>)
 8008252:	a904      	add	r1, sp, #16
 8008254:	f000 f87c 	bl	8008350 <_printf_i>
 8008258:	e7eb      	b.n	8008232 <_svfiprintf_r+0x1c2>
 800825a:	bf00      	nop
 800825c:	08008900 	.word	0x08008900
 8008260:	08008906 	.word	0x08008906
 8008264:	0800890a 	.word	0x0800890a
 8008268:	00000000 	.word	0x00000000
 800826c:	08007fb9 	.word	0x08007fb9

08008270 <_printf_common>:
 8008270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008274:	4616      	mov	r6, r2
 8008276:	4699      	mov	r9, r3
 8008278:	688a      	ldr	r2, [r1, #8]
 800827a:	690b      	ldr	r3, [r1, #16]
 800827c:	4607      	mov	r7, r0
 800827e:	4293      	cmp	r3, r2
 8008280:	bfb8      	it	lt
 8008282:	4613      	movlt	r3, r2
 8008284:	6033      	str	r3, [r6, #0]
 8008286:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800828a:	460c      	mov	r4, r1
 800828c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008290:	b10a      	cbz	r2, 8008296 <_printf_common+0x26>
 8008292:	3301      	adds	r3, #1
 8008294:	6033      	str	r3, [r6, #0]
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	0699      	lsls	r1, r3, #26
 800829a:	bf42      	ittt	mi
 800829c:	6833      	ldrmi	r3, [r6, #0]
 800829e:	3302      	addmi	r3, #2
 80082a0:	6033      	strmi	r3, [r6, #0]
 80082a2:	6825      	ldr	r5, [r4, #0]
 80082a4:	f015 0506 	ands.w	r5, r5, #6
 80082a8:	d106      	bne.n	80082b8 <_printf_common+0x48>
 80082aa:	f104 0a19 	add.w	sl, r4, #25
 80082ae:	68e3      	ldr	r3, [r4, #12]
 80082b0:	6832      	ldr	r2, [r6, #0]
 80082b2:	1a9b      	subs	r3, r3, r2
 80082b4:	42ab      	cmp	r3, r5
 80082b6:	dc28      	bgt.n	800830a <_printf_common+0x9a>
 80082b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082bc:	1e13      	subs	r3, r2, #0
 80082be:	6822      	ldr	r2, [r4, #0]
 80082c0:	bf18      	it	ne
 80082c2:	2301      	movne	r3, #1
 80082c4:	0692      	lsls	r2, r2, #26
 80082c6:	d42d      	bmi.n	8008324 <_printf_common+0xb4>
 80082c8:	4649      	mov	r1, r9
 80082ca:	4638      	mov	r0, r7
 80082cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082d0:	47c0      	blx	r8
 80082d2:	3001      	adds	r0, #1
 80082d4:	d020      	beq.n	8008318 <_printf_common+0xa8>
 80082d6:	6823      	ldr	r3, [r4, #0]
 80082d8:	68e5      	ldr	r5, [r4, #12]
 80082da:	f003 0306 	and.w	r3, r3, #6
 80082de:	2b04      	cmp	r3, #4
 80082e0:	bf18      	it	ne
 80082e2:	2500      	movne	r5, #0
 80082e4:	6832      	ldr	r2, [r6, #0]
 80082e6:	f04f 0600 	mov.w	r6, #0
 80082ea:	68a3      	ldr	r3, [r4, #8]
 80082ec:	bf08      	it	eq
 80082ee:	1aad      	subeq	r5, r5, r2
 80082f0:	6922      	ldr	r2, [r4, #16]
 80082f2:	bf08      	it	eq
 80082f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082f8:	4293      	cmp	r3, r2
 80082fa:	bfc4      	itt	gt
 80082fc:	1a9b      	subgt	r3, r3, r2
 80082fe:	18ed      	addgt	r5, r5, r3
 8008300:	341a      	adds	r4, #26
 8008302:	42b5      	cmp	r5, r6
 8008304:	d11a      	bne.n	800833c <_printf_common+0xcc>
 8008306:	2000      	movs	r0, #0
 8008308:	e008      	b.n	800831c <_printf_common+0xac>
 800830a:	2301      	movs	r3, #1
 800830c:	4652      	mov	r2, sl
 800830e:	4649      	mov	r1, r9
 8008310:	4638      	mov	r0, r7
 8008312:	47c0      	blx	r8
 8008314:	3001      	adds	r0, #1
 8008316:	d103      	bne.n	8008320 <_printf_common+0xb0>
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008320:	3501      	adds	r5, #1
 8008322:	e7c4      	b.n	80082ae <_printf_common+0x3e>
 8008324:	2030      	movs	r0, #48	; 0x30
 8008326:	18e1      	adds	r1, r4, r3
 8008328:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800832c:	1c5a      	adds	r2, r3, #1
 800832e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008332:	4422      	add	r2, r4
 8008334:	3302      	adds	r3, #2
 8008336:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800833a:	e7c5      	b.n	80082c8 <_printf_common+0x58>
 800833c:	2301      	movs	r3, #1
 800833e:	4622      	mov	r2, r4
 8008340:	4649      	mov	r1, r9
 8008342:	4638      	mov	r0, r7
 8008344:	47c0      	blx	r8
 8008346:	3001      	adds	r0, #1
 8008348:	d0e6      	beq.n	8008318 <_printf_common+0xa8>
 800834a:	3601      	adds	r6, #1
 800834c:	e7d9      	b.n	8008302 <_printf_common+0x92>
	...

08008350 <_printf_i>:
 8008350:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008354:	7e0f      	ldrb	r7, [r1, #24]
 8008356:	4691      	mov	r9, r2
 8008358:	2f78      	cmp	r7, #120	; 0x78
 800835a:	4680      	mov	r8, r0
 800835c:	460c      	mov	r4, r1
 800835e:	469a      	mov	sl, r3
 8008360:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008362:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008366:	d807      	bhi.n	8008378 <_printf_i+0x28>
 8008368:	2f62      	cmp	r7, #98	; 0x62
 800836a:	d80a      	bhi.n	8008382 <_printf_i+0x32>
 800836c:	2f00      	cmp	r7, #0
 800836e:	f000 80d9 	beq.w	8008524 <_printf_i+0x1d4>
 8008372:	2f58      	cmp	r7, #88	; 0x58
 8008374:	f000 80a4 	beq.w	80084c0 <_printf_i+0x170>
 8008378:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800837c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008380:	e03a      	b.n	80083f8 <_printf_i+0xa8>
 8008382:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008386:	2b15      	cmp	r3, #21
 8008388:	d8f6      	bhi.n	8008378 <_printf_i+0x28>
 800838a:	a101      	add	r1, pc, #4	; (adr r1, 8008390 <_printf_i+0x40>)
 800838c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008390:	080083e9 	.word	0x080083e9
 8008394:	080083fd 	.word	0x080083fd
 8008398:	08008379 	.word	0x08008379
 800839c:	08008379 	.word	0x08008379
 80083a0:	08008379 	.word	0x08008379
 80083a4:	08008379 	.word	0x08008379
 80083a8:	080083fd 	.word	0x080083fd
 80083ac:	08008379 	.word	0x08008379
 80083b0:	08008379 	.word	0x08008379
 80083b4:	08008379 	.word	0x08008379
 80083b8:	08008379 	.word	0x08008379
 80083bc:	0800850b 	.word	0x0800850b
 80083c0:	0800842d 	.word	0x0800842d
 80083c4:	080084ed 	.word	0x080084ed
 80083c8:	08008379 	.word	0x08008379
 80083cc:	08008379 	.word	0x08008379
 80083d0:	0800852d 	.word	0x0800852d
 80083d4:	08008379 	.word	0x08008379
 80083d8:	0800842d 	.word	0x0800842d
 80083dc:	08008379 	.word	0x08008379
 80083e0:	08008379 	.word	0x08008379
 80083e4:	080084f5 	.word	0x080084f5
 80083e8:	682b      	ldr	r3, [r5, #0]
 80083ea:	1d1a      	adds	r2, r3, #4
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	602a      	str	r2, [r5, #0]
 80083f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083f8:	2301      	movs	r3, #1
 80083fa:	e0a4      	b.n	8008546 <_printf_i+0x1f6>
 80083fc:	6820      	ldr	r0, [r4, #0]
 80083fe:	6829      	ldr	r1, [r5, #0]
 8008400:	0606      	lsls	r6, r0, #24
 8008402:	f101 0304 	add.w	r3, r1, #4
 8008406:	d50a      	bpl.n	800841e <_printf_i+0xce>
 8008408:	680e      	ldr	r6, [r1, #0]
 800840a:	602b      	str	r3, [r5, #0]
 800840c:	2e00      	cmp	r6, #0
 800840e:	da03      	bge.n	8008418 <_printf_i+0xc8>
 8008410:	232d      	movs	r3, #45	; 0x2d
 8008412:	4276      	negs	r6, r6
 8008414:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008418:	230a      	movs	r3, #10
 800841a:	485e      	ldr	r0, [pc, #376]	; (8008594 <_printf_i+0x244>)
 800841c:	e019      	b.n	8008452 <_printf_i+0x102>
 800841e:	680e      	ldr	r6, [r1, #0]
 8008420:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008424:	602b      	str	r3, [r5, #0]
 8008426:	bf18      	it	ne
 8008428:	b236      	sxthne	r6, r6
 800842a:	e7ef      	b.n	800840c <_printf_i+0xbc>
 800842c:	682b      	ldr	r3, [r5, #0]
 800842e:	6820      	ldr	r0, [r4, #0]
 8008430:	1d19      	adds	r1, r3, #4
 8008432:	6029      	str	r1, [r5, #0]
 8008434:	0601      	lsls	r1, r0, #24
 8008436:	d501      	bpl.n	800843c <_printf_i+0xec>
 8008438:	681e      	ldr	r6, [r3, #0]
 800843a:	e002      	b.n	8008442 <_printf_i+0xf2>
 800843c:	0646      	lsls	r6, r0, #25
 800843e:	d5fb      	bpl.n	8008438 <_printf_i+0xe8>
 8008440:	881e      	ldrh	r6, [r3, #0]
 8008442:	2f6f      	cmp	r7, #111	; 0x6f
 8008444:	bf0c      	ite	eq
 8008446:	2308      	moveq	r3, #8
 8008448:	230a      	movne	r3, #10
 800844a:	4852      	ldr	r0, [pc, #328]	; (8008594 <_printf_i+0x244>)
 800844c:	2100      	movs	r1, #0
 800844e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008452:	6865      	ldr	r5, [r4, #4]
 8008454:	2d00      	cmp	r5, #0
 8008456:	bfa8      	it	ge
 8008458:	6821      	ldrge	r1, [r4, #0]
 800845a:	60a5      	str	r5, [r4, #8]
 800845c:	bfa4      	itt	ge
 800845e:	f021 0104 	bicge.w	r1, r1, #4
 8008462:	6021      	strge	r1, [r4, #0]
 8008464:	b90e      	cbnz	r6, 800846a <_printf_i+0x11a>
 8008466:	2d00      	cmp	r5, #0
 8008468:	d04d      	beq.n	8008506 <_printf_i+0x1b6>
 800846a:	4615      	mov	r5, r2
 800846c:	fbb6 f1f3 	udiv	r1, r6, r3
 8008470:	fb03 6711 	mls	r7, r3, r1, r6
 8008474:	5dc7      	ldrb	r7, [r0, r7]
 8008476:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800847a:	4637      	mov	r7, r6
 800847c:	42bb      	cmp	r3, r7
 800847e:	460e      	mov	r6, r1
 8008480:	d9f4      	bls.n	800846c <_printf_i+0x11c>
 8008482:	2b08      	cmp	r3, #8
 8008484:	d10b      	bne.n	800849e <_printf_i+0x14e>
 8008486:	6823      	ldr	r3, [r4, #0]
 8008488:	07de      	lsls	r6, r3, #31
 800848a:	d508      	bpl.n	800849e <_printf_i+0x14e>
 800848c:	6923      	ldr	r3, [r4, #16]
 800848e:	6861      	ldr	r1, [r4, #4]
 8008490:	4299      	cmp	r1, r3
 8008492:	bfde      	ittt	le
 8008494:	2330      	movle	r3, #48	; 0x30
 8008496:	f805 3c01 	strble.w	r3, [r5, #-1]
 800849a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800849e:	1b52      	subs	r2, r2, r5
 80084a0:	6122      	str	r2, [r4, #16]
 80084a2:	464b      	mov	r3, r9
 80084a4:	4621      	mov	r1, r4
 80084a6:	4640      	mov	r0, r8
 80084a8:	f8cd a000 	str.w	sl, [sp]
 80084ac:	aa03      	add	r2, sp, #12
 80084ae:	f7ff fedf 	bl	8008270 <_printf_common>
 80084b2:	3001      	adds	r0, #1
 80084b4:	d14c      	bne.n	8008550 <_printf_i+0x200>
 80084b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80084ba:	b004      	add	sp, #16
 80084bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084c0:	4834      	ldr	r0, [pc, #208]	; (8008594 <_printf_i+0x244>)
 80084c2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80084c6:	6829      	ldr	r1, [r5, #0]
 80084c8:	6823      	ldr	r3, [r4, #0]
 80084ca:	f851 6b04 	ldr.w	r6, [r1], #4
 80084ce:	6029      	str	r1, [r5, #0]
 80084d0:	061d      	lsls	r5, r3, #24
 80084d2:	d514      	bpl.n	80084fe <_printf_i+0x1ae>
 80084d4:	07df      	lsls	r7, r3, #31
 80084d6:	bf44      	itt	mi
 80084d8:	f043 0320 	orrmi.w	r3, r3, #32
 80084dc:	6023      	strmi	r3, [r4, #0]
 80084de:	b91e      	cbnz	r6, 80084e8 <_printf_i+0x198>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	f023 0320 	bic.w	r3, r3, #32
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	2310      	movs	r3, #16
 80084ea:	e7af      	b.n	800844c <_printf_i+0xfc>
 80084ec:	6823      	ldr	r3, [r4, #0]
 80084ee:	f043 0320 	orr.w	r3, r3, #32
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	2378      	movs	r3, #120	; 0x78
 80084f6:	4828      	ldr	r0, [pc, #160]	; (8008598 <_printf_i+0x248>)
 80084f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80084fc:	e7e3      	b.n	80084c6 <_printf_i+0x176>
 80084fe:	0659      	lsls	r1, r3, #25
 8008500:	bf48      	it	mi
 8008502:	b2b6      	uxthmi	r6, r6
 8008504:	e7e6      	b.n	80084d4 <_printf_i+0x184>
 8008506:	4615      	mov	r5, r2
 8008508:	e7bb      	b.n	8008482 <_printf_i+0x132>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	6826      	ldr	r6, [r4, #0]
 800850e:	1d18      	adds	r0, r3, #4
 8008510:	6961      	ldr	r1, [r4, #20]
 8008512:	6028      	str	r0, [r5, #0]
 8008514:	0635      	lsls	r5, r6, #24
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	d501      	bpl.n	800851e <_printf_i+0x1ce>
 800851a:	6019      	str	r1, [r3, #0]
 800851c:	e002      	b.n	8008524 <_printf_i+0x1d4>
 800851e:	0670      	lsls	r0, r6, #25
 8008520:	d5fb      	bpl.n	800851a <_printf_i+0x1ca>
 8008522:	8019      	strh	r1, [r3, #0]
 8008524:	2300      	movs	r3, #0
 8008526:	4615      	mov	r5, r2
 8008528:	6123      	str	r3, [r4, #16]
 800852a:	e7ba      	b.n	80084a2 <_printf_i+0x152>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	2100      	movs	r1, #0
 8008530:	1d1a      	adds	r2, r3, #4
 8008532:	602a      	str	r2, [r5, #0]
 8008534:	681d      	ldr	r5, [r3, #0]
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	4628      	mov	r0, r5
 800853a:	f000 f82f 	bl	800859c <memchr>
 800853e:	b108      	cbz	r0, 8008544 <_printf_i+0x1f4>
 8008540:	1b40      	subs	r0, r0, r5
 8008542:	6060      	str	r0, [r4, #4]
 8008544:	6863      	ldr	r3, [r4, #4]
 8008546:	6123      	str	r3, [r4, #16]
 8008548:	2300      	movs	r3, #0
 800854a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800854e:	e7a8      	b.n	80084a2 <_printf_i+0x152>
 8008550:	462a      	mov	r2, r5
 8008552:	4649      	mov	r1, r9
 8008554:	4640      	mov	r0, r8
 8008556:	6923      	ldr	r3, [r4, #16]
 8008558:	47d0      	blx	sl
 800855a:	3001      	adds	r0, #1
 800855c:	d0ab      	beq.n	80084b6 <_printf_i+0x166>
 800855e:	6823      	ldr	r3, [r4, #0]
 8008560:	079b      	lsls	r3, r3, #30
 8008562:	d413      	bmi.n	800858c <_printf_i+0x23c>
 8008564:	68e0      	ldr	r0, [r4, #12]
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	4298      	cmp	r0, r3
 800856a:	bfb8      	it	lt
 800856c:	4618      	movlt	r0, r3
 800856e:	e7a4      	b.n	80084ba <_printf_i+0x16a>
 8008570:	2301      	movs	r3, #1
 8008572:	4632      	mov	r2, r6
 8008574:	4649      	mov	r1, r9
 8008576:	4640      	mov	r0, r8
 8008578:	47d0      	blx	sl
 800857a:	3001      	adds	r0, #1
 800857c:	d09b      	beq.n	80084b6 <_printf_i+0x166>
 800857e:	3501      	adds	r5, #1
 8008580:	68e3      	ldr	r3, [r4, #12]
 8008582:	9903      	ldr	r1, [sp, #12]
 8008584:	1a5b      	subs	r3, r3, r1
 8008586:	42ab      	cmp	r3, r5
 8008588:	dcf2      	bgt.n	8008570 <_printf_i+0x220>
 800858a:	e7eb      	b.n	8008564 <_printf_i+0x214>
 800858c:	2500      	movs	r5, #0
 800858e:	f104 0619 	add.w	r6, r4, #25
 8008592:	e7f5      	b.n	8008580 <_printf_i+0x230>
 8008594:	08008911 	.word	0x08008911
 8008598:	08008922 	.word	0x08008922

0800859c <memchr>:
 800859c:	4603      	mov	r3, r0
 800859e:	b510      	push	{r4, lr}
 80085a0:	b2c9      	uxtb	r1, r1
 80085a2:	4402      	add	r2, r0
 80085a4:	4293      	cmp	r3, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	d101      	bne.n	80085ae <memchr+0x12>
 80085aa:	2000      	movs	r0, #0
 80085ac:	e003      	b.n	80085b6 <memchr+0x1a>
 80085ae:	7804      	ldrb	r4, [r0, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	428c      	cmp	r4, r1
 80085b4:	d1f6      	bne.n	80085a4 <memchr+0x8>
 80085b6:	bd10      	pop	{r4, pc}

080085b8 <memcpy>:
 80085b8:	440a      	add	r2, r1
 80085ba:	4291      	cmp	r1, r2
 80085bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80085c0:	d100      	bne.n	80085c4 <memcpy+0xc>
 80085c2:	4770      	bx	lr
 80085c4:	b510      	push	{r4, lr}
 80085c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ca:	4291      	cmp	r1, r2
 80085cc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085d0:	d1f9      	bne.n	80085c6 <memcpy+0xe>
 80085d2:	bd10      	pop	{r4, pc}

080085d4 <memmove>:
 80085d4:	4288      	cmp	r0, r1
 80085d6:	b510      	push	{r4, lr}
 80085d8:	eb01 0402 	add.w	r4, r1, r2
 80085dc:	d902      	bls.n	80085e4 <memmove+0x10>
 80085de:	4284      	cmp	r4, r0
 80085e0:	4623      	mov	r3, r4
 80085e2:	d807      	bhi.n	80085f4 <memmove+0x20>
 80085e4:	1e43      	subs	r3, r0, #1
 80085e6:	42a1      	cmp	r1, r4
 80085e8:	d008      	beq.n	80085fc <memmove+0x28>
 80085ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085f2:	e7f8      	b.n	80085e6 <memmove+0x12>
 80085f4:	4601      	mov	r1, r0
 80085f6:	4402      	add	r2, r0
 80085f8:	428a      	cmp	r2, r1
 80085fa:	d100      	bne.n	80085fe <memmove+0x2a>
 80085fc:	bd10      	pop	{r4, pc}
 80085fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008602:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008606:	e7f7      	b.n	80085f8 <memmove+0x24>

08008608 <_free_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	4605      	mov	r5, r0
 800860c:	2900      	cmp	r1, #0
 800860e:	d040      	beq.n	8008692 <_free_r+0x8a>
 8008610:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008614:	1f0c      	subs	r4, r1, #4
 8008616:	2b00      	cmp	r3, #0
 8008618:	bfb8      	it	lt
 800861a:	18e4      	addlt	r4, r4, r3
 800861c:	f000 f910 	bl	8008840 <__malloc_lock>
 8008620:	4a1c      	ldr	r2, [pc, #112]	; (8008694 <_free_r+0x8c>)
 8008622:	6813      	ldr	r3, [r2, #0]
 8008624:	b933      	cbnz	r3, 8008634 <_free_r+0x2c>
 8008626:	6063      	str	r3, [r4, #4]
 8008628:	6014      	str	r4, [r2, #0]
 800862a:	4628      	mov	r0, r5
 800862c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008630:	f000 b90c 	b.w	800884c <__malloc_unlock>
 8008634:	42a3      	cmp	r3, r4
 8008636:	d908      	bls.n	800864a <_free_r+0x42>
 8008638:	6820      	ldr	r0, [r4, #0]
 800863a:	1821      	adds	r1, r4, r0
 800863c:	428b      	cmp	r3, r1
 800863e:	bf01      	itttt	eq
 8008640:	6819      	ldreq	r1, [r3, #0]
 8008642:	685b      	ldreq	r3, [r3, #4]
 8008644:	1809      	addeq	r1, r1, r0
 8008646:	6021      	streq	r1, [r4, #0]
 8008648:	e7ed      	b.n	8008626 <_free_r+0x1e>
 800864a:	461a      	mov	r2, r3
 800864c:	685b      	ldr	r3, [r3, #4]
 800864e:	b10b      	cbz	r3, 8008654 <_free_r+0x4c>
 8008650:	42a3      	cmp	r3, r4
 8008652:	d9fa      	bls.n	800864a <_free_r+0x42>
 8008654:	6811      	ldr	r1, [r2, #0]
 8008656:	1850      	adds	r0, r2, r1
 8008658:	42a0      	cmp	r0, r4
 800865a:	d10b      	bne.n	8008674 <_free_r+0x6c>
 800865c:	6820      	ldr	r0, [r4, #0]
 800865e:	4401      	add	r1, r0
 8008660:	1850      	adds	r0, r2, r1
 8008662:	4283      	cmp	r3, r0
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	d1e0      	bne.n	800862a <_free_r+0x22>
 8008668:	6818      	ldr	r0, [r3, #0]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	4401      	add	r1, r0
 800866e:	6011      	str	r1, [r2, #0]
 8008670:	6053      	str	r3, [r2, #4]
 8008672:	e7da      	b.n	800862a <_free_r+0x22>
 8008674:	d902      	bls.n	800867c <_free_r+0x74>
 8008676:	230c      	movs	r3, #12
 8008678:	602b      	str	r3, [r5, #0]
 800867a:	e7d6      	b.n	800862a <_free_r+0x22>
 800867c:	6820      	ldr	r0, [r4, #0]
 800867e:	1821      	adds	r1, r4, r0
 8008680:	428b      	cmp	r3, r1
 8008682:	bf01      	itttt	eq
 8008684:	6819      	ldreq	r1, [r3, #0]
 8008686:	685b      	ldreq	r3, [r3, #4]
 8008688:	1809      	addeq	r1, r1, r0
 800868a:	6021      	streq	r1, [r4, #0]
 800868c:	6063      	str	r3, [r4, #4]
 800868e:	6054      	str	r4, [r2, #4]
 8008690:	e7cb      	b.n	800862a <_free_r+0x22>
 8008692:	bd38      	pop	{r3, r4, r5, pc}
 8008694:	200013f0 	.word	0x200013f0

08008698 <sbrk_aligned>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	4e0e      	ldr	r6, [pc, #56]	; (80086d4 <sbrk_aligned+0x3c>)
 800869c:	460c      	mov	r4, r1
 800869e:	6831      	ldr	r1, [r6, #0]
 80086a0:	4605      	mov	r5, r0
 80086a2:	b911      	cbnz	r1, 80086aa <sbrk_aligned+0x12>
 80086a4:	f000 f8bc 	bl	8008820 <_sbrk_r>
 80086a8:	6030      	str	r0, [r6, #0]
 80086aa:	4621      	mov	r1, r4
 80086ac:	4628      	mov	r0, r5
 80086ae:	f000 f8b7 	bl	8008820 <_sbrk_r>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	d00a      	beq.n	80086cc <sbrk_aligned+0x34>
 80086b6:	1cc4      	adds	r4, r0, #3
 80086b8:	f024 0403 	bic.w	r4, r4, #3
 80086bc:	42a0      	cmp	r0, r4
 80086be:	d007      	beq.n	80086d0 <sbrk_aligned+0x38>
 80086c0:	1a21      	subs	r1, r4, r0
 80086c2:	4628      	mov	r0, r5
 80086c4:	f000 f8ac 	bl	8008820 <_sbrk_r>
 80086c8:	3001      	adds	r0, #1
 80086ca:	d101      	bne.n	80086d0 <sbrk_aligned+0x38>
 80086cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80086d0:	4620      	mov	r0, r4
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	200013f4 	.word	0x200013f4

080086d8 <_malloc_r>:
 80086d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086dc:	1ccd      	adds	r5, r1, #3
 80086de:	f025 0503 	bic.w	r5, r5, #3
 80086e2:	3508      	adds	r5, #8
 80086e4:	2d0c      	cmp	r5, #12
 80086e6:	bf38      	it	cc
 80086e8:	250c      	movcc	r5, #12
 80086ea:	2d00      	cmp	r5, #0
 80086ec:	4607      	mov	r7, r0
 80086ee:	db01      	blt.n	80086f4 <_malloc_r+0x1c>
 80086f0:	42a9      	cmp	r1, r5
 80086f2:	d905      	bls.n	8008700 <_malloc_r+0x28>
 80086f4:	230c      	movs	r3, #12
 80086f6:	2600      	movs	r6, #0
 80086f8:	603b      	str	r3, [r7, #0]
 80086fa:	4630      	mov	r0, r6
 80086fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008700:	4e2e      	ldr	r6, [pc, #184]	; (80087bc <_malloc_r+0xe4>)
 8008702:	f000 f89d 	bl	8008840 <__malloc_lock>
 8008706:	6833      	ldr	r3, [r6, #0]
 8008708:	461c      	mov	r4, r3
 800870a:	bb34      	cbnz	r4, 800875a <_malloc_r+0x82>
 800870c:	4629      	mov	r1, r5
 800870e:	4638      	mov	r0, r7
 8008710:	f7ff ffc2 	bl	8008698 <sbrk_aligned>
 8008714:	1c43      	adds	r3, r0, #1
 8008716:	4604      	mov	r4, r0
 8008718:	d14d      	bne.n	80087b6 <_malloc_r+0xde>
 800871a:	6834      	ldr	r4, [r6, #0]
 800871c:	4626      	mov	r6, r4
 800871e:	2e00      	cmp	r6, #0
 8008720:	d140      	bne.n	80087a4 <_malloc_r+0xcc>
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	4631      	mov	r1, r6
 8008726:	4638      	mov	r0, r7
 8008728:	eb04 0803 	add.w	r8, r4, r3
 800872c:	f000 f878 	bl	8008820 <_sbrk_r>
 8008730:	4580      	cmp	r8, r0
 8008732:	d13a      	bne.n	80087aa <_malloc_r+0xd2>
 8008734:	6821      	ldr	r1, [r4, #0]
 8008736:	3503      	adds	r5, #3
 8008738:	1a6d      	subs	r5, r5, r1
 800873a:	f025 0503 	bic.w	r5, r5, #3
 800873e:	3508      	adds	r5, #8
 8008740:	2d0c      	cmp	r5, #12
 8008742:	bf38      	it	cc
 8008744:	250c      	movcc	r5, #12
 8008746:	4638      	mov	r0, r7
 8008748:	4629      	mov	r1, r5
 800874a:	f7ff ffa5 	bl	8008698 <sbrk_aligned>
 800874e:	3001      	adds	r0, #1
 8008750:	d02b      	beq.n	80087aa <_malloc_r+0xd2>
 8008752:	6823      	ldr	r3, [r4, #0]
 8008754:	442b      	add	r3, r5
 8008756:	6023      	str	r3, [r4, #0]
 8008758:	e00e      	b.n	8008778 <_malloc_r+0xa0>
 800875a:	6822      	ldr	r2, [r4, #0]
 800875c:	1b52      	subs	r2, r2, r5
 800875e:	d41e      	bmi.n	800879e <_malloc_r+0xc6>
 8008760:	2a0b      	cmp	r2, #11
 8008762:	d916      	bls.n	8008792 <_malloc_r+0xba>
 8008764:	1961      	adds	r1, r4, r5
 8008766:	42a3      	cmp	r3, r4
 8008768:	6025      	str	r5, [r4, #0]
 800876a:	bf18      	it	ne
 800876c:	6059      	strne	r1, [r3, #4]
 800876e:	6863      	ldr	r3, [r4, #4]
 8008770:	bf08      	it	eq
 8008772:	6031      	streq	r1, [r6, #0]
 8008774:	5162      	str	r2, [r4, r5]
 8008776:	604b      	str	r3, [r1, #4]
 8008778:	4638      	mov	r0, r7
 800877a:	f104 060b 	add.w	r6, r4, #11
 800877e:	f000 f865 	bl	800884c <__malloc_unlock>
 8008782:	f026 0607 	bic.w	r6, r6, #7
 8008786:	1d23      	adds	r3, r4, #4
 8008788:	1af2      	subs	r2, r6, r3
 800878a:	d0b6      	beq.n	80086fa <_malloc_r+0x22>
 800878c:	1b9b      	subs	r3, r3, r6
 800878e:	50a3      	str	r3, [r4, r2]
 8008790:	e7b3      	b.n	80086fa <_malloc_r+0x22>
 8008792:	6862      	ldr	r2, [r4, #4]
 8008794:	42a3      	cmp	r3, r4
 8008796:	bf0c      	ite	eq
 8008798:	6032      	streq	r2, [r6, #0]
 800879a:	605a      	strne	r2, [r3, #4]
 800879c:	e7ec      	b.n	8008778 <_malloc_r+0xa0>
 800879e:	4623      	mov	r3, r4
 80087a0:	6864      	ldr	r4, [r4, #4]
 80087a2:	e7b2      	b.n	800870a <_malloc_r+0x32>
 80087a4:	4634      	mov	r4, r6
 80087a6:	6876      	ldr	r6, [r6, #4]
 80087a8:	e7b9      	b.n	800871e <_malloc_r+0x46>
 80087aa:	230c      	movs	r3, #12
 80087ac:	4638      	mov	r0, r7
 80087ae:	603b      	str	r3, [r7, #0]
 80087b0:	f000 f84c 	bl	800884c <__malloc_unlock>
 80087b4:	e7a1      	b.n	80086fa <_malloc_r+0x22>
 80087b6:	6025      	str	r5, [r4, #0]
 80087b8:	e7de      	b.n	8008778 <_malloc_r+0xa0>
 80087ba:	bf00      	nop
 80087bc:	200013f0 	.word	0x200013f0

080087c0 <_realloc_r>:
 80087c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087c4:	4680      	mov	r8, r0
 80087c6:	4614      	mov	r4, r2
 80087c8:	460e      	mov	r6, r1
 80087ca:	b921      	cbnz	r1, 80087d6 <_realloc_r+0x16>
 80087cc:	4611      	mov	r1, r2
 80087ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80087d2:	f7ff bf81 	b.w	80086d8 <_malloc_r>
 80087d6:	b92a      	cbnz	r2, 80087e4 <_realloc_r+0x24>
 80087d8:	f7ff ff16 	bl	8008608 <_free_r>
 80087dc:	4625      	mov	r5, r4
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e4:	f000 f838 	bl	8008858 <_malloc_usable_size_r>
 80087e8:	4284      	cmp	r4, r0
 80087ea:	4607      	mov	r7, r0
 80087ec:	d802      	bhi.n	80087f4 <_realloc_r+0x34>
 80087ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087f2:	d812      	bhi.n	800881a <_realloc_r+0x5a>
 80087f4:	4621      	mov	r1, r4
 80087f6:	4640      	mov	r0, r8
 80087f8:	f7ff ff6e 	bl	80086d8 <_malloc_r>
 80087fc:	4605      	mov	r5, r0
 80087fe:	2800      	cmp	r0, #0
 8008800:	d0ed      	beq.n	80087de <_realloc_r+0x1e>
 8008802:	42bc      	cmp	r4, r7
 8008804:	4622      	mov	r2, r4
 8008806:	4631      	mov	r1, r6
 8008808:	bf28      	it	cs
 800880a:	463a      	movcs	r2, r7
 800880c:	f7ff fed4 	bl	80085b8 <memcpy>
 8008810:	4631      	mov	r1, r6
 8008812:	4640      	mov	r0, r8
 8008814:	f7ff fef8 	bl	8008608 <_free_r>
 8008818:	e7e1      	b.n	80087de <_realloc_r+0x1e>
 800881a:	4635      	mov	r5, r6
 800881c:	e7df      	b.n	80087de <_realloc_r+0x1e>
	...

08008820 <_sbrk_r>:
 8008820:	b538      	push	{r3, r4, r5, lr}
 8008822:	2300      	movs	r3, #0
 8008824:	4d05      	ldr	r5, [pc, #20]	; (800883c <_sbrk_r+0x1c>)
 8008826:	4604      	mov	r4, r0
 8008828:	4608      	mov	r0, r1
 800882a:	602b      	str	r3, [r5, #0]
 800882c:	f7f8 fa5e 	bl	8000cec <_sbrk>
 8008830:	1c43      	adds	r3, r0, #1
 8008832:	d102      	bne.n	800883a <_sbrk_r+0x1a>
 8008834:	682b      	ldr	r3, [r5, #0]
 8008836:	b103      	cbz	r3, 800883a <_sbrk_r+0x1a>
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	bd38      	pop	{r3, r4, r5, pc}
 800883c:	200013f8 	.word	0x200013f8

08008840 <__malloc_lock>:
 8008840:	4801      	ldr	r0, [pc, #4]	; (8008848 <__malloc_lock+0x8>)
 8008842:	f000 b811 	b.w	8008868 <__retarget_lock_acquire_recursive>
 8008846:	bf00      	nop
 8008848:	200013fc 	.word	0x200013fc

0800884c <__malloc_unlock>:
 800884c:	4801      	ldr	r0, [pc, #4]	; (8008854 <__malloc_unlock+0x8>)
 800884e:	f000 b80c 	b.w	800886a <__retarget_lock_release_recursive>
 8008852:	bf00      	nop
 8008854:	200013fc 	.word	0x200013fc

08008858 <_malloc_usable_size_r>:
 8008858:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800885c:	1f18      	subs	r0, r3, #4
 800885e:	2b00      	cmp	r3, #0
 8008860:	bfbc      	itt	lt
 8008862:	580b      	ldrlt	r3, [r1, r0]
 8008864:	18c0      	addlt	r0, r0, r3
 8008866:	4770      	bx	lr

08008868 <__retarget_lock_acquire_recursive>:
 8008868:	4770      	bx	lr

0800886a <__retarget_lock_release_recursive>:
 800886a:	4770      	bx	lr

0800886c <_init>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	bf00      	nop
 8008870:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008872:	bc08      	pop	{r3}
 8008874:	469e      	mov	lr, r3
 8008876:	4770      	bx	lr

08008878 <_fini>:
 8008878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800887a:	bf00      	nop
 800887c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800887e:	bc08      	pop	{r3}
 8008880:	469e      	mov	lr, r3
 8008882:	4770      	bx	lr
