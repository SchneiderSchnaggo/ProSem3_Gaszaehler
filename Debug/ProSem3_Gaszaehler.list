
ProSem3_Gaszaehler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000081b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800839c  0800839c  0001839c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008404  08008404  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08008404  08008404  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008404  08008404  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008404  08008404  00018404  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008408  08008408  00018408  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800840c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001220  20000184  08008590  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013a4  08008590  000213a4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fbc3  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003608  00000000  00000000  0002fd70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  00033378  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00034088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d620  00000000  00000000  00034bc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf4  00000000  00000000  000521e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009489a  00000000  00000000  00064dd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f966e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003100  00000000  00000000  000f96c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000184 	.word	0x20000184
 8000200:	00000000 	.word	0x00000000
 8000204:	08008384 	.word	0x08008384

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000188 	.word	0x20000188
 8000220:	08008384 	.word	0x08008384

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <initTimer>:
#include <shalf1.h>
#include <stdbool.h>

bool timFlag = false;

void initTimer(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
	__disable_irq();
	timerBusClkOn(TIM2);
 8000264:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000268:	f000 fdd6 	bl	8000e18 <timerBusClkOn>
	timerSetPrescaler(TIM2, TIM_PSC);
 800026c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000274:	f000 fe12 	bl	8000e9c <timerSetPrescaler>
	timerEnableInterrupt(TIM2);
 8000278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027c:	f000 fe2a 	bl	8000ed4 <timerEnableInterrupt>
	timerSetOnePulseMode(TIM2, ONE_PULSE_MODE_ON);
 8000280:	2101      	movs	r1, #1
 8000282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000286:	f000 fe34 	bl	8000ef2 <timerSetOnePulseMode>
	NVIC_EnableIRQ(TIM2_IRQn);
 800028a:	201c      	movs	r0, #28
 800028c:	f7ff ffca 	bl	8000224 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000290:	b662      	cpsie	i
}
 8000292:	bf00      	nop
	__enable_irq();
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <delay_ms>:

extern void delay_ms(uint16_t milliseconds){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	timerSetAutoReloadValue(TIM2, milliseconds);
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002aa:	f000 fe05 	bl	8000eb8 <timerSetAutoReloadValue>
	timerStart(TIM2);
 80002ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002b2:	f000 fe39 	bl	8000f28 <timerStart>
	while(!timFlag){}
 80002b6:	bf00      	nop
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <delay_ms+0x3c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f083 0301 	eor.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f8      	bne.n	80002b8 <delay_ms+0x20>
	timFlag = false;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <delay_ms+0x3c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200001a0 	.word	0x200001a0

080002d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	timFlag = true;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <TIM2_IRQHandler+0x1c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
	TIM2->SR = 0;
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200001a0 	.word	0x200001a0

080002f8 <__NVIC_EnableIRQ>:
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <__NVIC_EnableIRQ+0x34>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	e000e100 	.word	0xe000e100

08000330 <initPins>:
 *      Author: lukas
 */
#include <gpio.h>
#include <shalf1.h>

void initPins(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	gpioInitPort(GPIOC);
 8000334:	481e      	ldr	r0, [pc, #120]	; (80003b0 <initPins+0x80>)
 8000336:	f000 fbf9 	bl	8000b2c <gpioInitPort>
	gpioSetupPin(GPIOC, PIN4, OUT_2MHZ);
 800033a:	2202      	movs	r2, #2
 800033c:	2104      	movs	r1, #4
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <initPins+0x80>)
 8000340:	f000 fc40 	bl	8000bc4 <gpioSetupPin>
	gpioSetupMode(GPIOC, PIN4, GP_PP);
 8000344:	2200      	movs	r2, #0
 8000346:	2104      	movs	r1, #4
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <initPins+0x80>)
 800034a:	f000 fca0 	bl	8000c8e <gpioSetupMode>
	gpioSetupPin(GPIOC, PIN9, INPUT);
 800034e:	2200      	movs	r2, #0
 8000350:	2109      	movs	r1, #9
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <initPins+0x80>)
 8000354:	f000 fc36 	bl	8000bc4 <gpioSetupPin>
	gpioSetupInput(GPIOC, PIN9, IN_PUPD);
 8000358:	2202      	movs	r2, #2
 800035a:	2109      	movs	r1, #9
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <initPins+0x80>)
 800035e:	f000 fc6e 	bl	8000c3e <gpioSetupInput>
	gpioSetPullupPulldown(GPIOC, PIN9, true);
 8000362:	2201      	movs	r2, #1
 8000364:	2109      	movs	r1, #9
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <initPins+0x80>)
 8000368:	f000 fce2 	bl	8000d30 <gpioSetPullupPulldown>
	extiConfigureEXTI(PORT_C, PIN9);
 800036c:	2109      	movs	r1, #9
 800036e:	2002      	movs	r0, #2
 8000370:	f000 fb28 	bl	80009c4 <extiConfigureEXTI>
	extiEnableIrq(EXTI_P9);
 8000374:	2009      	movs	r0, #9
 8000376:	f000 fb9b 	bl	8000ab0 <extiEnableIrq>
	extiSetTriggerEdge(false, EXTI_P9);
 800037a:	2109      	movs	r1, #9
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fbad 	bl	8000adc <extiSetTriggerEdge>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000382:	2017      	movs	r0, #23
 8000384:	f7ff ffb8 	bl	80002f8 <__NVIC_EnableIRQ>
	gpioInitPort(GPIOB);
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <initPins+0x84>)
 800038a:	f000 fbcf 	bl	8000b2c <gpioInitPort>
	gpioSetupPin(GPIOB, PIN12, OUT_2MHZ);
 800038e:	2202      	movs	r2, #2
 8000390:	210c      	movs	r1, #12
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <initPins+0x84>)
 8000394:	f000 fc16 	bl	8000bc4 <gpioSetupPin>
	gpioSetupMode(GPIOB, PIN12, GP_PP);
 8000398:	2200      	movs	r2, #0
 800039a:	210c      	movs	r1, #12
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <initPins+0x84>)
 800039e:	f000 fc76 	bl	8000c8e <gpioSetupMode>
	gpioResetPin(GPIOB, PIN12);
 80003a2:	210c      	movs	r1, #12
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <initPins+0x84>)
 80003a6:	f000 fcae 	bl	8000d06 <gpioResetPin>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 ff76 	bl	80012ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f807 	bl	80003d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 f862 	bl	800048c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003c8:	f007 fb3a 	bl	8007a40 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  start();
 80003cc:	f000 f9dc 	bl	8000788 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x18>

080003d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b096      	sub	sp, #88	; 0x58
 80003d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003dc:	2228      	movs	r2, #40	; 0x28
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f007 ffc7 	bl	8008374 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000426:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fd5d 	bl	8002eec <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000438:	f000 f84a 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f002 ffc9 	bl	80033f0 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000464:	f000 f834 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000468:	2310      	movs	r3, #16
 800046a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800046c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000470:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f003 f921 	bl	80036bc <HAL_RCCEx_PeriphCLKConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000480:	f000 f826 	bl	80004d0 <Error_Handler>
  }
}
 8000484:	bf00      	nop
 8000486:	3758      	adds	r7, #88	; 0x58
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_GPIO_Init+0x40>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <MX_GPIO_Init+0x40>)
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_GPIO_Init+0x40>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_GPIO_Init+0x40>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <registerRead>:
static uint8_t slaveAdr = 0;
static uint8_t funcCode = 0;
static uint16_t regAdr = 0;
static uint16_t numOfRegs = 0;

extern uint16_t registerRead(uint8_t regAdr){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	if(regAdr < 2){
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d804      	bhi.n	80004f6 <registerRead+0x1a>
		return registers[regAdr];
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <registerRead+0x28>)
 80004f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f4:	e001      	b.n	80004fa <registerRead+0x1e>
	}
	else{
		return regOutOfBound;
 80004f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	20000000 	.word	0x20000000

08000508 <modbusCRC>:
extern modbusErrCode setSlaveAddress(uint8_t address){
	deviceAddress = address;
	return modbusOK;
}

extern uint16_t modbusCRC(uint8_t *data, uint8_t len){
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = ~0x0000;
 8000514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000518:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	uint8_t b;
	for(i = 0; i < len; i++){
 800051a:	2300      	movs	r3, #0
 800051c:	737b      	strb	r3, [r7, #13]
 800051e:	e022      	b.n	8000566 <modbusCRC+0x5e>
		crc ^= data[i];
 8000520:	7b7b      	ldrb	r3, [r7, #13]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	4053      	eors	r3, r2
 800052e:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 8000530:	2300      	movs	r3, #0
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	e011      	b.n	800055a <modbusCRC+0x52>
			if((crc & 1) != 0){
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d006      	beq.n	800054e <modbusCRC+0x46>
				crc = (crc>>1)^0xA001;
 8000540:	89fb      	ldrh	r3, [r7, #14]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <modbusCRC+0x74>)
 8000548:	4053      	eors	r3, r2
 800054a:	81fb      	strh	r3, [r7, #14]
 800054c:	e002      	b.n	8000554 <modbusCRC+0x4c>
			}
			else{
				crc >>= 1;
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d9ea      	bls.n	8000536 <modbusCRC+0x2e>
	for(i = 0; i < len; i++){
 8000560:	7b7b      	ldrb	r3, [r7, #13]
 8000562:	3301      	adds	r3, #1
 8000564:	737b      	strb	r3, [r7, #13]
 8000566:	7b7a      	ldrb	r2, [r7, #13]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3d8      	bcc.n	8000520 <modbusCRC+0x18>
			}
		}
	}
	return crc;
 800056e:	89fb      	ldrh	r3, [r7, #14]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	ffffa001 	.word	0xffffa001

08000580 <modbusResponse>:

extern void modbusResponse(char *data, uint8_t len){
 8000580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000584:	b087      	sub	sp, #28
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	70fb      	strb	r3, [r7, #3]
	slaveAdr = 0;
 800058e:	4b6f      	ldr	r3, [pc, #444]	; (800074c <modbusResponse+0x1cc>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
	funcCode = 0;
 8000594:	4b6e      	ldr	r3, [pc, #440]	; (8000750 <modbusResponse+0x1d0>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	regAdr = 0;
 800059a:	4b6e      	ldr	r3, [pc, #440]	; (8000754 <modbusResponse+0x1d4>)
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
	numOfRegs = 0;
 80005a0:	4b6d      	ldr	r3, [pc, #436]	; (8000758 <modbusResponse+0x1d8>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	801a      	strh	r2, [r3, #0]
	memcpy(readData, data, 6);
 80005a6:	4b6d      	ldr	r3, [pc, #436]	; (800075c <modbusResponse+0x1dc>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6810      	ldr	r0, [r2, #0]
 80005ac:	6018      	str	r0, [r3, #0]
 80005ae:	8892      	ldrh	r2, [r2, #4]
 80005b0:	809a      	strh	r2, [r3, #4]
	slaveAdr = readData[0]; //Bit shifting überprüfen! -> passt!
 80005b2:	4b6a      	ldr	r3, [pc, #424]	; (800075c <modbusResponse+0x1dc>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b65      	ldr	r3, [pc, #404]	; (800074c <modbusResponse+0x1cc>)
 80005b8:	701a      	strb	r2, [r3, #0]
	funcCode = readData[1];
 80005ba:	4b68      	ldr	r3, [pc, #416]	; (800075c <modbusResponse+0x1dc>)
 80005bc:	785a      	ldrb	r2, [r3, #1]
 80005be:	4b64      	ldr	r3, [pc, #400]	; (8000750 <modbusResponse+0x1d0>)
 80005c0:	701a      	strb	r2, [r3, #0]
	regAdr = readData[2] << 8;
 80005c2:	4b66      	ldr	r3, [pc, #408]	; (800075c <modbusResponse+0x1dc>)
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	021b      	lsls	r3, r3, #8
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b61      	ldr	r3, [pc, #388]	; (8000754 <modbusResponse+0x1d4>)
 80005ce:	801a      	strh	r2, [r3, #0]
	regAdr |= readData[3];
 80005d0:	4b62      	ldr	r3, [pc, #392]	; (800075c <modbusResponse+0x1dc>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b5f      	ldr	r3, [pc, #380]	; (8000754 <modbusResponse+0x1d4>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4313      	orrs	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b5d      	ldr	r3, [pc, #372]	; (8000754 <modbusResponse+0x1d4>)
 80005e0:	801a      	strh	r2, [r3, #0]
	numOfRegs = readData[4] << 8;
 80005e2:	4b5e      	ldr	r3, [pc, #376]	; (800075c <modbusResponse+0x1dc>)
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b5a      	ldr	r3, [pc, #360]	; (8000758 <modbusResponse+0x1d8>)
 80005ee:	801a      	strh	r2, [r3, #0]
	numOfRegs |= readData[5];
 80005f0:	4b5a      	ldr	r3, [pc, #360]	; (800075c <modbusResponse+0x1dc>)
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b58      	ldr	r3, [pc, #352]	; (8000758 <modbusResponse+0x1d8>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b56      	ldr	r3, [pc, #344]	; (8000758 <modbusResponse+0x1d8>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(slaveAdr != deviceAddress){
 8000602:	4b52      	ldr	r3, [pc, #328]	; (800074c <modbusResponse+0x1cc>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b56      	ldr	r3, [pc, #344]	; (8000760 <modbusResponse+0x1e0>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	f040 8094 	bne.w	8000738 <modbusResponse+0x1b8>
		return;
	}
	switch(funcCode){
 8000610:	4b4f      	ldr	r3, [pc, #316]	; (8000750 <modbusResponse+0x1d0>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b03      	cmp	r3, #3
 8000616:	f040 8091 	bne.w	800073c <modbusResponse+0x1bc>
	case 0x03: //read Holdregisters
		if((regAdr == 0x00) || (regAdr == 0x01)){
 800061a:	4b4e      	ldr	r3, [pc, #312]	; (8000754 <modbusResponse+0x1d4>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <modbusResponse+0xac>
 8000622:	4b4c      	ldr	r3, [pc, #304]	; (8000754 <modbusResponse+0x1d4>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 808a 	bne.w	8000740 <modbusResponse+0x1c0>
 800062c:	466b      	mov	r3, sp
 800062e:	461e      	mov	r6, r3
			uint8_t responseLen = 2*numOfRegs+5;
 8000630:	4b49      	ldr	r3, [pc, #292]	; (8000758 <modbusResponse+0x1d8>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3305      	adds	r3, #5
 800063c:	757b      	strb	r3, [r7, #21]
			char response[responseLen];
 800063e:	7d79      	ldrb	r1, [r7, #21]
 8000640:	460b      	mov	r3, r1
 8000642:	3b01      	subs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	b2cb      	uxtb	r3, r1
 8000648:	2200      	movs	r2, #0
 800064a:	4698      	mov	r8, r3
 800064c:	4691      	mov	r9, r2
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800065a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800065e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000662:	b2cb      	uxtb	r3, r1
 8000664:	2200      	movs	r2, #0
 8000666:	461c      	mov	r4, r3
 8000668:	4615      	mov	r5, r2
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	00eb      	lsls	r3, r5, #3
 8000674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000678:	00e2      	lsls	r2, r4, #3
 800067a:	460b      	mov	r3, r1
 800067c:	3307      	adds	r3, #7
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	ebad 0d03 	sub.w	sp, sp, r3
 8000686:	466b      	mov	r3, sp
 8000688:	3300      	adds	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
			response[0] = deviceAddress;
 800068c:	4b34      	ldr	r3, [pc, #208]	; (8000760 <modbusResponse+0x1e0>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	701a      	strb	r2, [r3, #0]
			response[1] = 0x03;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2203      	movs	r2, #3
 8000698:	705a      	strb	r2, [r3, #1]
			response[2] = 2*numOfRegs+5;
 800069a:	4b2f      	ldr	r3, [pc, #188]	; (8000758 <modbusResponse+0x1d8>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	3305      	adds	r3, #5
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	709a      	strb	r2, [r3, #2]
			uint8_t idx = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
			uint8_t i;
			uint16_t buff;
			for(i=numOfRegs; i > 0; i--){
 80006b0:	4b29      	ldr	r3, [pc, #164]	; (8000758 <modbusResponse+0x1d8>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	75fb      	strb	r3, [r7, #23]
 80006b6:	e01c      	b.n	80006f2 <modbusResponse+0x172>
				buff = registerRead(i-1);
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff0c 	bl	80004dc <registerRead>
 80006c4:	4603      	mov	r3, r0
 80006c6:	813b      	strh	r3, [r7, #8]
				response[idx++] = (buff >> 8) & 0xFF;
 80006c8:	893b      	ldrh	r3, [r7, #8]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b299      	uxth	r1, r3
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	75ba      	strb	r2, [r7, #22]
 80006d4:	461a      	mov	r2, r3
 80006d6:	b2c9      	uxtb	r1, r1
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	5499      	strb	r1, [r3, r2]
				response[idx++] = buff;
 80006dc:	7dbb      	ldrb	r3, [r7, #22]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	75ba      	strb	r2, [r7, #22]
 80006e2:	461a      	mov	r2, r3
 80006e4:	893b      	ldrh	r3, [r7, #8]
 80006e6:	b2d9      	uxtb	r1, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	5499      	strb	r1, [r3, r2]
			for(i=numOfRegs; i > 0; i--){
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	75fb      	strb	r3, [r7, #23]
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1df      	bne.n	80006b8 <modbusResponse+0x138>
			}
			uint16_t crc = modbusCRC(response, responseLen-2);
 80006f8:	7d7b      	ldrb	r3, [r7, #21]
 80006fa:	3b02      	subs	r3, #2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ff01 	bl	8000508 <modbusCRC>
 8000706:	4603      	mov	r3, r0
 8000708:	817b      	strh	r3, [r7, #10]
			response[responseLen-2] = crc;
 800070a:	7d7b      	ldrb	r3, [r7, #21]
 800070c:	3b02      	subs	r3, #2
 800070e:	897a      	ldrh	r2, [r7, #10]
 8000710:	b2d1      	uxtb	r1, r2
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	54d1      	strb	r1, [r2, r3]
			response[responseLen-1] = crc >> 8;
 8000716:	897b      	ldrh	r3, [r7, #10]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	3b01      	subs	r3, #1
 8000720:	b2d1      	uxtb	r1, r2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	54d1      	strb	r1, [r2, r3]
			USARTSendStringMB(USART1, response, responseLen+1);
 8000726:	7d7b      	ldrb	r3, [r7, #21]
 8000728:	3301      	adds	r3, #1
 800072a:	461a      	mov	r2, r3
 800072c:	68f9      	ldr	r1, [r7, #12]
 800072e:	480d      	ldr	r0, [pc, #52]	; (8000764 <modbusResponse+0x1e4>)
 8000730:	f000 f920 	bl	8000974 <USARTSendStringMB>
 8000734:	46b5      	mov	sp, r6
		}
		break;
 8000736:	e003      	b.n	8000740 <modbusResponse+0x1c0>
		return;
 8000738:	bf00      	nop
 800073a:	e002      	b.n	8000742 <modbusResponse+0x1c2>
	default:

		break;
 800073c:	bf00      	nop
 800073e:	e000      	b.n	8000742 <modbusResponse+0x1c2>
		break;
 8000740:	bf00      	nop
	}
}
 8000742:	371c      	adds	r7, #28
 8000744:	46bd      	mov	sp, r7
 8000746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800074a:	bf00      	nop
 800074c:	200001aa 	.word	0x200001aa
 8000750:	200001ab 	.word	0x200001ab
 8000754:	200001ac 	.word	0x200001ac
 8000758:	200001ae 	.word	0x200001ae
 800075c:	200001a4 	.word	0x200001a4
 8000760:	20000004 	.word	0x20000004
 8000764:	40013800 	.word	0x40013800

08000768 <setCounter>:

void setCounter(int cntVal){
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
	registers[0] = cntVal;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	b29a      	uxth	r2, r3
 8000774:	4b03      	ldr	r3, [pc, #12]	; (8000784 <setCounter+0x1c>)
 8000776:	801a      	strh	r2, [r3, #0]
}
 8000778:	bf00      	nop
 800077a:	370c      	adds	r7, #12
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	20000000 	.word	0x20000000

08000788 <start>:
char foo;

static uint32_t tickCNT = 0;
char ausg[20] = "ausgabe\n";

void start(void){
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
	initRS485UART();
 800078c:	f000 f8b4 	bl	80008f8 <initRS485UART>
	initTimer();
 8000790:	f7ff fd64 	bl	800025c <initTimer>
	initPins();
 8000794:	f7ff fdcc 	bl	8000330 <initPins>
	while(1){
		if(usartRXFlag){
 8000798:	4b13      	ldr	r3, [pc, #76]	; (80007e8 <start+0x60>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b00      	cmp	r3, #0
 800079e:	d0fb      	beq.n	8000798 <start+0x10>
			USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <start+0x64>)
 80007a2:	68db      	ldr	r3, [r3, #12]
 80007a4:	4a11      	ldr	r2, [pc, #68]	; (80007ec <start+0x64>)
 80007a6:	f023 0320 	bic.w	r3, r3, #32
 80007aa:	60d3      	str	r3, [r2, #12]
			gpioSetPin(GPIOB, PIN12);
 80007ac:	210c      	movs	r1, #12
 80007ae:	4810      	ldr	r0, [pc, #64]	; (80007f0 <start+0x68>)
 80007b0:	f000 fa95 	bl	8000cde <gpioSetPin>
			setCounter(tickCNT);
 80007b4:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <start+0x6c>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ffd5 	bl	8000768 <setCounter>
			modbusResponse(usartBuff, sizeof(usartBuff)-1);
 80007be:	2108      	movs	r1, #8
 80007c0:	480d      	ldr	r0, [pc, #52]	; (80007f8 <start+0x70>)
 80007c2:	f7ff fedd 	bl	8000580 <modbusResponse>
			USART1->CR1 |= USART_CR1_RXNEIE;
 80007c6:	4b09      	ldr	r3, [pc, #36]	; (80007ec <start+0x64>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	4a08      	ldr	r2, [pc, #32]	; (80007ec <start+0x64>)
 80007cc:	f043 0320 	orr.w	r3, r3, #32
 80007d0:	60d3      	str	r3, [r2, #12]
			gpioResetPin(GPIOB, PIN12);
 80007d2:	210c      	movs	r1, #12
 80007d4:	4806      	ldr	r0, [pc, #24]	; (80007f0 <start+0x68>)
 80007d6:	f000 fa96 	bl	8000d06 <gpioResetPin>
			delay_ms(100);
 80007da:	2064      	movs	r0, #100	; 0x64
 80007dc:	f7ff fd5c 	bl	8000298 <delay_ms>
			usartRXFlag = false;
 80007e0:	4b01      	ldr	r3, [pc, #4]	; (80007e8 <start+0x60>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	701a      	strb	r2, [r3, #0]
		if(usartRXFlag){
 80007e6:	e7d7      	b.n	8000798 <start+0x10>
 80007e8:	200001c0 	.word	0x200001c0
 80007ec:	40013800 	.word	0x40013800
 80007f0:	40010c00 	.word	0x40010c00
 80007f4:	200001c4 	.word	0x200001c4
 80007f8:	200001b0 	.word	0x200001b0

080007fc <USART1_IRQHandler>:


/*-----------------------------------------------------------------------------
+++++++++++++++++++++++++++++++ISR+++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 80007fc:	b480      	push	{r7}
 80007fe:	af00      	add	r7, sp, #0
	if(!usartRXFlag){
 8000800:	4b1d      	ldr	r3, [pc, #116]	; (8000878 <USART1_IRQHandler+0x7c>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	f083 0301 	eor.w	r3, r3, #1
 8000808:	b2db      	uxtb	r3, r3
 800080a:	2b00      	cmp	r3, #0
 800080c:	d020      	beq.n	8000850 <USART1_IRQHandler+0x54>
		while(!(USART1->SR & USART_SR_RXNE)){}
 800080e:	bf00      	nop
 8000810:	4b1a      	ldr	r3, [pc, #104]	; (800087c <USART1_IRQHandler+0x80>)
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	f003 0320 	and.w	r3, r3, #32
 8000818:	2b00      	cmp	r3, #0
 800081a:	d0f9      	beq.n	8000810 <USART1_IRQHandler+0x14>
		usartBuff[cnt]= USART1->DR & 0x01FF;
 800081c:	4b17      	ldr	r3, [pc, #92]	; (800087c <USART1_IRQHandler+0x80>)
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	4b17      	ldr	r3, [pc, #92]	; (8000880 <USART1_IRQHandler+0x84>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	b2d1      	uxtb	r1, r2
 8000826:	4a17      	ldr	r2, [pc, #92]	; (8000884 <USART1_IRQHandler+0x88>)
 8000828:	54d1      	strb	r1, [r2, r3]
		cnt++;
 800082a:	4b15      	ldr	r3, [pc, #84]	; (8000880 <USART1_IRQHandler+0x84>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a13      	ldr	r2, [pc, #76]	; (8000880 <USART1_IRQHandler+0x84>)
 8000832:	6013      	str	r3, [r2, #0]
		if((cnt == USART_MSG_LEN-1)){
 8000834:	4b12      	ldr	r3, [pc, #72]	; (8000880 <USART1_IRQHandler+0x84>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b08      	cmp	r3, #8
 800083a:	d118      	bne.n	800086e <USART1_IRQHandler+0x72>
			//USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
			USART1->DR = 0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	; (800087c <USART1_IRQHandler+0x80>)
 800083e:	2200      	movs	r2, #0
 8000840:	605a      	str	r2, [r3, #4]
			usartRXFlag = true;
 8000842:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <USART1_IRQHandler+0x7c>)
 8000844:	2201      	movs	r2, #1
 8000846:	701a      	strb	r2, [r3, #0]
			cnt=0;
 8000848:	4b0d      	ldr	r3, [pc, #52]	; (8000880 <USART1_IRQHandler+0x84>)
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
	else{
		while(!(USART1->SR & USART_SR_RXNE)){}
		foo= USART1->DR & 0x01FF;
		USART1->DR = 0;
	}
}
 800084e:	e00e      	b.n	800086e <USART1_IRQHandler+0x72>
		while(!(USART1->SR & USART_SR_RXNE)){}
 8000850:	bf00      	nop
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <USART1_IRQHandler+0x80>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f003 0320 	and.w	r3, r3, #32
 800085a:	2b00      	cmp	r3, #0
 800085c:	d0f9      	beq.n	8000852 <USART1_IRQHandler+0x56>
		foo= USART1->DR & 0x01FF;
 800085e:	4b07      	ldr	r3, [pc, #28]	; (800087c <USART1_IRQHandler+0x80>)
 8000860:	685b      	ldr	r3, [r3, #4]
 8000862:	b2da      	uxtb	r2, r3
 8000864:	4b08      	ldr	r3, [pc, #32]	; (8000888 <USART1_IRQHandler+0x8c>)
 8000866:	701a      	strb	r2, [r3, #0]
		USART1->DR = 0;
 8000868:	4b04      	ldr	r3, [pc, #16]	; (800087c <USART1_IRQHandler+0x80>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
 8000876:	bf00      	nop
 8000878:	200001c0 	.word	0x200001c0
 800087c:	40013800 	.word	0x40013800
 8000880:	200001bc 	.word	0x200001bc
 8000884:	200001b0 	.word	0x200001b0
 8000888:	200001c1 	.word	0x200001c1

0800088c <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
	tickCNT++;
 8000890:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <EXTI9_5_IRQHandler+0x28>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	3301      	adds	r3, #1
 8000896:	4a07      	ldr	r2, [pc, #28]	; (80008b4 <EXTI9_5_IRQHandler+0x28>)
 8000898:	6013      	str	r3, [r2, #0]
	gpioTogglePin(GPIOC, PIN4); //optional for debugging
 800089a:	2104      	movs	r1, #4
 800089c:	4806      	ldr	r0, [pc, #24]	; (80008b8 <EXTI9_5_IRQHandler+0x2c>)
 800089e:	f000 fa82 	bl	8000da6 <gpioTogglePin>
	EXTI->PR |= EXTI_PR_PR9;
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <EXTI9_5_IRQHandler+0x30>)
 80008a4:	695b      	ldr	r3, [r3, #20]
 80008a6:	4a05      	ldr	r2, [pc, #20]	; (80008bc <EXTI9_5_IRQHandler+0x30>)
 80008a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ac:	6153      	str	r3, [r2, #20]
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	200001c4 	.word	0x200001c4
 80008b8:	40011000 	.word	0x40011000
 80008bc:	40010400 	.word	0x40010400

080008c0 <__NVIC_EnableIRQ>:
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	4603      	mov	r3, r0
 80008c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	db0b      	blt.n	80008ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008d2:	79fb      	ldrb	r3, [r7, #7]
 80008d4:	f003 021f 	and.w	r2, r3, #31
 80008d8:	4906      	ldr	r1, [pc, #24]	; (80008f4 <__NVIC_EnableIRQ+0x34>)
 80008da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008de:	095b      	lsrs	r3, r3, #5
 80008e0:	2001      	movs	r0, #1
 80008e2:	fa00 f202 	lsl.w	r2, r0, r2
 80008e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bc80      	pop	{r7}
 80008f2:	4770      	bx	lr
 80008f4:	e000e100 	.word	0xe000e100

080008f8 <initRS485UART>:

#define USART_TX_EMPTY(usart)  ((usart)->SR & USART_SR_TXE)
#define USART_WAIT_MB(usart)      do { while(!USART_TX_EMPTY(usart)); } while(0)

//USART in DMA Modus -> Modbus empfängt 5 Bytes
void initRS485UART(void){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80008fc:	b672      	cpsid	i
}
 80008fe:	bf00      	nop
	__disable_irq();
	gpioInitPort(GPIOA);
 8000900:	481a      	ldr	r0, [pc, #104]	; (800096c <initRS485UART+0x74>)
 8000902:	f000 f913 	bl	8000b2c <gpioInitPort>
	afioInit();
 8000906:	f000 fa6b 	bl	8000de0 <afioInit>
	USARTEnable(USART1);
 800090a:	4819      	ldr	r0, [pc, #100]	; (8000970 <initRS485UART+0x78>)
 800090c:	f000 fb1c 	bl	8000f48 <USARTEnable>
	gpioSetupPin(GPIOA, PIN9, OUT_50MHZ);
 8000910:	2203      	movs	r2, #3
 8000912:	2109      	movs	r1, #9
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <initRS485UART+0x74>)
 8000916:	f000 f955 	bl	8000bc4 <gpioSetupPin>
	gpioSetupMode(GPIOA, PIN9, AF_PP);
 800091a:	2202      	movs	r2, #2
 800091c:	2109      	movs	r1, #9
 800091e:	4813      	ldr	r0, [pc, #76]	; (800096c <initRS485UART+0x74>)
 8000920:	f000 f9b5 	bl	8000c8e <gpioSetupMode>
	gpioSetupPin(GPIOA, PIN10, INPUT);
 8000924:	2200      	movs	r2, #0
 8000926:	210a      	movs	r1, #10
 8000928:	4810      	ldr	r0, [pc, #64]	; (800096c <initRS485UART+0x74>)
 800092a:	f000 f94b 	bl	8000bc4 <gpioSetupPin>
	gpioSetupInput(GPIOA, PIN10, FLOATING);
 800092e:	2201      	movs	r2, #1
 8000930:	210a      	movs	r1, #10
 8000932:	480e      	ldr	r0, [pc, #56]	; (800096c <initRS485UART+0x74>)
 8000934:	f000 f983 	bl	8000c3e <gpioSetupInput>
	USARTIRQ(USART1, USART_IRQ_RXNEIE, true);
 8000938:	2201      	movs	r2, #1
 800093a:	2103      	movs	r1, #3
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <initRS485UART+0x78>)
 800093e:	f000 fb9f 	bl	8001080 <USARTIRQ>
	//usartSetDmaRxMode(USART1, DMA_RECEIVE_ON);
	//gpioSetupOutput(GPIOA, PIN3, AF_PP);
	USARTSetBaudrate(USART1, 9600);
 8000942:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000946:	480a      	ldr	r0, [pc, #40]	; (8000970 <initRS485UART+0x78>)
 8000948:	f000 fb42 	bl	8000fd0 <USARTSetBaudrate>
	USARTTXOn(USART1, TRANSMITTER_ON);
 800094c:	2101      	movs	r1, #1
 800094e:	4808      	ldr	r0, [pc, #32]	; (8000970 <initRS485UART+0x78>)
 8000950:	f000 fb7b 	bl	800104a <USARTTXOn>
	USARTRXOn(USART1, RECEIVER_ON);
 8000954:	2101      	movs	r1, #1
 8000956:	4806      	ldr	r0, [pc, #24]	; (8000970 <initRS485UART+0x78>)
 8000958:	f000 fb5c 	bl	8001014 <USARTRXOn>
	NVIC_EnableIRQ(USART1_IRQn);
 800095c:	2025      	movs	r0, #37	; 0x25
 800095e:	f7ff ffaf 	bl	80008c0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000962:	b662      	cpsie	i
}
 8000964:	bf00      	nop
	__enable_irq();
}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40010800 	.word	0x40010800
 8000970:	40013800 	.word	0x40013800

08000974 <USARTSendStringMB>:
  * Desc.: send a String over the USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (char*) str: String to be sent
  * @return: none
  */
void USARTSendStringMB(USART_TypeDef* usart, char* str, int len){
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	while(len != 0){
 8000980:	e017      	b.n	80009b2 <USARTSendStringMB+0x3e>
		USART_WAIT_MB(usart);
 8000982:	bf00      	nop
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800098c:	2b00      	cmp	r3, #0
 800098e:	d0f9      	beq.n	8000984 <USARTSendStringMB+0x10>
		usart->DR = *str++ & 0x01FF;
 8000990:	68bb      	ldr	r3, [r7, #8]
 8000992:	1c5a      	adds	r2, r3, #1
 8000994:	60ba      	str	r2, [r7, #8]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	461a      	mov	r2, r3
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	605a      	str	r2, [r3, #4]
		USART_WAIT_MB(usart);
 800099e:	bf00      	nop
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d0f9      	beq.n	80009a0 <USARTSendStringMB+0x2c>
		len--;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	607b      	str	r3, [r7, #4]
	while(len != 0){
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d1e4      	bne.n	8000982 <USARTSendStringMB+0xe>
	}
}
 80009b8:	bf00      	nop
 80009ba:	bf00      	nop
 80009bc:	3714      	adds	r7, #20
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <extiConfigureEXTI>:
  * Desc.: sets the Bits in AFIO EXTICR Register, to set the Interrupts as Sources. Ther are four EXTICR Registers (4 Pins per EXTICR)
  * @param: (PORT) port: Port
  * @param: (Pin) pin: Pin
  * @return: none
  */
extern void extiConfigureEXTI(PORT port, PIN_NUM pin){
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	4603      	mov	r3, r0
 80009cc:	460a      	mov	r2, r1
 80009ce:	71fb      	strb	r3, [r7, #7]
 80009d0:	4613      	mov	r3, r2
 80009d2:	71bb      	strb	r3, [r7, #6]
	uint8_t mask = port;
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	737b      	strb	r3, [r7, #13]
	uint8_t shift = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 80009dc:	2300      	movs	r3, #0
 80009de:	73bb      	strb	r3, [r7, #14]
	switch(pin){
 80009e0:	79bb      	ldrb	r3, [r7, #6]
 80009e2:	2b0f      	cmp	r3, #15
 80009e4:	d840      	bhi.n	8000a68 <extiConfigureEXTI+0xa4>
 80009e6:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <extiConfigureEXTI+0x28>)
 80009e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ec:	08000a2d 	.word	0x08000a2d
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a2d 	.word	0x08000a2d
 80009f8:	08000a2d 	.word	0x08000a2d
 80009fc:	08000a39 	.word	0x08000a39
 8000a00:	08000a39 	.word	0x08000a39
 8000a04:	08000a39 	.word	0x08000a39
 8000a08:	08000a39 	.word	0x08000a39
 8000a0c:	08000a49 	.word	0x08000a49
 8000a10:	08000a49 	.word	0x08000a49
 8000a14:	08000a49 	.word	0x08000a49
 8000a18:	08000a49 	.word	0x08000a49
 8000a1c:	08000a59 	.word	0x08000a59
 8000a20:	08000a59 	.word	0x08000a59
 8000a24:	08000a59 	.word	0x08000a59
 8000a28:	08000a59 	.word	0x08000a59
	case 0:
	case 1:
	case 2:
	case 3:
		shift = pin * 4;
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	009b      	lsls	r3, r3, #2
 8000a30:	73fb      	strb	r3, [r7, #15]
		index = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73bb      	strb	r3, [r7, #14]
		break;
 8000a36:	e017      	b.n	8000a68 <extiConfigureEXTI+0xa4>
	case 4:
	case 5:
	case 6:
	case 7:
		shift = (pin-4)*4;
 8000a38:	79bb      	ldrb	r3, [r7, #6]
 8000a3a:	3b04      	subs	r3, #4
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	009b      	lsls	r3, r3, #2
 8000a40:	73fb      	strb	r3, [r7, #15]
		index = 1;
 8000a42:	2301      	movs	r3, #1
 8000a44:	73bb      	strb	r3, [r7, #14]
		break;
 8000a46:	e00f      	b.n	8000a68 <extiConfigureEXTI+0xa4>
	case 8:
	case 9:
	case 10:
	case 11:
		shift = (pin-8)*4;
 8000a48:	79bb      	ldrb	r3, [r7, #6]
 8000a4a:	3b08      	subs	r3, #8
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	73fb      	strb	r3, [r7, #15]
		index = 2;
 8000a52:	2302      	movs	r3, #2
 8000a54:	73bb      	strb	r3, [r7, #14]
		break;
 8000a56:	e007      	b.n	8000a68 <extiConfigureEXTI+0xa4>
	case 12:
	case 13:
	case 14:
	case 15:
		shift = (pin-12)*4;
 8000a58:	79bb      	ldrb	r3, [r7, #6]
 8000a5a:	3b0c      	subs	r3, #12
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	73fb      	strb	r3, [r7, #15]
		index = 3;
 8000a62:	2303      	movs	r3, #3
 8000a64:	73bb      	strb	r3, [r7, #14]
		break;
 8000a66:	bf00      	nop
	}

	AFIO->EXTICR[index] &= ~0xFFFF;
 8000a68:	4a10      	ldr	r2, [pc, #64]	; (8000aac <extiConfigureEXTI+0xe8>)
 8000a6a:	7bbb      	ldrb	r3, [r7, #14]
 8000a6c:	3302      	adds	r3, #2
 8000a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a72:	490e      	ldr	r1, [pc, #56]	; (8000aac <extiConfigureEXTI+0xe8>)
 8000a74:	7bba      	ldrb	r2, [r7, #14]
 8000a76:	0c1b      	lsrs	r3, r3, #16
 8000a78:	041b      	lsls	r3, r3, #16
 8000a7a:	3202      	adds	r2, #2
 8000a7c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	AFIO->EXTICR[index] |= (mask << shift);
 8000a80:	4a0a      	ldr	r2, [pc, #40]	; (8000aac <extiConfigureEXTI+0xe8>)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	3302      	adds	r3, #2
 8000a86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a8a:	7b79      	ldrb	r1, [r7, #13]
 8000a8c:	7bfb      	ldrb	r3, [r7, #15]
 8000a8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	4905      	ldr	r1, [pc, #20]	; (8000aac <extiConfigureEXTI+0xe8>)
 8000a96:	7bbb      	ldrb	r3, [r7, #14]
 8000a98:	4302      	orrs	r2, r0
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aa0:	bf00      	nop
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bc80      	pop	{r7}
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	40010000 	.word	0x40010000

08000ab0 <extiEnableIrq>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiEnableIrq(irq_NUM irq){
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |= 1 << irq; //schiebt das Bit an die korrespondierende Stelle des IMR
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <extiEnableIrq+0x28>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f202 	lsl.w	r2, r1, r2
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <extiEnableIrq+0x28>)
 8000aca:	430b      	orrs	r3, r1
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	40010400 	.word	0x40010400

08000adc <extiSetTriggerEdge>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiSetTriggerEdge(bool rising, irq_NUM irq){
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	460a      	mov	r2, r1
 8000ae6:	71fb      	strb	r3, [r7, #7]
 8000ae8:	4613      	mov	r3, r2
 8000aea:	71bb      	strb	r3, [r7, #6]
	if(rising == true){
 8000aec:	79fb      	ldrb	r3, [r7, #7]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d00a      	beq.n	8000b08 <extiSetTriggerEdge+0x2c>
		EXTI->RTSR |= 1 << irq;
 8000af2:	4b0d      	ldr	r3, [pc, #52]	; (8000b28 <extiSetTriggerEdge+0x4c>)
 8000af4:	689b      	ldr	r3, [r3, #8]
 8000af6:	79ba      	ldrb	r2, [r7, #6]
 8000af8:	2101      	movs	r1, #1
 8000afa:	fa01 f202 	lsl.w	r2, r1, r2
 8000afe:	4611      	mov	r1, r2
 8000b00:	4a09      	ldr	r2, [pc, #36]	; (8000b28 <extiSetTriggerEdge+0x4c>)
 8000b02:	430b      	orrs	r3, r1
 8000b04:	6093      	str	r3, [r2, #8]
	}
	else{
		EXTI->FTSR |= 1 << irq;
	}
}
 8000b06:	e009      	b.n	8000b1c <extiSetTriggerEdge+0x40>
		EXTI->FTSR |= 1 << irq;
 8000b08:	4b07      	ldr	r3, [pc, #28]	; (8000b28 <extiSetTriggerEdge+0x4c>)
 8000b0a:	68db      	ldr	r3, [r3, #12]
 8000b0c:	79ba      	ldrb	r2, [r7, #6]
 8000b0e:	2101      	movs	r1, #1
 8000b10:	fa01 f202 	lsl.w	r2, r1, r2
 8000b14:	4611      	mov	r1, r2
 8000b16:	4a04      	ldr	r2, [pc, #16]	; (8000b28 <extiSetTriggerEdge+0x4c>)
 8000b18:	430b      	orrs	r3, r1
 8000b1a:	60d3      	str	r3, [r2, #12]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40010400 	.word	0x40010400

08000b2c <gpioInitPort>:
/*
  * Desc.: enables the Clock for the corresponding GPIO Port
  * @param: (GPIO_TypeDef*) port: Port which should be supplied with Clock
  * @return: none
  */
extern void gpioInitPort(GPIO_TypeDef *port){
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
		if (port == GPIOA){
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a1d      	ldr	r2, [pc, #116]	; (8000bac <gpioInitPort+0x80>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d106      	bne.n	8000b4a <gpioInitPort+0x1e>
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000b3c:	4b1c      	ldr	r3, [pc, #112]	; (8000bb0 <gpioInitPort+0x84>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a1b      	ldr	r2, [pc, #108]	; (8000bb0 <gpioInitPort+0x84>)
 8000b42:	f043 0304 	orr.w	r3, r3, #4
 8000b46:	6193      	str	r3, [r2, #24]
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
		}
		else if(port == GPIOE){
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
		}
}
 8000b48:	e02a      	b.n	8000ba0 <gpioInitPort+0x74>
		else if(port == GPIOB){
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <gpioInitPort+0x88>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d106      	bne.n	8000b60 <gpioInitPort+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <gpioInitPort+0x84>)
 8000b54:	699b      	ldr	r3, [r3, #24]
 8000b56:	4a16      	ldr	r2, [pc, #88]	; (8000bb0 <gpioInitPort+0x84>)
 8000b58:	f043 0308 	orr.w	r3, r3, #8
 8000b5c:	6193      	str	r3, [r2, #24]
}
 8000b5e:	e01f      	b.n	8000ba0 <gpioInitPort+0x74>
		else if(port == GPIOC){
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <gpioInitPort+0x8c>)
 8000b64:	4293      	cmp	r3, r2
 8000b66:	d106      	bne.n	8000b76 <gpioInitPort+0x4a>
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <gpioInitPort+0x84>)
 8000b6a:	699b      	ldr	r3, [r3, #24]
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <gpioInitPort+0x84>)
 8000b6e:	f043 0310 	orr.w	r3, r3, #16
 8000b72:	6193      	str	r3, [r2, #24]
}
 8000b74:	e014      	b.n	8000ba0 <gpioInitPort+0x74>
		else if(port == GPIOD){
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4a10      	ldr	r2, [pc, #64]	; (8000bbc <gpioInitPort+0x90>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <gpioInitPort+0x60>
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <gpioInitPort+0x84>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a0b      	ldr	r2, [pc, #44]	; (8000bb0 <gpioInitPort+0x84>)
 8000b84:	f043 0320 	orr.w	r3, r3, #32
 8000b88:	6193      	str	r3, [r2, #24]
}
 8000b8a:	e009      	b.n	8000ba0 <gpioInitPort+0x74>
		else if(port == GPIOE){
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	4a0c      	ldr	r2, [pc, #48]	; (8000bc0 <gpioInitPort+0x94>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d105      	bne.n	8000ba0 <gpioInitPort+0x74>
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <gpioInitPort+0x84>)
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	4a05      	ldr	r2, [pc, #20]	; (8000bb0 <gpioInitPort+0x84>)
 8000b9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b9e:	6193      	str	r3, [r2, #24]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bc80      	pop	{r7}
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	40010800 	.word	0x40010800
 8000bb0:	40021000 	.word	0x40021000
 8000bb4:	40010c00 	.word	0x40010c00
 8000bb8:	40011000 	.word	0x40011000
 8000bbc:	40011400 	.word	0x40011400
 8000bc0:	40011800 	.word	0x40011800

08000bc4 <gpioSetupPin>:
									OUT_10MHZ,
									OUT_2MHZ,
									OUT_50MHZ
  * @return: none
  */
extern void gpioSetupPin(GPIO_TypeDef *port, PIN_NUM pin, GPIO_MODE pinmode){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
 8000bd0:	4613      	mov	r3, r2
 8000bd2:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000bd4:	78fb      	ldrb	r3, [r7, #3]
 8000bd6:	2b07      	cmp	r3, #7
 8000bd8:	d815      	bhi.n	8000c06 <gpioSetupPin+0x42>
		port -> CRL &= ~(0b1111 << (pin*4));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	78fa      	ldrb	r2, [r7, #3]
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	210f      	movs	r1, #15
 8000be4:	fa01 f202 	lsl.w	r2, r1, r2
 8000be8:	43d2      	mvns	r2, r2
 8000bea:	401a      	ands	r2, r3
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	601a      	str	r2, [r3, #0]
		port ->CRL |= (pinmode << (pin*4));
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	78b9      	ldrb	r1, [r7, #2]
 8000bf6:	78fa      	ldrb	r2, [r7, #3]
 8000bf8:	0092      	lsls	r2, r2, #2
 8000bfa:	fa01 f202 	lsl.w	r2, r1, r2
 8000bfe:	431a      	orrs	r2, r3
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	601a      	str	r2, [r3, #0]
	}
	else{
		port->CRH &= ~(0b1111 << ((pin-8)*4));
		port->CRH |= (pinmode << ((pin-8)*4));
	}
}
 8000c04:	e016      	b.n	8000c34 <gpioSetupPin+0x70>
		port->CRH &= ~(0b1111 << ((pin-8)*4));
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	685b      	ldr	r3, [r3, #4]
 8000c0a:	78fa      	ldrb	r2, [r7, #3]
 8000c0c:	3a08      	subs	r2, #8
 8000c0e:	0092      	lsls	r2, r2, #2
 8000c10:	210f      	movs	r1, #15
 8000c12:	fa01 f202 	lsl.w	r2, r1, r2
 8000c16:	43d2      	mvns	r2, r2
 8000c18:	401a      	ands	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	605a      	str	r2, [r3, #4]
		port->CRH |= (pinmode << ((pin-8)*4));
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	78b9      	ldrb	r1, [r7, #2]
 8000c24:	78fa      	ldrb	r2, [r7, #3]
 8000c26:	3a08      	subs	r2, #8
 8000c28:	0092      	lsls	r2, r2, #2
 8000c2a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2e:	431a      	orrs	r2, r3
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	605a      	str	r2, [r3, #4]
}
 8000c34:	bf00      	nop
 8000c36:	370c      	adds	r7, #12
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr

08000c3e <gpioSetupInput>:
  * @param: (INPUT_MODE) mode: ANALOG = 0,
								FLOATING,
								IN_PUPD
  * @return: none
  */
extern void gpioSetupInput(GPIO_TypeDef *port, PIN_NUM pin, INPUT_MODE mode){
 8000c3e:	b480      	push	{r7}
 8000c40:	b083      	sub	sp, #12
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	6078      	str	r0, [r7, #4]
 8000c46:	460b      	mov	r3, r1
 8000c48:	70fb      	strb	r3, [r7, #3]
 8000c4a:	4613      	mov	r3, r2
 8000c4c:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000c4e:	78fb      	ldrb	r3, [r7, #3]
 8000c50:	2b07      	cmp	r3, #7
 8000c52:	d80b      	bhi.n	8000c6c <gpioSetupInput+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	78b9      	ldrb	r1, [r7, #2]
 8000c5a:	78fa      	ldrb	r2, [r7, #3]
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	3202      	adds	r2, #2
 8000c60:	fa01 f202 	lsl.w	r2, r1, r2
 8000c64:	431a      	orrs	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000c6a:	e00b      	b.n	8000c84 <gpioSetupInput+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	78b9      	ldrb	r1, [r7, #2]
 8000c72:	78fa      	ldrb	r2, [r7, #3]
 8000c74:	3a08      	subs	r2, #8
 8000c76:	0092      	lsls	r2, r2, #2
 8000c78:	3202      	adds	r2, #2
 8000c7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	605a      	str	r2, [r3, #4]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bc80      	pop	{r7}
 8000c8c:	4770      	bx	lr

08000c8e <gpioSetupMode>:
								GP_OD, -> general purpose opendrain
								AF_PP, -> alternate function Push pull
								AF_OD  -> alternate function opendrain
  * @return: none
  */
extern void gpioSetupMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode){
 8000c8e:	b480      	push	{r7}
 8000c90:	b083      	sub	sp, #12
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	6078      	str	r0, [r7, #4]
 8000c96:	460b      	mov	r3, r1
 8000c98:	70fb      	strb	r3, [r7, #3]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	2b07      	cmp	r3, #7
 8000ca2:	d80b      	bhi.n	8000cbc <gpioSetupMode+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	78b9      	ldrb	r1, [r7, #2]
 8000caa:	78fa      	ldrb	r2, [r7, #3]
 8000cac:	0092      	lsls	r2, r2, #2
 8000cae:	3202      	adds	r2, #2
 8000cb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000cb4:	431a      	orrs	r2, r3
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000cba:	e00b      	b.n	8000cd4 <gpioSetupMode+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	78b9      	ldrb	r1, [r7, #2]
 8000cc2:	78fa      	ldrb	r2, [r7, #3]
 8000cc4:	3a08      	subs	r2, #8
 8000cc6:	0092      	lsls	r2, r2, #2
 8000cc8:	3202      	adds	r2, #2
 8000cca:	fa01 f202 	lsl.w	r2, r1, r2
 8000cce:	431a      	orrs	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	605a      	str	r2, [r3, #4]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bc80      	pop	{r7}
 8000cdc:	4770      	bx	lr

08000cde <gpioSetPin>:
  * Desc.: sets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8000cde:	b480      	push	{r7}
 8000ce0:	b083      	sub	sp, #12
 8000ce2:	af00      	add	r7, sp, #0
 8000ce4:	6078      	str	r0, [r7, #4]
 8000ce6:	460b      	mov	r3, r1
 8000ce8:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	691b      	ldr	r3, [r3, #16]
 8000cee:	78fa      	ldrb	r2, [r7, #3]
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8000cf6:	431a      	orrs	r2, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	611a      	str	r2, [r3, #16]
}
 8000cfc:	bf00      	nop
 8000cfe:	370c      	adds	r7, #12
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bc80      	pop	{r7}
 8000d04:	4770      	bx	lr

08000d06 <gpioResetPin>:
  * Desc.: resets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
 8000d0e:	460b      	mov	r3, r1
 8000d10:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	691b      	ldr	r3, [r3, #16]
 8000d16:	78fa      	ldrb	r2, [r7, #3]
 8000d18:	3210      	adds	r2, #16
 8000d1a:	2101      	movs	r1, #1
 8000d1c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d20:	431a      	orrs	r2, r3
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	611a      	str	r2, [r3, #16]
}
 8000d26:	bf00      	nop
 8000d28:	370c      	adds	r7, #12
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bc80      	pop	{r7}
 8000d2e:	4770      	bx	lr

08000d30 <gpioSetPullupPulldown>:
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @param: (bool)pullup: true -> activate Pullup; false -> activate Pulldown
  * @return: none
  */
extern void gpioSetPullupPulldown(GPIO_TypeDef *port, PIN_NUM pin, bool pullup){
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	70fb      	strb	r3, [r7, #3]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	70bb      	strb	r3, [r7, #2]
	if((pullup == true)){
 8000d40:	78bb      	ldrb	r3, [r7, #2]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d009      	beq.n	8000d5a <gpioSetPullupPulldown+0x2a>
		port -> ODR |=  (1<< pin);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	68db      	ldr	r3, [r3, #12]
 8000d4a:	78fa      	ldrb	r2, [r7, #3]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d52:	431a      	orrs	r2, r3
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	60da      	str	r2, [r3, #12]
	}
	else{
		port->ODR &= ~(1<<pin);
	}
}
 8000d58:	e009      	b.n	8000d6e <gpioSetPullupPulldown+0x3e>
		port->ODR &= ~(1<<pin);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	68db      	ldr	r3, [r3, #12]
 8000d5e:	78fa      	ldrb	r2, [r7, #3]
 8000d60:	2101      	movs	r1, #1
 8000d62:	fa01 f202 	lsl.w	r2, r1, r2
 8000d66:	43d2      	mvns	r2, r2
 8000d68:	401a      	ands	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60da      	str	r2, [r3, #12]
}
 8000d6e:	bf00      	nop
 8000d70:	370c      	adds	r7, #12
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bc80      	pop	{r7}
 8000d76:	4770      	bx	lr

08000d78 <gpioGetPinVal>:
  * Desc.: returns the current value of a Pin stored in the IDR Register
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: (bool) state of Pin
  */
extern bool gpioGetPinVal(GPIO_TypeDef *port, PIN_NUM pin){
 8000d78:	b480      	push	{r7}
 8000d7a:	b083      	sub	sp, #12
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
 8000d80:	460b      	mov	r3, r1
 8000d82:	70fb      	strb	r3, [r7, #3]
	return (port->IDR & (1<<pin));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	689b      	ldr	r3, [r3, #8]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	bf14      	ite	ne
 8000d96:	2301      	movne	r3, #1
 8000d98:	2300      	moveq	r3, #0
 8000d9a:	b2db      	uxtb	r3, r3
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bc80      	pop	{r7}
 8000da4:	4770      	bx	lr

08000da6 <gpioTogglePin>:
  * Desc.: Toogles Pin
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioTogglePin(GPIO_TypeDef *port, PIN_NUM pin){
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b082      	sub	sp, #8
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
 8000dae:	460b      	mov	r3, r1
 8000db0:	70fb      	strb	r3, [r7, #3]
	if (gpioGetPinVal(port, pin))
 8000db2:	78fb      	ldrb	r3, [r7, #3]
 8000db4:	4619      	mov	r1, r3
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	f7ff ffde 	bl	8000d78 <gpioGetPinVal>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d005      	beq.n	8000dce <gpioTogglePin+0x28>
		{
			gpioResetPin(port, pin);
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ff9d 	bl	8000d06 <gpioResetPin>
		}
		else
		{
			gpioSetPin(port, pin);
		}
}
 8000dcc:	e004      	b.n	8000dd8 <gpioTogglePin+0x32>
			gpioSetPin(port, pin);
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ff83 	bl	8000cde <gpioSetPin>
}
 8000dd8:	bf00      	nop
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}

08000de0 <afioInit>:
/*
  * Desc.: enables the Clock for alternative functions, this Clock must be activated in Order to use alternative pinfunctions!
  * @param: none
  * @return: none
  */
extern void afioInit(){
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000de4:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <afioInit+0x18>)
 8000de6:	699b      	ldr	r3, [r3, #24]
 8000de8:	4a03      	ldr	r2, [pc, #12]	; (8000df8 <afioInit+0x18>)
 8000dea:	f043 0301 	orr.w	r3, r3, #1
 8000dee:	6193      	str	r3, [r2, #24]
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bc80      	pop	{r7}
 8000df6:	4770      	bx	lr
 8000df8:	40021000 	.word	0x40021000

08000dfc <SysTick_Handler>:
/*
 * Desc.: SysTick ISR Handler
 * @param: none
 * @return: none
 */
extern void SysTick_Handler(void){
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
	--tick;
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <SysTick_Handler+0x18>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	4a03      	ldr	r2, [pc, #12]	; (8000e14 <SysTick_Handler+0x18>)
 8000e08:	6013      	str	r3, [r2, #0]
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	200001c8 	.word	0x200001c8

08000e18 <timerBusClkOn>:
 /*
  * Desc.: activates Clock for Timer
  * @param: (TIM_TypeDef*)timer: Timer which should be activated
  * @return: none
  */
extern void timerBusClkOn(TIM_TypeDef* timer){
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	 if (TIM1 == timer)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a1a      	ldr	r2, [pc, #104]	; (8000e8c <timerBusClkOn+0x74>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d106      	bne.n	8000e36 <timerBusClkOn+0x1e>
	    {
	        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000e28:	4b19      	ldr	r3, [pc, #100]	; (8000e90 <timerBusClkOn+0x78>)
 8000e2a:	699b      	ldr	r3, [r3, #24]
 8000e2c:	4a18      	ldr	r2, [pc, #96]	; (8000e90 <timerBusClkOn+0x78>)
 8000e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e32:	6193      	str	r3, [r2, #24]
 8000e34:	e021      	b.n	8000e7a <timerBusClkOn+0x62>
	    }
	    else if (TIM2 == timer)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e3c:	d106      	bne.n	8000e4c <timerBusClkOn+0x34>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000e3e:	4b14      	ldr	r3, [pc, #80]	; (8000e90 <timerBusClkOn+0x78>)
 8000e40:	69db      	ldr	r3, [r3, #28]
 8000e42:	4a13      	ldr	r2, [pc, #76]	; (8000e90 <timerBusClkOn+0x78>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	61d3      	str	r3, [r2, #28]
 8000e4a:	e016      	b.n	8000e7a <timerBusClkOn+0x62>
	    }
	    else if (TIM3 == timer)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a11      	ldr	r2, [pc, #68]	; (8000e94 <timerBusClkOn+0x7c>)
 8000e50:	4293      	cmp	r3, r2
 8000e52:	d106      	bne.n	8000e62 <timerBusClkOn+0x4a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <timerBusClkOn+0x78>)
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <timerBusClkOn+0x78>)
 8000e5a:	f043 0302 	orr.w	r3, r3, #2
 8000e5e:	61d3      	str	r3, [r2, #28]
 8000e60:	e00b      	b.n	8000e7a <timerBusClkOn+0x62>
	    }
	    else if (TIM4 == timer)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4a0c      	ldr	r2, [pc, #48]	; (8000e98 <timerBusClkOn+0x80>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d106      	bne.n	8000e78 <timerBusClkOn+0x60>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000e6a:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <timerBusClkOn+0x78>)
 8000e6c:	69db      	ldr	r3, [r3, #28]
 8000e6e:	4a08      	ldr	r2, [pc, #32]	; (8000e90 <timerBusClkOn+0x78>)
 8000e70:	f043 0304 	orr.w	r3, r3, #4
 8000e74:	61d3      	str	r3, [r2, #28]
 8000e76:	e000      	b.n	8000e7a <timerBusClkOn+0x62>
	    }
	    else
	    {
	        while(1)
 8000e78:	e7fe      	b.n	8000e78 <timerBusClkOn+0x60>
	        {
	            // Timer not supported
	        }
	    }

	    timer->CR1 = 0;  // Reset all bits of TIMx_CR1 to 0
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	40012c00 	.word	0x40012c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	40000400 	.word	0x40000400
 8000e98:	40000800 	.word	0x40000800

08000e9c <timerSetPrescaler>:
  * Desc.: sets Prescaler for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) presc: Prescaler Value
  * @return: none
  */
extern void timerSetPrescaler(TIM_TypeDef* timer, uint16_t presc){
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	807b      	strh	r3, [r7, #2]
	timer->PSC = presc;
 8000ea8:	887a      	ldrh	r2, [r7, #2]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr

08000eb8 <timerSetAutoReloadValue>:
  * Desc.: sets AutoreloadValue for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) arrv: Autoreloadvalue
  * @return: none
  */
extern void timerSetAutoReloadValue(TIM_TypeDef* timer, uint16_t arrv){
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	807b      	strh	r3, [r7, #2]
	timer->ARR = arrv;
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000eca:	bf00      	nop
 8000ecc:	370c      	adds	r7, #12
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bc80      	pop	{r7}
 8000ed2:	4770      	bx	lr

08000ed4 <timerEnableInterrupt>:
/*
  * Desc.: enables Interrupt
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerEnableInterrupt(TIM_TypeDef* timer){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	timer->DIER |= TIM_DIER_UIE;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	f043 0201 	orr.w	r2, r3, #1
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	60da      	str	r2, [r3, #12]
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bc80      	pop	{r7}
 8000ef0:	4770      	bx	lr

08000ef2 <timerSetOnePulseMode>:
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (OPM_MODE) opmmode: ONE_PULSE_MODE_OFF
								ONE_PULSE_MODE_ON
  * @return: none
  */
extern void timerSetOnePulseMode(TIM_TypeDef* timer, OPM_MODE opmmode){
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
 8000efa:	460b      	mov	r3, r1
 8000efc:	70fb      	strb	r3, [r7, #3]
	if(opmmode == 1){
 8000efe:	78fb      	ldrb	r3, [r7, #3]
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d106      	bne.n	8000f12 <timerSetOnePulseMode+0x20>
		timer->CR1 |= TIM_CR1_OPM ;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f043 0208 	orr.w	r2, r3, #8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	601a      	str	r2, [r3, #0]
	}
	else{
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
	}
}
 8000f10:	e005      	b.n	8000f1e <timerSetOnePulseMode+0x2c>
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f023 0208 	bic.w	r2, r3, #8
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	601a      	str	r2, [r3, #0]
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <timerStart>:
/*
  * Desc.: starts Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerStart(TIM_TypeDef* timer){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	f043 0201 	orr.w	r2, r3, #1
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	601a      	str	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
	...

08000f48 <USARTEnable>:
/*
  * Desc.: enables Clock for the corresponding USART and activates the USART in it's Control Register
  * @param: (USART_TypeDef*)usart: USART
  * @return: none
  */
void USARTEnable(USART_TypeDef* usart){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	if(usart == USART1){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <USARTEnable+0x78>)
 8000f54:	4293      	cmp	r3, r2
 8000f56:	d10c      	bne.n	8000f72 <USARTEnable+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <USARTEnable+0x7c>)
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	4a19      	ldr	r2, [pc, #100]	; (8000fc4 <USARTEnable+0x7c>)
 8000f5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f62:	6193      	str	r3, [r2, #24]
		USART1->CR1 |= USART_CR1_UE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <USARTEnable+0x78>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	4a15      	ldr	r2, [pc, #84]	; (8000fc0 <USARTEnable+0x78>)
 8000f6a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f6e:	60d3      	str	r3, [r2, #12]
 8000f70:	e022      	b.n	8000fb8 <USARTEnable+0x70>
	}
	else if(usart == USART2){
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a14      	ldr	r2, [pc, #80]	; (8000fc8 <USARTEnable+0x80>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d10c      	bne.n	8000f94 <USARTEnable+0x4c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f7a:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <USARTEnable+0x7c>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	4a11      	ldr	r2, [pc, #68]	; (8000fc4 <USARTEnable+0x7c>)
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	61d3      	str	r3, [r2, #28]
		USART2->CR1 |= USART_CR1_UE;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <USARTEnable+0x80>)
 8000f88:	68db      	ldr	r3, [r3, #12]
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <USARTEnable+0x80>)
 8000f8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f90:	60d3      	str	r3, [r2, #12]
 8000f92:	e011      	b.n	8000fb8 <USARTEnable+0x70>
	}
	else if(usart == USART3){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	4a0d      	ldr	r2, [pc, #52]	; (8000fcc <USARTEnable+0x84>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d10c      	bne.n	8000fb6 <USARTEnable+0x6e>
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000f9c:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <USARTEnable+0x7c>)
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <USARTEnable+0x7c>)
 8000fa2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa6:	61d3      	str	r3, [r2, #28]
		USART3->CR1 |= USART_CR1_UE;
 8000fa8:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <USARTEnable+0x84>)
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	4a07      	ldr	r2, [pc, #28]	; (8000fcc <USARTEnable+0x84>)
 8000fae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000fb2:	60d3      	str	r3, [r2, #12]
 8000fb4:	e000      	b.n	8000fb8 <USARTEnable+0x70>
	}
	else{
		return;
 8000fb6:	bf00      	nop
	}
}
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr
 8000fc0:	40013800 	.word	0x40013800
 8000fc4:	40021000 	.word	0x40021000
 8000fc8:	40004400 	.word	0x40004400
 8000fcc:	40004800 	.word	0x40004800

08000fd0 <USARTSetBaudrate>:
  * Desc.: sets the Baudrate for the USART (system clock > 36 MHZ!), default: 115200 bps
  * @param: (USART_TypeDef*)usart: USART
  * @param: (uint16_t) brrVal: Baudrate
  * @return: none
  */
void USARTSetBaudrate(USART_TypeDef* usart, uint16_t brrVal){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
	if(brrVal != 0){
 8000fdc:	887b      	ldrh	r3, [r7, #2]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d00b      	beq.n	8000ffa <USARTSetBaudrate+0x2a>
		usart -> BRR |= (SystemCoreClock / 2 / brrVal);
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	689a      	ldr	r2, [r3, #8]
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <USARTSetBaudrate+0x40>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	0859      	lsrs	r1, r3, #1
 8000fec:	887b      	ldrh	r3, [r7, #2]
 8000fee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ff2:	431a      	orrs	r2, r3
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= 0x8B;
	}
}
 8000ff8:	e005      	b.n	8001006 <USARTSetBaudrate+0x36>
		usart->BRR |= 0x8B;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	f043 028b 	orr.w	r2, r3, #139	; 0x8b
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	609a      	str	r2, [r3, #8]
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr
 8001010:	20000008 	.word	0x20000008

08001014 <USARTRXOn>:
  * Desc.: enables the Receiver of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Receiver shall be activated
  * @return: none
  */
void USARTRXOn(USART_TypeDef* usart, USART_RX on_off){
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	460b      	mov	r3, r1
 800101e:	70fb      	strb	r3, [r7, #3]
	if(on_off == RECEIVER_ON){
 8001020:	78fb      	ldrb	r3, [r7, #3]
 8001022:	2b01      	cmp	r3, #1
 8001024:	d106      	bne.n	8001034 <USARTRXOn+0x20>
		usart->CR1 |= USART_CR1_RE;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	f043 0204 	orr.w	r2, r3, #4
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	60da      	str	r2, [r3, #12]
	}
	else{
		usart->CR1 &= USART_CR1_RE_Msk;
	}
}
 8001032:	e005      	b.n	8001040 <USARTRXOn+0x2c>
		usart->CR1 &= USART_CR1_RE_Msk;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	f003 0204 	and.w	r2, r3, #4
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	60da      	str	r2, [r3, #12]
}
 8001040:	bf00      	nop
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <USARTTXOn>:
  * Desc.: enables the Transmitter of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Transmitter shall be activated
  * @return: none
  */
void USARTTXOn(USART_TypeDef* usart, USART_TX on_off){
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
 8001052:	460b      	mov	r3, r1
 8001054:	70fb      	strb	r3, [r7, #3]
	if(on_off == TRANSMITTER_ON){
 8001056:	78fb      	ldrb	r3, [r7, #3]
 8001058:	2b01      	cmp	r3, #1
 800105a:	d106      	bne.n	800106a <USARTTXOn+0x20>
			usart->CR1 |= USART_CR1_TE;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f043 0208 	orr.w	r2, r3, #8
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= USART_CR1_TE_Msk;
		}
}
 8001068:	e005      	b.n	8001076 <USARTTXOn+0x2c>
			usart->CR1 &= USART_CR1_TE_Msk;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	68db      	ldr	r3, [r3, #12]
 800106e:	f003 0208 	and.w	r2, r3, #8
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	60da      	str	r2, [r3, #12]
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bc80      	pop	{r7}
 800107e:	4770      	bx	lr

08001080 <USARTIRQ>:
    									USART_IRQ_LBDIE,(LIN Break Detection Interrupt)
    									USART_IRQ_EIE(Error Interrupt)
  *  @param: (bool) enable_disable: determines if the interrupt shall be enabled or disabled
  * @return: none
  */
extern void USARTIRQ(USART_TypeDef* usart, USART_IRQ_TYPES irq_type, bool enable_disable){
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	460b      	mov	r3, r1
 800108a:	70fb      	strb	r3, [r7, #3]
 800108c:	4613      	mov	r3, r2
 800108e:	70bb      	strb	r3, [r7, #2]
	switch(irq_type){
 8001090:	78fb      	ldrb	r3, [r7, #3]
 8001092:	2b07      	cmp	r3, #7
 8001094:	f200 808b 	bhi.w	80011ae <USARTIRQ+0x12e>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <USARTIRQ+0x20>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010c1 	.word	0x080010c1
 80010a4:	080010e3 	.word	0x080010e3
 80010a8:	08001105 	.word	0x08001105
 80010ac:	08001127 	.word	0x08001127
 80010b0:	080011af 	.word	0x080011af
 80010b4:	08001149 	.word	0x08001149
 80010b8:	0800116b 	.word	0x0800116b
 80010bc:	0800118d 	.word	0x0800118d
	case USART_IRQ_TXEIE:
		if(enable_disable){
 80010c0:	78bb      	ldrb	r3, [r7, #2]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d006      	beq.n	80010d4 <USARTIRQ+0x54>
			usart->CR1 |= USART_CR1_TXEIE;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
		}
		break;
 80010d2:	e06d      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	60da      	str	r2, [r3, #12]
		break;
 80010e0:	e066      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_CTSIE:
		if(enable_disable){
 80010e2:	78bb      	ldrb	r3, [r7, #2]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d006      	beq.n	80010f6 <USARTIRQ+0x76>
			usart->CR3 |= USART_CR3_CTSIE;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	695b      	ldr	r3, [r3, #20]
 80010ec:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
		}
		break;
 80010f4:	e05c      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	615a      	str	r2, [r3, #20]
		break;
 8001102:	e055      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_TCIE:
		if(enable_disable){
 8001104:	78bb      	ldrb	r3, [r7, #2]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d006      	beq.n	8001118 <USARTIRQ+0x98>
			usart->CR1 |= USART_CR1_TCIE;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
		}
		break;
 8001116:	e04b      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	60da      	str	r2, [r3, #12]
		break;
 8001124:	e044      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_RXNEIE:
		if(enable_disable){
 8001126:	78bb      	ldrb	r3, [r7, #2]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d006      	beq.n	800113a <USARTIRQ+0xba>
			usart->CR1 |= USART_CR1_RXNEIE;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	f043 0220 	orr.w	r2, r3, #32
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
		}
		break;
 8001138:	e03a      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	f023 0220 	bic.w	r2, r3, #32
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	60da      	str	r2, [r3, #12]
		break;
 8001146:	e033      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_PEIE:
		if(enable_disable){
 8001148:	78bb      	ldrb	r3, [r7, #2]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d006      	beq.n	800115c <USARTIRQ+0xdc>
			usart->CR1 |= USART_CR1_PEIE;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	68db      	ldr	r3, [r3, #12]
 8001152:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
		}
		break;
 800115a:	e029      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	60da      	str	r2, [r3, #12]
		break;
 8001168:	e022      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_LBDIE:
		if(enable_disable){
 800116a:	78bb      	ldrb	r3, [r7, #2]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d006      	beq.n	800117e <USARTIRQ+0xfe>
			usart->CR2 |= USART_CR2_LBDIE;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	611a      	str	r2, [r3, #16]
		}
		else{
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
		}
		break;
 800117c:	e018      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	611a      	str	r2, [r3, #16]
		break;
 800118a:	e011      	b.n	80011b0 <USARTIRQ+0x130>
	case USART_IRQ_EIE:
		if(enable_disable){
 800118c:	78bb      	ldrb	r3, [r7, #2]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <USARTIRQ+0x120>
			usart->CR3 |= USART_CR3_EIE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f043 0201 	orr.w	r2, r3, #1
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_EIE_Msk;
		}
		break;
 800119e:	e007      	b.n	80011b0 <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_EIE_Msk;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	695b      	ldr	r3, [r3, #20]
 80011a4:	f023 0201 	bic.w	r2, r3, #1
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	615a      	str	r2, [r3, #20]
		break;
 80011ac:	e000      	b.n	80011b0 <USARTIRQ+0x130>
	default:
		return;
 80011ae:	bf00      	nop
	}
}
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bc80      	pop	{r7}
 80011b6:	4770      	bx	lr

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011be:	4b0e      	ldr	r3, [pc, #56]	; (80011f8 <HAL_MspInit+0x40>)
 80011c0:	699b      	ldr	r3, [r3, #24]
 80011c2:	4a0d      	ldr	r2, [pc, #52]	; (80011f8 <HAL_MspInit+0x40>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6193      	str	r3, [r2, #24]
 80011ca:	4b0b      	ldr	r3, [pc, #44]	; (80011f8 <HAL_MspInit+0x40>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b08      	ldr	r3, [pc, #32]	; (80011f8 <HAL_MspInit+0x40>)
 80011d8:	69db      	ldr	r3, [r3, #28]
 80011da:	4a07      	ldr	r2, [pc, #28]	; (80011f8 <HAL_MspInit+0x40>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	61d3      	str	r3, [r2, #28]
 80011e2:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <HAL_MspInit+0x40>)
 80011e4:	69db      	ldr	r3, [r3, #28]
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bc80      	pop	{r7}
 80011f6:	4770      	bx	lr
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001226:	b480      	push	{r7}
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr

08001232 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001232:	b480      	push	{r7}
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001236:	bf00      	nop
 8001238:	46bd      	mov	sp, r7
 800123a:	bc80      	pop	{r7}
 800123c:	4770      	bx	lr
	...

08001240 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001244:	4802      	ldr	r0, [pc, #8]	; (8001250 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8001246:	f000 fabf 	bl	80017c8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000e98 	.word	0x20000e98

08001254 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	bc80      	pop	{r7}
 800125e:	4770      	bx	lr

08001260 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001260:	480c      	ldr	r0, [pc, #48]	; (8001294 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001262:	490d      	ldr	r1, [pc, #52]	; (8001298 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001264:	4a0d      	ldr	r2, [pc, #52]	; (800129c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001266:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001268:	e002      	b.n	8001270 <LoopCopyDataInit>

0800126a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800126a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800126c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126e:	3304      	adds	r3, #4

08001270 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001270:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001272:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001274:	d3f9      	bcc.n	800126a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001276:	4a0a      	ldr	r2, [pc, #40]	; (80012a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001278:	4c0a      	ldr	r4, [pc, #40]	; (80012a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800127a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800127c:	e001      	b.n	8001282 <LoopFillZerobss>

0800127e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001280:	3204      	adds	r2, #4

08001282 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001282:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001284:	d3fb      	bcc.n	800127e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001286:	f7ff ffe5 	bl	8001254 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800128a:	f007 f84f 	bl	800832c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800128e:	f7ff f893 	bl	80003b8 <main>
  bx lr
 8001292:	4770      	bx	lr
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800129c:	0800840c 	.word	0x0800840c
  ldr r2, =_sbss
 80012a0:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80012a4:	200013a4 	.word	0x200013a4

080012a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC1_2_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b0:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_Init+0x28>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a07      	ldr	r2, [pc, #28]	; (80012d4 <HAL_Init+0x28>)
 80012b6:	f043 0310 	orr.w	r3, r3, #16
 80012ba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012bc:	2003      	movs	r0, #3
 80012be:	f000 f911 	bl	80014e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f808 	bl	80012d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c8:	f7ff ff76 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	40022000 	.word	0x40022000

080012d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x54>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4b12      	ldr	r3, [pc, #72]	; (8001330 <HAL_InitTick+0x58>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	4619      	mov	r1, r3
 80012ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80012f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f929 	bl	800154e <HAL_SYSTICK_Config>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e00e      	b.n	8001324 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2b0f      	cmp	r3, #15
 800130a:	d80a      	bhi.n	8001322 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800130c:	2200      	movs	r2, #0
 800130e:	6879      	ldr	r1, [r7, #4]
 8001310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001314:	f000 f8f1 	bl	80014fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001318:	4a06      	ldr	r2, [pc, #24]	; (8001334 <HAL_InitTick+0x5c>)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131e:	2300      	movs	r3, #0
 8001320:	e000      	b.n	8001324 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	20000008 	.word	0x20000008
 8001330:	20000010 	.word	0x20000010
 8001334:	2000000c 	.word	0x2000000c

08001338 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return uwTick;
 800133c:	4b02      	ldr	r3, [pc, #8]	; (8001348 <HAL_GetTick+0x10>)
 800133e:	681b      	ldr	r3, [r3, #0]
}
 8001340:	4618      	mov	r0, r3
 8001342:	46bd      	mov	sp, r7
 8001344:	bc80      	pop	{r7}
 8001346:	4770      	bx	lr
 8001348:	200001cc 	.word	0x200001cc

0800134c <__NVIC_SetPriorityGrouping>:
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001362:	68ba      	ldr	r2, [r7, #8]
 8001364:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001368:	4013      	ands	r3, r2
 800136a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001374:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800137c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800137e:	4a04      	ldr	r2, [pc, #16]	; (8001390 <__NVIC_SetPriorityGrouping+0x44>)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	60d3      	str	r3, [r2, #12]
}
 8001384:	bf00      	nop
 8001386:	3714      	adds	r7, #20
 8001388:	46bd      	mov	sp, r7
 800138a:	bc80      	pop	{r7}
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	e000ed00 	.word	0xe000ed00

08001394 <__NVIC_GetPriorityGrouping>:
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001398:	4b04      	ldr	r3, [pc, #16]	; (80013ac <__NVIC_GetPriorityGrouping+0x18>)
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	0a1b      	lsrs	r3, r3, #8
 800139e:	f003 0307 	and.w	r3, r3, #7
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000ed00 	.word	0xe000ed00

080013b0 <__NVIC_EnableIRQ>:
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db0b      	blt.n	80013da <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013c2:	79fb      	ldrb	r3, [r7, #7]
 80013c4:	f003 021f 	and.w	r2, r3, #31
 80013c8:	4906      	ldr	r1, [pc, #24]	; (80013e4 <__NVIC_EnableIRQ+0x34>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	095b      	lsrs	r3, r3, #5
 80013d0:	2001      	movs	r0, #1
 80013d2:	fa00 f202 	lsl.w	r2, r0, r2
 80013d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	bc80      	pop	{r7}
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100

080013e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	6039      	str	r1, [r7, #0]
 80013f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	db0a      	blt.n	8001412 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	490c      	ldr	r1, [pc, #48]	; (8001434 <__NVIC_SetPriority+0x4c>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	0112      	lsls	r2, r2, #4
 8001408:	b2d2      	uxtb	r2, r2
 800140a:	440b      	add	r3, r1
 800140c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001410:	e00a      	b.n	8001428 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	b2da      	uxtb	r2, r3
 8001416:	4908      	ldr	r1, [pc, #32]	; (8001438 <__NVIC_SetPriority+0x50>)
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f003 030f 	and.w	r3, r3, #15
 800141e:	3b04      	subs	r3, #4
 8001420:	0112      	lsls	r2, r2, #4
 8001422:	b2d2      	uxtb	r2, r2
 8001424:	440b      	add	r3, r1
 8001426:	761a      	strb	r2, [r3, #24]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	bc80      	pop	{r7}
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100
 8001438:	e000ed00 	.word	0xe000ed00

0800143c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143c:	b480      	push	{r7}
 800143e:	b089      	sub	sp, #36	; 0x24
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001450:	69fb      	ldr	r3, [r7, #28]
 8001452:	f1c3 0307 	rsb	r3, r3, #7
 8001456:	2b04      	cmp	r3, #4
 8001458:	bf28      	it	cs
 800145a:	2304      	movcs	r3, #4
 800145c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	3304      	adds	r3, #4
 8001462:	2b06      	cmp	r3, #6
 8001464:	d902      	bls.n	800146c <NVIC_EncodePriority+0x30>
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3b03      	subs	r3, #3
 800146a:	e000      	b.n	800146e <NVIC_EncodePriority+0x32>
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001470:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	fa02 f303 	lsl.w	r3, r2, r3
 800147a:	43da      	mvns	r2, r3
 800147c:	68bb      	ldr	r3, [r7, #8]
 800147e:	401a      	ands	r2, r3
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001484:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	fa01 f303 	lsl.w	r3, r1, r3
 800148e:	43d9      	mvns	r1, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001494:	4313      	orrs	r3, r2
         );
}
 8001496:	4618      	mov	r0, r3
 8001498:	3724      	adds	r7, #36	; 0x24
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr

080014a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014b0:	d301      	bcc.n	80014b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014b2:	2301      	movs	r3, #1
 80014b4:	e00f      	b.n	80014d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014b6:	4a0a      	ldr	r2, [pc, #40]	; (80014e0 <SysTick_Config+0x40>)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014be:	210f      	movs	r1, #15
 80014c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80014c4:	f7ff ff90 	bl	80013e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <SysTick_Config+0x40>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ce:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <SysTick_Config+0x40>)
 80014d0:	2207      	movs	r2, #7
 80014d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	e000e010 	.word	0xe000e010

080014e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff ff2d 	bl	800134c <__NVIC_SetPriorityGrouping>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b086      	sub	sp, #24
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800150c:	f7ff ff42 	bl	8001394 <__NVIC_GetPriorityGrouping>
 8001510:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001512:	687a      	ldr	r2, [r7, #4]
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	6978      	ldr	r0, [r7, #20]
 8001518:	f7ff ff90 	bl	800143c <NVIC_EncodePriority>
 800151c:	4602      	mov	r2, r0
 800151e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001522:	4611      	mov	r1, r2
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff5f 	bl	80013e8 <__NVIC_SetPriority>
}
 800152a:	bf00      	nop
 800152c:	3718      	adds	r7, #24
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	4603      	mov	r3, r0
 800153a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800153c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff35 	bl	80013b0 <__NVIC_EnableIRQ>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001556:	6878      	ldr	r0, [r7, #4]
 8001558:	f7ff ffa2 	bl	80014a0 <SysTick_Config>
 800155c:	4603      	mov	r3, r0
}
 800155e:	4618      	mov	r0, r3
 8001560:	3708      	adds	r7, #8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001568:	b08b      	sub	sp, #44	; 0x2c
 800156a:	af06      	add	r7, sp, #24
 800156c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d101      	bne.n	8001578 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001574:	2301      	movs	r3, #1
 8001576:	e0fd      	b.n	8001774 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800157e:	b2db      	uxtb	r3, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	d106      	bne.n	8001592 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800158c:	6878      	ldr	r0, [r7, #4]
 800158e:	f006 fc23 	bl	8007dd8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2203      	movs	r2, #3
 8001596:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4618      	mov	r0, r3
 80015a0:	f002 f968 	bl	8003874 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	603b      	str	r3, [r7, #0]
 80015aa:	687e      	ldr	r6, [r7, #4]
 80015ac:	466d      	mov	r5, sp
 80015ae:	f106 0410 	add.w	r4, r6, #16
 80015b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015b6:	6823      	ldr	r3, [r4, #0]
 80015b8:	602b      	str	r3, [r5, #0]
 80015ba:	1d33      	adds	r3, r6, #4
 80015bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f002 f932 	bl	8003828 <USB_CoreInit>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d005      	beq.n	80015d6 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2202      	movs	r2, #2
 80015ce:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e0ce      	b.n	8001774 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f002 f963 	bl	80038a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e04c      	b.n	8001682 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80015e8:	7bfb      	ldrb	r3, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	1c5a      	adds	r2, r3, #1
 80015ee:	4613      	mov	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	4413      	add	r3, r2
 80015f4:	00db      	lsls	r3, r3, #3
 80015f6:	440b      	add	r3, r1
 80015f8:	3301      	adds	r3, #1
 80015fa:	2201      	movs	r2, #1
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	1c5a      	adds	r2, r3, #1
 8001604:	4613      	mov	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	440b      	add	r3, r1
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001612:	7bfa      	ldrb	r2, [r7, #15]
 8001614:	7bfb      	ldrb	r3, [r7, #15]
 8001616:	b298      	uxth	r0, r3
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	00db      	lsls	r3, r3, #3
 8001622:	440b      	add	r3, r1
 8001624:	3336      	adds	r3, #54	; 0x36
 8001626:	4602      	mov	r2, r0
 8001628:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800162a:	7bfb      	ldrb	r3, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	1c5a      	adds	r2, r3, #1
 8001630:	4613      	mov	r3, r2
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	00db      	lsls	r3, r3, #3
 8001638:	440b      	add	r3, r1
 800163a:	3303      	adds	r3, #3
 800163c:	2200      	movs	r2, #0
 800163e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001640:	7bfa      	ldrb	r2, [r7, #15]
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	4613      	mov	r3, r2
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	440b      	add	r3, r1
 800164e:	3338      	adds	r3, #56	; 0x38
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001654:	7bfa      	ldrb	r2, [r7, #15]
 8001656:	6879      	ldr	r1, [r7, #4]
 8001658:	4613      	mov	r3, r2
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	4413      	add	r3, r2
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	440b      	add	r3, r1
 8001662:	333c      	adds	r3, #60	; 0x3c
 8001664:	2200      	movs	r2, #0
 8001666:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001668:	7bfa      	ldrb	r2, [r7, #15]
 800166a:	6879      	ldr	r1, [r7, #4]
 800166c:	4613      	mov	r3, r2
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	00db      	lsls	r3, r3, #3
 8001674:	440b      	add	r3, r1
 8001676:	3340      	adds	r3, #64	; 0x40
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	3301      	adds	r3, #1
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	7bfa      	ldrb	r2, [r7, #15]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	d3ad      	bcc.n	80015e8 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800168c:	2300      	movs	r3, #0
 800168e:	73fb      	strb	r3, [r7, #15]
 8001690:	e044      	b.n	800171c <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001692:	7bfa      	ldrb	r2, [r7, #15]
 8001694:	6879      	ldr	r1, [r7, #4]
 8001696:	4613      	mov	r3, r2
 8001698:	009b      	lsls	r3, r3, #2
 800169a:	4413      	add	r3, r2
 800169c:	00db      	lsls	r3, r3, #3
 800169e:	440b      	add	r3, r1
 80016a0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	6879      	ldr	r1, [r7, #4]
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	440b      	add	r3, r1
 80016b6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80016ba:	7bfa      	ldrb	r2, [r7, #15]
 80016bc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80016be:	7bfa      	ldrb	r2, [r7, #15]
 80016c0:	6879      	ldr	r1, [r7, #4]
 80016c2:	4613      	mov	r3, r2
 80016c4:	009b      	lsls	r3, r3, #2
 80016c6:	4413      	add	r3, r2
 80016c8:	00db      	lsls	r3, r3, #3
 80016ca:	440b      	add	r3, r1
 80016cc:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80016d0:	2200      	movs	r2, #0
 80016d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80016d4:	7bfa      	ldrb	r2, [r7, #15]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	009b      	lsls	r3, r3, #2
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	440b      	add	r3, r1
 80016e2:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80016ea:	7bfa      	ldrb	r2, [r7, #15]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80016fc:	2200      	movs	r2, #0
 80016fe:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	3301      	adds	r3, #1
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	7bfa      	ldrb	r2, [r7, #15]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	429a      	cmp	r2, r3
 8001724:	d3b5      	bcc.n	8001692 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	603b      	str	r3, [r7, #0]
 800172c:	687e      	ldr	r6, [r7, #4]
 800172e:	466d      	mov	r5, sp
 8001730:	f106 0410 	add.w	r4, r6, #16
 8001734:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001736:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	602b      	str	r3, [r5, #0]
 800173c:	1d33      	adds	r3, r6, #4
 800173e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f002 f8bd 	bl	80038c0 <USB_DevInit>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2202      	movs	r2, #2
 8001750:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e00d      	b.n	8001774 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2201      	movs	r2, #1
 8001764:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f004 fd6f 	bl	8006250 <USB_DevDisconnect>

  return HAL_OK;
 8001772:	2300      	movs	r3, #0
}
 8001774:	4618      	mov	r0, r3
 8001776:	3714      	adds	r7, #20
 8001778:	46bd      	mov	sp, r7
 800177a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800177c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800178a:	2b01      	cmp	r3, #1
 800178c:	d101      	bne.n	8001792 <HAL_PCD_Start+0x16>
 800178e:	2302      	movs	r3, #2
 8001790:	e016      	b.n	80017c0 <HAL_PCD_Start+0x44>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	2201      	movs	r2, #1
 8001796:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f002 f852 	bl	8003848 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80017a4:	2101      	movs	r1, #1
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 fd89 	bl	80082be <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 fd43 	bl	800623c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}

080017c8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b088      	sub	sp, #32
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f004 fd45 	bl	8006264 <USB_ReadInterrupts>
 80017da:	4603      	mov	r3, r0
 80017dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80017e4:	d102      	bne.n	80017ec <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 fb5f 	bl	8001eaa <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f004 fd37 	bl	8006264 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001800:	d112      	bne.n	8001828 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001814:	b292      	uxth	r2, r2
 8001816:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f006 fb57 	bl	8007ece <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001820:	2100      	movs	r1, #0
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f923 	bl	8001a6e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4618      	mov	r0, r3
 800182e:	f004 fd19 	bl	8006264 <USB_ReadInterrupts>
 8001832:	4603      	mov	r3, r0
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800183c:	d10b      	bne.n	8001856 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4618      	mov	r0, r3
 800185c:	f004 fd02 	bl	8006264 <USB_ReadInterrupts>
 8001860:	4603      	mov	r3, r0
 8001862:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001866:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800186a:	d10b      	bne.n	8001884 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001874:	b29a      	uxth	r2, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800187e:	b292      	uxth	r2, r2
 8001880:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4618      	mov	r0, r3
 800188a:	f004 fceb 	bl	8006264 <USB_ReadInterrupts>
 800188e:	4603      	mov	r3, r0
 8001890:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001894:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001898:	d126      	bne.n	80018e8 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 0204 	bic.w	r2, r2, #4
 80018ac:	b292      	uxth	r2, r2
 80018ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f022 0208 	bic.w	r2, r2, #8
 80018c4:	b292      	uxth	r2, r2
 80018c6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f006 fb38 	bl	8007f40 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018d8:	b29a      	uxth	r2, r3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80018e2:	b292      	uxth	r2, r2
 80018e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f004 fcb9 	bl	8006264 <USB_ReadInterrupts>
 80018f2:	4603      	mov	r3, r0
 80018f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018fc:	f040 8082 	bne.w	8001a04 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	77fb      	strb	r3, [r7, #31]
 8001904:	e010      	b.n	8001928 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	461a      	mov	r2, r3
 800190c:	7ffb      	ldrb	r3, [r7, #31]
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	441a      	add	r2, r3
 8001912:	7ffb      	ldrb	r3, [r7, #31]
 8001914:	8812      	ldrh	r2, [r2, #0]
 8001916:	b292      	uxth	r2, r2
 8001918:	005b      	lsls	r3, r3, #1
 800191a:	3320      	adds	r3, #32
 800191c:	443b      	add	r3, r7
 800191e:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001922:	7ffb      	ldrb	r3, [r7, #31]
 8001924:	3301      	adds	r3, #1
 8001926:	77fb      	strb	r3, [r7, #31]
 8001928:	7ffb      	ldrb	r3, [r7, #31]
 800192a:	2b07      	cmp	r3, #7
 800192c:	d9eb      	bls.n	8001906 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001936:	b29a      	uxth	r2, r3
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f042 0201 	orr.w	r2, r2, #1
 8001940:	b292      	uxth	r2, r2
 8001942:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800194e:	b29a      	uxth	r2, r3
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f022 0201 	bic.w	r2, r2, #1
 8001958:	b292      	uxth	r2, r2
 800195a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 800195e:	bf00      	nop
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001968:	b29b      	uxth	r3, r3
 800196a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800196e:	2b00      	cmp	r3, #0
 8001970:	d0f6      	beq.n	8001960 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001984:	b292      	uxth	r2, r2
 8001986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800198a:	2300      	movs	r3, #0
 800198c:	77fb      	strb	r3, [r7, #31]
 800198e:	e00f      	b.n	80019b0 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001990:	7ffb      	ldrb	r3, [r7, #31]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	6812      	ldr	r2, [r2, #0]
 8001996:	4611      	mov	r1, r2
 8001998:	7ffa      	ldrb	r2, [r7, #31]
 800199a:	0092      	lsls	r2, r2, #2
 800199c:	440a      	add	r2, r1
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	3320      	adds	r3, #32
 80019a2:	443b      	add	r3, r7
 80019a4:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80019a8:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80019aa:	7ffb      	ldrb	r3, [r7, #31]
 80019ac:	3301      	adds	r3, #1
 80019ae:	77fb      	strb	r3, [r7, #31]
 80019b0:	7ffb      	ldrb	r3, [r7, #31]
 80019b2:	2b07      	cmp	r3, #7
 80019b4:	d9ec      	bls.n	8001990 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019be:	b29a      	uxth	r2, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f042 0208 	orr.w	r2, r2, #8
 80019c8:	b292      	uxth	r2, r2
 80019ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019d6:	b29a      	uxth	r2, r3
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019e0:	b292      	uxth	r2, r2
 80019e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80019ee:	b29a      	uxth	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f042 0204 	orr.w	r2, r2, #4
 80019f8:	b292      	uxth	r2, r2
 80019fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f006 fa84 	bl	8007f0c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f004 fc2b 	bl	8006264 <USB_ReadInterrupts>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a18:	d10e      	bne.n	8001a38 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a22:	b29a      	uxth	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a2c:	b292      	uxth	r2, r2
 8001a2e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f006 fa3d 	bl	8007eb2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f004 fc11 	bl	8006264 <USB_ReadInterrupts>
 8001a42:	4603      	mov	r3, r0
 8001a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a48:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a4c:	d10b      	bne.n	8001a66 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a60:	b292      	uxth	r2, r2
 8001a62:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001a66:	bf00      	nop
 8001a68:	3720      	adds	r7, #32
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
 8001a76:	460b      	mov	r3, r1
 8001a78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_SetAddress+0x1a>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e013      	b.n	8001ab0 <HAL_PCD_SetAddress+0x42>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	78fa      	ldrb	r2, [r7, #3]
 8001a94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	78fa      	ldrb	r2, [r7, #3]
 8001a9e:	4611      	mov	r1, r2
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f004 fbb8 	bl	8006216 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	4608      	mov	r0, r1
 8001ac2:	4611      	mov	r1, r2
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	70fb      	strb	r3, [r7, #3]
 8001aca:	460b      	mov	r3, r1
 8001acc:	803b      	strh	r3, [r7, #0]
 8001ace:	4613      	mov	r3, r2
 8001ad0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ad6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	da0e      	bge.n	8001afc <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ade:	78fb      	ldrb	r3, [r7, #3]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	1c5a      	adds	r2, r3, #1
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	4413      	add	r3, r2
 8001af2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	705a      	strb	r2, [r3, #1]
 8001afa:	e00e      	b.n	8001b1a <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001afc:	78fb      	ldrb	r3, [r7, #3]
 8001afe:	f003 0207 	and.w	r2, r3, #7
 8001b02:	4613      	mov	r3, r2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	4413      	add	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	2200      	movs	r2, #0
 8001b18:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	f003 0307 	and.w	r3, r3, #7
 8001b20:	b2da      	uxtb	r2, r3
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b26:	883a      	ldrh	r2, [r7, #0]
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	78ba      	ldrb	r2, [r7, #2]
 8001b30:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	785b      	ldrb	r3, [r3, #1]
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d004      	beq.n	8001b44 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	b29a      	uxth	r2, r3
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b44:	78bb      	ldrb	r3, [r7, #2]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d102      	bne.n	8001b50 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d101      	bne.n	8001b5e <HAL_PCD_EP_Open+0xa6>
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	e00e      	b.n	8001b7c <HAL_PCD_EP_Open+0xc4>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2201      	movs	r2, #1
 8001b62:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	68f9      	ldr	r1, [r7, #12]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f001 fec7 	bl	8003900 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	da0e      	bge.n	8001bb6 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	1c5a      	adds	r2, r3, #1
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	687a      	ldr	r2, [r7, #4]
 8001baa:	4413      	add	r3, r2
 8001bac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	705a      	strb	r2, [r3, #1]
 8001bb4:	e00e      	b.n	8001bd4 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb6:	78fb      	ldrb	r3, [r7, #3]
 8001bb8:	f003 0207 	and.w	r2, r3, #7
 8001bbc:	4613      	mov	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	4413      	add	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_PCD_EP_Close+0x6a>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e00e      	b.n	8001c0c <HAL_PCD_EP_Close+0x88>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68f9      	ldr	r1, [r7, #12]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 f9e9 	bl	8003fd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	607a      	str	r2, [r7, #4]
 8001c1e:	603b      	str	r3, [r7, #0]
 8001c20:	460b      	mov	r3, r1
 8001c22:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c24:	7afb      	ldrb	r3, [r7, #11]
 8001c26:	f003 0207 	and.w	r2, r3, #7
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	00db      	lsls	r3, r3, #3
 8001c32:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	4413      	add	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	2200      	movs	r2, #0
 8001c52:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c54:	7afb      	ldrb	r3, [r7, #11]
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	b2da      	uxtb	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c60:	7afb      	ldrb	r3, [r7, #11]
 8001c62:	f003 0307 	and.w	r3, r3, #7
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d106      	bne.n	8001c78 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	6979      	ldr	r1, [r7, #20]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f002 fb9b 	bl	80043ac <USB_EPStartXfer>
 8001c76:	e005      	b.n	8001c84 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	6979      	ldr	r1, [r7, #20]
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f002 fb94 	bl	80043ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}

08001c8e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
 8001c96:	460b      	mov	r3, r1
 8001c98:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	f003 0207 	and.w	r2, r3, #7
 8001ca0:	6879      	ldr	r1, [r7, #4]
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	4413      	add	r3, r2
 8001ca8:	00db      	lsls	r3, r3, #3
 8001caa:	440b      	add	r3, r1
 8001cac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001cb0:	681b      	ldr	r3, [r3, #0]
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bc80      	pop	{r7}
 8001cba:	4770      	bx	lr

08001cbc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	607a      	str	r2, [r7, #4]
 8001cc6:	603b      	str	r3, [r7, #0]
 8001cc8:	460b      	mov	r3, r1
 8001cca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ccc:	7afb      	ldrb	r3, [r7, #11]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	68fa      	ldr	r2, [r7, #12]
 8001cde:	4413      	add	r3, r2
 8001ce0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ce2:	697b      	ldr	r3, [r7, #20]
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2201      	movs	r2, #1
 8001d06:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	b2da      	uxtb	r2, r3
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d14:	7afb      	ldrb	r3, [r7, #11]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d106      	bne.n	8001d2c <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	6979      	ldr	r1, [r7, #20]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f002 fb41 	bl	80043ac <USB_EPStartXfer>
 8001d2a:	e005      	b.n	8001d38 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6979      	ldr	r1, [r7, #20]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f002 fb3a 	bl	80043ac <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d4e:	78fb      	ldrb	r3, [r7, #3]
 8001d50:	f003 0207 	and.w	r2, r3, #7
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d901      	bls.n	8001d60 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e04c      	b.n	8001dfa <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da0e      	bge.n	8001d86 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0307 	and.w	r3, r3, #7
 8001d6e:	1c5a      	adds	r2, r3, #1
 8001d70:	4613      	mov	r3, r2
 8001d72:	009b      	lsls	r3, r3, #2
 8001d74:	4413      	add	r3, r2
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2201      	movs	r2, #1
 8001d82:	705a      	strb	r2, [r3, #1]
 8001d84:	e00c      	b.n	8001da0 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d86:	78fa      	ldrb	r2, [r7, #3]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	00db      	lsls	r3, r3, #3
 8001d90:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	4413      	add	r3, r2
 8001d98:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	2201      	movs	r2, #1
 8001da4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001da6:	78fb      	ldrb	r3, [r7, #3]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	b2da      	uxtb	r2, r3
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d101      	bne.n	8001dc0 <HAL_PCD_EP_SetStall+0x7e>
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	e01c      	b.n	8001dfa <HAL_PCD_EP_SetStall+0xb8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2201      	movs	r2, #1
 8001dc4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	68f9      	ldr	r1, [r7, #12]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f004 f924 	bl	800601c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001dd4:	78fb      	ldrb	r3, [r7, #3]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d108      	bne.n	8001df0 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4610      	mov	r0, r2
 8001dec:	f004 fa49 	bl	8006282 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2200      	movs	r2, #0
 8001df4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3710      	adds	r7, #16
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b084      	sub	sp, #16
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	6078      	str	r0, [r7, #4]
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e0e:	78fb      	ldrb	r3, [r7, #3]
 8001e10:	f003 020f 	and.w	r2, r3, #15
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d901      	bls.n	8001e20 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e040      	b.n	8001ea2 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	da0e      	bge.n	8001e46 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e28:	78fb      	ldrb	r3, [r7, #3]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	1c5a      	adds	r2, r3, #1
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
 8001e44:	e00e      	b.n	8001e64 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 0207 	and.w	r2, r3, #7
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	009b      	lsls	r3, r3, #2
 8001e50:	4413      	add	r3, r2
 8001e52:	00db      	lsls	r3, r3, #3
 8001e54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2200      	movs	r2, #0
 8001e62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6a:	78fb      	ldrb	r3, [r7, #3]
 8001e6c:	f003 0307 	and.w	r3, r3, #7
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d101      	bne.n	8001e84 <HAL_PCD_EP_ClrStall+0x82>
 8001e80:	2302      	movs	r3, #2
 8001e82:	e00e      	b.n	8001ea2 <HAL_PCD_EP_ClrStall+0xa0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	68f9      	ldr	r1, [r7, #12]
 8001e92:	4618      	mov	r0, r3
 8001e94:	f004 f912 	bl	80060bc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001ea0:	2300      	movs	r3, #0
}
 8001ea2:	4618      	mov	r0, r3
 8001ea4:	3710      	adds	r7, #16
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	bd80      	pop	{r7, pc}

08001eaa <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001eaa:	b580      	push	{r7, lr}
 8001eac:	b08e      	sub	sp, #56	; 0x38
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001eb2:	e2ec      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ebc:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001ebe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001eca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	f040 8161 	bne.w	8002196 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001ed4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d152      	bne.n	8001f84 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	881b      	ldrh	r3, [r3, #0]
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001eea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001eee:	81fb      	strh	r3, [r7, #14]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	89fb      	ldrh	r3, [r7, #14]
 8001ef6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001efa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001efe:	b29b      	uxth	r3, r3
 8001f00:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3328      	adds	r3, #40	; 0x28
 8001f06:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	461a      	mov	r2, r3
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	6812      	ldr	r2, [r2, #0]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f2a:	881b      	ldrh	r3, [r3, #0]
 8001f2c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f36:	695a      	ldr	r2, [r3, #20]
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	69db      	ldr	r3, [r3, #28]
 8001f3c:	441a      	add	r2, r3
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001f42:	2100      	movs	r1, #0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f005 ff9a 	bl	8007e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 829b 	beq.w	800248e <PCD_EP_ISR_Handler+0x5e4>
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	699b      	ldr	r3, [r3, #24]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f040 8296 	bne.w	800248e <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	b292      	uxth	r2, r2
 8001f76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f82:	e284      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f8a:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d034      	beq.n	8002008 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	781b      	ldrb	r3, [r3, #0]
 8001fae:	00db      	lsls	r3, r3, #3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	3306      	adds	r3, #6
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc8:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6818      	ldr	r0, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001fdc:	b29b      	uxth	r3, r3
 8001fde:	f004 f9a0 	bl	8006322 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	881b      	ldrh	r3, [r3, #0]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fee:	4013      	ands	r3, r2
 8001ff0:	823b      	strh	r3, [r7, #16]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	8a3a      	ldrh	r2, [r7, #16]
 8001ff8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001ffc:	b292      	uxth	r2, r2
 8001ffe:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f005 ff0f 	bl	8007e24 <HAL_PCD_SetupStageCallback>
 8002006:	e242      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002008:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 800200c:	2b00      	cmp	r3, #0
 800200e:	f280 823e 	bge.w	800248e <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	b29a      	uxth	r2, r3
 800201a:	f640 738f 	movw	r3, #3983	; 0xf8f
 800201e:	4013      	ands	r3, r2
 8002020:	83bb      	strh	r3, [r7, #28]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	8bba      	ldrh	r2, [r7, #28]
 8002028:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800202c:	b292      	uxth	r2, r2
 800202e:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002038:	b29b      	uxth	r3, r3
 800203a:	461a      	mov	r2, r3
 800203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	3306      	adds	r3, #6
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	687a      	ldr	r2, [r7, #4]
 800204a:	6812      	ldr	r2, [r2, #0]
 800204c:	4413      	add	r3, r2
 800204e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002052:	881b      	ldrh	r3, [r3, #0]
 8002054:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800205c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205e:	69db      	ldr	r3, [r3, #28]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d019      	beq.n	8002098 <PCD_EP_ISR_Handler+0x1ee>
 8002064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002066:	695b      	ldr	r3, [r3, #20]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d015      	beq.n	8002098 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6818      	ldr	r0, [r3, #0]
 8002070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002072:	6959      	ldr	r1, [r3, #20]
 8002074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002076:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800207c:	b29b      	uxth	r3, r3
 800207e:	f004 f950 	bl	8006322 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	441a      	add	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002090:	2100      	movs	r1, #0
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f005 fed8 	bl	8007e48 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f040 81f2 	bne.w	800248e <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	4413      	add	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	69bb      	ldr	r3, [r7, #24]
 80020c4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80020c8:	617b      	str	r3, [r7, #20]
 80020ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020cc:	691b      	ldr	r3, [r3, #16]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d112      	bne.n	80020f8 <PCD_EP_ISR_Handler+0x24e>
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	881b      	ldrh	r3, [r3, #0]
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80020dc:	b29a      	uxth	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	801a      	strh	r2, [r3, #0]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	881b      	ldrh	r3, [r3, #0]
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020f0:	b29a      	uxth	r2, r3
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	801a      	strh	r2, [r3, #0]
 80020f6:	e02f      	b.n	8002158 <PCD_EP_ISR_Handler+0x2ae>
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	691b      	ldr	r3, [r3, #16]
 80020fc:	2b3e      	cmp	r3, #62	; 0x3e
 80020fe:	d813      	bhi.n	8002128 <PCD_EP_ISR_Handler+0x27e>
 8002100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	633b      	str	r3, [r7, #48]	; 0x30
 8002108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800210a:	691b      	ldr	r3, [r3, #16]
 800210c:	f003 0301 	and.w	r3, r3, #1
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <PCD_EP_ISR_Handler+0x270>
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	3301      	adds	r3, #1
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
 800211a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800211c:	b29b      	uxth	r3, r3
 800211e:	029b      	lsls	r3, r3, #10
 8002120:	b29a      	uxth	r2, r3
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	801a      	strh	r2, [r3, #0]
 8002126:	e017      	b.n	8002158 <PCD_EP_ISR_Handler+0x2ae>
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	095b      	lsrs	r3, r3, #5
 800212e:	633b      	str	r3, [r7, #48]	; 0x30
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	691b      	ldr	r3, [r3, #16]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	2b00      	cmp	r3, #0
 800213a:	d102      	bne.n	8002142 <PCD_EP_ISR_Handler+0x298>
 800213c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800213e:	3b01      	subs	r3, #1
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	b29b      	uxth	r3, r3
 8002146:	029b      	lsls	r3, r3, #10
 8002148:	b29b      	uxth	r3, r3
 800214a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800214e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002152:	b29a      	uxth	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	881b      	ldrh	r3, [r3, #0]
 800215e:	b29b      	uxth	r3, r3
 8002160:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002168:	827b      	strh	r3, [r7, #18]
 800216a:	8a7b      	ldrh	r3, [r7, #18]
 800216c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002170:	827b      	strh	r3, [r7, #18]
 8002172:	8a7b      	ldrh	r3, [r7, #18]
 8002174:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002178:	827b      	strh	r3, [r7, #18]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681a      	ldr	r2, [r3, #0]
 800217e:	8a7b      	ldrh	r3, [r7, #18]
 8002180:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002184:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002188:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800218c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002190:	b29b      	uxth	r3, r3
 8002192:	8013      	strh	r3, [r2, #0]
 8002194:	e17b      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	461a      	mov	r2, r3
 800219c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	4413      	add	r3, r2
 80021a4:	881b      	ldrh	r3, [r3, #0]
 80021a6:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021a8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	f280 80ea 	bge.w	8002386 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	461a      	mov	r2, r3
 80021b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021bc:	009b      	lsls	r3, r3, #2
 80021be:	4413      	add	r3, r2
 80021c0:	881b      	ldrh	r3, [r3, #0]
 80021c2:	b29a      	uxth	r2, r3
 80021c4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021c8:	4013      	ands	r3, r2
 80021ca:	853b      	strh	r3, [r7, #40]	; 0x28
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80021dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021e0:	b292      	uxth	r2, r2
 80021e2:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 80021e4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80021e8:	4613      	mov	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	4413      	add	r3, r2
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80021fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021fc:	7b1b      	ldrb	r3, [r3, #12]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d122      	bne.n	8002248 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800220a:	b29b      	uxth	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	00db      	lsls	r3, r3, #3
 8002214:	4413      	add	r3, r2
 8002216:	3306      	adds	r3, #6
 8002218:	005b      	lsls	r3, r3, #1
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	6812      	ldr	r2, [r2, #0]
 800221e:	4413      	add	r3, r2
 8002220:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002224:	881b      	ldrh	r3, [r3, #0]
 8002226:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800222a:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 800222c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800222e:	2b00      	cmp	r3, #0
 8002230:	f000 8087 	beq.w	8002342 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6818      	ldr	r0, [r3, #0]
 8002238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223a:	6959      	ldr	r1, [r3, #20]
 800223c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223e:	88da      	ldrh	r2, [r3, #6]
 8002240:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002242:	f004 f86e 	bl	8006322 <USB_ReadPMA>
 8002246:	e07c      	b.n	8002342 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	78db      	ldrb	r3, [r3, #3]
 800224c:	2b02      	cmp	r3, #2
 800224e:	d108      	bne.n	8002262 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002250:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002252:	461a      	mov	r2, r3
 8002254:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f927 	bl	80024aa <HAL_PCD_EP_DB_Receive>
 800225c:	4603      	mov	r3, r0
 800225e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002260:	e06f      	b.n	8002342 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	881b      	ldrh	r3, [r3, #0]
 8002272:	b29b      	uxth	r3, r3
 8002274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800227c:	847b      	strh	r3, [r7, #34]	; 0x22
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	441a      	add	r2, r3
 800228c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800228e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	4413      	add	r3, r2
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	b29b      	uxth	r3, r3
 80022b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d021      	beq.n	8002300 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	461a      	mov	r2, r3
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	3302      	adds	r3, #2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022de:	881b      	ldrh	r3, [r3, #0]
 80022e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d02a      	beq.n	8002342 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6818      	ldr	r0, [r3, #0]
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	6959      	ldr	r1, [r3, #20]
 80022f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f6:	891a      	ldrh	r2, [r3, #8]
 80022f8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022fa:	f004 f812 	bl	8006322 <USB_ReadPMA>
 80022fe:	e020      	b.n	8002342 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002308:	b29b      	uxth	r3, r3
 800230a:	461a      	mov	r2, r3
 800230c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230e:	781b      	ldrb	r3, [r3, #0]
 8002310:	00db      	lsls	r3, r3, #3
 8002312:	4413      	add	r3, r2
 8002314:	3306      	adds	r3, #6
 8002316:	005b      	lsls	r3, r3, #1
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	6812      	ldr	r2, [r2, #0]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002322:	881b      	ldrh	r3, [r3, #0]
 8002324:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002328:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800232a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6818      	ldr	r0, [r3, #0]
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002336:	6959      	ldr	r1, [r3, #20]
 8002338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800233a:	895a      	ldrh	r2, [r3, #10]
 800233c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800233e:	f003 fff0 	bl	8006322 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	69da      	ldr	r2, [r3, #28]
 8002346:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002348:	441a      	add	r2, r3
 800234a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800234e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002350:	695a      	ldr	r2, [r3, #20]
 8002352:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002354:	441a      	add	r2, r3
 8002356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002358:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800235a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235c:	699b      	ldr	r3, [r3, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d004      	beq.n	800236c <PCD_EP_ISR_Handler+0x4c2>
 8002362:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	429a      	cmp	r2, r3
 800236a:	d206      	bcs.n	800237a <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800236c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	4619      	mov	r1, r3
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f005 fd68 	bl	8007e48 <HAL_PCD_DataOutStageCallback>
 8002378:	e005      	b.n	8002386 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002380:	4618      	mov	r0, r3
 8002382:	f002 f813 	bl	80043ac <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002386:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800238c:	2b00      	cmp	r3, #0
 800238e:	d07e      	beq.n	800248e <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002390:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	4613      	mov	r3, r2
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	4413      	add	r3, r2
 800239c:	00db      	lsls	r3, r3, #3
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	4413      	add	r3, r2
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	461a      	mov	r2, r3
 80023aa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80023ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023be:	843b      	strh	r3, [r7, #32]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	461a      	mov	r2, r3
 80023c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	441a      	add	r2, r3
 80023ce:	8c3b      	ldrh	r3, [r7, #32]
 80023d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023d8:	b29b      	uxth	r3, r3
 80023da:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	78db      	ldrb	r3, [r3, #3]
 80023e0:	2b03      	cmp	r3, #3
 80023e2:	d00c      	beq.n	80023fe <PCD_EP_ISR_Handler+0x554>
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	78db      	ldrb	r3, [r3, #3]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d008      	beq.n	80023fe <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d146      	bne.n	8002482 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80023f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d141      	bne.n	8002482 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002406:	b29b      	uxth	r3, r3
 8002408:	461a      	mov	r2, r3
 800240a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	00db      	lsls	r3, r3, #3
 8002410:	4413      	add	r3, r2
 8002412:	3302      	adds	r3, #2
 8002414:	005b      	lsls	r3, r3, #1
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	6812      	ldr	r2, [r2, #0]
 800241a:	4413      	add	r3, r2
 800241c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002420:	881b      	ldrh	r3, [r3, #0]
 8002422:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002426:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	699a      	ldr	r2, [r3, #24]
 800242c:	8bfb      	ldrh	r3, [r7, #30]
 800242e:	429a      	cmp	r2, r3
 8002430:	d906      	bls.n	8002440 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002434:	699a      	ldr	r2, [r3, #24]
 8002436:	8bfb      	ldrh	r3, [r7, #30]
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	e002      	b.n	8002446 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d106      	bne.n	800245c <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	4619      	mov	r1, r3
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f005 fd12 	bl	8007e7e <HAL_PCD_DataInStageCallback>
 800245a:	e018      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	695a      	ldr	r2, [r3, #20]
 8002460:	8bfb      	ldrh	r3, [r7, #30]
 8002462:	441a      	add	r2, r3
 8002464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002466:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 8002468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246a:	69da      	ldr	r2, [r3, #28]
 800246c:	8bfb      	ldrh	r3, [r7, #30]
 800246e:	441a      	add	r2, r3
 8002470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002472:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800247a:	4618      	mov	r0, r3
 800247c:	f001 ff96 	bl	80043ac <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002480:	e005      	b.n	800248e <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002482:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002484:	461a      	mov	r2, r3
 8002486:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f000 f91b 	bl	80026c4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002496:	b29b      	uxth	r3, r3
 8002498:	b21b      	sxth	r3, r3
 800249a:	2b00      	cmp	r3, #0
 800249c:	f6ff ad0a 	blt.w	8001eb4 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3738      	adds	r7, #56	; 0x38
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd80      	pop	{r7, pc}

080024aa <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80024aa:	b580      	push	{r7, lr}
 80024ac:	b088      	sub	sp, #32
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	60f8      	str	r0, [r7, #12]
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	4613      	mov	r3, r2
 80024b6:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024b8:	88fb      	ldrh	r3, [r7, #6]
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d07e      	beq.n	80025c0 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	3302      	adds	r3, #2
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	6812      	ldr	r2, [r2, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024e4:	881b      	ldrh	r3, [r3, #0]
 80024e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	699a      	ldr	r2, [r3, #24]
 80024f0:	8b7b      	ldrh	r3, [r7, #26]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d306      	bcc.n	8002504 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	699a      	ldr	r2, [r3, #24]
 80024fa:	8b7b      	ldrh	r3, [r7, #26]
 80024fc:	1ad2      	subs	r2, r2, r3
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	619a      	str	r2, [r3, #24]
 8002502:	e002      	b.n	800250a <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	2200      	movs	r2, #0
 8002508:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	699b      	ldr	r3, [r3, #24]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d123      	bne.n	800255a <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68bb      	ldr	r3, [r7, #8]
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	009b      	lsls	r3, r3, #2
 800251e:	4413      	add	r3, r2
 8002520:	881b      	ldrh	r3, [r3, #0]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002528:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800252c:	833b      	strh	r3, [r7, #24]
 800252e:	8b3b      	ldrh	r3, [r7, #24]
 8002530:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002534:	833b      	strh	r3, [r7, #24]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	009b      	lsls	r3, r3, #2
 8002542:	441a      	add	r2, r3
 8002544:	8b3b      	ldrh	r3, [r7, #24]
 8002546:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800254a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800254e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002552:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002556:	b29b      	uxth	r3, r3
 8002558:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800255a:	88fb      	ldrh	r3, [r7, #6]
 800255c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002560:	2b00      	cmp	r3, #0
 8002562:	d01f      	beq.n	80025a4 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	009b      	lsls	r3, r3, #2
 8002570:	4413      	add	r3, r2
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	b29b      	uxth	r3, r3
 8002576:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800257a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800257e:	82fb      	strh	r3, [r7, #22]
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	461a      	mov	r2, r3
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	781b      	ldrb	r3, [r3, #0]
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	441a      	add	r2, r3
 800258e:	8afb      	ldrh	r3, [r7, #22]
 8002590:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002594:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002598:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800259c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80025a0:	b29b      	uxth	r3, r3
 80025a2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80025a4:	8b7b      	ldrh	r3, [r7, #26]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 8087 	beq.w	80026ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6818      	ldr	r0, [r3, #0]
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	6959      	ldr	r1, [r3, #20]
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	891a      	ldrh	r2, [r3, #8]
 80025b8:	8b7b      	ldrh	r3, [r7, #26]
 80025ba:	f003 feb2 	bl	8006322 <USB_ReadPMA>
 80025be:	e07c      	b.n	80026ba <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	461a      	mov	r2, r3
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	3306      	adds	r3, #6
 80025d6:	005b      	lsls	r3, r3, #1
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	6812      	ldr	r2, [r2, #0]
 80025dc:	4413      	add	r3, r2
 80025de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80025e2:	881b      	ldrh	r3, [r3, #0]
 80025e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80025e8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	8b7b      	ldrh	r3, [r7, #26]
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d306      	bcc.n	8002602 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	699a      	ldr	r2, [r3, #24]
 80025f8:	8b7b      	ldrh	r3, [r7, #26]
 80025fa:	1ad2      	subs	r2, r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	619a      	str	r2, [r3, #24]
 8002600:	e002      	b.n	8002608 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2200      	movs	r2, #0
 8002606:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	699b      	ldr	r3, [r3, #24]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d123      	bne.n	8002658 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	461a      	mov	r2, r3
 8002616:	68bb      	ldr	r3, [r7, #8]
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	881b      	ldrh	r3, [r3, #0]
 8002620:	b29b      	uxth	r3, r3
 8002622:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002626:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262a:	83fb      	strh	r3, [r7, #30]
 800262c:	8bfb      	ldrh	r3, [r7, #30]
 800262e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002632:	83fb      	strh	r3, [r7, #30]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	441a      	add	r2, r3
 8002642:	8bfb      	ldrh	r3, [r7, #30]
 8002644:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002648:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800264c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002650:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002654:	b29b      	uxth	r3, r3
 8002656:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002658:	88fb      	ldrh	r3, [r7, #6]
 800265a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265e:	2b00      	cmp	r3, #0
 8002660:	d11f      	bne.n	80026a2 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	4413      	add	r3, r2
 8002670:	881b      	ldrh	r3, [r3, #0]
 8002672:	b29b      	uxth	r3, r3
 8002674:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800267c:	83bb      	strh	r3, [r7, #28]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	461a      	mov	r2, r3
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	441a      	add	r2, r3
 800268c:	8bbb      	ldrh	r3, [r7, #28]
 800268e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002692:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002696:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800269a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800269e:	b29b      	uxth	r3, r3
 80026a0:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80026a2:	8b7b      	ldrh	r3, [r7, #26]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	6959      	ldr	r1, [r3, #20]
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	895a      	ldrh	r2, [r3, #10]
 80026b4:	8b7b      	ldrh	r3, [r7, #26]
 80026b6:	f003 fe34 	bl	8006322 <USB_ReadPMA>
    }
  }

  return count;
 80026ba:	8b7b      	ldrh	r3, [r7, #26]
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3720      	adds	r7, #32
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b0a2      	sub	sp, #136	; 0x88
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	4613      	mov	r3, r2
 80026d0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80026d2:	88fb      	ldrh	r3, [r7, #6]
 80026d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 81c7 	beq.w	8002a6c <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026e6:	b29b      	uxth	r3, r3
 80026e8:	461a      	mov	r2, r3
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	00db      	lsls	r3, r3, #3
 80026f0:	4413      	add	r3, r2
 80026f2:	3302      	adds	r3, #2
 80026f4:	005b      	lsls	r3, r3, #1
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	6812      	ldr	r2, [r2, #0]
 80026fa:	4413      	add	r3, r2
 80026fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002700:	881b      	ldrh	r3, [r3, #0]
 8002702:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002706:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	699a      	ldr	r2, [r3, #24]
 800270e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002712:	429a      	cmp	r2, r3
 8002714:	d907      	bls.n	8002726 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002716:	68bb      	ldr	r3, [r7, #8]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800271e:	1ad2      	subs	r2, r2, r3
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	619a      	str	r2, [r3, #24]
 8002724:	e002      	b.n	800272c <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	2200      	movs	r2, #0
 800272a:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	2b00      	cmp	r3, #0
 8002732:	f040 80b9 	bne.w	80028a8 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002736:	68bb      	ldr	r3, [r7, #8]
 8002738:	785b      	ldrb	r3, [r3, #1]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d126      	bne.n	800278c <HAL_PCD_EP_DB_Transmit+0xc8>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800274c:	b29b      	uxth	r3, r3
 800274e:	461a      	mov	r2, r3
 8002750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002752:	4413      	add	r3, r2
 8002754:	62bb      	str	r3, [r7, #40]	; 0x28
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	011a      	lsls	r2, r3, #4
 800275c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800275e:	4413      	add	r3, r2
 8002760:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002764:	627b      	str	r3, [r7, #36]	; 0x24
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	881b      	ldrh	r3, [r3, #0]
 800276a:	b29b      	uxth	r3, r3
 800276c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002770:	b29a      	uxth	r2, r3
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	801a      	strh	r2, [r3, #0]
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	881b      	ldrh	r3, [r3, #0]
 800277a:	b29b      	uxth	r3, r3
 800277c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002780:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002784:	b29a      	uxth	r2, r3
 8002786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002788:	801a      	strh	r2, [r3, #0]
 800278a:	e01a      	b.n	80027c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	785b      	ldrb	r3, [r3, #1]
 8002790:	2b01      	cmp	r3, #1
 8002792:	d116      	bne.n	80027c2 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	633b      	str	r3, [r7, #48]	; 0x30
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	461a      	mov	r2, r3
 80027a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027a8:	4413      	add	r3, r2
 80027aa:	633b      	str	r3, [r7, #48]	; 0x30
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	011a      	lsls	r2, r3, #4
 80027b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027b4:	4413      	add	r3, r2
 80027b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027be:	2200      	movs	r2, #0
 80027c0:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	623b      	str	r3, [r7, #32]
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	785b      	ldrb	r3, [r3, #1]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d126      	bne.n	800281e <HAL_PCD_EP_DB_Transmit+0x15a>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	61bb      	str	r3, [r7, #24]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027de:	b29b      	uxth	r3, r3
 80027e0:	461a      	mov	r2, r3
 80027e2:	69bb      	ldr	r3, [r7, #24]
 80027e4:	4413      	add	r3, r2
 80027e6:	61bb      	str	r3, [r7, #24]
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	011a      	lsls	r2, r3, #4
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	4413      	add	r3, r2
 80027f2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
 80027fa:	881b      	ldrh	r3, [r3, #0]
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002802:	b29a      	uxth	r2, r3
 8002804:	697b      	ldr	r3, [r7, #20]
 8002806:	801a      	strh	r2, [r3, #0]
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	881b      	ldrh	r3, [r3, #0]
 800280c:	b29b      	uxth	r3, r3
 800280e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002812:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002816:	b29a      	uxth	r2, r3
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	801a      	strh	r2, [r3, #0]
 800281c:	e017      	b.n	800284e <HAL_PCD_EP_DB_Transmit+0x18a>
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	785b      	ldrb	r3, [r3, #1]
 8002822:	2b01      	cmp	r3, #1
 8002824:	d113      	bne.n	800284e <HAL_PCD_EP_DB_Transmit+0x18a>
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	6a3b      	ldr	r3, [r7, #32]
 8002834:	4413      	add	r3, r2
 8002836:	623b      	str	r3, [r7, #32]
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	011a      	lsls	r2, r3, #4
 800283e:	6a3b      	ldr	r3, [r7, #32]
 8002840:	4413      	add	r3, r2
 8002842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002846:	61fb      	str	r3, [r7, #28]
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2200      	movs	r2, #0
 800284c:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	4619      	mov	r1, r3
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f005 fb12 	bl	8007e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002860:	2b00      	cmp	r3, #0
 8002862:	f000 82d4 	beq.w	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	461a      	mov	r2, r3
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	009b      	lsls	r3, r3, #2
 8002872:	4413      	add	r3, r2
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	b29b      	uxth	r3, r3
 8002878:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800287c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002880:	827b      	strh	r3, [r7, #18]
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	8a7b      	ldrh	r3, [r7, #18]
 8002892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800289a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800289e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028a2:	b29b      	uxth	r3, r3
 80028a4:	8013      	strh	r3, [r2, #0]
 80028a6:	e2b2      	b.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d021      	beq.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	461a      	mov	r2, r3
 80028b8:	68bb      	ldr	r3, [r7, #8]
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	881b      	ldrh	r3, [r3, #0]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028cc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	461a      	mov	r2, r3
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	781b      	ldrb	r3, [r3, #0]
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	441a      	add	r2, r3
 80028de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80028e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	f040 8286 	bne.w	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	695a      	ldr	r2, [r3, #20]
 8002906:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290a:	441a      	add	r2, r3
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	69da      	ldr	r2, [r3, #28]
 8002914:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002918:	441a      	add	r2, r3
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	429a      	cmp	r2, r3
 8002928:	d309      	bcc.n	800293e <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	6a1a      	ldr	r2, [r3, #32]
 8002934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002936:	1ad2      	subs	r2, r2, r3
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	621a      	str	r2, [r3, #32]
 800293c:	e015      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	6a1b      	ldr	r3, [r3, #32]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d107      	bne.n	8002956 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002946:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800294a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002954:	e009      	b.n	800296a <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	2200      	movs	r2, #0
 8002968:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	785b      	ldrb	r3, [r3, #1]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d155      	bne.n	8002a1e <HAL_PCD_EP_DB_Transmit+0x35a>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	63bb      	str	r3, [r7, #56]	; 0x38
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002980:	b29b      	uxth	r3, r3
 8002982:	461a      	mov	r2, r3
 8002984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002986:	4413      	add	r3, r2
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	781b      	ldrb	r3, [r3, #0]
 800298e:	011a      	lsls	r2, r3, #4
 8002990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002992:	4413      	add	r3, r2
 8002994:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
 800299a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800299c:	2b00      	cmp	r3, #0
 800299e:	d112      	bne.n	80029c6 <HAL_PCD_EP_DB_Transmit+0x302>
 80029a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	b29b      	uxth	r3, r3
 80029a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ae:	801a      	strh	r2, [r3, #0]
 80029b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029be:	b29a      	uxth	r2, r3
 80029c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c2:	801a      	strh	r2, [r3, #0]
 80029c4:	e047      	b.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x392>
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	2b3e      	cmp	r3, #62	; 0x3e
 80029ca:	d811      	bhi.n	80029f0 <HAL_PCD_EP_DB_Transmit+0x32c>
 80029cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ce:	085b      	lsrs	r3, r3, #1
 80029d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d002      	beq.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x31e>
 80029dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029de:	3301      	adds	r3, #1
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	029b      	lsls	r3, r3, #10
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029ec:	801a      	strh	r2, [r3, #0]
 80029ee:	e032      	b.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x392>
 80029f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80029f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f8:	f003 031f 	and.w	r3, r3, #31
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d102      	bne.n	8002a06 <HAL_PCD_EP_DB_Transmit+0x342>
 8002a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a02:	3b01      	subs	r3, #1
 8002a04:	64bb      	str	r3, [r7, #72]	; 0x48
 8002a06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	029b      	lsls	r3, r3, #10
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a16:	b29a      	uxth	r2, r3
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	801a      	strh	r2, [r3, #0]
 8002a1c:	e01b      	b.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	785b      	ldrb	r3, [r3, #1]
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d117      	bne.n	8002a56 <HAL_PCD_EP_DB_Transmit+0x392>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	461a      	mov	r2, r3
 8002a38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a3a:	4413      	add	r3, r2
 8002a3c:	643b      	str	r3, [r7, #64]	; 0x40
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	011a      	lsls	r2, r3, #4
 8002a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a46:	4413      	add	r3, r2
 8002a48:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a50:	b29a      	uxth	r2, r3
 8002a52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a54:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	6959      	ldr	r1, [r3, #20]
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	891a      	ldrh	r2, [r3, #8]
 8002a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f003 fc17 	bl	8006298 <USB_WritePMA>
 8002a6a:	e1d0      	b.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	461a      	mov	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	00db      	lsls	r3, r3, #3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3306      	adds	r3, #6
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	6812      	ldr	r2, [r2, #0]
 8002a88:	4413      	add	r3, r2
 8002a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a8e:	881b      	ldrh	r3, [r3, #0]
 8002a90:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a94:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	699a      	ldr	r2, [r3, #24]
 8002a9c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d307      	bcc.n	8002ab4 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002aac:	1ad2      	subs	r2, r2, r3
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	619a      	str	r2, [r3, #24]
 8002ab2:	e002      	b.n	8002aba <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	f040 80c4 	bne.w	8002c4c <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	785b      	ldrb	r3, [r3, #1]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d126      	bne.n	8002b1a <HAL_PCD_EP_DB_Transmit+0x456>
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	461a      	mov	r2, r3
 8002ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ae0:	4413      	add	r3, r2
 8002ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002ae4:	68bb      	ldr	r3, [r7, #8]
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	011a      	lsls	r2, r3, #4
 8002aea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002aec:	4413      	add	r3, r2
 8002aee:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002af2:	66bb      	str	r3, [r7, #104]	; 0x68
 8002af4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b02:	801a      	strh	r2, [r3, #0]
 8002b04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b06:	881b      	ldrh	r3, [r3, #0]
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b12:	b29a      	uxth	r2, r3
 8002b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b16:	801a      	strh	r2, [r3, #0]
 8002b18:	e01a      	b.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	785b      	ldrb	r3, [r3, #1]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d116      	bne.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	677b      	str	r3, [r7, #116]	; 0x74
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b30:	b29b      	uxth	r3, r3
 8002b32:	461a      	mov	r2, r3
 8002b34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b36:	4413      	add	r3, r2
 8002b38:	677b      	str	r3, [r7, #116]	; 0x74
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	011a      	lsls	r2, r3, #4
 8002b40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b42:	4413      	add	r3, r2
 8002b44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002b48:	673b      	str	r3, [r7, #112]	; 0x70
 8002b4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	785b      	ldrb	r3, [r3, #1]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d12f      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	461a      	mov	r2, r3
 8002b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b76:	4413      	add	r3, r2
 8002b78:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	011a      	lsls	r2, r3, #4
 8002b82:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b86:	4413      	add	r3, r2
 8002b88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba2:	801a      	strh	r2, [r3, #0]
 8002ba4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ba8:	881b      	ldrh	r3, [r3, #0]
 8002baa:	b29b      	uxth	r3, r3
 8002bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002bba:	801a      	strh	r2, [r3, #0]
 8002bbc:	e017      	b.n	8002bee <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	785b      	ldrb	r3, [r3, #1]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d113      	bne.n	8002bee <HAL_PCD_EP_DB_Transmit+0x52a>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd4:	4413      	add	r3, r2
 8002bd6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	011a      	lsls	r2, r3, #4
 8002bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002be0:	4413      	add	r3, r2
 8002be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002be6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002be8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bea:	2200      	movs	r2, #0
 8002bec:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	4619      	mov	r1, r3
 8002bf4:	68f8      	ldr	r0, [r7, #12]
 8002bf6:	f005 f942 	bl	8007e7e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8104 	bne.w	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	4413      	add	r3, r2
 8002c14:	881b      	ldrh	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c20:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	781b      	ldrb	r3, [r3, #0]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	441a      	add	r2, r3
 8002c32:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002c36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c46:	b29b      	uxth	r3, r3
 8002c48:	8013      	strh	r3, [r2, #0]
 8002c4a:	e0e0      	b.n	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002c4c:	88fb      	ldrh	r3, [r7, #6]
 8002c4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d121      	bne.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	461a      	mov	r2, r3
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	4413      	add	r3, r2
 8002c64:	881b      	ldrh	r3, [r3, #0]
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	441a      	add	r2, r3
 8002c82:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c86:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c8e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	f040 80b4 	bne.w	8002e0e <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002ca6:	68bb      	ldr	r3, [r7, #8]
 8002ca8:	695a      	ldr	r2, [r3, #20]
 8002caa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cae:	441a      	add	r2, r3
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	69da      	ldr	r2, [r3, #28]
 8002cb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cbc:	441a      	add	r2, r3
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	6a1a      	ldr	r2, [r3, #32]
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d309      	bcc.n	8002ce2 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	6a1a      	ldr	r2, [r3, #32]
 8002cd8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cda:	1ad2      	subs	r2, r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	621a      	str	r2, [r3, #32]
 8002ce0:	e015      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d107      	bne.n	8002cfa <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002cea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002cf8:	e009      	b.n	8002d0e <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	2200      	movs	r2, #0
 8002d04:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	667b      	str	r3, [r7, #100]	; 0x64
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	785b      	ldrb	r3, [r3, #1]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d155      	bne.n	8002dc8 <HAL_PCD_EP_DB_Transmit+0x704>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d30:	4413      	add	r3, r2
 8002d32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	011a      	lsls	r2, r3, #4
 8002d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d3c:	4413      	add	r3, r2
 8002d3e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d42:	65bb      	str	r3, [r7, #88]	; 0x58
 8002d44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d112      	bne.n	8002d70 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002d4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d4c:	881b      	ldrh	r3, [r3, #0]
 8002d4e:	b29b      	uxth	r3, r3
 8002d50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d54:	b29a      	uxth	r2, r3
 8002d56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d58:	801a      	strh	r2, [r3, #0]
 8002d5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d5c:	881b      	ldrh	r3, [r3, #0]
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	e044      	b.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002d70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d72:	2b3e      	cmp	r3, #62	; 0x3e
 8002d74:	d811      	bhi.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d88:	3301      	adds	r3, #1
 8002d8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	029b      	lsls	r3, r3, #10
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	e02f      	b.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002d9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d9c:	095b      	lsrs	r3, r3, #5
 8002d9e:	657b      	str	r3, [r7, #84]	; 0x54
 8002da0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da2:	f003 031f 	and.w	r3, r3, #31
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d102      	bne.n	8002db0 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002dac:	3b01      	subs	r3, #1
 8002dae:	657b      	str	r3, [r7, #84]	; 0x54
 8002db0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db2:	b29b      	uxth	r3, r3
 8002db4:	029b      	lsls	r3, r3, #10
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002dbc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002dc4:	801a      	strh	r2, [r3, #0]
 8002dc6:	e018      	b.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	785b      	ldrb	r3, [r3, #1]
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d114      	bne.n	8002dfa <HAL_PCD_EP_DB_Transmit+0x736>
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dde:	4413      	add	r3, r2
 8002de0:	667b      	str	r3, [r7, #100]	; 0x64
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	011a      	lsls	r2, r3, #4
 8002de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dea:	4413      	add	r3, r2
 8002dec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002df0:	663b      	str	r3, [r7, #96]	; 0x60
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002df8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	6818      	ldr	r0, [r3, #0]
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	6959      	ldr	r1, [r3, #20]
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	895a      	ldrh	r2, [r3, #10]
 8002e06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	f003 fa45 	bl	8006298 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	461a      	mov	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	4413      	add	r3, r2
 8002e1c:	881b      	ldrh	r3, [r3, #0]
 8002e1e:	b29b      	uxth	r3, r3
 8002e20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e28:	823b      	strh	r3, [r7, #16]
 8002e2a:	8a3b      	ldrh	r3, [r7, #16]
 8002e2c:	f083 0310 	eor.w	r3, r3, #16
 8002e30:	823b      	strh	r3, [r7, #16]
 8002e32:	8a3b      	ldrh	r3, [r7, #16]
 8002e34:	f083 0320 	eor.w	r3, r3, #32
 8002e38:	823b      	strh	r3, [r7, #16]
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	441a      	add	r2, r3
 8002e48:	8a3b      	ldrh	r3, [r7, #16]
 8002e4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3788      	adds	r7, #136	; 0x88
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b087      	sub	sp, #28
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	607b      	str	r3, [r7, #4]
 8002e72:	460b      	mov	r3, r1
 8002e74:	817b      	strh	r3, [r7, #10]
 8002e76:	4613      	mov	r3, r2
 8002e78:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e7a:	897b      	ldrh	r3, [r7, #10]
 8002e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e80:	b29b      	uxth	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00b      	beq.n	8002e9e <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e86:	897b      	ldrh	r3, [r7, #10]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	00db      	lsls	r3, r3, #3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	4413      	add	r3, r2
 8002e9a:	617b      	str	r3, [r7, #20]
 8002e9c:	e009      	b.n	8002eb2 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e9e:	897a      	ldrh	r2, [r7, #10]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	4413      	add	r3, r2
 8002ea6:	00db      	lsls	r3, r3, #3
 8002ea8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002eac:	68fa      	ldr	r2, [r7, #12]
 8002eae:	4413      	add	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002eb2:	893b      	ldrh	r3, [r7, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d107      	bne.n	8002ec8 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	80da      	strh	r2, [r3, #6]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	371c      	adds	r7, #28
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr

08002eec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b086      	sub	sp, #24
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e272      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0301 	and.w	r3, r3, #1
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 8087 	beq.w	800301a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f0c:	4b92      	ldr	r3, [pc, #584]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d00c      	beq.n	8002f32 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f18:	4b8f      	ldr	r3, [pc, #572]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f003 030c 	and.w	r3, r3, #12
 8002f20:	2b08      	cmp	r3, #8
 8002f22:	d112      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5e>
 8002f24:	4b8c      	ldr	r3, [pc, #560]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f30:	d10b      	bne.n	8002f4a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f32:	4b89      	ldr	r3, [pc, #548]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d06c      	beq.n	8003018 <HAL_RCC_OscConfig+0x12c>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d168      	bne.n	8003018 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e24c      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d106      	bne.n	8002f62 <HAL_RCC_OscConfig+0x76>
 8002f54:	4b80      	ldr	r3, [pc, #512]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a7f      	ldr	r2, [pc, #508]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	e02e      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10c      	bne.n	8002f84 <HAL_RCC_OscConfig+0x98>
 8002f6a:	4b7b      	ldr	r3, [pc, #492]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a7a      	ldr	r2, [pc, #488]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b78      	ldr	r3, [pc, #480]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f80:	6013      	str	r3, [r2, #0]
 8002f82:	e01d      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f8c:	d10c      	bne.n	8002fa8 <HAL_RCC_OscConfig+0xbc>
 8002f8e:	4b72      	ldr	r3, [pc, #456]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a71      	ldr	r2, [pc, #452]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	4b6f      	ldr	r3, [pc, #444]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a6e      	ldr	r2, [pc, #440]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fa4:	6013      	str	r3, [r2, #0]
 8002fa6:	e00b      	b.n	8002fc0 <HAL_RCC_OscConfig+0xd4>
 8002fa8:	4b6b      	ldr	r3, [pc, #428]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a6a      	ldr	r2, [pc, #424]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fb2:	6013      	str	r3, [r2, #0]
 8002fb4:	4b68      	ldr	r3, [pc, #416]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a67      	ldr	r2, [pc, #412]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fbe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d013      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fe f9b6 	bl	8001338 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd0:	f7fe f9b2 	bl	8001338 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b64      	cmp	r3, #100	; 0x64
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e200      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe2:	4b5d      	ldr	r3, [pc, #372]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0xe4>
 8002fee:	e014      	b.n	800301a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff0:	f7fe f9a2 	bl	8001338 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ff8:	f7fe f99e 	bl	8001338 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b64      	cmp	r3, #100	; 0x64
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e1ec      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300a:	4b53      	ldr	r3, [pc, #332]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d1f0      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x10c>
 8003016:	e000      	b.n	800301a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003018:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d063      	beq.n	80030ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003026:	4b4c      	ldr	r3, [pc, #304]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003032:	4b49      	ldr	r3, [pc, #292]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f003 030c 	and.w	r3, r3, #12
 800303a:	2b08      	cmp	r3, #8
 800303c:	d11c      	bne.n	8003078 <HAL_RCC_OscConfig+0x18c>
 800303e:	4b46      	ldr	r3, [pc, #280]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d116      	bne.n	8003078 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800304a:	4b43      	ldr	r3, [pc, #268]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 0302 	and.w	r3, r3, #2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d005      	beq.n	8003062 <HAL_RCC_OscConfig+0x176>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d001      	beq.n	8003062 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e1c0      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003062:	4b3d      	ldr	r3, [pc, #244]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	4939      	ldr	r1, [pc, #228]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003072:	4313      	orrs	r3, r2
 8003074:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003076:	e03a      	b.n	80030ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d020      	beq.n	80030c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003080:	4b36      	ldr	r3, [pc, #216]	; (800315c <HAL_RCC_OscConfig+0x270>)
 8003082:	2201      	movs	r2, #1
 8003084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003086:	f7fe f957 	bl	8001338 <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308c:	e008      	b.n	80030a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308e:	f7fe f953 	bl	8001338 <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	2b02      	cmp	r3, #2
 800309a:	d901      	bls.n	80030a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e1a1      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a0:	4b2d      	ldr	r3, [pc, #180]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d0f0      	beq.n	800308e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ac:	4b2a      	ldr	r3, [pc, #168]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4927      	ldr	r1, [pc, #156]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	600b      	str	r3, [r1, #0]
 80030c0:	e015      	b.n	80030ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c2:	4b26      	ldr	r3, [pc, #152]	; (800315c <HAL_RCC_OscConfig+0x270>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe f936 	bl	8001338 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d0:	f7fe f932 	bl	8001338 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e180      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e2:	4b1d      	ldr	r3, [pc, #116]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0302 	and.w	r3, r3, #2
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d03a      	beq.n	8003170 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	699b      	ldr	r3, [r3, #24]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d019      	beq.n	8003136 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003102:	4b17      	ldr	r3, [pc, #92]	; (8003160 <HAL_RCC_OscConfig+0x274>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003108:	f7fe f916 	bl	8001338 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003110:	f7fe f912 	bl	8001338 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e160      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003122:	4b0d      	ldr	r3, [pc, #52]	; (8003158 <HAL_RCC_OscConfig+0x26c>)
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800312e:	2001      	movs	r0, #1
 8003130:	f000 faa6 	bl	8003680 <RCC_Delay>
 8003134:	e01c      	b.n	8003170 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003136:	4b0a      	ldr	r3, [pc, #40]	; (8003160 <HAL_RCC_OscConfig+0x274>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313c:	f7fe f8fc 	bl	8001338 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003142:	e00f      	b.n	8003164 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003144:	f7fe f8f8 	bl	8001338 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d908      	bls.n	8003164 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e146      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	42420000 	.word	0x42420000
 8003160:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b92      	ldr	r3, [pc, #584]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1e9      	bne.n	8003144 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80a6 	beq.w	80032ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b8b      	ldr	r3, [pc, #556]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10d      	bne.n	80031aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	4a87      	ldr	r2, [pc, #540]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003198:	61d3      	str	r3, [r2, #28]
 800319a:	4b85      	ldr	r3, [pc, #532]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031a6:	2301      	movs	r3, #1
 80031a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031aa:	4b82      	ldr	r3, [pc, #520]	; (80033b4 <HAL_RCC_OscConfig+0x4c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d118      	bne.n	80031e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b6:	4b7f      	ldr	r3, [pc, #508]	; (80033b4 <HAL_RCC_OscConfig+0x4c8>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a7e      	ldr	r2, [pc, #504]	; (80033b4 <HAL_RCC_OscConfig+0x4c8>)
 80031bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c2:	f7fe f8b9 	bl	8001338 <HAL_GetTick>
 80031c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c8:	e008      	b.n	80031dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ca:	f7fe f8b5 	bl	8001338 <HAL_GetTick>
 80031ce:	4602      	mov	r2, r0
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	2b64      	cmp	r3, #100	; 0x64
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e103      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	4b75      	ldr	r3, [pc, #468]	; (80033b4 <HAL_RCC_OscConfig+0x4c8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0f0      	beq.n	80031ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d106      	bne.n	80031fe <HAL_RCC_OscConfig+0x312>
 80031f0:	4b6f      	ldr	r3, [pc, #444]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4a6e      	ldr	r2, [pc, #440]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80031f6:	f043 0301 	orr.w	r3, r3, #1
 80031fa:	6213      	str	r3, [r2, #32]
 80031fc:	e02d      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d10c      	bne.n	8003220 <HAL_RCC_OscConfig+0x334>
 8003206:	4b6a      	ldr	r3, [pc, #424]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a69      	ldr	r2, [pc, #420]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0301 	bic.w	r3, r3, #1
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	4b67      	ldr	r3, [pc, #412]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	4a66      	ldr	r2, [pc, #408]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003218:	f023 0304 	bic.w	r3, r3, #4
 800321c:	6213      	str	r3, [r2, #32]
 800321e:	e01c      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	2b05      	cmp	r3, #5
 8003226:	d10c      	bne.n	8003242 <HAL_RCC_OscConfig+0x356>
 8003228:	4b61      	ldr	r3, [pc, #388]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a60      	ldr	r2, [pc, #384]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	f043 0304 	orr.w	r3, r3, #4
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	4b5e      	ldr	r3, [pc, #376]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003236:	6a1b      	ldr	r3, [r3, #32]
 8003238:	4a5d      	ldr	r2, [pc, #372]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	f043 0301 	orr.w	r3, r3, #1
 800323e:	6213      	str	r3, [r2, #32]
 8003240:	e00b      	b.n	800325a <HAL_RCC_OscConfig+0x36e>
 8003242:	4b5b      	ldr	r3, [pc, #364]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a5a      	ldr	r2, [pc, #360]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 0301 	bic.w	r3, r3, #1
 800324c:	6213      	str	r3, [r2, #32]
 800324e:	4b58      	ldr	r3, [pc, #352]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	4a57      	ldr	r2, [pc, #348]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003254:	f023 0304 	bic.w	r3, r3, #4
 8003258:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d015      	beq.n	800328e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003262:	f7fe f869 	bl	8001338 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326a:	f7fe f865 	bl	8001338 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	f241 3288 	movw	r2, #5000	; 0x1388
 8003278:	4293      	cmp	r3, r2
 800327a:	d901      	bls.n	8003280 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800327c:	2303      	movs	r3, #3
 800327e:	e0b1      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d0ee      	beq.n	800326a <HAL_RCC_OscConfig+0x37e>
 800328c:	e014      	b.n	80032b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800328e:	f7fe f853 	bl	8001338 <HAL_GetTick>
 8003292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003294:	e00a      	b.n	80032ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003296:	f7fe f84f 	bl	8001338 <HAL_GetTick>
 800329a:	4602      	mov	r2, r0
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d901      	bls.n	80032ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e09b      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ac:	4b40      	ldr	r3, [pc, #256]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	f003 0302 	and.w	r3, r3, #2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d1ee      	bne.n	8003296 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032b8:	7dfb      	ldrb	r3, [r7, #23]
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d105      	bne.n	80032ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032be:	4b3c      	ldr	r3, [pc, #240]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	4a3b      	ldr	r2, [pc, #236]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80032c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8087 	beq.w	80033e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032d4:	4b36      	ldr	r3, [pc, #216]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 80032d6:	685b      	ldr	r3, [r3, #4]
 80032d8:	f003 030c 	and.w	r3, r3, #12
 80032dc:	2b08      	cmp	r3, #8
 80032de:	d061      	beq.n	80033a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d146      	bne.n	8003376 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032e8:	4b33      	ldr	r3, [pc, #204]	; (80033b8 <HAL_RCC_OscConfig+0x4cc>)
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ee:	f7fe f823 	bl	8001338 <HAL_GetTick>
 80032f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032f4:	e008      	b.n	8003308 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032f6:	f7fe f81f 	bl	8001338 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	2b02      	cmp	r3, #2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e06d      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003308:	4b29      	ldr	r3, [pc, #164]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f0      	bne.n	80032f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331c:	d108      	bne.n	8003330 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800331e:	4b24      	ldr	r3, [pc, #144]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	4921      	ldr	r1, [pc, #132]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003330:	4b1f      	ldr	r3, [pc, #124]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	6a19      	ldr	r1, [r3, #32]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003340:	430b      	orrs	r3, r1
 8003342:	491b      	ldr	r1, [pc, #108]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003344:	4313      	orrs	r3, r2
 8003346:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <HAL_RCC_OscConfig+0x4cc>)
 800334a:	2201      	movs	r2, #1
 800334c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334e:	f7fd fff3 	bl	8001338 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003354:	e008      	b.n	8003368 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fd ffef 	bl	8001338 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d901      	bls.n	8003368 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e03d      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003368:	4b11      	ldr	r3, [pc, #68]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0f0      	beq.n	8003356 <HAL_RCC_OscConfig+0x46a>
 8003374:	e035      	b.n	80033e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003376:	4b10      	ldr	r3, [pc, #64]	; (80033b8 <HAL_RCC_OscConfig+0x4cc>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fd ffdc 	bl	8001338 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003384:	f7fd ffd8 	bl	8001338 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e026      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003396:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_RCC_OscConfig+0x4c4>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x498>
 80033a2:	e01e      	b.n	80033e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d107      	bne.n	80033bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e019      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
 80033b0:	40021000 	.word	0x40021000
 80033b4:	40007000 	.word	0x40007000
 80033b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033bc:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <HAL_RCC_OscConfig+0x500>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d106      	bne.n	80033de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033da:	429a      	cmp	r2, r3
 80033dc:	d001      	beq.n	80033e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033e2:	2300      	movs	r3, #0
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40021000 	.word	0x40021000

080033f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d101      	bne.n	8003404 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e0d0      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003404:	4b6a      	ldr	r3, [pc, #424]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f003 0307 	and.w	r3, r3, #7
 800340c:	683a      	ldr	r2, [r7, #0]
 800340e:	429a      	cmp	r2, r3
 8003410:	d910      	bls.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003412:	4b67      	ldr	r3, [pc, #412]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f023 0207 	bic.w	r2, r3, #7
 800341a:	4965      	ldr	r1, [pc, #404]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	4313      	orrs	r3, r2
 8003420:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003422:	4b63      	ldr	r3, [pc, #396]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	683a      	ldr	r2, [r7, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d001      	beq.n	8003434 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e0b8      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0302 	and.w	r3, r3, #2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d020      	beq.n	8003482 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 0304 	and.w	r3, r3, #4
 8003448:	2b00      	cmp	r3, #0
 800344a:	d005      	beq.n	8003458 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	4a58      	ldr	r2, [pc, #352]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003456:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d005      	beq.n	8003470 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003464:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	4a52      	ldr	r2, [pc, #328]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800346a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800346e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003470:	4b50      	ldr	r3, [pc, #320]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	494d      	ldr	r1, [pc, #308]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800347e:	4313      	orrs	r3, r2
 8003480:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	d040      	beq.n	8003510 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	2b01      	cmp	r3, #1
 8003494:	d107      	bne.n	80034a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003496:	4b47      	ldr	r3, [pc, #284]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d115      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e07f      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	2b02      	cmp	r3, #2
 80034ac:	d107      	bne.n	80034be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ae:	4b41      	ldr	r3, [pc, #260]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d109      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e073      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0302 	and.w	r3, r3, #2
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e06b      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f023 0203 	bic.w	r2, r3, #3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	4936      	ldr	r1, [pc, #216]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 80034dc:	4313      	orrs	r3, r2
 80034de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034e0:	f7fd ff2a 	bl	8001338 <HAL_GetTick>
 80034e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034e8:	f7fd ff26 	bl	8001338 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e053      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f003 020c 	and.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	429a      	cmp	r2, r3
 800350e:	d1eb      	bne.n	80034e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003510:	4b27      	ldr	r3, [pc, #156]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f003 0307 	and.w	r3, r3, #7
 8003518:	683a      	ldr	r2, [r7, #0]
 800351a:	429a      	cmp	r2, r3
 800351c:	d210      	bcs.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800351e:	4b24      	ldr	r3, [pc, #144]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f023 0207 	bic.w	r2, r3, #7
 8003526:	4922      	ldr	r1, [pc, #136]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	4313      	orrs	r3, r2
 800352c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800352e:	4b20      	ldr	r3, [pc, #128]	; (80035b0 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	429a      	cmp	r2, r3
 800353a:	d001      	beq.n	8003540 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e032      	b.n	80035a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0304 	and.w	r3, r3, #4
 8003548:	2b00      	cmp	r3, #0
 800354a:	d008      	beq.n	800355e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800354c:	4b19      	ldr	r3, [pc, #100]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	4916      	ldr	r1, [pc, #88]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800355a:	4313      	orrs	r3, r2
 800355c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f003 0308 	and.w	r3, r3, #8
 8003566:	2b00      	cmp	r3, #0
 8003568:	d009      	beq.n	800357e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800356a:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	490e      	ldr	r1, [pc, #56]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800357e:	f000 f821 	bl	80035c4 <HAL_RCC_GetSysClockFreq>
 8003582:	4602      	mov	r2, r0
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	091b      	lsrs	r3, r3, #4
 800358a:	f003 030f 	and.w	r3, r3, #15
 800358e:	490a      	ldr	r1, [pc, #40]	; (80035b8 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	5ccb      	ldrb	r3, [r1, r3]
 8003592:	fa22 f303 	lsr.w	r3, r2, r3
 8003596:	4a09      	ldr	r2, [pc, #36]	; (80035bc <HAL_RCC_ClockConfig+0x1cc>)
 8003598:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800359a:	4b09      	ldr	r3, [pc, #36]	; (80035c0 <HAL_RCC_ClockConfig+0x1d0>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7fd fe9a 	bl	80012d8 <HAL_InitTick>

  return HAL_OK;
 80035a4:	2300      	movs	r3, #0
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3710      	adds	r7, #16
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}
 80035ae:	bf00      	nop
 80035b0:	40022000 	.word	0x40022000
 80035b4:	40021000 	.word	0x40021000
 80035b8:	080083f4 	.word	0x080083f4
 80035bc:	20000008 	.word	0x20000008
 80035c0:	2000000c 	.word	0x2000000c

080035c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035c4:	b490      	push	{r4, r7}
 80035c6:	b08a      	sub	sp, #40	; 0x28
 80035c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035ca:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_GetSysClockFreq+0xac>)
 80035cc:	1d3c      	adds	r4, r7, #4
 80035ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035d4:	f240 2301 	movw	r3, #513	; 0x201
 80035d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035da:	2300      	movs	r3, #0
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	2300      	movs	r3, #0
 80035e0:	61bb      	str	r3, [r7, #24]
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035ea:	2300      	movs	r3, #0
 80035ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035ee:	4b21      	ldr	r3, [pc, #132]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 030c 	and.w	r3, r3, #12
 80035fa:	2b04      	cmp	r3, #4
 80035fc:	d002      	beq.n	8003604 <HAL_RCC_GetSysClockFreq+0x40>
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d003      	beq.n	800360a <HAL_RCC_GetSysClockFreq+0x46>
 8003602:	e02b      	b.n	800365c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003604:	4b1c      	ldr	r3, [pc, #112]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003606:	623b      	str	r3, [r7, #32]
      break;
 8003608:	e02b      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	0c9b      	lsrs	r3, r3, #18
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	443b      	add	r3, r7
 8003616:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800361a:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d012      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003626:	4b13      	ldr	r3, [pc, #76]	; (8003674 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	0c5b      	lsrs	r3, r3, #17
 800362c:	f003 0301 	and.w	r3, r3, #1
 8003630:	3328      	adds	r3, #40	; 0x28
 8003632:	443b      	add	r3, r7
 8003634:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003638:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	4a0e      	ldr	r2, [pc, #56]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 800363e:	fb03 f202 	mul.w	r2, r3, r2
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
 800364a:	e004      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	4a0b      	ldr	r2, [pc, #44]	; (800367c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003650:	fb02 f303 	mul.w	r3, r2, r3
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003658:	623b      	str	r3, [r7, #32]
      break;
 800365a:	e002      	b.n	8003662 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800365c:	4b06      	ldr	r3, [pc, #24]	; (8003678 <HAL_RCC_GetSysClockFreq+0xb4>)
 800365e:	623b      	str	r3, [r7, #32]
      break;
 8003660:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003662:	6a3b      	ldr	r3, [r7, #32]
}
 8003664:	4618      	mov	r0, r3
 8003666:	3728      	adds	r7, #40	; 0x28
 8003668:	46bd      	mov	sp, r7
 800366a:	bc90      	pop	{r4, r7}
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	0800839c 	.word	0x0800839c
 8003674:	40021000 	.word	0x40021000
 8003678:	007a1200 	.word	0x007a1200
 800367c:	003d0900 	.word	0x003d0900

08003680 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003680:	b480      	push	{r7}
 8003682:	b085      	sub	sp, #20
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003688:	4b0a      	ldr	r3, [pc, #40]	; (80036b4 <RCC_Delay+0x34>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a0a      	ldr	r2, [pc, #40]	; (80036b8 <RCC_Delay+0x38>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	0a5b      	lsrs	r3, r3, #9
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	fb02 f303 	mul.w	r3, r2, r3
 800369a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800369c:	bf00      	nop
  }
  while (Delay --);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	1e5a      	subs	r2, r3, #1
 80036a2:	60fa      	str	r2, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1f9      	bne.n	800369c <RCC_Delay+0x1c>
}
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bc80      	pop	{r7}
 80036b2:	4770      	bx	lr
 80036b4:	20000008 	.word	0x20000008
 80036b8:	10624dd3 	.word	0x10624dd3

080036bc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b086      	sub	sp, #24
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	613b      	str	r3, [r7, #16]
 80036c8:	2300      	movs	r3, #0
 80036ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d07d      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80036d8:	2300      	movs	r3, #0
 80036da:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036dc:	4b4f      	ldr	r3, [pc, #316]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10d      	bne.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036e8:	4b4c      	ldr	r3, [pc, #304]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ea:	69db      	ldr	r3, [r3, #28]
 80036ec:	4a4b      	ldr	r2, [pc, #300]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036f2:	61d3      	str	r3, [r2, #28]
 80036f4:	4b49      	ldr	r3, [pc, #292]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036f6:	69db      	ldr	r3, [r3, #28]
 80036f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036fc:	60bb      	str	r3, [r7, #8]
 80036fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003700:	2301      	movs	r3, #1
 8003702:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003704:	4b46      	ldr	r3, [pc, #280]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370c:	2b00      	cmp	r3, #0
 800370e:	d118      	bne.n	8003742 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800371a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800371c:	f7fd fe0c 	bl	8001338 <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003722:	e008      	b.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003724:	f7fd fe08 	bl	8001338 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b64      	cmp	r3, #100	; 0x64
 8003730:	d901      	bls.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e06d      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003736:	4b3a      	ldr	r3, [pc, #232]	; (8003820 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f0      	beq.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003742:	4b36      	ldr	r3, [pc, #216]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800374a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02e      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	429a      	cmp	r2, r3
 800375e:	d027      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003760:	4b2e      	ldr	r3, [pc, #184]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003768:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800376a:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800376c:	2201      	movs	r2, #1
 800376e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003770:	4b2c      	ldr	r3, [pc, #176]	; (8003824 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003776:	4a29      	ldr	r2, [pc, #164]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b00      	cmp	r3, #0
 8003784:	d014      	beq.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003786:	f7fd fdd7 	bl	8001338 <HAL_GetTick>
 800378a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800378c:	e00a      	b.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800378e:	f7fd fdd3 	bl	8001338 <HAL_GetTick>
 8003792:	4602      	mov	r2, r0
 8003794:	693b      	ldr	r3, [r7, #16]
 8003796:	1ad3      	subs	r3, r2, r3
 8003798:	f241 3288 	movw	r2, #5000	; 0x1388
 800379c:	4293      	cmp	r3, r2
 800379e:	d901      	bls.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037a0:	2303      	movs	r3, #3
 80037a2:	e036      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037a4:	4b1d      	ldr	r3, [pc, #116]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f003 0302 	and.w	r3, r3, #2
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d0ee      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80037b0:	4b1a      	ldr	r3, [pc, #104]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037b2:	6a1b      	ldr	r3, [r3, #32]
 80037b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	4917      	ldr	r1, [pc, #92]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80037c2:	7dfb      	ldrb	r3, [r7, #23]
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d105      	bne.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c8:	4b14      	ldr	r3, [pc, #80]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ca:	69db      	ldr	r3, [r3, #28]
 80037cc:	4a13      	ldr	r2, [pc, #76]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037d2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d008      	beq.n	80037f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80037e0:	4b0e      	ldr	r3, [pc, #56]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	490b      	ldr	r1, [pc, #44]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d008      	beq.n	8003810 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80037fe:	4b07      	ldr	r3, [pc, #28]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	695b      	ldr	r3, [r3, #20]
 800380a:	4904      	ldr	r1, [pc, #16]	; (800381c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380c:	4313      	orrs	r3, r2
 800380e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003810:	2300      	movs	r3, #0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40021000 	.word	0x40021000
 8003820:	40007000 	.word	0x40007000
 8003824:	42420440 	.word	0x42420440

08003828 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003828:	b084      	sub	sp, #16
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
 8003832:	f107 0014 	add.w	r0, r7, #20
 8003836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800383a:	2300      	movs	r3, #0
}
 800383c:	4618      	mov	r0, r3
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bc80      	pop	{r7}
 8003844:	b004      	add	sp, #16
 8003846:	4770      	bx	lr

08003848 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003858:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800385c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	b29a      	uxth	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3714      	adds	r7, #20
 800386e:	46bd      	mov	sp, r7
 8003870:	bc80      	pop	{r7}
 8003872:	4770      	bx	lr

08003874 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800387c:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003880:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003888:	b29a      	uxth	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	b29b      	uxth	r3, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	b29b      	uxth	r3, r3
 8003892:	4013      	ands	r3, r2
 8003894:	b29a      	uxth	r2, r3
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3714      	adds	r7, #20
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bc80      	pop	{r7}
 80038a6:	4770      	bx	lr

080038a8 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b083      	sub	sp, #12
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	460b      	mov	r3, r1
 80038b2:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	370c      	adds	r7, #12
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bc80      	pop	{r7}
 80038be:	4770      	bx	lr

080038c0 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80038c0:	b084      	sub	sp, #16
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	f107 0014 	add.w	r0, r7, #20
 80038ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2200      	movs	r2, #0
 80038de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2200      	movs	r2, #0
 80038ee:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	b004      	add	sp, #16
 80038fe:	4770      	bx	lr

08003900 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003900:	b480      	push	{r7}
 8003902:	b09b      	sub	sp, #108	; 0x6c
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
 8003908:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	881b      	ldrh	r3, [r3, #0]
 800391c:	b29b      	uxth	r3, r3
 800391e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003926:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	78db      	ldrb	r3, [r3, #3]
 800392e:	2b03      	cmp	r3, #3
 8003930:	d81f      	bhi.n	8003972 <USB_ActivateEndpoint+0x72>
 8003932:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <USB_ActivateEndpoint+0x38>)
 8003934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003938:	08003949 	.word	0x08003949
 800393c:	08003965 	.word	0x08003965
 8003940:	0800397b 	.word	0x0800397b
 8003944:	08003957 	.word	0x08003957
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003948:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800394c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003950:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003954:	e012      	b.n	800397c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003956:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800395a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800395e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003962:	e00b      	b.n	800397c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003964:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003968:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800396c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003970:	e004      	b.n	800397c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003978:	e000      	b.n	800397c <USB_ActivateEndpoint+0x7c>
      break;
 800397a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800397c:	687a      	ldr	r2, [r7, #4]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	441a      	add	r2, r3
 8003986:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800398a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800398e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800399a:	b29b      	uxth	r3, r3
 800399c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	4413      	add	r3, r2
 80039a8:	881b      	ldrh	r3, [r3, #0]
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039b4:	b29a      	uxth	r2, r3
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	b29b      	uxth	r3, r3
 80039bc:	4313      	orrs	r3, r2
 80039be:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	441a      	add	r2, r3
 80039cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80039d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	7b1b      	ldrb	r3, [r3, #12]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	f040 8149 	bne.w	8003c80 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	785b      	ldrb	r3, [r3, #1]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 8084 	beq.w	8003b00 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	461a      	mov	r2, r3
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	4413      	add	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	011a      	lsls	r2, r3, #4
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a1a:	613b      	str	r3, [r7, #16]
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	88db      	ldrh	r3, [r3, #6]
 8003a20:	085b      	lsrs	r3, r3, #1
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003a2c:	687a      	ldr	r2, [r7, #4]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	4413      	add	r3, r2
 8003a36:	881b      	ldrh	r3, [r3, #0]
 8003a38:	81fb      	strh	r3, [r7, #14]
 8003a3a:	89fb      	ldrh	r3, [r7, #14]
 8003a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d01b      	beq.n	8003a7c <USB_ActivateEndpoint+0x17c>
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4413      	add	r3, r2
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a5a:	81bb      	strh	r3, [r7, #12]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	441a      	add	r2, r3
 8003a66:	89bb      	ldrh	r3, [r7, #12]
 8003a68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	78db      	ldrb	r3, [r3, #3]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d020      	beq.n	8003ac6 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	4413      	add	r3, r2
 8003a8e:	881b      	ldrh	r3, [r3, #0]
 8003a90:	b29b      	uxth	r3, r3
 8003a92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a9a:	813b      	strh	r3, [r7, #8]
 8003a9c:	893b      	ldrh	r3, [r7, #8]
 8003a9e:	f083 0320 	eor.w	r3, r3, #32
 8003aa2:	813b      	strh	r3, [r7, #8]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	441a      	add	r2, r3
 8003aae:	893b      	ldrh	r3, [r7, #8]
 8003ab0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ab4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ab8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	8013      	strh	r3, [r2, #0]
 8003ac4:	e27f      	b.n	8003fc6 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ac6:	687a      	ldr	r2, [r7, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	009b      	lsls	r3, r3, #2
 8003ace:	4413      	add	r3, r2
 8003ad0:	881b      	ldrh	r3, [r3, #0]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003adc:	817b      	strh	r3, [r7, #10]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	009b      	lsls	r3, r3, #2
 8003ae6:	441a      	add	r2, r3
 8003ae8:	897b      	ldrh	r3, [r7, #10]
 8003aea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003aee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003af2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003afa:	b29b      	uxth	r3, r3
 8003afc:	8013      	strh	r3, [r2, #0]
 8003afe:	e262      	b.n	8003fc6 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b10:	4413      	add	r3, r2
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	011a      	lsls	r2, r3, #4
 8003b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b1c:	4413      	add	r3, r2
 8003b1e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003b22:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	88db      	ldrh	r3, [r3, #6]
 8003b28:	085b      	lsrs	r3, r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	b29a      	uxth	r2, r3
 8003b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b32:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	461a      	mov	r2, r3
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	4413      	add	r3, r2
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	011a      	lsls	r2, r3, #4
 8003b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b50:	4413      	add	r3, r2
 8003b52:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003b56:	623b      	str	r3, [r7, #32]
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d112      	bne.n	8003b86 <USB_ActivateEndpoint+0x286>
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	881b      	ldrh	r3, [r3, #0]
 8003b64:	b29b      	uxth	r3, r3
 8003b66:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	6a3b      	ldr	r3, [r7, #32]
 8003b6e:	801a      	strh	r2, [r3, #0]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	881b      	ldrh	r3, [r3, #0]
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	6a3b      	ldr	r3, [r7, #32]
 8003b82:	801a      	strh	r2, [r3, #0]
 8003b84:	e02f      	b.n	8003be6 <USB_ActivateEndpoint+0x2e6>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	2b3e      	cmp	r3, #62	; 0x3e
 8003b8c:	d813      	bhi.n	8003bb6 <USB_ActivateEndpoint+0x2b6>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	085b      	lsrs	r3, r3, #1
 8003b94:	663b      	str	r3, [r7, #96]	; 0x60
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d002      	beq.n	8003ba8 <USB_ActivateEndpoint+0x2a8>
 8003ba2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	663b      	str	r3, [r7, #96]	; 0x60
 8003ba8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	029b      	lsls	r3, r3, #10
 8003bae:	b29a      	uxth	r2, r3
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	801a      	strh	r2, [r3, #0]
 8003bb4:	e017      	b.n	8003be6 <USB_ActivateEndpoint+0x2e6>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	691b      	ldr	r3, [r3, #16]
 8003bba:	095b      	lsrs	r3, r3, #5
 8003bbc:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <USB_ActivateEndpoint+0x2d0>
 8003bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	663b      	str	r3, [r7, #96]	; 0x60
 8003bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003bd2:	b29b      	uxth	r3, r3
 8003bd4:	029b      	lsls	r3, r3, #10
 8003bd6:	b29b      	uxth	r3, r3
 8003bd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003bdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	6a3b      	ldr	r3, [r7, #32]
 8003be4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003be6:	687a      	ldr	r2, [r7, #4]
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	4413      	add	r3, r2
 8003bf0:	881b      	ldrh	r3, [r3, #0]
 8003bf2:	83fb      	strh	r3, [r7, #30]
 8003bf4:	8bfb      	ldrh	r3, [r7, #30]
 8003bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d01b      	beq.n	8003c36 <USB_ActivateEndpoint+0x336>
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	009b      	lsls	r3, r3, #2
 8003c06:	4413      	add	r3, r2
 8003c08:	881b      	ldrh	r3, [r3, #0]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c14:	83bb      	strh	r3, [r7, #28]
 8003c16:	687a      	ldr	r2, [r7, #4]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	441a      	add	r2, r3
 8003c20:	8bbb      	ldrh	r3, [r7, #28]
 8003c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	4413      	add	r3, r2
 8003c40:	881b      	ldrh	r3, [r3, #0]
 8003c42:	b29b      	uxth	r3, r3
 8003c44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003c48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c4c:	837b      	strh	r3, [r7, #26]
 8003c4e:	8b7b      	ldrh	r3, [r7, #26]
 8003c50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003c54:	837b      	strh	r3, [r7, #26]
 8003c56:	8b7b      	ldrh	r3, [r7, #26]
 8003c58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003c5c:	837b      	strh	r3, [r7, #26]
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	441a      	add	r2, r3
 8003c68:	8b7b      	ldrh	r3, [r7, #26]
 8003c6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	8013      	strh	r3, [r2, #0]
 8003c7e:	e1a2      	b.n	8003fc6 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	009b      	lsls	r3, r3, #2
 8003c88:	4413      	add	r3, r2
 8003c8a:	881b      	ldrh	r3, [r3, #0]
 8003c8c:	b29b      	uxth	r3, r3
 8003c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c96:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c9a:	687a      	ldr	r2, [r7, #4]
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	441a      	add	r2, r3
 8003ca4:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003ca8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cb0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	461a      	mov	r2, r3
 8003cca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003ccc:	4413      	add	r3, r2
 8003cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	781b      	ldrb	r3, [r3, #0]
 8003cd4:	011a      	lsls	r2, r3, #4
 8003cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003cde:	657b      	str	r3, [r7, #84]	; 0x54
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	891b      	ldrh	r3, [r3, #8]
 8003ce4:	085b      	lsrs	r3, r3, #1
 8003ce6:	b29b      	uxth	r3, r3
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cee:	801a      	strh	r2, [r3, #0]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	653b      	str	r3, [r7, #80]	; 0x50
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d00:	4413      	add	r3, r2
 8003d02:	653b      	str	r3, [r7, #80]	; 0x50
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	011a      	lsls	r2, r3, #4
 8003d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003d12:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	895b      	ldrh	r3, [r3, #10]
 8003d18:	085b      	lsrs	r3, r3, #1
 8003d1a:	b29b      	uxth	r3, r3
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d22:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	785b      	ldrb	r3, [r3, #1]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	f040 8091 	bne.w	8003e50 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	4413      	add	r3, r2
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003d3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d01b      	beq.n	8003d7e <USB_ActivateEndpoint+0x47e>
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	4413      	add	r3, r2
 8003d50:	881b      	ldrh	r3, [r3, #0]
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d5c:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003d5e:	687a      	ldr	r2, [r7, #4]
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	441a      	add	r2, r3
 8003d68:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003d6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d72:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	009b      	lsls	r3, r3, #2
 8003d86:	4413      	add	r3, r2
 8003d88:	881b      	ldrh	r3, [r3, #0]
 8003d8a:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d8c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d01b      	beq.n	8003dce <USB_ActivateEndpoint+0x4ce>
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	881b      	ldrh	r3, [r3, #0]
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dac:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003dae:	687a      	ldr	r2, [r7, #4]
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	441a      	add	r2, r3
 8003db8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003de4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003de6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003de8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003dec:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003dee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003df0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003df4:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	781b      	ldrb	r3, [r3, #0]
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	441a      	add	r2, r3
 8003e00:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003e02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	4413      	add	r3, r2
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e2c:	867b      	strh	r3, [r7, #50]	; 0x32
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	441a      	add	r2, r3
 8003e38:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003e3a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e3e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e4a:	b29b      	uxth	r3, r3
 8003e4c:	8013      	strh	r3, [r2, #0]
 8003e4e:	e0ba      	b.n	8003fc6 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003e60:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003e64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d01d      	beq.n	8003ea8 <USB_ActivateEndpoint+0x5a8>
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4413      	add	r3, r2
 8003e76:	881b      	ldrh	r3, [r3, #0]
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e82:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	441a      	add	r2, r3
 8003e90:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e9c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ea0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	009b      	lsls	r3, r3, #2
 8003eb0:	4413      	add	r3, r2
 8003eb2:	881b      	ldrh	r3, [r3, #0]
 8003eb4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003eb8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d01d      	beq.n	8003f00 <USB_ActivateEndpoint+0x600>
 8003ec4:	687a      	ldr	r2, [r7, #4]
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	4413      	add	r3, r2
 8003ece:	881b      	ldrh	r3, [r3, #0]
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ed6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eda:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	441a      	add	r2, r3
 8003ee8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003eec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	78db      	ldrb	r3, [r3, #3]
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d024      	beq.n	8003f52 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	781b      	ldrb	r3, [r3, #0]
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	4413      	add	r3, r2
 8003f12:	881b      	ldrh	r3, [r3, #0]
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f1a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f26:	f083 0320 	eor.w	r3, r3, #32
 8003f2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	441a      	add	r2, r3
 8003f38:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003f3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	8013      	strh	r3, [r2, #0]
 8003f50:	e01d      	b.n	8003f8e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	4413      	add	r3, r2
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	441a      	add	r2, r3
 8003f76:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fa4:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	441a      	add	r2, r3
 8003fb0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003fb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fc2:	b29b      	uxth	r3, r3
 8003fc4:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003fc6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	376c      	adds	r7, #108	; 0x6c
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b08d      	sub	sp, #52	; 0x34
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	7b1b      	ldrb	r3, [r3, #12]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f040 808e 	bne.w	8004104 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	785b      	ldrb	r3, [r3, #1]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d044      	beq.n	800407a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ff0:	687a      	ldr	r2, [r7, #4]
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	781b      	ldrb	r3, [r3, #0]
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	881b      	ldrh	r3, [r3, #0]
 8003ffc:	81bb      	strh	r3, [r7, #12]
 8003ffe:	89bb      	ldrh	r3, [r7, #12]
 8004000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004004:	2b00      	cmp	r3, #0
 8004006:	d01b      	beq.n	8004040 <USB_DeactivateEndpoint+0x6c>
 8004008:	687a      	ldr	r2, [r7, #4]
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	4413      	add	r3, r2
 8004012:	881b      	ldrh	r3, [r3, #0]
 8004014:	b29b      	uxth	r3, r3
 8004016:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800401a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401e:	817b      	strh	r3, [r7, #10]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	441a      	add	r2, r3
 800402a:	897b      	ldrh	r3, [r7, #10]
 800402c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004030:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004034:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004038:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800403c:	b29b      	uxth	r3, r3
 800403e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	781b      	ldrb	r3, [r3, #0]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	4413      	add	r3, r2
 800404a:	881b      	ldrh	r3, [r3, #0]
 800404c:	b29b      	uxth	r3, r3
 800404e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004056:	813b      	strh	r3, [r7, #8]
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	781b      	ldrb	r3, [r3, #0]
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	441a      	add	r2, r3
 8004062:	893b      	ldrh	r3, [r7, #8]
 8004064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800406c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004070:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004074:	b29b      	uxth	r3, r3
 8004076:	8013      	strh	r3, [r2, #0]
 8004078:	e192      	b.n	80043a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	4413      	add	r3, r2
 8004084:	881b      	ldrh	r3, [r3, #0]
 8004086:	827b      	strh	r3, [r7, #18]
 8004088:	8a7b      	ldrh	r3, [r7, #18]
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	2b00      	cmp	r3, #0
 8004090:	d01b      	beq.n	80040ca <USB_DeactivateEndpoint+0xf6>
 8004092:	687a      	ldr	r2, [r7, #4]
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	4413      	add	r3, r2
 800409c:	881b      	ldrh	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a8:	823b      	strh	r3, [r7, #16]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	441a      	add	r2, r3
 80040b4:	8a3b      	ldrh	r3, [r7, #16]
 80040b6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040c6:	b29b      	uxth	r3, r3
 80040c8:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	4413      	add	r3, r2
 80040d4:	881b      	ldrh	r3, [r3, #0]
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e0:	81fb      	strh	r3, [r7, #14]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	441a      	add	r2, r3
 80040ec:	89fb      	ldrh	r3, [r7, #14]
 80040ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040fe:	b29b      	uxth	r3, r3
 8004100:	8013      	strh	r3, [r2, #0]
 8004102:	e14d      	b.n	80043a0 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	785b      	ldrb	r3, [r3, #1]
 8004108:	2b00      	cmp	r3, #0
 800410a:	f040 80a5 	bne.w	8004258 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	4413      	add	r3, r2
 8004118:	881b      	ldrh	r3, [r3, #0]
 800411a:	843b      	strh	r3, [r7, #32]
 800411c:	8c3b      	ldrh	r3, [r7, #32]
 800411e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d01b      	beq.n	800415e <USB_DeactivateEndpoint+0x18a>
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	781b      	ldrb	r3, [r3, #0]
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	4413      	add	r3, r2
 8004130:	881b      	ldrh	r3, [r3, #0]
 8004132:	b29b      	uxth	r3, r3
 8004134:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004138:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800413c:	83fb      	strh	r3, [r7, #30]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	441a      	add	r2, r3
 8004148:	8bfb      	ldrh	r3, [r7, #30]
 800414a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800414e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004152:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004156:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800415a:	b29b      	uxth	r3, r3
 800415c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	881b      	ldrh	r3, [r3, #0]
 800416a:	83bb      	strh	r3, [r7, #28]
 800416c:	8bbb      	ldrh	r3, [r7, #28]
 800416e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01b      	beq.n	80041ae <USB_DeactivateEndpoint+0x1da>
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	009b      	lsls	r3, r3, #2
 800417e:	4413      	add	r3, r2
 8004180:	881b      	ldrh	r3, [r3, #0]
 8004182:	b29b      	uxth	r3, r3
 8004184:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418c:	837b      	strh	r3, [r7, #26]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	441a      	add	r2, r3
 8004198:	8b7b      	ldrh	r3, [r7, #26]
 800419a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	4413      	add	r3, r2
 80041b8:	881b      	ldrh	r3, [r3, #0]
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041c4:	833b      	strh	r3, [r7, #24]
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	441a      	add	r2, r3
 80041d0:	8b3b      	ldrh	r3, [r7, #24]
 80041d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041de:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	881b      	ldrh	r3, [r3, #0]
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fc:	82fb      	strh	r3, [r7, #22]
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	009b      	lsls	r3, r3, #2
 8004206:	441a      	add	r2, r3
 8004208:	8afb      	ldrh	r3, [r7, #22]
 800420a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800420e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800421a:	b29b      	uxth	r3, r3
 800421c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	781b      	ldrb	r3, [r3, #0]
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	881b      	ldrh	r3, [r3, #0]
 800422a:	b29b      	uxth	r3, r3
 800422c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004230:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004234:	82bb      	strh	r3, [r7, #20]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	441a      	add	r2, r3
 8004240:	8abb      	ldrh	r3, [r7, #20]
 8004242:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004246:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800424a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800424e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004252:	b29b      	uxth	r3, r3
 8004254:	8013      	strh	r3, [r2, #0]
 8004256:	e0a3      	b.n	80043a0 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	881b      	ldrh	r3, [r3, #0]
 8004264:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004266:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004268:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d01b      	beq.n	80042a8 <USB_DeactivateEndpoint+0x2d4>
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	781b      	ldrb	r3, [r3, #0]
 8004276:	009b      	lsls	r3, r3, #2
 8004278:	4413      	add	r3, r2
 800427a:	881b      	ldrh	r3, [r3, #0]
 800427c:	b29b      	uxth	r3, r3
 800427e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004282:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004286:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004288:	687a      	ldr	r2, [r7, #4]
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	441a      	add	r2, r3
 8004292:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004294:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004298:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800429c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4413      	add	r3, r2
 80042b2:	881b      	ldrh	r3, [r3, #0]
 80042b4:	857b      	strh	r3, [r7, #42]	; 0x2a
 80042b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80042b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01b      	beq.n	80042f8 <USB_DeactivateEndpoint+0x324>
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	853b      	strh	r3, [r7, #40]	; 0x28
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	441a      	add	r2, r3
 80042e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80042e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	881b      	ldrh	r3, [r3, #0]
 8004304:	b29b      	uxth	r3, r3
 8004306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	781b      	ldrb	r3, [r3, #0]
 8004316:	009b      	lsls	r3, r3, #2
 8004318:	441a      	add	r2, r3
 800431a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800431c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004320:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004324:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800432c:	b29b      	uxth	r3, r3
 800432e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	4413      	add	r3, r2
 800433a:	881b      	ldrh	r3, [r3, #0]
 800433c:	b29b      	uxth	r3, r3
 800433e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004342:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004346:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	441a      	add	r2, r3
 8004352:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800435c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004364:	b29b      	uxth	r3, r3
 8004366:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	4413      	add	r3, r2
 8004372:	881b      	ldrh	r3, [r3, #0]
 8004374:	b29b      	uxth	r3, r3
 8004376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800437a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800437e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	441a      	add	r2, r3
 800438a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800438c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004390:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004394:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004398:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800439c:	b29b      	uxth	r3, r3
 800439e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3734      	adds	r7, #52	; 0x34
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bc80      	pop	{r7}
 80043aa:	4770      	bx	lr

080043ac <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	b0cc      	sub	sp, #304	; 0x130
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043ba:	6018      	str	r0, [r3, #0]
 80043bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043c4:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	785b      	ldrb	r3, [r3, #1]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	f041 817d 	bne.w	80056d2 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80043d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	699a      	ldr	r2, [r3, #24]
 80043e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d908      	bls.n	8004406 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80043f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004404:	e007      	b.n	8004416 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004406:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800440a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004416:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	7b1b      	ldrb	r3, [r3, #12]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d152      	bne.n	80044cc <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	6959      	ldr	r1, [r3, #20]
 8004432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004436:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	88da      	ldrh	r2, [r3, #6]
 800443e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004442:	b29b      	uxth	r3, r3
 8004444:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004448:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800444c:	6800      	ldr	r0, [r0, #0]
 800444e:	f001 ff23 	bl	8006298 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004452:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004456:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800445a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800445e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004462:	6812      	ldr	r2, [r2, #0]
 8004464:	601a      	str	r2, [r3, #0]
 8004466:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004474:	b29b      	uxth	r3, r3
 8004476:	4619      	mov	r1, r3
 8004478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004480:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004484:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004488:	6812      	ldr	r2, [r2, #0]
 800448a:	440a      	add	r2, r1
 800448c:	601a      	str	r2, [r3, #0]
 800448e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004492:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	011a      	lsls	r2, r3, #4
 800449c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80044ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c0:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	801a      	strh	r2, [r3, #0]
 80044c8:	f001 b8b5 	b.w	8005636 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80044cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	78db      	ldrb	r3, [r3, #3]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	f040 84c6 	bne.w	8004e6a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80044de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	6a1a      	ldr	r2, [r3, #32]
 80044ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	f240 8443 	bls.w	8004d82 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80044fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004500:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800450a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	4413      	add	r3, r2
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	b29b      	uxth	r3, r3
 800451a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800451e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004522:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004526:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004554:	b29b      	uxth	r3, r3
 8004556:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800455c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a1a      	ldr	r2, [r3, #32]
 8004564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004568:	1ad2      	subs	r2, r2, r3
 800456a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	009b      	lsls	r3, r3, #2
 800458e:	4413      	add	r3, r2
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	b29b      	uxth	r3, r3
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	f000 823e 	beq.w	8004a1a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800459e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80045a6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045aa:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80045ae:	6812      	ldr	r2, [r2, #0]
 80045b0:	601a      	str	r2, [r3, #0]
 80045b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	785b      	ldrb	r3, [r3, #1]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	f040 809a 	bne.w	80046f8 <USB_EPStartXfer+0x34c>
 80045c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045cc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045d0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80045d4:	6812      	ldr	r2, [r2, #0]
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045e6:	b29b      	uxth	r3, r3
 80045e8:	4619      	mov	r1, r3
 80045ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ee:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045f2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045f6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80045fa:	6812      	ldr	r2, [r2, #0]
 80045fc:	440a      	add	r2, r1
 80045fe:	601a      	str	r2, [r3, #0]
 8004600:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004604:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	011a      	lsls	r2, r3, #4
 800460e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004612:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4413      	add	r3, r2
 800461a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800461e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004622:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d122      	bne.n	8004676 <USB_EPStartXfer+0x2ca>
 8004630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004634:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	881b      	ldrh	r3, [r3, #0]
 800463c:	b29b      	uxth	r3, r3
 800463e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004642:	b29a      	uxth	r2, r3
 8004644:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004648:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	801a      	strh	r2, [r3, #0]
 8004650:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004654:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	881b      	ldrh	r3, [r3, #0]
 800465c:	b29b      	uxth	r3, r3
 800465e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004662:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004666:	b29a      	uxth	r2, r3
 8004668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800466c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	801a      	strh	r2, [r3, #0]
 8004674:	e079      	b.n	800476a <USB_EPStartXfer+0x3be>
 8004676:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467a:	2b3e      	cmp	r3, #62	; 0x3e
 800467c:	d81b      	bhi.n	80046b6 <USB_EPStartXfer+0x30a>
 800467e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004682:	085b      	lsrs	r3, r3, #1
 8004684:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004688:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800468c:	f003 0301 	and.w	r3, r3, #1
 8004690:	2b00      	cmp	r3, #0
 8004692:	d004      	beq.n	800469e <USB_EPStartXfer+0x2f2>
 8004694:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004698:	3301      	adds	r3, #1
 800469a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800469e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	029b      	lsls	r3, r3, #10
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	801a      	strh	r2, [r3, #0]
 80046b4:	e059      	b.n	800476a <USB_EPStartXfer+0x3be>
 80046b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046ba:	095b      	lsrs	r3, r3, #5
 80046bc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046c4:	f003 031f 	and.w	r3, r3, #31
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d104      	bne.n	80046d6 <USB_EPStartXfer+0x32a>
 80046cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046d0:	3b01      	subs	r3, #1
 80046d2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80046d6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80046da:	b29b      	uxth	r3, r3
 80046dc:	029b      	lsls	r3, r3, #10
 80046de:	b29b      	uxth	r3, r3
 80046e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80046e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	801a      	strh	r2, [r3, #0]
 80046f6:	e038      	b.n	800476a <USB_EPStartXfer+0x3be>
 80046f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	785b      	ldrb	r3, [r3, #1]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d130      	bne.n	800476a <USB_EPStartXfer+0x3be>
 8004708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004716:	b29b      	uxth	r3, r3
 8004718:	4619      	mov	r1, r3
 800471a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004722:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004726:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800472a:	6812      	ldr	r2, [r2, #0]
 800472c:	440a      	add	r2, r1
 800472e:	601a      	str	r2, [r3, #0]
 8004730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	011a      	lsls	r2, r3, #4
 800473e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004742:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4413      	add	r3, r2
 800474a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800474e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004752:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800475c:	b29a      	uxth	r2, r3
 800475e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004762:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800476a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800476e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	895b      	ldrh	r3, [r3, #10]
 8004776:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800477a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	6959      	ldr	r1, [r3, #20]
 8004786:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800478a:	b29b      	uxth	r3, r3
 800478c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004790:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004794:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004798:	6800      	ldr	r0, [r0, #0]
 800479a:	f001 fd7d 	bl	8006298 <USB_WritePMA>
            ep->xfer_buff += len;
 800479e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	695a      	ldr	r2, [r3, #20]
 80047aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ae:	441a      	add	r2, r3
 80047b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80047bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	6a1a      	ldr	r2, [r3, #32]
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d90f      	bls.n	80047f8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 80047d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	6a1a      	ldr	r2, [r3, #32]
 80047e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047e8:	1ad2      	subs	r2, r2, r3
 80047ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	621a      	str	r2, [r3, #32]
 80047f6:	e00e      	b.n	8004816 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80047f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	6a1b      	ldr	r3, [r3, #32]
 8004804:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2200      	movs	r2, #0
 8004814:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004816:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	785b      	ldrb	r3, [r3, #1]
 8004822:	2b00      	cmp	r3, #0
 8004824:	f040 809a 	bne.w	800495c <USB_EPStartXfer+0x5b0>
 8004828:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800482c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004830:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004834:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004840:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800484a:	b29b      	uxth	r3, r3
 800484c:	4619      	mov	r1, r3
 800484e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004852:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004856:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800485a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800485e:	6812      	ldr	r2, [r2, #0]
 8004860:	440a      	add	r2, r1
 8004862:	601a      	str	r2, [r3, #0]
 8004864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004868:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	781b      	ldrb	r3, [r3, #0]
 8004870:	011a      	lsls	r2, r3, #4
 8004872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004876:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4413      	add	r3, r2
 800487e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004886:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800488a:	601a      	str	r2, [r3, #0]
 800488c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d122      	bne.n	80048da <USB_EPStartXfer+0x52e>
 8004894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004898:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	881b      	ldrh	r3, [r3, #0]
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	801a      	strh	r2, [r3, #0]
 80048b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	881b      	ldrh	r3, [r3, #0]
 80048c0:	b29b      	uxth	r3, r3
 80048c2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048c6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048ca:	b29a      	uxth	r2, r3
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	801a      	strh	r2, [r3, #0]
 80048d8:	e083      	b.n	80049e2 <USB_EPStartXfer+0x636>
 80048da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048de:	2b3e      	cmp	r3, #62	; 0x3e
 80048e0:	d81b      	bhi.n	800491a <USB_EPStartXfer+0x56e>
 80048e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048e6:	085b      	lsrs	r3, r3, #1
 80048e8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d004      	beq.n	8004902 <USB_EPStartXfer+0x556>
 80048f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048fc:	3301      	adds	r3, #1
 80048fe:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004902:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004906:	b29b      	uxth	r3, r3
 8004908:	029b      	lsls	r3, r3, #10
 800490a:	b29a      	uxth	r2, r3
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	801a      	strh	r2, [r3, #0]
 8004918:	e063      	b.n	80049e2 <USB_EPStartXfer+0x636>
 800491a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800491e:	095b      	lsrs	r3, r3, #5
 8004920:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004924:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004928:	f003 031f 	and.w	r3, r3, #31
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <USB_EPStartXfer+0x58e>
 8004930:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004934:	3b01      	subs	r3, #1
 8004936:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800493a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800493e:	b29b      	uxth	r3, r3
 8004940:	029b      	lsls	r3, r3, #10
 8004942:	b29b      	uxth	r3, r3
 8004944:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004948:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800494c:	b29a      	uxth	r2, r3
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	801a      	strh	r2, [r3, #0]
 800495a:	e042      	b.n	80049e2 <USB_EPStartXfer+0x636>
 800495c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	785b      	ldrb	r3, [r3, #1]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d13a      	bne.n	80049e2 <USB_EPStartXfer+0x636>
 800496c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004970:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004974:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004978:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800497c:	6812      	ldr	r2, [r2, #0]
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800498e:	b29b      	uxth	r3, r3
 8004990:	4619      	mov	r1, r3
 8004992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004996:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800499a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800499e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	440a      	add	r2, r1
 80049a6:	601a      	str	r2, [r3, #0]
 80049a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	011a      	lsls	r2, r3, #4
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4413      	add	r3, r2
 80049c2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80049c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ca:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049d4:	b29a      	uxth	r2, r3
 80049d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80049e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	891b      	ldrh	r3, [r3, #8]
 80049ee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	6959      	ldr	r1, [r3, #20]
 80049fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004a08:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004a0c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004a10:	6800      	ldr	r0, [r0, #0]
 8004a12:	f001 fc41 	bl	8006298 <USB_WritePMA>
 8004a16:	f000 be0e 	b.w	8005636 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004a1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	785b      	ldrb	r3, [r3, #1]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d16d      	bne.n	8004b06 <USB_EPStartXfer+0x75a>
 8004a2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	461a      	mov	r2, r3
 8004a48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4a:	4413      	add	r3, r2
 8004a4c:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	781b      	ldrb	r3, [r3, #0]
 8004a5a:	011a      	lsls	r2, r3, #4
 8004a5c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a5e:	4413      	add	r3, r2
 8004a60:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
 8004a66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d112      	bne.n	8004a94 <USB_EPStartXfer+0x6e8>
 8004a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a70:	881b      	ldrh	r3, [r3, #0]
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a78:	b29a      	uxth	r2, r3
 8004a7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a7c:	801a      	strh	r2, [r3, #0]
 8004a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a80:	881b      	ldrh	r3, [r3, #0]
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a90:	801a      	strh	r2, [r3, #0]
 8004a92:	e063      	b.n	8004b5c <USB_EPStartXfer+0x7b0>
 8004a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a98:	2b3e      	cmp	r3, #62	; 0x3e
 8004a9a:	d817      	bhi.n	8004acc <USB_EPStartXfer+0x720>
 8004a9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aa0:	085b      	lsrs	r3, r3, #1
 8004aa2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d004      	beq.n	8004abc <USB_EPStartXfer+0x710>
 8004ab2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ab6:	3301      	adds	r3, #1
 8004ab8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004abc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	029b      	lsls	r3, r3, #10
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ac8:	801a      	strh	r2, [r3, #0]
 8004aca:	e047      	b.n	8004b5c <USB_EPStartXfer+0x7b0>
 8004acc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004ad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ada:	f003 031f 	and.w	r3, r3, #31
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <USB_EPStartXfer+0x740>
 8004ae2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004aec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004af0:	b29b      	uxth	r3, r3
 8004af2:	029b      	lsls	r3, r3, #10
 8004af4:	b29b      	uxth	r3, r3
 8004af6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004afa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b02:	801a      	strh	r2, [r3, #0]
 8004b04:	e02a      	b.n	8004b5c <USB_EPStartXfer+0x7b0>
 8004b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	785b      	ldrb	r3, [r3, #1]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d122      	bne.n	8004b5c <USB_EPStartXfer+0x7b0>
 8004b16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	653b      	str	r3, [r7, #80]	; 0x50
 8004b22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b26:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b30:	b29b      	uxth	r3, r3
 8004b32:	461a      	mov	r2, r3
 8004b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b36:	4413      	add	r3, r2
 8004b38:	653b      	str	r3, [r7, #80]	; 0x50
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	011a      	lsls	r2, r3, #4
 8004b48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b4a:	4413      	add	r3, r2
 8004b4c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b50:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004b52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b56:	b29a      	uxth	r2, r3
 8004b58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b5a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	891b      	ldrh	r3, [r3, #8]
 8004b68:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6959      	ldr	r1, [r3, #20]
 8004b78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b82:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b86:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b8a:	6800      	ldr	r0, [r0, #0]
 8004b8c:	f001 fb84 	bl	8006298 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba0:	441a      	add	r2, r3
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004bae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6a1a      	ldr	r2, [r3, #32]
 8004bba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d90f      	bls.n	8004bea <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004bca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6a1a      	ldr	r2, [r3, #32]
 8004bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004be0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	621a      	str	r2, [r3, #32]
 8004be8:	e00e      	b.n	8004c08 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004bea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004bfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	2200      	movs	r2, #0
 8004c06:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
 8004c14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	785b      	ldrb	r3, [r3, #1]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d16d      	bne.n	8004d00 <USB_EPStartXfer+0x954>
 8004c24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c28:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	461a      	mov	r2, r3
 8004c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c44:	4413      	add	r3, r2
 8004c46:	63bb      	str	r3, [r7, #56]	; 0x38
 8004c48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	011a      	lsls	r2, r3, #4
 8004c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c58:	4413      	add	r3, r2
 8004c5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004c60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d112      	bne.n	8004c8e <USB_EPStartXfer+0x8e2>
 8004c68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c76:	801a      	strh	r2, [r3, #0]
 8004c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c7a:	881b      	ldrh	r3, [r3, #0]
 8004c7c:	b29b      	uxth	r3, r3
 8004c7e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c82:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c86:	b29a      	uxth	r2, r3
 8004c88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c8a:	801a      	strh	r2, [r3, #0]
 8004c8c:	e05d      	b.n	8004d4a <USB_EPStartXfer+0x99e>
 8004c8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c92:	2b3e      	cmp	r3, #62	; 0x3e
 8004c94:	d817      	bhi.n	8004cc6 <USB_EPStartXfer+0x91a>
 8004c96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c9a:	085b      	lsrs	r3, r3, #1
 8004c9c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ca0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ca4:	f003 0301 	and.w	r3, r3, #1
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d004      	beq.n	8004cb6 <USB_EPStartXfer+0x90a>
 8004cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cb6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	029b      	lsls	r3, r3, #10
 8004cbe:	b29a      	uxth	r2, r3
 8004cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cc2:	801a      	strh	r2, [r3, #0]
 8004cc4:	e041      	b.n	8004d4a <USB_EPStartXfer+0x99e>
 8004cc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cca:	095b      	lsrs	r3, r3, #5
 8004ccc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004cd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd4:	f003 031f 	and.w	r3, r3, #31
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d104      	bne.n	8004ce6 <USB_EPStartXfer+0x93a>
 8004cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004ce6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	029b      	lsls	r3, r3, #10
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cf4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfc:	801a      	strh	r2, [r3, #0]
 8004cfe:	e024      	b.n	8004d4a <USB_EPStartXfer+0x99e>
 8004d00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	785b      	ldrb	r3, [r3, #1]
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d11c      	bne.n	8004d4a <USB_EPStartXfer+0x99e>
 8004d10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d24:	4413      	add	r3, r2
 8004d26:	643b      	str	r3, [r7, #64]	; 0x40
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	011a      	lsls	r2, r3, #4
 8004d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d38:	4413      	add	r3, r2
 8004d3a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d44:	b29a      	uxth	r2, r3
 8004d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d48:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004d4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	895b      	ldrh	r3, [r3, #10]
 8004d56:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	6959      	ldr	r1, [r3, #20]
 8004d66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d6a:	b29b      	uxth	r3, r3
 8004d6c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004d70:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d74:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d78:	6800      	ldr	r0, [r0, #0]
 8004d7a:	f001 fa8d 	bl	8006298 <USB_WritePMA>
 8004d7e:	f000 bc5a 	b.w	8005636 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	6a1b      	ldr	r3, [r3, #32]
 8004d8e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d96:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	009b      	lsls	r3, r3, #2
 8004daa:	4413      	add	r3, r2
 8004dac:	881b      	ldrh	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004db8:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	441a      	add	r2, r3
 8004dd6:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004dda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dde:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004dfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfe:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e0e:	4413      	add	r3, r2
 8004e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	011a      	lsls	r2, r3, #4
 8004e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e22:	4413      	add	r3, r2
 8004e24:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004e28:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e2e:	b29a      	uxth	r2, r3
 8004e30:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004e32:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004e34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	891b      	ldrh	r3, [r3, #8]
 8004e40:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	6959      	ldr	r1, [r3, #20]
 8004e50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e54:	b29b      	uxth	r3, r3
 8004e56:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e5a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e5e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e62:	6800      	ldr	r0, [r0, #0]
 8004e64:	f001 fa18 	bl	8006298 <USB_WritePMA>
 8004e68:	e3e5      	b.n	8005636 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004e6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	781b      	ldrb	r3, [r3, #0]
 8004e80:	009b      	lsls	r3, r3, #2
 8004e82:	4413      	add	r3, r2
 8004e84:	881b      	ldrh	r3, [r3, #0]
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e9c:	681a      	ldr	r2, [r3, #0]
 8004e9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	009b      	lsls	r3, r3, #2
 8004eac:	441a      	add	r2, r3
 8004eae:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	6a1a      	ldr	r2, [r3, #32]
 8004ed2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ed6:	1ad2      	subs	r2, r2, r3
 8004ed8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004edc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ee4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eec:	681a      	ldr	r2, [r3, #0]
 8004eee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	881b      	ldrh	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	f000 81bc 	beq.w	8005284 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004f0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	785b      	ldrb	r3, [r3, #1]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d16d      	bne.n	8005006 <USB_EPStartXfer+0xc5a>
 8004f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	461a      	mov	r2, r3
 8004f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f4a:	4413      	add	r3, r2
 8004f4c:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	011a      	lsls	r2, r3, #4
 8004f5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f5e:	4413      	add	r3, r2
 8004f60:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004f64:	677b      	str	r3, [r7, #116]	; 0x74
 8004f66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d112      	bne.n	8004f94 <USB_EPStartXfer+0xbe8>
 8004f6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f70:	881b      	ldrh	r3, [r3, #0]
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f78:	b29a      	uxth	r2, r3
 8004f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f7c:	801a      	strh	r2, [r3, #0]
 8004f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f80:	881b      	ldrh	r3, [r3, #0]
 8004f82:	b29b      	uxth	r3, r3
 8004f84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f90:	801a      	strh	r2, [r3, #0]
 8004f92:	e060      	b.n	8005056 <USB_EPStartXfer+0xcaa>
 8004f94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f98:	2b3e      	cmp	r3, #62	; 0x3e
 8004f9a:	d817      	bhi.n	8004fcc <USB_EPStartXfer+0xc20>
 8004f9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fa0:	085b      	lsrs	r3, r3, #1
 8004fa2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004faa:	f003 0301 	and.w	r3, r3, #1
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <USB_EPStartXfer+0xc10>
 8004fb2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fbc:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fc0:	b29b      	uxth	r3, r3
 8004fc2:	029b      	lsls	r3, r3, #10
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fc8:	801a      	strh	r2, [r3, #0]
 8004fca:	e044      	b.n	8005056 <USB_EPStartXfer+0xcaa>
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fda:	f003 031f 	and.w	r3, r3, #31
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d104      	bne.n	8004fec <USB_EPStartXfer+0xc40>
 8004fe2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004fe6:	3b01      	subs	r3, #1
 8004fe8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004fec:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	029b      	lsls	r3, r3, #10
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ffa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005002:	801a      	strh	r2, [r3, #0]
 8005004:	e027      	b.n	8005056 <USB_EPStartXfer+0xcaa>
 8005006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800500a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	785b      	ldrb	r3, [r3, #1]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d11f      	bne.n	8005056 <USB_EPStartXfer+0xcaa>
 8005016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800502c:	4413      	add	r3, r2
 800502e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	011a      	lsls	r2, r3, #4
 8005040:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005044:	4413      	add	r3, r2
 8005046:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800504a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800504c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005050:	b29a      	uxth	r2, r3
 8005052:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005054:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005056:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800505a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	895b      	ldrh	r3, [r3, #10]
 8005062:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005066:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	6959      	ldr	r1, [r3, #20]
 8005072:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005076:	b29b      	uxth	r3, r3
 8005078:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800507c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005080:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005084:	6800      	ldr	r0, [r0, #0]
 8005086:	f001 f907 	bl	8006298 <USB_WritePMA>
          ep->xfer_buff += len;
 800508a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	695a      	ldr	r2, [r3, #20]
 8005096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800509a:	441a      	add	r2, r3
 800509c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d90f      	bls.n	80050e4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 80050c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	6a1a      	ldr	r2, [r3, #32]
 80050d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050d4:	1ad2      	subs	r2, r2, r3
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	621a      	str	r2, [r3, #32]
 80050e2:	e00e      	b.n	8005102 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80050e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80050f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2200      	movs	r2, #0
 8005100:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005102:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005106:	2b00      	cmp	r3, #0
 8005108:	f000 8295 	beq.w	8005636 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	785b      	ldrb	r3, [r3, #1]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d16d      	bne.n	80051f8 <USB_EPStartXfer+0xe4c>
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	66bb      	str	r3, [r7, #104]	; 0x68
 8005128:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800512c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005136:	b29b      	uxth	r3, r3
 8005138:	461a      	mov	r2, r3
 800513a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800513c:	4413      	add	r3, r2
 800513e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005144:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	011a      	lsls	r2, r3, #4
 800514e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005150:	4413      	add	r3, r2
 8005152:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005156:	667b      	str	r3, [r7, #100]	; 0x64
 8005158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515c:	2b00      	cmp	r3, #0
 800515e:	d112      	bne.n	8005186 <USB_EPStartXfer+0xdda>
 8005160:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005162:	881b      	ldrh	r3, [r3, #0]
 8005164:	b29b      	uxth	r3, r3
 8005166:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800516a:	b29a      	uxth	r2, r3
 800516c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800516e:	801a      	strh	r2, [r3, #0]
 8005170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005172:	881b      	ldrh	r3, [r3, #0]
 8005174:	b29b      	uxth	r3, r3
 8005176:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800517a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517e:	b29a      	uxth	r2, r3
 8005180:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005182:	801a      	strh	r2, [r3, #0]
 8005184:	e063      	b.n	800524e <USB_EPStartXfer+0xea2>
 8005186:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800518a:	2b3e      	cmp	r3, #62	; 0x3e
 800518c:	d817      	bhi.n	80051be <USB_EPStartXfer+0xe12>
 800518e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005192:	085b      	lsrs	r3, r3, #1
 8005194:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005198:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d004      	beq.n	80051ae <USB_EPStartXfer+0xe02>
 80051a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051a8:	3301      	adds	r3, #1
 80051aa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051b2:	b29b      	uxth	r3, r3
 80051b4:	029b      	lsls	r3, r3, #10
 80051b6:	b29a      	uxth	r2, r3
 80051b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051ba:	801a      	strh	r2, [r3, #0]
 80051bc:	e047      	b.n	800524e <USB_EPStartXfer+0xea2>
 80051be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051c2:	095b      	lsrs	r3, r3, #5
 80051c4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d104      	bne.n	80051de <USB_EPStartXfer+0xe32>
 80051d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051d8:	3b01      	subs	r3, #1
 80051da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80051de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	029b      	lsls	r3, r3, #10
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80051ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051f4:	801a      	strh	r2, [r3, #0]
 80051f6:	e02a      	b.n	800524e <USB_EPStartXfer+0xea2>
 80051f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	785b      	ldrb	r3, [r3, #1]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d122      	bne.n	800524e <USB_EPStartXfer+0xea2>
 8005208:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800520c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	673b      	str	r3, [r7, #112]	; 0x70
 8005214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005218:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005222:	b29b      	uxth	r3, r3
 8005224:	461a      	mov	r2, r3
 8005226:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005228:	4413      	add	r3, r2
 800522a:	673b      	str	r3, [r7, #112]	; 0x70
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	781b      	ldrb	r3, [r3, #0]
 8005238:	011a      	lsls	r2, r3, #4
 800523a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800523c:	4413      	add	r3, r2
 800523e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005242:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005244:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005248:	b29a      	uxth	r2, r3
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	891b      	ldrh	r3, [r3, #8]
 800525a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800525e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6959      	ldr	r1, [r3, #20]
 800526a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526e:	b29b      	uxth	r3, r3
 8005270:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005274:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005278:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800527c:	6800      	ldr	r0, [r0, #0]
 800527e:	f001 f80b 	bl	8006298 <USB_WritePMA>
 8005282:	e1d8      	b.n	8005636 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	785b      	ldrb	r3, [r3, #1]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d178      	bne.n	8005386 <USB_EPStartXfer+0xfda>
 8005294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005298:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80052b0:	b29b      	uxth	r3, r3
 80052b2:	461a      	mov	r2, r3
 80052b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052b8:	4413      	add	r3, r2
 80052ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	011a      	lsls	r2, r3, #4
 80052cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80052d0:	4413      	add	r3, r2
 80052d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80052d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80052da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d116      	bne.n	8005310 <USB_EPStartXfer+0xf64>
 80052e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052e6:	881b      	ldrh	r3, [r3, #0]
 80052e8:	b29b      	uxth	r3, r3
 80052ea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052ee:	b29a      	uxth	r2, r3
 80052f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052fa:	881b      	ldrh	r3, [r3, #0]
 80052fc:	b29b      	uxth	r3, r3
 80052fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005302:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005306:	b29a      	uxth	r2, r3
 8005308:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530c:	801a      	strh	r2, [r3, #0]
 800530e:	e06b      	b.n	80053e8 <USB_EPStartXfer+0x103c>
 8005310:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005314:	2b3e      	cmp	r3, #62	; 0x3e
 8005316:	d818      	bhi.n	800534a <USB_EPStartXfer+0xf9e>
 8005318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800531c:	085b      	lsrs	r3, r3, #1
 800531e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <USB_EPStartXfer+0xf8c>
 800532e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005332:	3301      	adds	r3, #1
 8005334:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005338:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800533c:	b29b      	uxth	r3, r3
 800533e:	029b      	lsls	r3, r3, #10
 8005340:	b29a      	uxth	r2, r3
 8005342:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005346:	801a      	strh	r2, [r3, #0]
 8005348:	e04e      	b.n	80053e8 <USB_EPStartXfer+0x103c>
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	095b      	lsrs	r3, r3, #5
 8005350:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005358:	f003 031f 	and.w	r3, r3, #31
 800535c:	2b00      	cmp	r3, #0
 800535e:	d104      	bne.n	800536a <USB_EPStartXfer+0xfbe>
 8005360:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005364:	3b01      	subs	r3, #1
 8005366:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800536a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800536e:	b29b      	uxth	r3, r3
 8005370:	029b      	lsls	r3, r3, #10
 8005372:	b29b      	uxth	r3, r3
 8005374:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005378:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800537c:	b29a      	uxth	r2, r3
 800537e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005382:	801a      	strh	r2, [r3, #0]
 8005384:	e030      	b.n	80053e8 <USB_EPStartXfer+0x103c>
 8005386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	785b      	ldrb	r3, [r3, #1]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d128      	bne.n	80053e8 <USB_EPStartXfer+0x103c>
 8005396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800539a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053b2:	b29b      	uxth	r3, r3
 80053b4:	461a      	mov	r2, r3
 80053b6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053ba:	4413      	add	r3, r2
 80053bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80053c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	011a      	lsls	r2, r3, #4
 80053ce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80053d2:	4413      	add	r3, r2
 80053d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80053d8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80053dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80053e6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80053e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	891b      	ldrh	r3, [r3, #8]
 80053f4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6959      	ldr	r1, [r3, #20]
 8005404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005408:	b29b      	uxth	r3, r3
 800540a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800540e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005412:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005416:	6800      	ldr	r0, [r0, #0]
 8005418:	f000 ff3e 	bl	8006298 <USB_WritePMA>
          ep->xfer_buff += len;
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542c:	441a      	add	r2, r3
 800542e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005432:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800543a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a1a      	ldr	r2, [r3, #32]
 8005446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	691b      	ldr	r3, [r3, #16]
 8005452:	429a      	cmp	r2, r3
 8005454:	d90f      	bls.n	8005476 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	6a1a      	ldr	r2, [r3, #32]
 8005462:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005466:	1ad2      	subs	r2, r2, r3
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	621a      	str	r2, [r3, #32]
 8005474:	e00e      	b.n	8005494 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	6a1b      	ldr	r3, [r3, #32]
 8005482:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2200      	movs	r2, #0
 8005492:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005494:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 80cc 	beq.w	8005636 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800549e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	785b      	ldrb	r3, [r3, #1]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d178      	bne.n	80055ae <USB_EPStartXfer+0x1202>
 80054bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054d8:	b29b      	uxth	r3, r3
 80054da:	461a      	mov	r2, r3
 80054dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054e0:	4413      	add	r3, r2
 80054e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	011a      	lsls	r2, r3, #4
 80054f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054f8:	4413      	add	r3, r2
 80054fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005502:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005506:	2b00      	cmp	r3, #0
 8005508:	d116      	bne.n	8005538 <USB_EPStartXfer+0x118c>
 800550a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005516:	b29a      	uxth	r2, r3
 8005518:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800551c:	801a      	strh	r2, [r3, #0]
 800551e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005522:	881b      	ldrh	r3, [r3, #0]
 8005524:	b29b      	uxth	r3, r3
 8005526:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800552e:	b29a      	uxth	r2, r3
 8005530:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005534:	801a      	strh	r2, [r3, #0]
 8005536:	e064      	b.n	8005602 <USB_EPStartXfer+0x1256>
 8005538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800553c:	2b3e      	cmp	r3, #62	; 0x3e
 800553e:	d818      	bhi.n	8005572 <USB_EPStartXfer+0x11c6>
 8005540:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005544:	085b      	lsrs	r3, r3, #1
 8005546:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800554a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d004      	beq.n	8005560 <USB_EPStartXfer+0x11b4>
 8005556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800555a:	3301      	adds	r3, #1
 800555c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005560:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005564:	b29b      	uxth	r3, r3
 8005566:	029b      	lsls	r3, r3, #10
 8005568:	b29a      	uxth	r2, r3
 800556a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800556e:	801a      	strh	r2, [r3, #0]
 8005570:	e047      	b.n	8005602 <USB_EPStartXfer+0x1256>
 8005572:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005576:	095b      	lsrs	r3, r3, #5
 8005578:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800557c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005580:	f003 031f 	and.w	r3, r3, #31
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <USB_EPStartXfer+0x11e6>
 8005588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800558c:	3b01      	subs	r3, #1
 800558e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005596:	b29b      	uxth	r3, r3
 8005598:	029b      	lsls	r3, r3, #10
 800559a:	b29b      	uxth	r3, r3
 800559c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055aa:	801a      	strh	r2, [r3, #0]
 80055ac:	e029      	b.n	8005602 <USB_EPStartXfer+0x1256>
 80055ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	785b      	ldrb	r3, [r3, #1]
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d121      	bne.n	8005602 <USB_EPStartXfer+0x1256>
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	461a      	mov	r2, r3
 80055d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055d4:	4413      	add	r3, r2
 80055d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	781b      	ldrb	r3, [r3, #0]
 80055e6:	011a      	lsls	r2, r3, #4
 80055e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80055ec:	4413      	add	r3, r2
 80055ee:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80055f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055fa:	b29a      	uxth	r2, r3
 80055fc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005600:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	895b      	ldrh	r3, [r3, #10]
 800560e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005612:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005616:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6959      	ldr	r1, [r3, #20]
 800561e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005622:	b29b      	uxth	r3, r3
 8005624:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005628:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800562c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005630:	6800      	ldr	r0, [r0, #0]
 8005632:	f000 fe31 	bl	8006298 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005644:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	4413      	add	r3, r2
 8005650:	881b      	ldrh	r3, [r3, #0]
 8005652:	b29b      	uxth	r3, r3
 8005654:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005658:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800565c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005660:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005664:	8013      	strh	r3, [r2, #0]
 8005666:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800566e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005672:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005676:	8812      	ldrh	r2, [r2, #0]
 8005678:	f082 0210 	eor.w	r2, r2, #16
 800567c:	801a      	strh	r2, [r3, #0]
 800567e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005682:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005686:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800568a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800568e:	8812      	ldrh	r2, [r2, #0]
 8005690:	f082 0220 	eor.w	r2, r2, #32
 8005694:	801a      	strh	r2, [r3, #0]
 8005696:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	781b      	ldrb	r3, [r3, #0]
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	441a      	add	r2, r3
 80056b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b4:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80056b8:	881b      	ldrh	r3, [r3, #0]
 80056ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80056be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	8013      	strh	r3, [r2, #0]
 80056ce:	f000 bc9f 	b.w	8006010 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	7b1b      	ldrb	r3, [r3, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f040 80ae 	bne.w	8005840 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 80056e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	699a      	ldr	r2, [r3, #24]
 80056f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d917      	bls.n	8005730 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005714:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	699a      	ldr	r2, [r3, #24]
 800571c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005720:	1ad2      	subs	r2, r2, r3
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	619a      	str	r2, [r3, #24]
 800572e:	e00e      	b.n	800574e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005740:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005744:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2200      	movs	r2, #0
 800574c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800574e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005752:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800575c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005760:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800576a:	b29b      	uxth	r3, r3
 800576c:	461a      	mov	r2, r3
 800576e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005772:	4413      	add	r3, r2
 8005774:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	011a      	lsls	r2, r3, #4
 8005786:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800578a:	4413      	add	r3, r2
 800578c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005798:	2b00      	cmp	r3, #0
 800579a:	d116      	bne.n	80057ca <USB_EPStartXfer+0x141e>
 800579c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057a0:	881b      	ldrh	r3, [r3, #0]
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057a8:	b29a      	uxth	r2, r3
 80057aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057ae:	801a      	strh	r2, [r3, #0]
 80057b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c0:	b29a      	uxth	r2, r3
 80057c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c6:	801a      	strh	r2, [r3, #0]
 80057c8:	e3e8      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	2b3e      	cmp	r3, #62	; 0x3e
 80057d0:	d818      	bhi.n	8005804 <USB_EPStartXfer+0x1458>
 80057d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057d6:	085b      	lsrs	r3, r3, #1
 80057d8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057e0:	f003 0301 	and.w	r3, r3, #1
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d004      	beq.n	80057f2 <USB_EPStartXfer+0x1446>
 80057e8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057ec:	3301      	adds	r3, #1
 80057ee:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057f2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	029b      	lsls	r3, r3, #10
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005800:	801a      	strh	r2, [r3, #0]
 8005802:	e3cb      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
 8005804:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005808:	095b      	lsrs	r3, r3, #5
 800580a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800580e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005812:	f003 031f 	and.w	r3, r3, #31
 8005816:	2b00      	cmp	r3, #0
 8005818:	d104      	bne.n	8005824 <USB_EPStartXfer+0x1478>
 800581a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800581e:	3b01      	subs	r3, #1
 8005820:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005824:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005828:	b29b      	uxth	r3, r3
 800582a:	029b      	lsls	r3, r3, #10
 800582c:	b29b      	uxth	r3, r3
 800582e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005832:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005836:	b29a      	uxth	r2, r3
 8005838:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	e3ad      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005844:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	78db      	ldrb	r3, [r3, #3]
 800584c:	2b02      	cmp	r3, #2
 800584e:	f040 8200 	bne.w	8005c52 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005852:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005856:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	785b      	ldrb	r3, [r3, #1]
 800585e:	2b00      	cmp	r3, #0
 8005860:	f040 8091 	bne.w	8005986 <USB_EPStartXfer+0x15da>
 8005864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005872:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005876:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005880:	b29b      	uxth	r3, r3
 8005882:	461a      	mov	r2, r3
 8005884:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005888:	4413      	add	r3, r2
 800588a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	011a      	lsls	r2, r3, #4
 800589c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80058a0:	4413      	add	r3, r2
 80058a2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058a6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d116      	bne.n	80058e8 <USB_EPStartXfer+0x153c>
 80058ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058be:	881b      	ldrh	r3, [r3, #0]
 80058c0:	b29b      	uxth	r3, r3
 80058c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058c6:	b29a      	uxth	r2, r3
 80058c8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058cc:	801a      	strh	r2, [r3, #0]
 80058ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058d2:	881b      	ldrh	r3, [r3, #0]
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058de:	b29a      	uxth	r2, r3
 80058e0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058e4:	801a      	strh	r2, [r3, #0]
 80058e6:	e083      	b.n	80059f0 <USB_EPStartXfer+0x1644>
 80058e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	2b3e      	cmp	r3, #62	; 0x3e
 80058f6:	d820      	bhi.n	800593a <USB_EPStartXfer+0x158e>
 80058f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	691b      	ldr	r3, [r3, #16]
 8005904:	085b      	lsrs	r3, r3, #1
 8005906:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800590a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800590e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	691b      	ldr	r3, [r3, #16]
 8005916:	f003 0301 	and.w	r3, r3, #1
 800591a:	2b00      	cmp	r3, #0
 800591c:	d004      	beq.n	8005928 <USB_EPStartXfer+0x157c>
 800591e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005922:	3301      	adds	r3, #1
 8005924:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005928:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800592c:	b29b      	uxth	r3, r3
 800592e:	029b      	lsls	r3, r3, #10
 8005930:	b29a      	uxth	r2, r3
 8005932:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005936:	801a      	strh	r2, [r3, #0]
 8005938:	e05a      	b.n	80059f0 <USB_EPStartXfer+0x1644>
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	095b      	lsrs	r3, r3, #5
 8005948:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	f003 031f 	and.w	r3, r3, #31
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <USB_EPStartXfer+0x15be>
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005964:	3b01      	subs	r3, #1
 8005966:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800596a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800596e:	b29b      	uxth	r3, r3
 8005970:	029b      	lsls	r3, r3, #10
 8005972:	b29b      	uxth	r3, r3
 8005974:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005978:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800597c:	b29a      	uxth	r2, r3
 800597e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005982:	801a      	strh	r2, [r3, #0]
 8005984:	e034      	b.n	80059f0 <USB_EPStartXfer+0x1644>
 8005986:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	785b      	ldrb	r3, [r3, #1]
 8005992:	2b01      	cmp	r3, #1
 8005994:	d12c      	bne.n	80059f0 <USB_EPStartXfer+0x1644>
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b2:	b29b      	uxth	r3, r3
 80059b4:	461a      	mov	r2, r3
 80059b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059ba:	4413      	add	r3, r2
 80059bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80059c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	781b      	ldrb	r3, [r3, #0]
 80059cc:	011a      	lsls	r2, r3, #4
 80059ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80059d2:	4413      	add	r3, r2
 80059d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80059d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80059ee:	801a      	strh	r2, [r3, #0]
 80059f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f040 8091 	bne.w	8005b32 <USB_EPStartXfer+0x1786>
 8005a10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a34:	4413      	add	r3, r2
 8005a36:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005a3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	781b      	ldrb	r3, [r3, #0]
 8005a46:	011a      	lsls	r2, r3, #4
 8005a48:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005a4c:	4413      	add	r3, r2
 8005a4e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a52:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	691b      	ldr	r3, [r3, #16]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d116      	bne.n	8005a94 <USB_EPStartXfer+0x16e8>
 8005a66:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a6a:	881b      	ldrh	r3, [r3, #0]
 8005a6c:	b29b      	uxth	r3, r3
 8005a6e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a78:	801a      	strh	r2, [r3, #0]
 8005a7a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a7e:	881b      	ldrh	r3, [r3, #0]
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a8a:	b29a      	uxth	r2, r3
 8005a8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a90:	801a      	strh	r2, [r3, #0]
 8005a92:	e07c      	b.n	8005b8e <USB_EPStartXfer+0x17e2>
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691b      	ldr	r3, [r3, #16]
 8005aa0:	2b3e      	cmp	r3, #62	; 0x3e
 8005aa2:	d820      	bhi.n	8005ae6 <USB_EPStartXfer+0x173a>
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	085b      	lsrs	r3, r3, #1
 8005ab2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ab6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d004      	beq.n	8005ad4 <USB_EPStartXfer+0x1728>
 8005aca:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ace:	3301      	adds	r3, #1
 8005ad0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005ad4:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	029b      	lsls	r3, r3, #10
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ae2:	801a      	strh	r2, [r3, #0]
 8005ae4:	e053      	b.n	8005b8e <USB_EPStartXfer+0x17e2>
 8005ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	095b      	lsrs	r3, r3, #5
 8005af4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 031f 	and.w	r3, r3, #31
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <USB_EPStartXfer+0x176a>
 8005b0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b10:	3b01      	subs	r3, #1
 8005b12:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005b16:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005b1a:	b29b      	uxth	r3, r3
 8005b1c:	029b      	lsls	r3, r3, #10
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b24:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b28:	b29a      	uxth	r2, r3
 8005b2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005b2e:	801a      	strh	r2, [r3, #0]
 8005b30:	e02d      	b.n	8005b8e <USB_EPStartXfer+0x17e2>
 8005b32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	785b      	ldrb	r3, [r3, #1]
 8005b3e:	2b01      	cmp	r3, #1
 8005b40:	d125      	bne.n	8005b8e <USB_EPStartXfer+0x17e2>
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b58:	4413      	add	r3, r2
 8005b5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	b29a      	uxth	r2, r3
 8005b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b8c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	69db      	ldr	r3, [r3, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	f000 81fe 	beq.w	8005f9c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	781b      	ldrb	r3, [r3, #0]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4413      	add	r3, r2
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005bc0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d005      	beq.n	8005bd8 <USB_EPStartXfer+0x182c>
 8005bcc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10d      	bne.n	8005bf4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005bd8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	f040 81db 	bne.w	8005f9c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005be6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 81d4 	bne.w	8005f9c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005bf4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	4413      	add	r3, r2
 8005c0e:	881b      	ldrh	r3, [r3, #0]
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c1a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005c1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	441a      	add	r2, r3
 8005c38:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005c3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c48:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	8013      	strh	r3, [r2, #0]
 8005c50:	e1a4      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005c52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	78db      	ldrb	r3, [r3, #3]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	f040 819a 	bne.w	8005f98 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	699a      	ldr	r2, [r3, #24]
 8005c70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c74:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	429a      	cmp	r2, r3
 8005c7e:	d917      	bls.n	8005cb0 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c94:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	699a      	ldr	r2, [r3, #24]
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	1ad2      	subs	r2, r2, r3
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	619a      	str	r2, [r3, #24]
 8005cae:	e00e      	b.n	8005cce <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005cb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005cc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005cce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	785b      	ldrb	r3, [r3, #1]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d178      	bne.n	8005dd0 <USB_EPStartXfer+0x1a24>
 8005cde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005cec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cfa:	b29b      	uxth	r3, r3
 8005cfc:	461a      	mov	r2, r3
 8005cfe:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d02:	4413      	add	r3, r2
 8005d04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	011a      	lsls	r2, r3, #4
 8005d16:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005d1a:	4413      	add	r3, r2
 8005d1c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d20:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d116      	bne.n	8005d5a <USB_EPStartXfer+0x19ae>
 8005d2c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d3e:	801a      	strh	r2, [r3, #0]
 8005d40:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d44:	881b      	ldrh	r3, [r3, #0]
 8005d46:	b29b      	uxth	r3, r3
 8005d48:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d50:	b29a      	uxth	r2, r3
 8005d52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d56:	801a      	strh	r2, [r3, #0]
 8005d58:	e06b      	b.n	8005e32 <USB_EPStartXfer+0x1a86>
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	2b3e      	cmp	r3, #62	; 0x3e
 8005d60:	d818      	bhi.n	8005d94 <USB_EPStartXfer+0x19e8>
 8005d62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d66:	085b      	lsrs	r3, r3, #1
 8005d68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d70:	f003 0301 	and.w	r3, r3, #1
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d004      	beq.n	8005d82 <USB_EPStartXfer+0x19d6>
 8005d78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	029b      	lsls	r3, r3, #10
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d90:	801a      	strh	r2, [r3, #0]
 8005d92:	e04e      	b.n	8005e32 <USB_EPStartXfer+0x1a86>
 8005d94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005da2:	f003 031f 	and.w	r3, r3, #31
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d104      	bne.n	8005db4 <USB_EPStartXfer+0x1a08>
 8005daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005dae:	3b01      	subs	r3, #1
 8005db0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005db4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	029b      	lsls	r3, r3, #10
 8005dbc:	b29b      	uxth	r3, r3
 8005dbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dc6:	b29a      	uxth	r2, r3
 8005dc8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005dcc:	801a      	strh	r2, [r3, #0]
 8005dce:	e030      	b.n	8005e32 <USB_EPStartXfer+0x1a86>
 8005dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	785b      	ldrb	r3, [r3, #1]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d128      	bne.n	8005e32 <USB_EPStartXfer+0x1a86>
 8005de0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005dee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005df2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e04:	4413      	add	r3, r2
 8005e06:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	011a      	lsls	r2, r3, #4
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e22:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005e26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005e30:	801a      	strh	r2, [r3, #0]
 8005e32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	785b      	ldrb	r3, [r3, #1]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d178      	bne.n	8005f42 <USB_EPStartXfer+0x1b96>
 8005e50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e6c:	b29b      	uxth	r3, r3
 8005e6e:	461a      	mov	r2, r3
 8005e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e74:	4413      	add	r3, r2
 8005e76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	011a      	lsls	r2, r3, #4
 8005e88:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e8c:	4413      	add	r3, r2
 8005e8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d116      	bne.n	8005ecc <USB_EPStartXfer+0x1b20>
 8005e9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ea2:	881b      	ldrh	r3, [r3, #0]
 8005ea4:	b29b      	uxth	r3, r3
 8005ea6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005eaa:	b29a      	uxth	r2, r3
 8005eac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb0:	801a      	strh	r2, [r3, #0]
 8005eb2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb6:	881b      	ldrh	r3, [r3, #0]
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e067      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
 8005ecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed0:	2b3e      	cmp	r3, #62	; 0x3e
 8005ed2:	d818      	bhi.n	8005f06 <USB_EPStartXfer+0x1b5a>
 8005ed4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ed8:	085b      	lsrs	r3, r3, #1
 8005eda:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	f003 0301 	and.w	r3, r3, #1
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <USB_EPStartXfer+0x1b48>
 8005eea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eee:	3301      	adds	r3, #1
 8005ef0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005ef4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	029b      	lsls	r3, r3, #10
 8005efc:	b29a      	uxth	r2, r3
 8005efe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f02:	801a      	strh	r2, [r3, #0]
 8005f04:	e04a      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
 8005f06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f0a:	095b      	lsrs	r3, r3, #5
 8005f0c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f14:	f003 031f 	and.w	r3, r3, #31
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <USB_EPStartXfer+0x1b7a>
 8005f1c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f20:	3b01      	subs	r3, #1
 8005f22:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005f26:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	029b      	lsls	r3, r3, #10
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f3e:	801a      	strh	r2, [r3, #0]
 8005f40:	e02c      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
 8005f42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b01      	cmp	r3, #1
 8005f50:	d124      	bne.n	8005f9c <USB_EPStartXfer+0x1bf0>
 8005f52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	461a      	mov	r2, r3
 8005f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f68:	4413      	add	r3, r2
 8005f6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	011a      	lsls	r2, r3, #4
 8005f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f80:	4413      	add	r3, r2
 8005f82:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f86:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f8a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	e001      	b.n	8005f9c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e03a      	b.n	8006012 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005faa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	881b      	ldrh	r3, [r3, #0]
 8005fb8:	b29b      	uxth	r3, r3
 8005fba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fc2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fc6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fca:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005fce:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fd2:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005fd6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005fda:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005fde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005fe6:	681a      	ldr	r2, [r3, #0]
 8005fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	009b      	lsls	r3, r3, #2
 8005ff6:	441a      	add	r2, r3
 8005ff8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800600c:	b29b      	uxth	r3, r3
 800600e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006010:	2300      	movs	r3, #0
}
 8006012:	4618      	mov	r0, r3
 8006014:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006018:	46bd      	mov	sp, r7
 800601a:	bd80      	pop	{r7, pc}

0800601c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	785b      	ldrb	r3, [r3, #1]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d020      	beq.n	8006070 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	881b      	ldrh	r3, [r3, #0]
 800603a:	b29b      	uxth	r3, r3
 800603c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006040:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006044:	81bb      	strh	r3, [r7, #12]
 8006046:	89bb      	ldrh	r3, [r7, #12]
 8006048:	f083 0310 	eor.w	r3, r3, #16
 800604c:	81bb      	strh	r3, [r7, #12]
 800604e:	687a      	ldr	r2, [r7, #4]
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	441a      	add	r2, r3
 8006058:	89bb      	ldrh	r3, [r7, #12]
 800605a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800605e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006062:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800606a:	b29b      	uxth	r3, r3
 800606c:	8013      	strh	r3, [r2, #0]
 800606e:	e01f      	b.n	80060b0 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006070:	687a      	ldr	r2, [r7, #4]
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	4413      	add	r3, r2
 800607a:	881b      	ldrh	r3, [r3, #0]
 800607c:	b29b      	uxth	r3, r3
 800607e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006086:	81fb      	strh	r3, [r7, #14]
 8006088:	89fb      	ldrh	r3, [r7, #14]
 800608a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800608e:	81fb      	strh	r3, [r7, #14]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	781b      	ldrb	r3, [r3, #0]
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	441a      	add	r2, r3
 800609a:	89fb      	ldrh	r3, [r7, #14]
 800609c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bc80      	pop	{r7}
 80060ba:	4770      	bx	lr

080060bc <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80060bc:	b480      	push	{r7}
 80060be:	b087      	sub	sp, #28
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	7b1b      	ldrb	r3, [r3, #12]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f040 809d 	bne.w	800620a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	785b      	ldrb	r3, [r3, #1]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d04c      	beq.n	8006172 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	4413      	add	r3, r2
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	823b      	strh	r3, [r7, #16]
 80060e6:	8a3b      	ldrh	r3, [r7, #16]
 80060e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d01b      	beq.n	8006128 <USB_EPClearStall+0x6c>
 80060f0:	687a      	ldr	r2, [r7, #4]
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	781b      	ldrb	r3, [r3, #0]
 80060f6:	009b      	lsls	r3, r3, #2
 80060f8:	4413      	add	r3, r2
 80060fa:	881b      	ldrh	r3, [r3, #0]
 80060fc:	b29b      	uxth	r3, r3
 80060fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006106:	81fb      	strh	r3, [r7, #14]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	009b      	lsls	r3, r3, #2
 8006110:	441a      	add	r2, r3
 8006112:	89fb      	ldrh	r3, [r7, #14]
 8006114:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006118:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800611c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006120:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006124:	b29b      	uxth	r3, r3
 8006126:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	78db      	ldrb	r3, [r3, #3]
 800612c:	2b01      	cmp	r3, #1
 800612e:	d06c      	beq.n	800620a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	b29b      	uxth	r3, r3
 800613e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006142:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006146:	81bb      	strh	r3, [r7, #12]
 8006148:	89bb      	ldrh	r3, [r7, #12]
 800614a:	f083 0320 	eor.w	r3, r3, #32
 800614e:	81bb      	strh	r3, [r7, #12]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	781b      	ldrb	r3, [r3, #0]
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	441a      	add	r2, r3
 800615a:	89bb      	ldrh	r3, [r7, #12]
 800615c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006160:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006164:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	b29b      	uxth	r3, r3
 800616e:	8013      	strh	r3, [r2, #0]
 8006170:	e04b      	b.n	800620a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	009b      	lsls	r3, r3, #2
 800617a:	4413      	add	r3, r2
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	82fb      	strh	r3, [r7, #22]
 8006180:	8afb      	ldrh	r3, [r7, #22]
 8006182:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006186:	2b00      	cmp	r3, #0
 8006188:	d01b      	beq.n	80061c2 <USB_EPClearStall+0x106>
 800618a:	687a      	ldr	r2, [r7, #4]
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	881b      	ldrh	r3, [r3, #0]
 8006196:	b29b      	uxth	r3, r3
 8006198:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800619c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061a0:	82bb      	strh	r3, [r7, #20]
 80061a2:	687a      	ldr	r2, [r7, #4]
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	441a      	add	r2, r3
 80061ac:	8abb      	ldrh	r3, [r7, #20]
 80061ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80061ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061be:	b29b      	uxth	r3, r3
 80061c0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	009b      	lsls	r3, r3, #2
 80061ca:	4413      	add	r3, r2
 80061cc:	881b      	ldrh	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061d8:	827b      	strh	r3, [r7, #18]
 80061da:	8a7b      	ldrh	r3, [r7, #18]
 80061dc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80061e0:	827b      	strh	r3, [r7, #18]
 80061e2:	8a7b      	ldrh	r3, [r7, #18]
 80061e4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80061e8:	827b      	strh	r3, [r7, #18]
 80061ea:	687a      	ldr	r2, [r7, #4]
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	009b      	lsls	r3, r3, #2
 80061f2:	441a      	add	r2, r3
 80061f4:	8a7b      	ldrh	r3, [r7, #18]
 80061f6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061fa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006202:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006206:	b29b      	uxth	r3, r3
 8006208:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800620a:	2300      	movs	r3, #0
}
 800620c:	4618      	mov	r0, r3
 800620e:	371c      	adds	r7, #28
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	460b      	mov	r3, r1
 8006220:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006222:	78fb      	ldrb	r3, [r7, #3]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d103      	bne.n	8006230 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2280      	movs	r2, #128	; 0x80
 800622c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006230:	2300      	movs	r3, #0
}
 8006232:	4618      	mov	r0, r3
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	bc80      	pop	{r7}
 800623a:	4770      	bx	lr

0800623c <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr

08006250 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006258:	2300      	movs	r3, #0
}
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006272:	b29b      	uxth	r3, r3
 8006274:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006276:	68fb      	ldr	r3, [r7, #12]
}
 8006278:	4618      	mov	r0, r3
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	bc80      	pop	{r7}
 8006280:	4770      	bx	lr

08006282 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006282:	b480      	push	{r7}
 8006284:	b083      	sub	sp, #12
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
 800628a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	370c      	adds	r7, #12
 8006292:	46bd      	mov	sp, r7
 8006294:	bc80      	pop	{r7}
 8006296:	4770      	bx	lr

08006298 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006298:	b480      	push	{r7}
 800629a:	b08d      	sub	sp, #52	; 0x34
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	460b      	mov	r3, r1
 80062a8:	80fb      	strh	r3, [r7, #6]
 80062aa:	4613      	mov	r3, r2
 80062ac:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80062ae:	88bb      	ldrh	r3, [r7, #4]
 80062b0:	3301      	adds	r3, #1
 80062b2:	085b      	lsrs	r3, r3, #1
 80062b4:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062be:	88fb      	ldrh	r3, [r7, #6]
 80062c0:	005a      	lsls	r2, r3, #1
 80062c2:	69fb      	ldr	r3, [r7, #28]
 80062c4:	4413      	add	r3, r2
 80062c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062ca:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80062cc:	6a3b      	ldr	r3, [r7, #32]
 80062ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80062d0:	e01e      	b.n	8006310 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80062d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062da:	3301      	adds	r3, #1
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80062de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	b29b      	uxth	r3, r3
 80062e4:	021b      	lsls	r3, r3, #8
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	461a      	mov	r2, r3
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	b29a      	uxth	r2, r3
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80062f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fa:	3302      	adds	r3, #2
 80062fc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80062fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006300:	3302      	adds	r3, #2
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006306:	3301      	adds	r3, #1
 8006308:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	3b01      	subs	r3, #1
 800630e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006310:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1dd      	bne.n	80062d2 <USB_WritePMA+0x3a>
  }
}
 8006316:	bf00      	nop
 8006318:	bf00      	nop
 800631a:	3734      	adds	r7, #52	; 0x34
 800631c:	46bd      	mov	sp, r7
 800631e:	bc80      	pop	{r7}
 8006320:	4770      	bx	lr

08006322 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006322:	b480      	push	{r7}
 8006324:	b08b      	sub	sp, #44	; 0x2c
 8006326:	af00      	add	r7, sp, #0
 8006328:	60f8      	str	r0, [r7, #12]
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	4611      	mov	r1, r2
 800632e:	461a      	mov	r2, r3
 8006330:	460b      	mov	r3, r1
 8006332:	80fb      	strh	r3, [r7, #6]
 8006334:	4613      	mov	r3, r2
 8006336:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006338:	88bb      	ldrh	r3, [r7, #4]
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006344:	68bb      	ldr	r3, [r7, #8]
 8006346:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006348:	88fb      	ldrh	r3, [r7, #6]
 800634a:	005a      	lsls	r2, r3, #1
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006354:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
 800635a:	e01b      	b.n	8006394 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800635c:	6a3b      	ldr	r3, [r7, #32]
 800635e:	881b      	ldrh	r3, [r3, #0]
 8006360:	b29b      	uxth	r3, r3
 8006362:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006364:	6a3b      	ldr	r3, [r7, #32]
 8006366:	3302      	adds	r3, #2
 8006368:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800636a:	693b      	ldr	r3, [r7, #16]
 800636c:	b2da      	uxtb	r2, r3
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	3301      	adds	r3, #1
 8006376:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	0a1b      	lsrs	r3, r3, #8
 800637c:	b2da      	uxtb	r2, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006382:	69fb      	ldr	r3, [r7, #28]
 8006384:	3301      	adds	r3, #1
 8006386:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	3302      	adds	r3, #2
 800638c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	3b01      	subs	r3, #1
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
 8006394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006396:	2b00      	cmp	r3, #0
 8006398:	d1e0      	bne.n	800635c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800639a:	88bb      	ldrh	r3, [r7, #4]
 800639c:	f003 0301 	and.w	r3, r3, #1
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d007      	beq.n	80063b6 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80063a6:	6a3b      	ldr	r3, [r7, #32]
 80063a8:	881b      	ldrh	r3, [r3, #0]
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	69fb      	ldr	r3, [r7, #28]
 80063b4:	701a      	strb	r2, [r3, #0]
  }
}
 80063b6:	bf00      	nop
 80063b8:	372c      	adds	r7, #44	; 0x2c
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bc80      	pop	{r7}
 80063be:	4770      	bx	lr

080063c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c0:	b580      	push	{r7, lr}
 80063c2:	b084      	sub	sp, #16
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	460b      	mov	r3, r1
 80063ca:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80063cc:	2300      	movs	r3, #0
 80063ce:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	7c1b      	ldrb	r3, [r3, #16]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d115      	bne.n	8006404 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80063d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063dc:	2202      	movs	r2, #2
 80063de:	2181      	movs	r1, #129	; 0x81
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 fe30 	bl	8008046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2201      	movs	r2, #1
 80063ea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80063f0:	2202      	movs	r2, #2
 80063f2:	2101      	movs	r1, #1
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 fe26 	bl	8008046 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006402:	e012      	b.n	800642a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006404:	2340      	movs	r3, #64	; 0x40
 8006406:	2202      	movs	r2, #2
 8006408:	2181      	movs	r1, #129	; 0x81
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f001 fe1b 	bl	8008046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006416:	2340      	movs	r3, #64	; 0x40
 8006418:	2202      	movs	r2, #2
 800641a:	2101      	movs	r1, #1
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	f001 fe12 	bl	8008046 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2201      	movs	r2, #1
 8006426:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800642a:	2308      	movs	r3, #8
 800642c:	2203      	movs	r2, #3
 800642e:	2182      	movs	r1, #130	; 0x82
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 fe08 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2201      	movs	r2, #1
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800643c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006440:	f001 ff28 	bl	8008294 <USBD_static_malloc>
 8006444:	4602      	mov	r2, r0
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
 800645a:	e026      	b.n	80064aa <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006462:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2200      	movs	r2, #0
 8006472:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	2200      	movs	r2, #0
 800647a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7c1b      	ldrb	r3, [r3, #16]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800648c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006490:	2101      	movs	r1, #1
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fec8 	bl	8008228 <USBD_LL_PrepareReceive>
 8006498:	e007      	b.n	80064aa <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80064a0:	2340      	movs	r3, #64	; 0x40
 80064a2:	2101      	movs	r1, #1
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f001 febf 	bl	8008228 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3710      	adds	r7, #16
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd80      	pop	{r7, pc}

080064b4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b084      	sub	sp, #16
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	460b      	mov	r3, r1
 80064be:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80064c4:	2181      	movs	r1, #129	; 0x81
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fde3 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80064d2:	2101      	movs	r1, #1
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f001 fddc 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80064e2:	2182      	movs	r1, #130	; 0x82
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f001 fdd4 	bl	8008092 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00e      	beq.n	8006518 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800650a:	4618      	mov	r0, r3
 800650c:	f001 fece 	bl	80082ac <USBD_static_free>
    pdev->pClassData = NULL;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8006518:	7bfb      	ldrb	r3, [r7, #15]
}
 800651a:	4618      	mov	r0, r3
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}

08006522 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006522:	b580      	push	{r7, lr}
 8006524:	b086      	sub	sp, #24
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006532:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006534:	2300      	movs	r3, #0
 8006536:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800653c:	2300      	movs	r3, #0
 800653e:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	781b      	ldrb	r3, [r3, #0]
 8006544:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006548:	2b00      	cmp	r3, #0
 800654a:	d039      	beq.n	80065c0 <USBD_CDC_Setup+0x9e>
 800654c:	2b20      	cmp	r3, #32
 800654e:	d17f      	bne.n	8006650 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	88db      	ldrh	r3, [r3, #6]
 8006554:	2b00      	cmp	r3, #0
 8006556:	d029      	beq.n	80065ac <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	b25b      	sxtb	r3, r3
 800655e:	2b00      	cmp	r3, #0
 8006560:	da11      	bge.n	8006586 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	683a      	ldr	r2, [r7, #0]
 800656c:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 800656e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	88d2      	ldrh	r2, [r2, #6]
 8006574:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006576:	6939      	ldr	r1, [r7, #16]
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	88db      	ldrh	r3, [r3, #6]
 800657c:	461a      	mov	r2, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 f9d9 	bl	8007936 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006584:	e06b      	b.n	800665e <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	785a      	ldrb	r2, [r3, #1]
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	88db      	ldrh	r3, [r3, #6]
 8006594:	b2da      	uxtb	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800659c:	6939      	ldr	r1, [r7, #16]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	88db      	ldrh	r3, [r3, #6]
 80065a2:	461a      	mov	r2, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f001 f9f4 	bl	8007992 <USBD_CtlPrepareRx>
      break;
 80065aa:	e058      	b.n	800665e <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	683a      	ldr	r2, [r7, #0]
 80065b6:	7850      	ldrb	r0, [r2, #1]
 80065b8:	2200      	movs	r2, #0
 80065ba:	6839      	ldr	r1, [r7, #0]
 80065bc:	4798      	blx	r3
      break;
 80065be:	e04e      	b.n	800665e <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	785b      	ldrb	r3, [r3, #1]
 80065c4:	2b0b      	cmp	r3, #11
 80065c6:	d02e      	beq.n	8006626 <USBD_CDC_Setup+0x104>
 80065c8:	2b0b      	cmp	r3, #11
 80065ca:	dc38      	bgt.n	800663e <USBD_CDC_Setup+0x11c>
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <USBD_CDC_Setup+0xb4>
 80065d0:	2b0a      	cmp	r3, #10
 80065d2:	d014      	beq.n	80065fe <USBD_CDC_Setup+0xdc>
 80065d4:	e033      	b.n	800663e <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065dc:	2b03      	cmp	r3, #3
 80065de:	d107      	bne.n	80065f0 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80065e0:	f107 030c 	add.w	r3, r7, #12
 80065e4:	2202      	movs	r2, #2
 80065e6:	4619      	mov	r1, r3
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f001 f9a4 	bl	8007936 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065ee:	e02e      	b.n	800664e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80065f0:	6839      	ldr	r1, [r7, #0]
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f001 f935 	bl	8007862 <USBD_CtlError>
            ret = USBD_FAIL;
 80065f8:	2302      	movs	r3, #2
 80065fa:	75fb      	strb	r3, [r7, #23]
          break;
 80065fc:	e027      	b.n	800664e <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006604:	2b03      	cmp	r3, #3
 8006606:	d107      	bne.n	8006618 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006608:	f107 030f 	add.w	r3, r7, #15
 800660c:	2201      	movs	r2, #1
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f001 f990 	bl	8007936 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006616:	e01a      	b.n	800664e <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f001 f921 	bl	8007862 <USBD_CtlError>
            ret = USBD_FAIL;
 8006620:	2302      	movs	r3, #2
 8006622:	75fb      	strb	r3, [r7, #23]
          break;
 8006624:	e013      	b.n	800664e <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800662c:	2b03      	cmp	r3, #3
 800662e:	d00d      	beq.n	800664c <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f001 f915 	bl	8007862 <USBD_CtlError>
            ret = USBD_FAIL;
 8006638:	2302      	movs	r3, #2
 800663a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800663c:	e006      	b.n	800664c <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 800663e:	6839      	ldr	r1, [r7, #0]
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 f90e 	bl	8007862 <USBD_CtlError>
          ret = USBD_FAIL;
 8006646:	2302      	movs	r3, #2
 8006648:	75fb      	strb	r3, [r7, #23]
          break;
 800664a:	e000      	b.n	800664e <USBD_CDC_Setup+0x12c>
          break;
 800664c:	bf00      	nop
      }
      break;
 800664e:	e006      	b.n	800665e <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006650:	6839      	ldr	r1, [r7, #0]
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f001 f905 	bl	8007862 <USBD_CtlError>
      ret = USBD_FAIL;
 8006658:	2302      	movs	r3, #2
 800665a:	75fb      	strb	r3, [r7, #23]
      break;
 800665c:	bf00      	nop
  }

  return ret;
 800665e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006660:	4618      	mov	r0, r3
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
 8006670:	460b      	mov	r3, r1
 8006672:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800667a:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006682:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800668a:	2b00      	cmp	r3, #0
 800668c:	d03a      	beq.n	8006704 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800668e:	78fa      	ldrb	r2, [r7, #3]
 8006690:	6879      	ldr	r1, [r7, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	4413      	add	r3, r2
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	440b      	add	r3, r1
 800669c:	331c      	adds	r3, #28
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d029      	beq.n	80066f8 <USBD_CDC_DataIn+0x90>
 80066a4:	78fa      	ldrb	r2, [r7, #3]
 80066a6:	6879      	ldr	r1, [r7, #4]
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	440b      	add	r3, r1
 80066b2:	331c      	adds	r3, #28
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	78f9      	ldrb	r1, [r7, #3]
 80066b8:	68b8      	ldr	r0, [r7, #8]
 80066ba:	460b      	mov	r3, r1
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	440b      	add	r3, r1
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4403      	add	r3, r0
 80066c4:	3338      	adds	r3, #56	; 0x38
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	fbb2 f1f3 	udiv	r1, r2, r3
 80066cc:	fb01 f303 	mul.w	r3, r1, r3
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d110      	bne.n	80066f8 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80066d6:	78fa      	ldrb	r2, [r7, #3]
 80066d8:	6879      	ldr	r1, [r7, #4]
 80066da:	4613      	mov	r3, r2
 80066dc:	009b      	lsls	r3, r3, #2
 80066de:	4413      	add	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	440b      	add	r3, r1
 80066e4:	331c      	adds	r3, #28
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80066ea:	78f9      	ldrb	r1, [r7, #3]
 80066ec:	2300      	movs	r3, #0
 80066ee:	2200      	movs	r2, #0
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fd76 	bl	80081e2 <USBD_LL_Transmit>
 80066f6:	e003      	b.n	8006700 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	4618      	mov	r0, r3
 8006708:	3710      	adds	r7, #16
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}

0800670e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800670e:	b580      	push	{r7, lr}
 8006710:	b084      	sub	sp, #16
 8006712:	af00      	add	r7, sp, #0
 8006714:	6078      	str	r0, [r7, #4]
 8006716:	460b      	mov	r3, r1
 8006718:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006720:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006722:	78fb      	ldrb	r3, [r7, #3]
 8006724:	4619      	mov	r1, r3
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f001 fda1 	bl	800826e <USBD_LL_GetRxDataSize>
 800672c:	4602      	mov	r2, r0
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800673a:	2b00      	cmp	r3, #0
 800673c:	d00d      	beq.n	800675a <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006744:	68db      	ldr	r3, [r3, #12]
 8006746:	68fa      	ldr	r2, [r7, #12]
 8006748:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006752:	4611      	mov	r1, r2
 8006754:	4798      	blx	r3

    return USBD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	e000      	b.n	800675c <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800675a:	2302      	movs	r3, #2
  }
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006772:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800677a:	2b00      	cmp	r3, #0
 800677c:	d015      	beq.n	80067aa <USBD_CDC_EP0_RxReady+0x46>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006784:	2bff      	cmp	r3, #255	; 0xff
 8006786:	d010      	beq.n	80067aa <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006796:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006798:	68fa      	ldr	r2, [r7, #12]
 800679a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800679e:	b292      	uxth	r2, r2
 80067a0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	22ff      	movs	r2, #255	; 0xff
 80067a6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2243      	movs	r2, #67	; 0x43
 80067c0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 80067c2:	4b03      	ldr	r3, [pc, #12]	; (80067d0 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	2000009c 	.word	0x2000009c

080067d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2243      	movs	r2, #67	; 0x43
 80067e0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 80067e2:	4b03      	ldr	r3, [pc, #12]	; (80067f0 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bc80      	pop	{r7}
 80067ec:	4770      	bx	lr
 80067ee:	bf00      	nop
 80067f0:	20000058 	.word	0x20000058

080067f4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b083      	sub	sp, #12
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2243      	movs	r2, #67	; 0x43
 8006800:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006802:	4b03      	ldr	r3, [pc, #12]	; (8006810 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	bc80      	pop	{r7}
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	200000e0 	.word	0x200000e0

08006814 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	220a      	movs	r2, #10
 8006820:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006822:	4b03      	ldr	r3, [pc, #12]	; (8006830 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006824:	4618      	mov	r0, r3
 8006826:	370c      	adds	r7, #12
 8006828:	46bd      	mov	sp, r7
 800682a:	bc80      	pop	{r7}
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000014 	.word	0x20000014

08006834 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006834:	b480      	push	{r7}
 8006836:	b085      	sub	sp, #20
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
 800683c:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800683e:	2302      	movs	r3, #2
 8006840:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d005      	beq.n	8006854 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	683a      	ldr	r2, [r7, #0]
 800684c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006850:	2300      	movs	r3, #0
 8006852:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006854:	7bfb      	ldrb	r3, [r7, #15]
}
 8006856:	4618      	mov	r0, r3
 8006858:	3714      	adds	r7, #20
 800685a:	46bd      	mov	sp, r7
 800685c:	bc80      	pop	{r7}
 800685e:	4770      	bx	lr

08006860 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	4613      	mov	r3, r2
 800686c:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006874:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	68ba      	ldr	r2, [r7, #8]
 800687a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800687e:	88fa      	ldrh	r2, [r7, #6]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006886:	2300      	movs	r3, #0
}
 8006888:	4618      	mov	r0, r3
 800688a:	371c      	adds	r7, #28
 800688c:	46bd      	mov	sp, r7
 800688e:	bc80      	pop	{r7}
 8006890:	4770      	bx	lr

08006892 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006892:	b480      	push	{r7}
 8006894:	b085      	sub	sp, #20
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
 800689a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a2:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3714      	adds	r7, #20
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bc80      	pop	{r7}
 80068b6:	4770      	bx	lr

080068b8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d017      	beq.n	8006902 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7c1b      	ldrb	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e4:	2101      	movs	r1, #1
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 fc9e 	bl	8008228 <USBD_LL_PrepareReceive>
 80068ec:	e007      	b.n	80068fe <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	2101      	movs	r1, #1
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 fc95 	bl	8008228 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	e000      	b.n	8006904 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006902:	2302      	movs	r3, #2
  }
}
 8006904:	4618      	mov	r0, r3
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b084      	sub	sp, #16
 8006910:	af00      	add	r7, sp, #0
 8006912:	60f8      	str	r0, [r7, #12]
 8006914:	60b9      	str	r1, [r7, #8]
 8006916:	4613      	mov	r3, r2
 8006918:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d101      	bne.n	8006924 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006920:	2302      	movs	r3, #2
 8006922:	e01a      	b.n	800695a <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800692a:	2b00      	cmp	r3, #0
 800692c:	d003      	beq.n	8006936 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d003      	beq.n	8006944 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2201      	movs	r2, #1
 8006948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	79fa      	ldrb	r2, [r7, #7]
 8006950:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f001 fb02 	bl	8007f5c <USBD_LL_Init>

  return USBD_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}

08006962 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006962:	b480      	push	{r7}
 8006964:	b085      	sub	sp, #20
 8006966:	af00      	add	r7, sp, #0
 8006968:	6078      	str	r0, [r7, #4]
 800696a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800696c:	2300      	movs	r3, #0
 800696e:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d006      	beq.n	8006984 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	683a      	ldr	r2, [r7, #0]
 800697a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800697e:	2300      	movs	r3, #0
 8006980:	73fb      	strb	r3, [r7, #15]
 8006982:	e001      	b.n	8006988 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006984:	2302      	movs	r3, #2
 8006986:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006988:	7bfb      	ldrb	r3, [r7, #15]
}
 800698a:	4618      	mov	r0, r3
 800698c:	3714      	adds	r7, #20
 800698e:	46bd      	mov	sp, r7
 8006990:	bc80      	pop	{r7}
 8006992:	4770      	bx	lr

08006994 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f001 fb37 	bl	8008010 <USBD_LL_Start>

  return USBD_OK;
 80069a2:	2300      	movs	r3, #0
}
 80069a4:	4618      	mov	r0, r3
 80069a6:	3708      	adds	r7, #8
 80069a8:	46bd      	mov	sp, r7
 80069aa:	bd80      	pop	{r7, pc}

080069ac <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bc80      	pop	{r7}
 80069be:	4770      	bx	lr

080069c0 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	460b      	mov	r3, r1
 80069ca:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80069cc:	2302      	movs	r3, #2
 80069ce:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00c      	beq.n	80069f4 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	4611      	mov	r1, r2
 80069e6:	6878      	ldr	r0, [r7, #4]
 80069e8:	4798      	blx	r3
 80069ea:	4603      	mov	r3, r0
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d101      	bne.n	80069f4 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80069f0:	2300      	movs	r3, #0
 80069f2:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80069f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3710      	adds	r7, #16
 80069fa:	46bd      	mov	sp, r7
 80069fc:	bd80      	pop	{r7, pc}

080069fe <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80069fe:	b580      	push	{r7, lr}
 8006a00:	b082      	sub	sp, #8
 8006a02:	af00      	add	r7, sp, #0
 8006a04:	6078      	str	r0, [r7, #4]
 8006a06:	460b      	mov	r3, r1
 8006a08:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a10:	685b      	ldr	r3, [r3, #4]
 8006a12:	78fa      	ldrb	r2, [r7, #3]
 8006a14:	4611      	mov	r1, r2
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3

  return USBD_OK;
 8006a1a:	2300      	movs	r3, #0
}
 8006a1c:	4618      	mov	r0, r3
 8006a1e:	3708      	adds	r7, #8
 8006a20:	46bd      	mov	sp, r7
 8006a22:	bd80      	pop	{r7, pc}

08006a24 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b082      	sub	sp, #8
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a34:	6839      	ldr	r1, [r7, #0]
 8006a36:	4618      	mov	r0, r3
 8006a38:	f000 fed7 	bl	80077ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a58:	f003 031f 	and.w	r3, r3, #31
 8006a5c:	2b02      	cmp	r3, #2
 8006a5e:	d016      	beq.n	8006a8e <USBD_LL_SetupStage+0x6a>
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d81c      	bhi.n	8006a9e <USBD_LL_SetupStage+0x7a>
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d002      	beq.n	8006a6e <USBD_LL_SetupStage+0x4a>
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d008      	beq.n	8006a7e <USBD_LL_SetupStage+0x5a>
 8006a6c:	e017      	b.n	8006a9e <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a74:	4619      	mov	r1, r3
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f9ca 	bl	8006e10 <USBD_StdDevReq>
      break;
 8006a7c:	e01a      	b.n	8006ab4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a84:	4619      	mov	r1, r3
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa2c 	bl	8006ee4 <USBD_StdItfReq>
      break;
 8006a8c:	e012      	b.n	8006ab4 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a94:	4619      	mov	r1, r3
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 fa6c 	bl	8006f74 <USBD_StdEPReq>
      break;
 8006a9c:	e00a      	b.n	8006ab4 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006aa4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006aa8:	b2db      	uxtb	r3, r3
 8006aaa:	4619      	mov	r1, r3
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f001 fb0f 	bl	80080d0 <USBD_LL_StallEP>
      break;
 8006ab2:	bf00      	nop
  }

  return USBD_OK;
 8006ab4:	2300      	movs	r3, #0
}
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3708      	adds	r7, #8
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bd80      	pop	{r7, pc}

08006abe <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006abe:	b580      	push	{r7, lr}
 8006ac0:	b086      	sub	sp, #24
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	60f8      	str	r0, [r7, #12]
 8006ac6:	460b      	mov	r3, r1
 8006ac8:	607a      	str	r2, [r7, #4]
 8006aca:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006acc:	7afb      	ldrb	r3, [r7, #11]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d14b      	bne.n	8006b6a <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006ad8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae0:	2b03      	cmp	r3, #3
 8006ae2:	d134      	bne.n	8006b4e <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	68da      	ldr	r2, [r3, #12]
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	691b      	ldr	r3, [r3, #16]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d919      	bls.n	8006b24 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	68da      	ldr	r2, [r3, #12]
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	691b      	ldr	r3, [r3, #16]
 8006af8:	1ad2      	subs	r2, r2, r3
 8006afa:	697b      	ldr	r3, [r7, #20]
 8006afc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	68da      	ldr	r2, [r3, #12]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d203      	bcs.n	8006b12 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	e002      	b.n	8006b18 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	461a      	mov	r2, r3
 8006b1a:	6879      	ldr	r1, [r7, #4]
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 ff56 	bl	80079ce <USBD_CtlContinueRx>
 8006b22:	e038      	b.n	8006b96 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00a      	beq.n	8006b46 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006b36:	2b03      	cmp	r3, #3
 8006b38:	d105      	bne.n	8006b46 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	68f8      	ldr	r0, [r7, #12]
 8006b44:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006b46:	68f8      	ldr	r0, [r7, #12]
 8006b48:	f000 ff53 	bl	80079f2 <USBD_CtlSendStatus>
 8006b4c:	e023      	b.n	8006b96 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b54:	2b05      	cmp	r3, #5
 8006b56:	d11e      	bne.n	8006b96 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006b60:	2100      	movs	r1, #0
 8006b62:	68f8      	ldr	r0, [r7, #12]
 8006b64:	f001 fab4 	bl	80080d0 <USBD_LL_StallEP>
 8006b68:	e015      	b.n	8006b96 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d00d      	beq.n	8006b92 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d108      	bne.n	8006b92 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b86:	699b      	ldr	r3, [r3, #24]
 8006b88:	7afa      	ldrb	r2, [r7, #11]
 8006b8a:	4611      	mov	r1, r2
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	4798      	blx	r3
 8006b90:	e001      	b.n	8006b96 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b92:	2302      	movs	r3, #2
 8006b94:	e000      	b.n	8006b98 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}

08006ba0 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	60f8      	str	r0, [r7, #12]
 8006ba8:	460b      	mov	r3, r1
 8006baa:	607a      	str	r2, [r7, #4]
 8006bac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006bae:	7afb      	ldrb	r3, [r7, #11]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d17f      	bne.n	8006cb4 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	3314      	adds	r3, #20
 8006bb8:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006bc0:	2b02      	cmp	r3, #2
 8006bc2:	d15c      	bne.n	8006c7e <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	691b      	ldr	r3, [r3, #16]
 8006bcc:	429a      	cmp	r2, r3
 8006bce:	d915      	bls.n	8006bfc <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	68da      	ldr	r2, [r3, #12]
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	1ad2      	subs	r2, r2, r3
 8006bda:	697b      	ldr	r3, [r7, #20]
 8006bdc:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006bde:	697b      	ldr	r3, [r7, #20]
 8006be0:	68db      	ldr	r3, [r3, #12]
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	461a      	mov	r2, r3
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68f8      	ldr	r0, [r7, #12]
 8006bea:	f000 fec0 	bl	800796e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bee:	2300      	movs	r3, #0
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f001 fb17 	bl	8008228 <USBD_LL_PrepareReceive>
 8006bfa:	e04e      	b.n	8006c9a <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	689b      	ldr	r3, [r3, #8]
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	6912      	ldr	r2, [r2, #16]
 8006c04:	fbb3 f1f2 	udiv	r1, r3, r2
 8006c08:	fb01 f202 	mul.w	r2, r1, r2
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d11c      	bne.n	8006c4c <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	689a      	ldr	r2, [r3, #8]
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d316      	bcc.n	8006c4c <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006c1e:	697b      	ldr	r3, [r7, #20]
 8006c20:	689a      	ldr	r2, [r3, #8]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d20f      	bcs.n	8006c4c <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	2100      	movs	r1, #0
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fe9c 	bl	800796e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006c3e:	2300      	movs	r3, #0
 8006c40:	2200      	movs	r2, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f001 faef 	bl	8008228 <USBD_LL_PrepareReceive>
 8006c4a:	e026      	b.n	8006c9a <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d00a      	beq.n	8006c6e <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d105      	bne.n	8006c6e <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	68f8      	ldr	r0, [r7, #12]
 8006c6c:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006c6e:	2180      	movs	r1, #128	; 0x80
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f001 fa2d 	bl	80080d0 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c76:	68f8      	ldr	r0, [r7, #12]
 8006c78:	f000 fece 	bl	8007a18 <USBD_CtlReceiveStatus>
 8006c7c:	e00d      	b.n	8006c9a <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c84:	2b04      	cmp	r3, #4
 8006c86:	d004      	beq.n	8006c92 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d103      	bne.n	8006c9a <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c92:	2180      	movs	r1, #128	; 0x80
 8006c94:	68f8      	ldr	r0, [r7, #12]
 8006c96:	f001 fa1b 	bl	80080d0 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d11d      	bne.n	8006ce0 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006ca4:	68f8      	ldr	r0, [r7, #12]
 8006ca6:	f7ff fe81 	bl	80069ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	2200      	movs	r2, #0
 8006cae:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006cb2:	e015      	b.n	8006ce0 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cba:	695b      	ldr	r3, [r3, #20]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d00d      	beq.n	8006cdc <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006cc6:	2b03      	cmp	r3, #3
 8006cc8:	d108      	bne.n	8006cdc <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd0:	695b      	ldr	r3, [r3, #20]
 8006cd2:	7afa      	ldrb	r2, [r7, #11]
 8006cd4:	4611      	mov	r1, r2
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	4798      	blx	r3
 8006cda:	e001      	b.n	8006ce0 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	e000      	b.n	8006ce2 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006ce0:	2300      	movs	r3, #0
}
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}

08006cea <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006cea:	b580      	push	{r7, lr}
 8006cec:	b082      	sub	sp, #8
 8006cee:	af00      	add	r7, sp, #0
 8006cf0:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006cf2:	2340      	movs	r3, #64	; 0x40
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f001 f9a4 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2240      	movs	r2, #64	; 0x40
 8006d0a:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006d0e:	2340      	movs	r3, #64	; 0x40
 8006d10:	2200      	movs	r2, #0
 8006d12:	2180      	movs	r1, #128	; 0x80
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f001 f996 	bl	8008046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	2240      	movs	r2, #64	; 0x40
 8006d24:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2200      	movs	r2, #0
 8006d3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	2200      	movs	r2, #0
 8006d40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	687a      	ldr	r2, [r7, #4]
 8006d58:	6852      	ldr	r2, [r2, #4]
 8006d5a:	b2d2      	uxtb	r2, r2
 8006d5c:	4611      	mov	r1, r2
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	4798      	blx	r3
  }

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	460b      	mov	r3, r1
 8006d76:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	78fa      	ldrb	r2, [r7, #3]
 8006d7c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d7e:	2300      	movs	r3, #0
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	370c      	adds	r7, #12
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bc80      	pop	{r7}
 8006d88:	4770      	bx	lr

08006d8a <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b083      	sub	sp, #12
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2204      	movs	r2, #4
 8006da2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	370c      	adds	r7, #12
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr

08006db2 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006db2:	b480      	push	{r7}
 8006db4:	b083      	sub	sp, #12
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d105      	bne.n	8006dd0 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	370c      	adds	r7, #12
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b082      	sub	sp, #8
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dea:	2b03      	cmp	r3, #3
 8006dec:	d10b      	bne.n	8006e06 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d005      	beq.n	8006e06 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e00:	69db      	ldr	r3, [r3, #28]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006e06:	2300      	movs	r3, #0
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3708      	adds	r7, #8
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e1e:	683b      	ldr	r3, [r7, #0]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e26:	2b40      	cmp	r3, #64	; 0x40
 8006e28:	d005      	beq.n	8006e36 <USBD_StdDevReq+0x26>
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	d84f      	bhi.n	8006ece <USBD_StdDevReq+0xbe>
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d009      	beq.n	8006e46 <USBD_StdDevReq+0x36>
 8006e32:	2b20      	cmp	r3, #32
 8006e34:	d14b      	bne.n	8006ece <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	4798      	blx	r3
      break;
 8006e44:	e048      	b.n	8006ed8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	785b      	ldrb	r3, [r3, #1]
 8006e4a:	2b09      	cmp	r3, #9
 8006e4c:	d839      	bhi.n	8006ec2 <USBD_StdDevReq+0xb2>
 8006e4e:	a201      	add	r2, pc, #4	; (adr r2, 8006e54 <USBD_StdDevReq+0x44>)
 8006e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e54:	08006ea5 	.word	0x08006ea5
 8006e58:	08006eb9 	.word	0x08006eb9
 8006e5c:	08006ec3 	.word	0x08006ec3
 8006e60:	08006eaf 	.word	0x08006eaf
 8006e64:	08006ec3 	.word	0x08006ec3
 8006e68:	08006e87 	.word	0x08006e87
 8006e6c:	08006e7d 	.word	0x08006e7d
 8006e70:	08006ec3 	.word	0x08006ec3
 8006e74:	08006e9b 	.word	0x08006e9b
 8006e78:	08006e91 	.word	0x08006e91
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e7c:	6839      	ldr	r1, [r7, #0]
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f9dc 	bl	800723c <USBD_GetDescriptor>
          break;
 8006e84:	e022      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e86:	6839      	ldr	r1, [r7, #0]
 8006e88:	6878      	ldr	r0, [r7, #4]
 8006e8a:	f000 fb3f 	bl	800750c <USBD_SetAddress>
          break;
 8006e8e:	e01d      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e90:	6839      	ldr	r1, [r7, #0]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fb7e 	bl	8007594 <USBD_SetConfig>
          break;
 8006e98:	e018      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc07 	bl	80076b0 <USBD_GetConfig>
          break;
 8006ea2:	e013      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fc37 	bl	800771a <USBD_GetStatus>
          break;
 8006eac:	e00e      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fc65 	bl	8007780 <USBD_SetFeature>
          break;
 8006eb6:	e009      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fc74 	bl	80077a8 <USBD_ClrFeature>
          break;
 8006ec0:	e004      	b.n	8006ecc <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fccc 	bl	8007862 <USBD_CtlError>
          break;
 8006eca:	bf00      	nop
      }
      break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fcc6 	bl	8007862 <USBD_CtlError>
      break;
 8006ed6:	bf00      	nop
  }

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d005      	beq.n	8006f0a <USBD_StdItfReq+0x26>
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d82e      	bhi.n	8006f60 <USBD_StdItfReq+0x7c>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USBD_StdItfReq+0x26>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d12a      	bne.n	8006f60 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	3b01      	subs	r3, #1
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d81d      	bhi.n	8006f52 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	889b      	ldrh	r3, [r3, #4]
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d813      	bhi.n	8006f48 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	6839      	ldr	r1, [r7, #0]
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	4798      	blx	r3
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88db      	ldrh	r3, [r3, #6]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d110      	bne.n	8006f5c <USBD_StdItfReq+0x78>
 8006f3a:	7bfb      	ldrb	r3, [r7, #15]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d10d      	bne.n	8006f5c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006f40:	6878      	ldr	r0, [r7, #4]
 8006f42:	f000 fd56 	bl	80079f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f46:	e009      	b.n	8006f5c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006f48:	6839      	ldr	r1, [r7, #0]
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f000 fc89 	bl	8007862 <USBD_CtlError>
          break;
 8006f50:	e004      	b.n	8006f5c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006f52:	6839      	ldr	r1, [r7, #0]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fc84 	bl	8007862 <USBD_CtlError>
          break;
 8006f5a:	e000      	b.n	8006f5e <USBD_StdItfReq+0x7a>
          break;
 8006f5c:	bf00      	nop
      }
      break;
 8006f5e:	e004      	b.n	8006f6a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006f60:	6839      	ldr	r1, [r7, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f000 fc7d 	bl	8007862 <USBD_CtlError>
      break;
 8006f68:	bf00      	nop
  }

  return USBD_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
 8006f7c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	889b      	ldrh	r3, [r3, #4]
 8006f86:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f88:	683b      	ldr	r3, [r7, #0]
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d007      	beq.n	8006fa4 <USBD_StdEPReq+0x30>
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	f200 8146 	bhi.w	8007226 <USBD_StdEPReq+0x2b2>
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00a      	beq.n	8006fb4 <USBD_StdEPReq+0x40>
 8006f9e:	2b20      	cmp	r3, #32
 8006fa0:	f040 8141 	bne.w	8007226 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	6839      	ldr	r1, [r7, #0]
 8006fae:	6878      	ldr	r0, [r7, #4]
 8006fb0:	4798      	blx	r3
      break;
 8006fb2:	e13d      	b.n	8007230 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	781b      	ldrb	r3, [r3, #0]
 8006fb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fbc:	2b20      	cmp	r3, #32
 8006fbe:	d10a      	bne.n	8006fd6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	6839      	ldr	r1, [r7, #0]
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	4798      	blx	r3
 8006fce:	4603      	mov	r3, r0
 8006fd0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	e12d      	b.n	8007232 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	785b      	ldrb	r3, [r3, #1]
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d007      	beq.n	8006fee <USBD_StdEPReq+0x7a>
 8006fde:	2b03      	cmp	r3, #3
 8006fe0:	f300 811b 	bgt.w	800721a <USBD_StdEPReq+0x2a6>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d072      	beq.n	80070ce <USBD_StdEPReq+0x15a>
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d03a      	beq.n	8007062 <USBD_StdEPReq+0xee>
 8006fec:	e115      	b.n	800721a <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d002      	beq.n	8006ffe <USBD_StdEPReq+0x8a>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d015      	beq.n	8007028 <USBD_StdEPReq+0xb4>
 8006ffc:	e02b      	b.n	8007056 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00c      	beq.n	800701e <USBD_StdEPReq+0xaa>
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d009      	beq.n	800701e <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f85e 	bl	80080d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007014:	2180      	movs	r1, #128	; 0x80
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f85a 	bl	80080d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800701c:	e020      	b.n	8007060 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fc1e 	bl	8007862 <USBD_CtlError>
              break;
 8007026:	e01b      	b.n	8007060 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	885b      	ldrh	r3, [r3, #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10e      	bne.n	800704e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00b      	beq.n	800704e <USBD_StdEPReq+0xda>
 8007036:	7bbb      	ldrb	r3, [r7, #14]
 8007038:	2b80      	cmp	r3, #128	; 0x80
 800703a:	d008      	beq.n	800704e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	88db      	ldrh	r3, [r3, #6]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007044:	7bbb      	ldrb	r3, [r7, #14]
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f001 f841 	bl	80080d0 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fccf 	bl	80079f2 <USBD_CtlSendStatus>

              break;
 8007054:	e004      	b.n	8007060 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007056:	6839      	ldr	r1, [r7, #0]
 8007058:	6878      	ldr	r0, [r7, #4]
 800705a:	f000 fc02 	bl	8007862 <USBD_CtlError>
              break;
 800705e:	bf00      	nop
          }
          break;
 8007060:	e0e0      	b.n	8007224 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007068:	2b02      	cmp	r3, #2
 800706a:	d002      	beq.n	8007072 <USBD_StdEPReq+0xfe>
 800706c:	2b03      	cmp	r3, #3
 800706e:	d015      	beq.n	800709c <USBD_StdEPReq+0x128>
 8007070:	e026      	b.n	80070c0 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00c      	beq.n	8007092 <USBD_StdEPReq+0x11e>
 8007078:	7bbb      	ldrb	r3, [r7, #14]
 800707a:	2b80      	cmp	r3, #128	; 0x80
 800707c:	d009      	beq.n	8007092 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800707e:	7bbb      	ldrb	r3, [r7, #14]
 8007080:	4619      	mov	r1, r3
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f001 f824 	bl	80080d0 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007088:	2180      	movs	r1, #128	; 0x80
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 f820 	bl	80080d0 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007090:	e01c      	b.n	80070cc <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007092:	6839      	ldr	r1, [r7, #0]
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f000 fbe4 	bl	8007862 <USBD_CtlError>
              break;
 800709a:	e017      	b.n	80070cc <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800709c:	683b      	ldr	r3, [r7, #0]
 800709e:	885b      	ldrh	r3, [r3, #2]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d112      	bne.n	80070ca <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d004      	beq.n	80070b8 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80070ae:	7bbb      	ldrb	r3, [r7, #14]
 80070b0:	4619      	mov	r1, r3
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f001 f82b 	bl	800810e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80070b8:	6878      	ldr	r0, [r7, #4]
 80070ba:	f000 fc9a 	bl	80079f2 <USBD_CtlSendStatus>
              }
              break;
 80070be:	e004      	b.n	80070ca <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 80070c0:	6839      	ldr	r1, [r7, #0]
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 fbcd 	bl	8007862 <USBD_CtlError>
              break;
 80070c8:	e000      	b.n	80070cc <USBD_StdEPReq+0x158>
              break;
 80070ca:	bf00      	nop
          }
          break;
 80070cc:	e0aa      	b.n	8007224 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d4:	2b02      	cmp	r3, #2
 80070d6:	d002      	beq.n	80070de <USBD_StdEPReq+0x16a>
 80070d8:	2b03      	cmp	r3, #3
 80070da:	d032      	beq.n	8007142 <USBD_StdEPReq+0x1ce>
 80070dc:	e097      	b.n	800720e <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070de:	7bbb      	ldrb	r3, [r7, #14]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d007      	beq.n	80070f4 <USBD_StdEPReq+0x180>
 80070e4:	7bbb      	ldrb	r3, [r7, #14]
 80070e6:	2b80      	cmp	r3, #128	; 0x80
 80070e8:	d004      	beq.n	80070f4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fbb8 	bl	8007862 <USBD_CtlError>
                break;
 80070f2:	e091      	b.n	8007218 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	da0b      	bge.n	8007114 <USBD_StdEPReq+0x1a0>
 80070fc:	7bbb      	ldrb	r3, [r7, #14]
 80070fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	3310      	adds	r3, #16
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	4413      	add	r3, r2
 8007110:	3304      	adds	r3, #4
 8007112:	e00b      	b.n	800712c <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800711a:	4613      	mov	r3, r2
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	4413      	add	r3, r2
 8007120:	009b      	lsls	r3, r3, #2
 8007122:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	4413      	add	r3, r2
 800712a:	3304      	adds	r3, #4
 800712c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2200      	movs	r2, #0
 8007132:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2202      	movs	r2, #2
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fbfb 	bl	8007936 <USBD_CtlSendData>
              break;
 8007140:	e06a      	b.n	8007218 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da11      	bge.n	800716e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3318      	adds	r3, #24
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d117      	bne.n	8007194 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fb7b 	bl	8007862 <USBD_CtlError>
                  break;
 800716c:	e054      	b.n	8007218 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb68 	bl	8007862 <USBD_CtlError>
                  break;
 8007192:	e041      	b.n	8007218 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da0b      	bge.n	80071b4 <USBD_StdEPReq+0x240>
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	3310      	adds	r3, #16
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	e00b      	b.n	80071cc <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <USBD_StdEPReq+0x266>
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b80      	cmp	r3, #128	; 0x80
 80071d8:	d103      	bne.n	80071e2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	601a      	str	r2, [r3, #0]
 80071e0:	e00e      	b.n	8007200 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f000 ffb0 	bl	800814c <USBD_LL_IsStallEP>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2201      	movs	r2, #1
 80071f6:	601a      	str	r2, [r3, #0]
 80071f8:	e002      	b.n	8007200 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2202      	movs	r2, #2
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f000 fb95 	bl	8007936 <USBD_CtlSendData>
              break;
 800720c:	e004      	b.n	8007218 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fb26 	bl	8007862 <USBD_CtlError>
              break;
 8007216:	bf00      	nop
          }
          break;
 8007218:	e004      	b.n	8007224 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fb20 	bl	8007862 <USBD_CtlError>
          break;
 8007222:	bf00      	nop
      }
      break;
 8007224:	e004      	b.n	8007230 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f000 fb1a 	bl	8007862 <USBD_CtlError>
      break;
 800722e:	bf00      	nop
  }

  return ret;
 8007230:	7bfb      	ldrb	r3, [r7, #15]
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
	...

0800723c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007246:	2300      	movs	r3, #0
 8007248:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800724e:	2300      	movs	r3, #0
 8007250:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	885b      	ldrh	r3, [r3, #2]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	b29b      	uxth	r3, r3
 800725a:	3b01      	subs	r3, #1
 800725c:	2b06      	cmp	r3, #6
 800725e:	f200 8128 	bhi.w	80074b2 <USBD_GetDescriptor+0x276>
 8007262:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <USBD_GetDescriptor+0x2c>)
 8007264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007268:	08007285 	.word	0x08007285
 800726c:	0800729d 	.word	0x0800729d
 8007270:	080072dd 	.word	0x080072dd
 8007274:	080074b3 	.word	0x080074b3
 8007278:	080074b3 	.word	0x080074b3
 800727c:	08007453 	.word	0x08007453
 8007280:	0800747f 	.word	0x0800747f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	7c12      	ldrb	r2, [r2, #16]
 8007290:	f107 0108 	add.w	r1, r7, #8
 8007294:	4610      	mov	r0, r2
 8007296:	4798      	blx	r3
 8007298:	60f8      	str	r0, [r7, #12]
      break;
 800729a:	e112      	b.n	80074c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	7c1b      	ldrb	r3, [r3, #16]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10d      	bne.n	80072c0 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ac:	f107 0208 	add.w	r2, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	2202      	movs	r2, #2
 80072bc:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072be:	e100      	b.n	80074c2 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072c8:	f107 0208 	add.w	r2, r7, #8
 80072cc:	4610      	mov	r0, r2
 80072ce:	4798      	blx	r3
 80072d0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	3301      	adds	r3, #1
 80072d6:	2202      	movs	r2, #2
 80072d8:	701a      	strb	r2, [r3, #0]
      break;
 80072da:	e0f2      	b.n	80074c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	885b      	ldrh	r3, [r3, #2]
 80072e0:	b2db      	uxtb	r3, r3
 80072e2:	2b05      	cmp	r3, #5
 80072e4:	f200 80ac 	bhi.w	8007440 <USBD_GetDescriptor+0x204>
 80072e8:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_GetDescriptor+0xb4>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007309 	.word	0x08007309
 80072f4:	0800733d 	.word	0x0800733d
 80072f8:	08007371 	.word	0x08007371
 80072fc:	080073a5 	.word	0x080073a5
 8007300:	080073d9 	.word	0x080073d9
 8007304:	0800740d 	.word	0x0800740d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730e:	685b      	ldr	r3, [r3, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00b      	beq.n	800732c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	7c12      	ldrb	r2, [r2, #16]
 8007320:	f107 0108 	add.w	r1, r7, #8
 8007324:	4610      	mov	r0, r2
 8007326:	4798      	blx	r3
 8007328:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732a:	e091      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800732c:	6839      	ldr	r1, [r7, #0]
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa97 	bl	8007862 <USBD_CtlError>
            err++;
 8007334:	7afb      	ldrb	r3, [r7, #11]
 8007336:	3301      	adds	r3, #1
 8007338:	72fb      	strb	r3, [r7, #11]
          break;
 800733a:	e089      	b.n	8007450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007342:	689b      	ldr	r3, [r3, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00b      	beq.n	8007360 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	687a      	ldr	r2, [r7, #4]
 8007352:	7c12      	ldrb	r2, [r2, #16]
 8007354:	f107 0108 	add.w	r1, r7, #8
 8007358:	4610      	mov	r0, r2
 800735a:	4798      	blx	r3
 800735c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800735e:	e077      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007360:	6839      	ldr	r1, [r7, #0]
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fa7d 	bl	8007862 <USBD_CtlError>
            err++;
 8007368:	7afb      	ldrb	r3, [r7, #11]
 800736a:	3301      	adds	r3, #1
 800736c:	72fb      	strb	r3, [r7, #11]
          break;
 800736e:	e06f      	b.n	8007450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00b      	beq.n	8007394 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007382:	68db      	ldr	r3, [r3, #12]
 8007384:	687a      	ldr	r2, [r7, #4]
 8007386:	7c12      	ldrb	r2, [r2, #16]
 8007388:	f107 0108 	add.w	r1, r7, #8
 800738c:	4610      	mov	r0, r2
 800738e:	4798      	blx	r3
 8007390:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007392:	e05d      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007394:	6839      	ldr	r1, [r7, #0]
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f000 fa63 	bl	8007862 <USBD_CtlError>
            err++;
 800739c:	7afb      	ldrb	r3, [r7, #11]
 800739e:	3301      	adds	r3, #1
 80073a0:	72fb      	strb	r3, [r7, #11]
          break;
 80073a2:	e055      	b.n	8007450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073aa:	691b      	ldr	r3, [r3, #16]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00b      	beq.n	80073c8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073b6:	691b      	ldr	r3, [r3, #16]
 80073b8:	687a      	ldr	r2, [r7, #4]
 80073ba:	7c12      	ldrb	r2, [r2, #16]
 80073bc:	f107 0108 	add.w	r1, r7, #8
 80073c0:	4610      	mov	r0, r2
 80073c2:	4798      	blx	r3
 80073c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073c6:	e043      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073c8:	6839      	ldr	r1, [r7, #0]
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 fa49 	bl	8007862 <USBD_CtlError>
            err++;
 80073d0:	7afb      	ldrb	r3, [r7, #11]
 80073d2:	3301      	adds	r3, #1
 80073d4:	72fb      	strb	r3, [r7, #11]
          break;
 80073d6:	e03b      	b.n	8007450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073de:	695b      	ldr	r3, [r3, #20]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d00b      	beq.n	80073fc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073ea:	695b      	ldr	r3, [r3, #20]
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	7c12      	ldrb	r2, [r2, #16]
 80073f0:	f107 0108 	add.w	r1, r7, #8
 80073f4:	4610      	mov	r0, r2
 80073f6:	4798      	blx	r3
 80073f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fa:	e029      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fa2f 	bl	8007862 <USBD_CtlError>
            err++;
 8007404:	7afb      	ldrb	r3, [r7, #11]
 8007406:	3301      	adds	r3, #1
 8007408:	72fb      	strb	r3, [r7, #11]
          break;
 800740a:	e021      	b.n	8007450 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007412:	699b      	ldr	r3, [r3, #24]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00b      	beq.n	8007430 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800741e:	699b      	ldr	r3, [r3, #24]
 8007420:	687a      	ldr	r2, [r7, #4]
 8007422:	7c12      	ldrb	r2, [r2, #16]
 8007424:	f107 0108 	add.w	r1, r7, #8
 8007428:	4610      	mov	r0, r2
 800742a:	4798      	blx	r3
 800742c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800742e:	e00f      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007430:	6839      	ldr	r1, [r7, #0]
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 fa15 	bl	8007862 <USBD_CtlError>
            err++;
 8007438:	7afb      	ldrb	r3, [r7, #11]
 800743a:	3301      	adds	r3, #1
 800743c:	72fb      	strb	r3, [r7, #11]
          break;
 800743e:	e007      	b.n	8007450 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007440:	6839      	ldr	r1, [r7, #0]
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f000 fa0d 	bl	8007862 <USBD_CtlError>
          err++;
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	3301      	adds	r3, #1
 800744c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800744e:	e038      	b.n	80074c2 <USBD_GetDescriptor+0x286>
 8007450:	e037      	b.n	80074c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	7c1b      	ldrb	r3, [r3, #16]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007460:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007462:	f107 0208 	add.w	r2, r7, #8
 8007466:	4610      	mov	r0, r2
 8007468:	4798      	blx	r3
 800746a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800746c:	e029      	b.n	80074c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f9f6 	bl	8007862 <USBD_CtlError>
        err++;
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	3301      	adds	r3, #1
 800747a:	72fb      	strb	r3, [r7, #11]
      break;
 800747c:	e021      	b.n	80074c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	7c1b      	ldrb	r3, [r3, #16]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10d      	bne.n	80074a2 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800748c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800748e:	f107 0208 	add.w	r2, r7, #8
 8007492:	4610      	mov	r0, r2
 8007494:	4798      	blx	r3
 8007496:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	3301      	adds	r3, #1
 800749c:	2207      	movs	r2, #7
 800749e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074a0:	e00f      	b.n	80074c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074a2:	6839      	ldr	r1, [r7, #0]
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f9dc 	bl	8007862 <USBD_CtlError>
        err++;
 80074aa:	7afb      	ldrb	r3, [r7, #11]
 80074ac:	3301      	adds	r3, #1
 80074ae:	72fb      	strb	r3, [r7, #11]
      break;
 80074b0:	e007      	b.n	80074c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074b2:	6839      	ldr	r1, [r7, #0]
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f000 f9d4 	bl	8007862 <USBD_CtlError>
      err++;
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	3301      	adds	r3, #1
 80074be:	72fb      	strb	r3, [r7, #11]
      break;
 80074c0:	bf00      	nop
  }

  if (err != 0U)
 80074c2:	7afb      	ldrb	r3, [r7, #11]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d11c      	bne.n	8007502 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 80074c8:	893b      	ldrh	r3, [r7, #8]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d011      	beq.n	80074f2 <USBD_GetDescriptor+0x2b6>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	88db      	ldrh	r3, [r3, #6]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d00d      	beq.n	80074f2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	88da      	ldrh	r2, [r3, #6]
 80074da:	893b      	ldrh	r3, [r7, #8]
 80074dc:	4293      	cmp	r3, r2
 80074de:	bf28      	it	cs
 80074e0:	4613      	movcs	r3, r2
 80074e2:	b29b      	uxth	r3, r3
 80074e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074e6:	893b      	ldrh	r3, [r7, #8]
 80074e8:	461a      	mov	r2, r3
 80074ea:	68f9      	ldr	r1, [r7, #12]
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa22 	bl	8007936 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	88db      	ldrh	r3, [r3, #6]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d104      	bne.n	8007504 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 fa79 	bl	80079f2 <USBD_CtlSendStatus>
 8007500:	e000      	b.n	8007504 <USBD_GetDescriptor+0x2c8>
    return;
 8007502:	bf00      	nop
    }
  }
}
 8007504:	3710      	adds	r7, #16
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop

0800750c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	889b      	ldrh	r3, [r3, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d130      	bne.n	8007580 <USBD_SetAddress+0x74>
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	88db      	ldrh	r3, [r3, #6]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d12c      	bne.n	8007580 <USBD_SetAddress+0x74>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	885b      	ldrh	r3, [r3, #2]
 800752a:	2b7f      	cmp	r3, #127	; 0x7f
 800752c:	d828      	bhi.n	8007580 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007538:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007540:	2b03      	cmp	r3, #3
 8007542:	d104      	bne.n	800754e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007544:	6839      	ldr	r1, [r7, #0]
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f98b 	bl	8007862 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800754c:	e01d      	b.n	800758a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	7bfa      	ldrb	r2, [r7, #15]
 8007552:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007556:	7bfb      	ldrb	r3, [r7, #15]
 8007558:	4619      	mov	r1, r3
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 fe22 	bl	80081a4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fa46 	bl	80079f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007566:	7bfb      	ldrb	r3, [r7, #15]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d004      	beq.n	8007576 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2202      	movs	r2, #2
 8007570:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007574:	e009      	b.n	800758a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	e004      	b.n	800758a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007580:	6839      	ldr	r1, [r7, #0]
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f96d 	bl	8007862 <USBD_CtlError>
  }
}
 8007588:	bf00      	nop
 800758a:	bf00      	nop
 800758c:	3710      	adds	r7, #16
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
	...

08007594 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
 800759c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	885b      	ldrh	r3, [r3, #2]
 80075a2:	b2da      	uxtb	r2, r3
 80075a4:	4b41      	ldr	r3, [pc, #260]	; (80076ac <USBD_SetConfig+0x118>)
 80075a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075a8:	4b40      	ldr	r3, [pc, #256]	; (80076ac <USBD_SetConfig+0x118>)
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	d904      	bls.n	80075ba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f955 	bl	8007862 <USBD_CtlError>
 80075b8:	e075      	b.n	80076a6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075c0:	2b02      	cmp	r3, #2
 80075c2:	d002      	beq.n	80075ca <USBD_SetConfig+0x36>
 80075c4:	2b03      	cmp	r3, #3
 80075c6:	d023      	beq.n	8007610 <USBD_SetConfig+0x7c>
 80075c8:	e062      	b.n	8007690 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 80075ca:	4b38      	ldr	r3, [pc, #224]	; (80076ac <USBD_SetConfig+0x118>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d01a      	beq.n	8007608 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80075d2:	4b36      	ldr	r3, [pc, #216]	; (80076ac <USBD_SetConfig+0x118>)
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	461a      	mov	r2, r3
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2203      	movs	r2, #3
 80075e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075e4:	4b31      	ldr	r3, [pc, #196]	; (80076ac <USBD_SetConfig+0x118>)
 80075e6:	781b      	ldrb	r3, [r3, #0]
 80075e8:	4619      	mov	r1, r3
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7ff f9e8 	bl	80069c0 <USBD_SetClassConfig>
 80075f0:	4603      	mov	r3, r0
 80075f2:	2b02      	cmp	r3, #2
 80075f4:	d104      	bne.n	8007600 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80075f6:	6839      	ldr	r1, [r7, #0]
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 f932 	bl	8007862 <USBD_CtlError>
            return;
 80075fe:	e052      	b.n	80076a6 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007600:	6878      	ldr	r0, [r7, #4]
 8007602:	f000 f9f6 	bl	80079f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007606:	e04e      	b.n	80076a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f9f2 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 800760e:	e04a      	b.n	80076a6 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007610:	4b26      	ldr	r3, [pc, #152]	; (80076ac <USBD_SetConfig+0x118>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d112      	bne.n	800763e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2202      	movs	r2, #2
 800761c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007620:	4b22      	ldr	r3, [pc, #136]	; (80076ac <USBD_SetConfig+0x118>)
 8007622:	781b      	ldrb	r3, [r3, #0]
 8007624:	461a      	mov	r2, r3
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800762a:	4b20      	ldr	r3, [pc, #128]	; (80076ac <USBD_SetConfig+0x118>)
 800762c:	781b      	ldrb	r3, [r3, #0]
 800762e:	4619      	mov	r1, r3
 8007630:	6878      	ldr	r0, [r7, #4]
 8007632:	f7ff f9e4 	bl	80069fe <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f000 f9db 	bl	80079f2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800763c:	e033      	b.n	80076a6 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800763e:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <USBD_SetConfig+0x118>)
 8007640:	781b      	ldrb	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	d01d      	beq.n	8007688 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	b2db      	uxtb	r3, r3
 8007652:	4619      	mov	r1, r3
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f7ff f9d2 	bl	80069fe <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800765a:	4b14      	ldr	r3, [pc, #80]	; (80076ac <USBD_SetConfig+0x118>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007664:	4b11      	ldr	r3, [pc, #68]	; (80076ac <USBD_SetConfig+0x118>)
 8007666:	781b      	ldrb	r3, [r3, #0]
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f7ff f9a8 	bl	80069c0 <USBD_SetClassConfig>
 8007670:	4603      	mov	r3, r0
 8007672:	2b02      	cmp	r3, #2
 8007674:	d104      	bne.n	8007680 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007676:	6839      	ldr	r1, [r7, #0]
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f000 f8f2 	bl	8007862 <USBD_CtlError>
            return;
 800767e:	e012      	b.n	80076a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007680:	6878      	ldr	r0, [r7, #4]
 8007682:	f000 f9b6 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 8007686:	e00e      	b.n	80076a6 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f9b2 	bl	80079f2 <USBD_CtlSendStatus>
        break;
 800768e:	e00a      	b.n	80076a6 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007690:	6839      	ldr	r1, [r7, #0]
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f8e5 	bl	8007862 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007698:	4b04      	ldr	r3, [pc, #16]	; (80076ac <USBD_SetConfig+0x118>)
 800769a:	781b      	ldrb	r3, [r3, #0]
 800769c:	4619      	mov	r1, r3
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7ff f9ad 	bl	80069fe <USBD_ClrClassConfig>
        break;
 80076a4:	bf00      	nop
    }
  }
}
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}
 80076ac:	200001d0 	.word	0x200001d0

080076b0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b082      	sub	sp, #8
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	88db      	ldrh	r3, [r3, #6]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d004      	beq.n	80076cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 f8cc 	bl	8007862 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80076ca:	e022      	b.n	8007712 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076d2:	2b02      	cmp	r3, #2
 80076d4:	dc02      	bgt.n	80076dc <USBD_GetConfig+0x2c>
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	dc03      	bgt.n	80076e2 <USBD_GetConfig+0x32>
 80076da:	e015      	b.n	8007708 <USBD_GetConfig+0x58>
 80076dc:	2b03      	cmp	r3, #3
 80076de:	d00b      	beq.n	80076f8 <USBD_GetConfig+0x48>
 80076e0:	e012      	b.n	8007708 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	3308      	adds	r3, #8
 80076ec:	2201      	movs	r2, #1
 80076ee:	4619      	mov	r1, r3
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 f920 	bl	8007936 <USBD_CtlSendData>
        break;
 80076f6:	e00c      	b.n	8007712 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	3304      	adds	r3, #4
 80076fc:	2201      	movs	r2, #1
 80076fe:	4619      	mov	r1, r3
 8007700:	6878      	ldr	r0, [r7, #4]
 8007702:	f000 f918 	bl	8007936 <USBD_CtlSendData>
        break;
 8007706:	e004      	b.n	8007712 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007708:	6839      	ldr	r1, [r7, #0]
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f8a9 	bl	8007862 <USBD_CtlError>
        break;
 8007710:	bf00      	nop
}
 8007712:	bf00      	nop
 8007714:	3708      	adds	r7, #8
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}

0800771a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800771a:	b580      	push	{r7, lr}
 800771c:	b082      	sub	sp, #8
 800771e:	af00      	add	r7, sp, #0
 8007720:	6078      	str	r0, [r7, #4]
 8007722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800772a:	3b01      	subs	r3, #1
 800772c:	2b02      	cmp	r3, #2
 800772e:	d81e      	bhi.n	800776e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	88db      	ldrh	r3, [r3, #6]
 8007734:	2b02      	cmp	r3, #2
 8007736:	d004      	beq.n	8007742 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 f891 	bl	8007862 <USBD_CtlError>
        break;
 8007740:	e01a      	b.n	8007778 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2201      	movs	r2, #1
 8007746:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800774e:	2b00      	cmp	r3, #0
 8007750:	d005      	beq.n	800775e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68db      	ldr	r3, [r3, #12]
 8007756:	f043 0202 	orr.w	r2, r3, #2
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	330c      	adds	r3, #12
 8007762:	2202      	movs	r2, #2
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f8e5 	bl	8007936 <USBD_CtlSendData>
      break;
 800776c:	e004      	b.n	8007778 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 f876 	bl	8007862 <USBD_CtlError>
      break;
 8007776:	bf00      	nop
  }
}
 8007778:	bf00      	nop
 800777a:	3708      	adds	r7, #8
 800777c:	46bd      	mov	sp, r7
 800777e:	bd80      	pop	{r7, pc}

08007780 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007780:	b580      	push	{r7, lr}
 8007782:	b082      	sub	sp, #8
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	885b      	ldrh	r3, [r3, #2]
 800778e:	2b01      	cmp	r3, #1
 8007790:	d106      	bne.n	80077a0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2201      	movs	r2, #1
 8007796:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f929 	bl	80079f2 <USBD_CtlSendStatus>
  }
}
 80077a0:	bf00      	nop
 80077a2:	3708      	adds	r7, #8
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d80b      	bhi.n	80077d6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	885b      	ldrh	r3, [r3, #2]
 80077c2:	2b01      	cmp	r3, #1
 80077c4:	d10c      	bne.n	80077e0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2200      	movs	r2, #0
 80077ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 f90f 	bl	80079f2 <USBD_CtlSendStatus>
      }
      break;
 80077d4:	e004      	b.n	80077e0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f842 	bl	8007862 <USBD_CtlError>
      break;
 80077de:	e000      	b.n	80077e2 <USBD_ClrFeature+0x3a>
      break;
 80077e0:	bf00      	nop
  }
}
 80077e2:	bf00      	nop
 80077e4:	3708      	adds	r7, #8
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}

080077ea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80077ea:	b480      	push	{r7}
 80077ec:	b083      	sub	sp, #12
 80077ee:	af00      	add	r7, sp, #0
 80077f0:	6078      	str	r0, [r7, #4]
 80077f2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	781a      	ldrb	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	785a      	ldrb	r2, [r3, #1]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	3302      	adds	r3, #2
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	b29a      	uxth	r2, r3
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	3303      	adds	r3, #3
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	b29b      	uxth	r3, r3
 8007814:	021b      	lsls	r3, r3, #8
 8007816:	b29b      	uxth	r3, r3
 8007818:	4413      	add	r3, r2
 800781a:	b29a      	uxth	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3304      	adds	r3, #4
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	b29a      	uxth	r2, r3
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	3305      	adds	r3, #5
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	b29b      	uxth	r3, r3
 8007830:	021b      	lsls	r3, r3, #8
 8007832:	b29b      	uxth	r3, r3
 8007834:	4413      	add	r3, r2
 8007836:	b29a      	uxth	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	3306      	adds	r3, #6
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	b29a      	uxth	r2, r3
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	3307      	adds	r3, #7
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	b29b      	uxth	r3, r3
 800784c:	021b      	lsls	r3, r3, #8
 800784e:	b29b      	uxth	r3, r3
 8007850:	4413      	add	r3, r2
 8007852:	b29a      	uxth	r2, r3
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	80da      	strh	r2, [r3, #6]

}
 8007858:	bf00      	nop
 800785a:	370c      	adds	r7, #12
 800785c:	46bd      	mov	sp, r7
 800785e:	bc80      	pop	{r7}
 8007860:	4770      	bx	lr

08007862 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007862:	b580      	push	{r7, lr}
 8007864:	b082      	sub	sp, #8
 8007866:	af00      	add	r7, sp, #0
 8007868:	6078      	str	r0, [r7, #4]
 800786a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800786c:	2180      	movs	r1, #128	; 0x80
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fc2e 	bl	80080d0 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007874:	2100      	movs	r1, #0
 8007876:	6878      	ldr	r0, [r7, #4]
 8007878:	f000 fc2a 	bl	80080d0 <USBD_LL_StallEP>
}
 800787c:	bf00      	nop
 800787e:	3708      	adds	r7, #8
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}

08007884 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b086      	sub	sp, #24
 8007888:	af00      	add	r7, sp, #0
 800788a:	60f8      	str	r0, [r7, #12]
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007890:	2300      	movs	r3, #0
 8007892:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d032      	beq.n	8007900 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f000 f834 	bl	8007908 <USBD_GetLen>
 80078a0:	4603      	mov	r3, r0
 80078a2:	3301      	adds	r3, #1
 80078a4:	b29b      	uxth	r3, r3
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	b29a      	uxth	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 80078ae:	7dfb      	ldrb	r3, [r7, #23]
 80078b0:	1c5a      	adds	r2, r3, #1
 80078b2:	75fa      	strb	r2, [r7, #23]
 80078b4:	461a      	mov	r2, r3
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	4413      	add	r3, r2
 80078ba:	687a      	ldr	r2, [r7, #4]
 80078bc:	7812      	ldrb	r2, [r2, #0]
 80078be:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 80078c0:	7dfb      	ldrb	r3, [r7, #23]
 80078c2:	1c5a      	adds	r2, r3, #1
 80078c4:	75fa      	strb	r2, [r7, #23]
 80078c6:	461a      	mov	r2, r3
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	4413      	add	r3, r2
 80078cc:	2203      	movs	r2, #3
 80078ce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80078d0:	e012      	b.n	80078f8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	60fa      	str	r2, [r7, #12]
 80078d8:	7dfa      	ldrb	r2, [r7, #23]
 80078da:	1c51      	adds	r1, r2, #1
 80078dc:	75f9      	strb	r1, [r7, #23]
 80078de:	4611      	mov	r1, r2
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	440a      	add	r2, r1
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80078e8:	7dfb      	ldrb	r3, [r7, #23]
 80078ea:	1c5a      	adds	r2, r3, #1
 80078ec:	75fa      	strb	r2, [r7, #23]
 80078ee:	461a      	mov	r2, r3
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	4413      	add	r3, r2
 80078f4:	2200      	movs	r2, #0
 80078f6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1e8      	bne.n	80078d2 <USBD_GetString+0x4e>
    }
  }
}
 8007900:	bf00      	nop
 8007902:	3718      	adds	r7, #24
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007910:	2300      	movs	r3, #0
 8007912:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007914:	e005      	b.n	8007922 <USBD_GetLen+0x1a>
  {
    len++;
 8007916:	7bfb      	ldrb	r3, [r7, #15]
 8007918:	3301      	adds	r3, #1
 800791a:	73fb      	strb	r3, [r7, #15]
    buf++;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	3301      	adds	r3, #1
 8007920:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	781b      	ldrb	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1f5      	bne.n	8007916 <USBD_GetLen+0xe>
  }

  return len;
 800792a:	7bfb      	ldrb	r3, [r7, #15]
}
 800792c:	4618      	mov	r0, r3
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	bc80      	pop	{r7}
 8007934:	4770      	bx	lr

08007936 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b084      	sub	sp, #16
 800793a:	af00      	add	r7, sp, #0
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	4613      	mov	r3, r2
 8007942:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	2202      	movs	r2, #2
 8007948:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800794c:	88fa      	ldrh	r2, [r7, #6]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007952:	88fa      	ldrh	r2, [r7, #6]
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007958:	88fb      	ldrh	r3, [r7, #6]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	2100      	movs	r1, #0
 800795e:	68f8      	ldr	r0, [r7, #12]
 8007960:	f000 fc3f 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007964:	2300      	movs	r3, #0
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800796e:	b580      	push	{r7, lr}
 8007970:	b084      	sub	sp, #16
 8007972:	af00      	add	r7, sp, #0
 8007974:	60f8      	str	r0, [r7, #12]
 8007976:	60b9      	str	r1, [r7, #8]
 8007978:	4613      	mov	r3, r2
 800797a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800797c:	88fb      	ldrh	r3, [r7, #6]
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	2100      	movs	r1, #0
 8007982:	68f8      	ldr	r0, [r7, #12]
 8007984:	f000 fc2d 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b084      	sub	sp, #16
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4613      	mov	r3, r2
 800799e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2203      	movs	r2, #3
 80079a4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80079a8:	88fa      	ldrh	r2, [r7, #6]
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 80079b0:	88fa      	ldrh	r2, [r7, #6]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079b8:	88fb      	ldrh	r3, [r7, #6]
 80079ba:	68ba      	ldr	r2, [r7, #8]
 80079bc:	2100      	movs	r1, #0
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 fc32 	bl	8008228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3710      	adds	r7, #16
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}

080079ce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 80079ce:	b580      	push	{r7, lr}
 80079d0:	b084      	sub	sp, #16
 80079d2:	af00      	add	r7, sp, #0
 80079d4:	60f8      	str	r0, [r7, #12]
 80079d6:	60b9      	str	r1, [r7, #8]
 80079d8:	4613      	mov	r3, r2
 80079da:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80079dc:	88fb      	ldrh	r3, [r7, #6]
 80079de:	68ba      	ldr	r2, [r7, #8]
 80079e0:	2100      	movs	r1, #0
 80079e2:	68f8      	ldr	r0, [r7, #12]
 80079e4:	f000 fc20 	bl	8008228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3710      	adds	r7, #16
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}

080079f2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80079f2:	b580      	push	{r7, lr}
 80079f4:	b082      	sub	sp, #8
 80079f6:	af00      	add	r7, sp, #0
 80079f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2204      	movs	r2, #4
 80079fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a02:	2300      	movs	r3, #0
 8007a04:	2200      	movs	r2, #0
 8007a06:	2100      	movs	r1, #0
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fbea 	bl	80081e2 <USBD_LL_Transmit>

  return USBD_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3708      	adds	r7, #8
 8007a14:	46bd      	mov	sp, r7
 8007a16:	bd80      	pop	{r7, pc}

08007a18 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2205      	movs	r2, #5
 8007a24:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007a28:	2300      	movs	r3, #0
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 fbfa 	bl	8008228 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a34:	2300      	movs	r3, #0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007a44:	2200      	movs	r2, #0
 8007a46:	4912      	ldr	r1, [pc, #72]	; (8007a90 <MX_USB_DEVICE_Init+0x50>)
 8007a48:	4812      	ldr	r0, [pc, #72]	; (8007a94 <MX_USB_DEVICE_Init+0x54>)
 8007a4a:	f7fe ff5f 	bl	800690c <USBD_Init>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007a54:	f7f8 fd3c 	bl	80004d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007a58:	490f      	ldr	r1, [pc, #60]	; (8007a98 <MX_USB_DEVICE_Init+0x58>)
 8007a5a:	480e      	ldr	r0, [pc, #56]	; (8007a94 <MX_USB_DEVICE_Init+0x54>)
 8007a5c:	f7fe ff81 	bl	8006962 <USBD_RegisterClass>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007a66:	f7f8 fd33 	bl	80004d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007a6a:	490c      	ldr	r1, [pc, #48]	; (8007a9c <MX_USB_DEVICE_Init+0x5c>)
 8007a6c:	4809      	ldr	r0, [pc, #36]	; (8007a94 <MX_USB_DEVICE_Init+0x54>)
 8007a6e:	f7fe fee1 	bl	8006834 <USBD_CDC_RegisterInterface>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a78:	f7f8 fd2a 	bl	80004d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a7c:	4805      	ldr	r0, [pc, #20]	; (8007a94 <MX_USB_DEVICE_Init+0x54>)
 8007a7e:	f7fe ff89 	bl	8006994 <USBD_Start>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d001      	beq.n	8007a8c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a88:	f7f8 fd22 	bl	80004d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a8c:	bf00      	nop
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	20000134 	.word	0x20000134
 8007a94:	200001d4 	.word	0x200001d4
 8007a98:	20000020 	.word	0x20000020
 8007a9c:	20000124 	.word	0x20000124

08007aa0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	4905      	ldr	r1, [pc, #20]	; (8007abc <CDC_Init_FS+0x1c>)
 8007aa8:	4805      	ldr	r0, [pc, #20]	; (8007ac0 <CDC_Init_FS+0x20>)
 8007aaa:	f7fe fed9 	bl	8006860 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007aae:	4905      	ldr	r1, [pc, #20]	; (8007ac4 <CDC_Init_FS+0x24>)
 8007ab0:	4803      	ldr	r0, [pc, #12]	; (8007ac0 <CDC_Init_FS+0x20>)
 8007ab2:	f7fe feee 	bl	8006892 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007ab6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	bd80      	pop	{r7, pc}
 8007abc:	20000898 	.word	0x20000898
 8007ac0:	200001d4 	.word	0x200001d4
 8007ac4:	20000498 	.word	0x20000498

08007ac8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007acc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bc80      	pop	{r7}
 8007ad4:	4770      	bx	lr
	...

08007ad8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	4603      	mov	r3, r0
 8007ae0:	6039      	str	r1, [r7, #0]
 8007ae2:	71fb      	strb	r3, [r7, #7]
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007ae8:	79fb      	ldrb	r3, [r7, #7]
 8007aea:	2b23      	cmp	r3, #35	; 0x23
 8007aec:	d84a      	bhi.n	8007b84 <CDC_Control_FS+0xac>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <CDC_Control_FS+0x1c>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b85 	.word	0x08007b85
 8007af8:	08007b85 	.word	0x08007b85
 8007afc:	08007b85 	.word	0x08007b85
 8007b00:	08007b85 	.word	0x08007b85
 8007b04:	08007b85 	.word	0x08007b85
 8007b08:	08007b85 	.word	0x08007b85
 8007b0c:	08007b85 	.word	0x08007b85
 8007b10:	08007b85 	.word	0x08007b85
 8007b14:	08007b85 	.word	0x08007b85
 8007b18:	08007b85 	.word	0x08007b85
 8007b1c:	08007b85 	.word	0x08007b85
 8007b20:	08007b85 	.word	0x08007b85
 8007b24:	08007b85 	.word	0x08007b85
 8007b28:	08007b85 	.word	0x08007b85
 8007b2c:	08007b85 	.word	0x08007b85
 8007b30:	08007b85 	.word	0x08007b85
 8007b34:	08007b85 	.word	0x08007b85
 8007b38:	08007b85 	.word	0x08007b85
 8007b3c:	08007b85 	.word	0x08007b85
 8007b40:	08007b85 	.word	0x08007b85
 8007b44:	08007b85 	.word	0x08007b85
 8007b48:	08007b85 	.word	0x08007b85
 8007b4c:	08007b85 	.word	0x08007b85
 8007b50:	08007b85 	.word	0x08007b85
 8007b54:	08007b85 	.word	0x08007b85
 8007b58:	08007b85 	.word	0x08007b85
 8007b5c:	08007b85 	.word	0x08007b85
 8007b60:	08007b85 	.word	0x08007b85
 8007b64:	08007b85 	.word	0x08007b85
 8007b68:	08007b85 	.word	0x08007b85
 8007b6c:	08007b85 	.word	0x08007b85
 8007b70:	08007b85 	.word	0x08007b85
 8007b74:	08007b85 	.word	0x08007b85
 8007b78:	08007b85 	.word	0x08007b85
 8007b7c:	08007b85 	.word	0x08007b85
 8007b80:	08007b85 	.word	0x08007b85
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b84:	bf00      	nop
  }

  return (USBD_OK);
 8007b86:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bc80      	pop	{r7}
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop

08007b94 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b9e:	6879      	ldr	r1, [r7, #4]
 8007ba0:	4805      	ldr	r0, [pc, #20]	; (8007bb8 <CDC_Receive_FS+0x24>)
 8007ba2:	f7fe fe76 	bl	8006892 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007ba6:	4804      	ldr	r0, [pc, #16]	; (8007bb8 <CDC_Receive_FS+0x24>)
 8007ba8:	f7fe fe86 	bl	80068b8 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007bac:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007bae:	4618      	mov	r0, r3
 8007bb0:	3708      	adds	r7, #8
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	bd80      	pop	{r7, pc}
 8007bb6:	bf00      	nop
 8007bb8:	200001d4 	.word	0x200001d4

08007bbc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	6039      	str	r1, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	2212      	movs	r2, #18
 8007bcc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007bce:	4b03      	ldr	r3, [pc, #12]	; (8007bdc <USBD_FS_DeviceDescriptor+0x20>)
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bc80      	pop	{r7}
 8007bd8:	4770      	bx	lr
 8007bda:	bf00      	nop
 8007bdc:	20000150 	.word	0x20000150

08007be0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	4603      	mov	r3, r0
 8007be8:	6039      	str	r1, [r7, #0]
 8007bea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	2204      	movs	r2, #4
 8007bf0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007bf2:	4b03      	ldr	r3, [pc, #12]	; (8007c00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007bf4:	4618      	mov	r0, r3
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	bc80      	pop	{r7}
 8007bfc:	4770      	bx	lr
 8007bfe:	bf00      	nop
 8007c00:	20000164 	.word	0x20000164

08007c04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b082      	sub	sp, #8
 8007c08:	af00      	add	r7, sp, #0
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	6039      	str	r1, [r7, #0]
 8007c0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d105      	bne.n	8007c22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c16:	683a      	ldr	r2, [r7, #0]
 8007c18:	4907      	ldr	r1, [pc, #28]	; (8007c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c1a:	4808      	ldr	r0, [pc, #32]	; (8007c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c1c:	f7ff fe32 	bl	8007884 <USBD_GetString>
 8007c20:	e004      	b.n	8007c2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007c22:	683a      	ldr	r2, [r7, #0]
 8007c24:	4904      	ldr	r1, [pc, #16]	; (8007c38 <USBD_FS_ProductStrDescriptor+0x34>)
 8007c26:	4805      	ldr	r0, [pc, #20]	; (8007c3c <USBD_FS_ProductStrDescriptor+0x38>)
 8007c28:	f7ff fe2c 	bl	8007884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c2c:	4b02      	ldr	r3, [pc, #8]	; (8007c38 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007c2e:	4618      	mov	r0, r3
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}
 8007c36:	bf00      	nop
 8007c38:	20000c98 	.word	0x20000c98
 8007c3c:	080083ac 	.word	0x080083ac

08007c40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b082      	sub	sp, #8
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	4603      	mov	r3, r0
 8007c48:	6039      	str	r1, [r7, #0]
 8007c4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007c4c:	683a      	ldr	r2, [r7, #0]
 8007c4e:	4904      	ldr	r1, [pc, #16]	; (8007c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007c50:	4804      	ldr	r0, [pc, #16]	; (8007c64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007c52:	f7ff fe17 	bl	8007884 <USBD_GetString>
  return USBD_StrDesc;
 8007c56:	4b02      	ldr	r3, [pc, #8]	; (8007c60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3708      	adds	r7, #8
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}
 8007c60:	20000c98 	.word	0x20000c98
 8007c64:	080083c4 	.word	0x080083c4

08007c68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	4603      	mov	r3, r0
 8007c70:	6039      	str	r1, [r7, #0]
 8007c72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	221a      	movs	r2, #26
 8007c78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c7a:	f000 f843 	bl	8007d04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c7e:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	20000168 	.word	0x20000168

08007c8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c8c:	b580      	push	{r7, lr}
 8007c8e:	b082      	sub	sp, #8
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	4603      	mov	r3, r0
 8007c94:	6039      	str	r1, [r7, #0]
 8007c96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c98:	79fb      	ldrb	r3, [r7, #7]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d105      	bne.n	8007caa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	4907      	ldr	r1, [pc, #28]	; (8007cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007ca2:	4808      	ldr	r0, [pc, #32]	; (8007cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007ca4:	f7ff fdee 	bl	8007884 <USBD_GetString>
 8007ca8:	e004      	b.n	8007cb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007caa:	683a      	ldr	r2, [r7, #0]
 8007cac:	4904      	ldr	r1, [pc, #16]	; (8007cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007cae:	4805      	ldr	r0, [pc, #20]	; (8007cc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007cb0:	f7ff fde8 	bl	8007884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cb4:	4b02      	ldr	r3, [pc, #8]	; (8007cc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000c98 	.word	0x20000c98
 8007cc4:	080083d8 	.word	0x080083d8

08007cc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	4603      	mov	r3, r0
 8007cd0:	6039      	str	r1, [r7, #0]
 8007cd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d105      	bne.n	8007ce6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007cda:	683a      	ldr	r2, [r7, #0]
 8007cdc:	4907      	ldr	r1, [pc, #28]	; (8007cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cde:	4808      	ldr	r0, [pc, #32]	; (8007d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007ce0:	f7ff fdd0 	bl	8007884 <USBD_GetString>
 8007ce4:	e004      	b.n	8007cf0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007ce6:	683a      	ldr	r2, [r7, #0]
 8007ce8:	4904      	ldr	r1, [pc, #16]	; (8007cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007cea:	4805      	ldr	r0, [pc, #20]	; (8007d00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007cec:	f7ff fdca 	bl	8007884 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007cf0:	4b02      	ldr	r3, [pc, #8]	; (8007cfc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3708      	adds	r7, #8
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bd80      	pop	{r7, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000c98 	.word	0x20000c98
 8007d00:	080083e4 	.word	0x080083e4

08007d04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b084      	sub	sp, #16
 8007d08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007d0a:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <Get_SerialNum+0x44>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007d10:	4b0e      	ldr	r3, [pc, #56]	; (8007d4c <Get_SerialNum+0x48>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007d16:	4b0e      	ldr	r3, [pc, #56]	; (8007d50 <Get_SerialNum+0x4c>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007d1c:	68fa      	ldr	r2, [r7, #12]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	4413      	add	r3, r2
 8007d22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d009      	beq.n	8007d3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007d2a:	2208      	movs	r2, #8
 8007d2c:	4909      	ldr	r1, [pc, #36]	; (8007d54 <Get_SerialNum+0x50>)
 8007d2e:	68f8      	ldr	r0, [r7, #12]
 8007d30:	f000 f814 	bl	8007d5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007d34:	2204      	movs	r2, #4
 8007d36:	4908      	ldr	r1, [pc, #32]	; (8007d58 <Get_SerialNum+0x54>)
 8007d38:	68b8      	ldr	r0, [r7, #8]
 8007d3a:	f000 f80f 	bl	8007d5c <IntToUnicode>
  }
}
 8007d3e:	bf00      	nop
 8007d40:	3710      	adds	r7, #16
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
 8007d46:	bf00      	nop
 8007d48:	1ffff7e8 	.word	0x1ffff7e8
 8007d4c:	1ffff7ec 	.word	0x1ffff7ec
 8007d50:	1ffff7f0 	.word	0x1ffff7f0
 8007d54:	2000016a 	.word	0x2000016a
 8007d58:	2000017a 	.word	0x2000017a

08007d5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b087      	sub	sp, #28
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	60f8      	str	r0, [r7, #12]
 8007d64:	60b9      	str	r1, [r7, #8]
 8007d66:	4613      	mov	r3, r2
 8007d68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007d6e:	2300      	movs	r3, #0
 8007d70:	75fb      	strb	r3, [r7, #23]
 8007d72:	e027      	b.n	8007dc4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	0f1b      	lsrs	r3, r3, #28
 8007d78:	2b09      	cmp	r3, #9
 8007d7a:	d80b      	bhi.n	8007d94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	0f1b      	lsrs	r3, r3, #28
 8007d80:	b2da      	uxtb	r2, r3
 8007d82:	7dfb      	ldrb	r3, [r7, #23]
 8007d84:	005b      	lsls	r3, r3, #1
 8007d86:	4619      	mov	r1, r3
 8007d88:	68bb      	ldr	r3, [r7, #8]
 8007d8a:	440b      	add	r3, r1
 8007d8c:	3230      	adds	r2, #48	; 0x30
 8007d8e:	b2d2      	uxtb	r2, r2
 8007d90:	701a      	strb	r2, [r3, #0]
 8007d92:	e00a      	b.n	8007daa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	0f1b      	lsrs	r3, r3, #28
 8007d98:	b2da      	uxtb	r2, r3
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	005b      	lsls	r3, r3, #1
 8007d9e:	4619      	mov	r1, r3
 8007da0:	68bb      	ldr	r3, [r7, #8]
 8007da2:	440b      	add	r3, r1
 8007da4:	3237      	adds	r2, #55	; 0x37
 8007da6:	b2d2      	uxtb	r2, r2
 8007da8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	011b      	lsls	r3, r3, #4
 8007dae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	005b      	lsls	r3, r3, #1
 8007db4:	3301      	adds	r3, #1
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	4413      	add	r3, r2
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007dbe:	7dfb      	ldrb	r3, [r7, #23]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	75fb      	strb	r3, [r7, #23]
 8007dc4:	7dfa      	ldrb	r2, [r7, #23]
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d3d3      	bcc.n	8007d74 <IntToUnicode+0x18>
  }
}
 8007dcc:	bf00      	nop
 8007dce:	bf00      	nop
 8007dd0:	371c      	adds	r7, #28
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bc80      	pop	{r7}
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <HAL_PCD_MspInit+0x44>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d113      	bne.n	8007e12 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007dea:	4b0d      	ldr	r3, [pc, #52]	; (8007e20 <HAL_PCD_MspInit+0x48>)
 8007dec:	69db      	ldr	r3, [r3, #28]
 8007dee:	4a0c      	ldr	r2, [pc, #48]	; (8007e20 <HAL_PCD_MspInit+0x48>)
 8007df0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007df4:	61d3      	str	r3, [r2, #28]
 8007df6:	4b0a      	ldr	r3, [pc, #40]	; (8007e20 <HAL_PCD_MspInit+0x48>)
 8007df8:	69db      	ldr	r3, [r3, #28]
 8007dfa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2100      	movs	r1, #0
 8007e06:	2014      	movs	r0, #20
 8007e08:	f7f9 fb77 	bl	80014fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007e0c:	2014      	movs	r0, #20
 8007e0e:	f7f9 fb90 	bl	8001532 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40005c00 	.word	0x40005c00
 8007e20:	40021000 	.word	0x40021000

08007e24 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b082      	sub	sp, #8
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007e38:	4619      	mov	r1, r3
 8007e3a:	4610      	mov	r0, r2
 8007e3c:	f7fe fdf2 	bl	8006a24 <USBD_LL_SetupStage>
}
 8007e40:	bf00      	nop
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b082      	sub	sp, #8
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
 8007e50:	460b      	mov	r3, r1
 8007e52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e5a:	78fa      	ldrb	r2, [r7, #3]
 8007e5c:	6879      	ldr	r1, [r7, #4]
 8007e5e:	4613      	mov	r3, r2
 8007e60:	009b      	lsls	r3, r3, #2
 8007e62:	4413      	add	r3, r2
 8007e64:	00db      	lsls	r3, r3, #3
 8007e66:	440b      	add	r3, r1
 8007e68:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007e6c:	681a      	ldr	r2, [r3, #0]
 8007e6e:	78fb      	ldrb	r3, [r7, #3]
 8007e70:	4619      	mov	r1, r3
 8007e72:	f7fe fe24 	bl	8006abe <USBD_LL_DataOutStage>
}
 8007e76:	bf00      	nop
 8007e78:	3708      	adds	r7, #8
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b082      	sub	sp, #8
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
 8007e86:	460b      	mov	r3, r1
 8007e88:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	6879      	ldr	r1, [r7, #4]
 8007e94:	4613      	mov	r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4413      	add	r3, r2
 8007e9a:	00db      	lsls	r3, r3, #3
 8007e9c:	440b      	add	r3, r1
 8007e9e:	333c      	adds	r3, #60	; 0x3c
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	78fb      	ldrb	r3, [r7, #3]
 8007ea4:	4619      	mov	r1, r3
 8007ea6:	f7fe fe7b 	bl	8006ba0 <USBD_LL_DataInStage>
}
 8007eaa:	bf00      	nop
 8007eac:	3708      	adds	r7, #8
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}

08007eb2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007eb2:	b580      	push	{r7, lr}
 8007eb4:	b082      	sub	sp, #8
 8007eb6:	af00      	add	r7, sp, #0
 8007eb8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7fe ff8b 	bl	8006ddc <USBD_LL_SOF>
}
 8007ec6:	bf00      	nop
 8007ec8:	3708      	adds	r7, #8
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b084      	sub	sp, #16
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	689b      	ldr	r3, [r3, #8]
 8007ede:	2b02      	cmp	r3, #2
 8007ee0:	d001      	beq.n	8007ee6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ee2:	f7f8 faf5 	bl	80004d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007eec:	7bfa      	ldrb	r2, [r7, #15]
 8007eee:	4611      	mov	r1, r2
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fe ff3b 	bl	8006d6c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007efc:	4618      	mov	r0, r3
 8007efe:	f7fe fef4 	bl	8006cea <USBD_LL_Reset>
}
 8007f02:	bf00      	nop
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b082      	sub	sp, #8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f1a:	4618      	mov	r0, r3
 8007f1c:	f7fe ff35 	bl	8006d8a <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	699b      	ldr	r3, [r3, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d005      	beq.n	8007f34 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007f28:	4b04      	ldr	r3, [pc, #16]	; (8007f3c <HAL_PCD_SuspendCallback+0x30>)
 8007f2a:	691b      	ldr	r3, [r3, #16]
 8007f2c:	4a03      	ldr	r2, [pc, #12]	; (8007f3c <HAL_PCD_SuspendCallback+0x30>)
 8007f2e:	f043 0306 	orr.w	r3, r3, #6
 8007f32:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007f34:	bf00      	nop
 8007f36:	3708      	adds	r7, #8
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	e000ed00 	.word	0xe000ed00

08007f40 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fe ff2f 	bl	8006db2 <USBD_LL_Resume>
}
 8007f54:	bf00      	nop
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007f64:	4a28      	ldr	r2, [pc, #160]	; (8008008 <USBD_LL_Init+0xac>)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a26      	ldr	r2, [pc, #152]	; (8008008 <USBD_LL_Init+0xac>)
 8007f70:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f74:	4b24      	ldr	r3, [pc, #144]	; (8008008 <USBD_LL_Init+0xac>)
 8007f76:	4a25      	ldr	r2, [pc, #148]	; (800800c <USBD_LL_Init+0xb0>)
 8007f78:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f7a:	4b23      	ldr	r3, [pc, #140]	; (8008008 <USBD_LL_Init+0xac>)
 8007f7c:	2208      	movs	r2, #8
 8007f7e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f80:	4b21      	ldr	r3, [pc, #132]	; (8008008 <USBD_LL_Init+0xac>)
 8007f82:	2202      	movs	r2, #2
 8007f84:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f86:	4b20      	ldr	r3, [pc, #128]	; (8008008 <USBD_LL_Init+0xac>)
 8007f88:	2200      	movs	r2, #0
 8007f8a:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f8c:	4b1e      	ldr	r3, [pc, #120]	; (8008008 <USBD_LL_Init+0xac>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f92:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <USBD_LL_Init+0xac>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f98:	481b      	ldr	r0, [pc, #108]	; (8008008 <USBD_LL_Init+0xac>)
 8007f9a:	f7f9 fae4 	bl	8001566 <HAL_PCD_Init>
 8007f9e:	4603      	mov	r3, r0
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d001      	beq.n	8007fa8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007fa4:	f7f8 fa94 	bl	80004d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fae:	2318      	movs	r3, #24
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	f7fa ff58 	bl	8002e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fbe:	2358      	movs	r3, #88	; 0x58
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	2180      	movs	r1, #128	; 0x80
 8007fc4:	f7fa ff50 	bl	8002e68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fce:	23c0      	movs	r3, #192	; 0xc0
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2181      	movs	r1, #129	; 0x81
 8007fd4:	f7fa ff48 	bl	8002e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007fde:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	f7fa ff3f 	bl	8002e68 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2182      	movs	r1, #130	; 0x82
 8007ff8:	f7fa ff36 	bl	8002e68 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000e98 	.word	0x20000e98
 800800c:	40005c00 	.word	0x40005c00

08008010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008026:	4618      	mov	r0, r3
 8008028:	f7f9 fba8 	bl	800177c <HAL_PCD_Start>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008030:	7bfb      	ldrb	r3, [r7, #15]
 8008032:	4618      	mov	r0, r3
 8008034:	f000 f94e 	bl	80082d4 <USBD_Get_USB_Status>
 8008038:	4603      	mov	r3, r0
 800803a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800803c:	7bbb      	ldrb	r3, [r7, #14]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3710      	adds	r7, #16
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b084      	sub	sp, #16
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	4608      	mov	r0, r1
 8008050:	4611      	mov	r1, r2
 8008052:	461a      	mov	r2, r3
 8008054:	4603      	mov	r3, r0
 8008056:	70fb      	strb	r3, [r7, #3]
 8008058:	460b      	mov	r3, r1
 800805a:	70bb      	strb	r3, [r7, #2]
 800805c:	4613      	mov	r3, r2
 800805e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008060:	2300      	movs	r3, #0
 8008062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008064:	2300      	movs	r3, #0
 8008066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800806e:	78bb      	ldrb	r3, [r7, #2]
 8008070:	883a      	ldrh	r2, [r7, #0]
 8008072:	78f9      	ldrb	r1, [r7, #3]
 8008074:	f7f9 fd20 	bl	8001ab8 <HAL_PCD_EP_Open>
 8008078:	4603      	mov	r3, r0
 800807a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800807c:	7bfb      	ldrb	r3, [r7, #15]
 800807e:	4618      	mov	r0, r3
 8008080:	f000 f928 	bl	80082d4 <USBD_Get_USB_Status>
 8008084:	4603      	mov	r3, r0
 8008086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008088:	7bbb      	ldrb	r3, [r7, #14]
}
 800808a:	4618      	mov	r0, r3
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}

08008092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008092:	b580      	push	{r7, lr}
 8008094:	b084      	sub	sp, #16
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
 800809a:	460b      	mov	r3, r1
 800809c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800809e:	2300      	movs	r3, #0
 80080a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080a2:	2300      	movs	r3, #0
 80080a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ac:	78fa      	ldrb	r2, [r7, #3]
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7f9 fd67 	bl	8001b84 <HAL_PCD_EP_Close>
 80080b6:	4603      	mov	r3, r0
 80080b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
 80080bc:	4618      	mov	r0, r3
 80080be:	f000 f909 	bl	80082d4 <USBD_Get_USB_Status>
 80080c2:	4603      	mov	r3, r0
 80080c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080c6:	7bbb      	ldrb	r3, [r7, #14]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3710      	adds	r7, #16
 80080cc:	46bd      	mov	sp, r7
 80080ce:	bd80      	pop	{r7, pc}

080080d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	460b      	mov	r3, r1
 80080da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080dc:	2300      	movs	r3, #0
 80080de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080e0:	2300      	movs	r3, #0
 80080e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ea:	78fa      	ldrb	r2, [r7, #3]
 80080ec:	4611      	mov	r1, r2
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7f9 fe27 	bl	8001d42 <HAL_PCD_EP_SetStall>
 80080f4:	4603      	mov	r3, r0
 80080f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080f8:	7bfb      	ldrb	r3, [r7, #15]
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 f8ea 	bl	80082d4 <USBD_Get_USB_Status>
 8008100:	4603      	mov	r3, r0
 8008102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008104:	7bbb      	ldrb	r3, [r7, #14]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3710      	adds	r7, #16
 800810a:	46bd      	mov	sp, r7
 800810c:	bd80      	pop	{r7, pc}

0800810e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800810e:	b580      	push	{r7, lr}
 8008110:	b084      	sub	sp, #16
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
 8008116:	460b      	mov	r3, r1
 8008118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800811a:	2300      	movs	r3, #0
 800811c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800811e:	2300      	movs	r3, #0
 8008120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008128:	78fa      	ldrb	r2, [r7, #3]
 800812a:	4611      	mov	r1, r2
 800812c:	4618      	mov	r0, r3
 800812e:	f7f9 fe68 	bl	8001e02 <HAL_PCD_EP_ClrStall>
 8008132:	4603      	mov	r3, r0
 8008134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008136:	7bfb      	ldrb	r3, [r7, #15]
 8008138:	4618      	mov	r0, r3
 800813a:	f000 f8cb 	bl	80082d4 <USBD_Get_USB_Status>
 800813e:	4603      	mov	r3, r0
 8008140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008142:	7bbb      	ldrb	r3, [r7, #14]
}
 8008144:	4618      	mov	r0, r3
 8008146:	3710      	adds	r7, #16
 8008148:	46bd      	mov	sp, r7
 800814a:	bd80      	pop	{r7, pc}

0800814c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	460b      	mov	r3, r1
 8008156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800815e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008164:	2b00      	cmp	r3, #0
 8008166:	da0c      	bge.n	8008182 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008168:	78fb      	ldrb	r3, [r7, #3]
 800816a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816e:	68f9      	ldr	r1, [r7, #12]
 8008170:	1c5a      	adds	r2, r3, #1
 8008172:	4613      	mov	r3, r2
 8008174:	009b      	lsls	r3, r3, #2
 8008176:	4413      	add	r3, r2
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	440b      	add	r3, r1
 800817c:	3302      	adds	r3, #2
 800817e:	781b      	ldrb	r3, [r3, #0]
 8008180:	e00b      	b.n	800819a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008182:	78fb      	ldrb	r3, [r7, #3]
 8008184:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008188:	68f9      	ldr	r1, [r7, #12]
 800818a:	4613      	mov	r3, r2
 800818c:	009b      	lsls	r3, r3, #2
 800818e:	4413      	add	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	440b      	add	r3, r1
 8008194:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008198:	781b      	ldrb	r3, [r3, #0]
  }
}
 800819a:	4618      	mov	r0, r3
 800819c:	3714      	adds	r7, #20
 800819e:	46bd      	mov	sp, r7
 80081a0:	bc80      	pop	{r7}
 80081a2:	4770      	bx	lr

080081a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b084      	sub	sp, #16
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	460b      	mov	r3, r1
 80081ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081be:	78fa      	ldrb	r2, [r7, #3]
 80081c0:	4611      	mov	r1, r2
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7f9 fc53 	bl	8001a6e <HAL_PCD_SetAddress>
 80081c8:	4603      	mov	r3, r0
 80081ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081cc:	7bfb      	ldrb	r3, [r7, #15]
 80081ce:	4618      	mov	r0, r3
 80081d0:	f000 f880 	bl	80082d4 <USBD_Get_USB_Status>
 80081d4:	4603      	mov	r3, r0
 80081d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3710      	adds	r7, #16
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}

080081e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081e2:	b580      	push	{r7, lr}
 80081e4:	b086      	sub	sp, #24
 80081e6:	af00      	add	r7, sp, #0
 80081e8:	60f8      	str	r0, [r7, #12]
 80081ea:	607a      	str	r2, [r7, #4]
 80081ec:	461a      	mov	r2, r3
 80081ee:	460b      	mov	r3, r1
 80081f0:	72fb      	strb	r3, [r7, #11]
 80081f2:	4613      	mov	r3, r2
 80081f4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f6:	2300      	movs	r3, #0
 80081f8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fa:	2300      	movs	r3, #0
 80081fc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008204:	893b      	ldrh	r3, [r7, #8]
 8008206:	7af9      	ldrb	r1, [r7, #11]
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	f7f9 fd57 	bl	8001cbc <HAL_PCD_EP_Transmit>
 800820e:	4603      	mov	r3, r0
 8008210:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008212:	7dfb      	ldrb	r3, [r7, #23]
 8008214:	4618      	mov	r0, r3
 8008216:	f000 f85d 	bl	80082d4 <USBD_Get_USB_Status>
 800821a:	4603      	mov	r3, r0
 800821c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800821e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008220:	4618      	mov	r0, r3
 8008222:	3718      	adds	r7, #24
 8008224:	46bd      	mov	sp, r7
 8008226:	bd80      	pop	{r7, pc}

08008228 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	461a      	mov	r2, r3
 8008234:	460b      	mov	r3, r1
 8008236:	72fb      	strb	r3, [r7, #11]
 8008238:	4613      	mov	r3, r2
 800823a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800823c:	2300      	movs	r3, #0
 800823e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008240:	2300      	movs	r3, #0
 8008242:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800824a:	893b      	ldrh	r3, [r7, #8]
 800824c:	7af9      	ldrb	r1, [r7, #11]
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	f7f9 fce0 	bl	8001c14 <HAL_PCD_EP_Receive>
 8008254:	4603      	mov	r3, r0
 8008256:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	4618      	mov	r0, r3
 800825c:	f000 f83a 	bl	80082d4 <USBD_Get_USB_Status>
 8008260:	4603      	mov	r3, r0
 8008262:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008264:	7dbb      	ldrb	r3, [r7, #22]
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}

0800826e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800826e:	b580      	push	{r7, lr}
 8008270:	b082      	sub	sp, #8
 8008272:	af00      	add	r7, sp, #0
 8008274:	6078      	str	r0, [r7, #4]
 8008276:	460b      	mov	r3, r1
 8008278:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008280:	78fa      	ldrb	r2, [r7, #3]
 8008282:	4611      	mov	r1, r2
 8008284:	4618      	mov	r0, r3
 8008286:	f7f9 fd02 	bl	8001c8e <HAL_PCD_EP_GetRxCount>
 800828a:	4603      	mov	r3, r0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3708      	adds	r7, #8
 8008290:	46bd      	mov	sp, r7
 8008292:	bd80      	pop	{r7, pc}

08008294 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
 800829a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800829c:	4b02      	ldr	r3, [pc, #8]	; (80082a8 <USBD_static_malloc+0x14>)
}
 800829e:	4618      	mov	r0, r3
 80082a0:	370c      	adds	r7, #12
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bc80      	pop	{r7}
 80082a6:	4770      	bx	lr
 80082a8:	20001184 	.word	0x20001184

080082ac <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b083      	sub	sp, #12
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]

}
 80082b4:	bf00      	nop
 80082b6:	370c      	adds	r7, #12
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bc80      	pop	{r7}
 80082bc:	4770      	bx	lr

080082be <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082be:	b480      	push	{r7}
 80082c0:	b083      	sub	sp, #12
 80082c2:	af00      	add	r7, sp, #0
 80082c4:	6078      	str	r0, [r7, #4]
 80082c6:	460b      	mov	r3, r1
 80082c8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80082ca:	bf00      	nop
 80082cc:	370c      	adds	r7, #12
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr

080082d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b085      	sub	sp, #20
 80082d8:	af00      	add	r7, sp, #0
 80082da:	4603      	mov	r3, r0
 80082dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082de:	2300      	movs	r3, #0
 80082e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80082e2:	79fb      	ldrb	r3, [r7, #7]
 80082e4:	2b03      	cmp	r3, #3
 80082e6:	d817      	bhi.n	8008318 <USBD_Get_USB_Status+0x44>
 80082e8:	a201      	add	r2, pc, #4	; (adr r2, 80082f0 <USBD_Get_USB_Status+0x1c>)
 80082ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ee:	bf00      	nop
 80082f0:	08008301 	.word	0x08008301
 80082f4:	08008307 	.word	0x08008307
 80082f8:	0800830d 	.word	0x0800830d
 80082fc:	08008313 	.word	0x08008313
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008300:	2300      	movs	r3, #0
 8008302:	73fb      	strb	r3, [r7, #15]
    break;
 8008304:	e00b      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008306:	2302      	movs	r3, #2
 8008308:	73fb      	strb	r3, [r7, #15]
    break;
 800830a:	e008      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800830c:	2301      	movs	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
    break;
 8008310:	e005      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008312:	2302      	movs	r3, #2
 8008314:	73fb      	strb	r3, [r7, #15]
    break;
 8008316:	e002      	b.n	800831e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008318:	2302      	movs	r3, #2
 800831a:	73fb      	strb	r3, [r7, #15]
    break;
 800831c:	bf00      	nop
  }
  return usb_status;
 800831e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3714      	adds	r7, #20
 8008324:	46bd      	mov	sp, r7
 8008326:	bc80      	pop	{r7}
 8008328:	4770      	bx	lr
 800832a:	bf00      	nop

0800832c <__libc_init_array>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	2600      	movs	r6, #0
 8008330:	4d0c      	ldr	r5, [pc, #48]	; (8008364 <__libc_init_array+0x38>)
 8008332:	4c0d      	ldr	r4, [pc, #52]	; (8008368 <__libc_init_array+0x3c>)
 8008334:	1b64      	subs	r4, r4, r5
 8008336:	10a4      	asrs	r4, r4, #2
 8008338:	42a6      	cmp	r6, r4
 800833a:	d109      	bne.n	8008350 <__libc_init_array+0x24>
 800833c:	f000 f822 	bl	8008384 <_init>
 8008340:	2600      	movs	r6, #0
 8008342:	4d0a      	ldr	r5, [pc, #40]	; (800836c <__libc_init_array+0x40>)
 8008344:	4c0a      	ldr	r4, [pc, #40]	; (8008370 <__libc_init_array+0x44>)
 8008346:	1b64      	subs	r4, r4, r5
 8008348:	10a4      	asrs	r4, r4, #2
 800834a:	42a6      	cmp	r6, r4
 800834c:	d105      	bne.n	800835a <__libc_init_array+0x2e>
 800834e:	bd70      	pop	{r4, r5, r6, pc}
 8008350:	f855 3b04 	ldr.w	r3, [r5], #4
 8008354:	4798      	blx	r3
 8008356:	3601      	adds	r6, #1
 8008358:	e7ee      	b.n	8008338 <__libc_init_array+0xc>
 800835a:	f855 3b04 	ldr.w	r3, [r5], #4
 800835e:	4798      	blx	r3
 8008360:	3601      	adds	r6, #1
 8008362:	e7f2      	b.n	800834a <__libc_init_array+0x1e>
 8008364:	08008404 	.word	0x08008404
 8008368:	08008404 	.word	0x08008404
 800836c:	08008404 	.word	0x08008404
 8008370:	08008408 	.word	0x08008408

08008374 <memset>:
 8008374:	4603      	mov	r3, r0
 8008376:	4402      	add	r2, r0
 8008378:	4293      	cmp	r3, r2
 800837a:	d100      	bne.n	800837e <memset+0xa>
 800837c:	4770      	bx	lr
 800837e:	f803 1b01 	strb.w	r1, [r3], #1
 8008382:	e7f9      	b.n	8008378 <memset+0x4>

08008384 <_init>:
 8008384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008386:	bf00      	nop
 8008388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800838a:	bc08      	pop	{r3}
 800838c:	469e      	mov	lr, r3
 800838e:	4770      	bx	lr

08008390 <_fini>:
 8008390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008392:	bf00      	nop
 8008394:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008396:	bc08      	pop	{r3}
 8008398:	469e      	mov	lr, r3
 800839a:	4770      	bx	lr
