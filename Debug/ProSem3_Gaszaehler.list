
ProSem3_Gaszaehler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000880c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  080089f0  080089f0  000189f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008a98  08008a98  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  08008a98  08008a98  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008a98  08008a98  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008a98  08008a98  00018a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008a9c  08008a9c  00018a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  08008aa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001224  200001f4  08008c94  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001418  08008c94  00021418  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8e6  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034e2  00000000  00000000  0002fb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  00032fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b08  00000000  00000000  00033cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d37d  00000000  00000000  000347d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012592  00000000  00000000  00051b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094c3d  00000000  00000000  000640df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8d1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003444  00000000  00000000  000f8d6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001f4 	.word	0x200001f4
 8000200:	00000000 	.word	0x00000000
 8000204:	080089d8 	.word	0x080089d8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001f8 	.word	0x200001f8
 8000220:	080089d8 	.word	0x080089d8

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <initTimer>:
#include <shalf1.h>
#include <stdbool.h>

bool timFlag = false;

void initTimer(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
	__disable_irq();
	timerBusClkOn(TIM2);
 8000264:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000268:	f000 fc24 	bl	8000ab4 <timerBusClkOn>
	timerSetPrescaler(TIM2, TIM_PSC);
 800026c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000274:	f000 fc60 	bl	8000b38 <timerSetPrescaler>
	timerEnableInterrupt(TIM2);
 8000278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027c:	f000 fc78 	bl	8000b70 <timerEnableInterrupt>
	timerSetOnePulseMode(TIM2, ONE_PULSE_MODE_ON);
 8000280:	2101      	movs	r1, #1
 8000282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000286:	f000 fc82 	bl	8000b8e <timerSetOnePulseMode>
	NVIC_EnableIRQ(TIM2_IRQn);
 800028a:	201c      	movs	r0, #28
 800028c:	f7ff ffca 	bl	8000224 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000290:	b662      	cpsie	i
}
 8000292:	bf00      	nop
	__enable_irq();
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <delay_ms>:

extern void delay_ms(uint16_t milliseconds){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	timerSetAutoReloadValue(TIM2, milliseconds);
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002aa:	f000 fc53 	bl	8000b54 <timerSetAutoReloadValue>
	timerStart(TIM2);
 80002ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002b2:	f000 fc87 	bl	8000bc4 <timerStart>
	while(!timFlag){}
 80002b6:	bf00      	nop
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <delay_ms+0x3c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f083 0301 	eor.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f8      	bne.n	80002b8 <delay_ms+0x20>
	timFlag = false;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <delay_ms+0x3c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000210 	.word	0x20000210

080002d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	timFlag = true;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <TIM2_IRQHandler+0x1c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
	TIM2->SR = 0;
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	20000210 	.word	0x20000210

080002f8 <__NVIC_EnableIRQ>:
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <__NVIC_EnableIRQ+0x34>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	e000e100 	.word	0xe000e100

08000330 <initPins>:
 *      Author: lukas
 */
#include <gpio.h>
#include <shalf1.h>

void initPins(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	gpioInitPort(GPIOC);
 8000334:	481e      	ldr	r0, [pc, #120]	; (80003b0 <initPins+0x80>)
 8000336:	f000 fa7b 	bl	8000830 <gpioInitPort>
	gpioSetupPin(GPIOC, PIN4, OUT_2MHZ);
 800033a:	2202      	movs	r2, #2
 800033c:	2104      	movs	r1, #4
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <initPins+0x80>)
 8000340:	f000 fac2 	bl	80008c8 <gpioSetupPin>
	gpioSetupMode(GPIOC, PIN4, GP_PP);
 8000344:	2200      	movs	r2, #0
 8000346:	2104      	movs	r1, #4
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <initPins+0x80>)
 800034a:	f000 fb22 	bl	8000992 <gpioSetupMode>
	gpioSetupPin(GPIOC, PIN9, INPUT);
 800034e:	2200      	movs	r2, #0
 8000350:	2109      	movs	r1, #9
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <initPins+0x80>)
 8000354:	f000 fab8 	bl	80008c8 <gpioSetupPin>
	gpioSetupInput(GPIOC, PIN9, IN_PUPD);
 8000358:	2202      	movs	r2, #2
 800035a:	2109      	movs	r1, #9
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <initPins+0x80>)
 800035e:	f000 faf0 	bl	8000942 <gpioSetupInput>
	gpioSetPullupPulldown(GPIOC, PIN9, true);
 8000362:	2201      	movs	r2, #1
 8000364:	2109      	movs	r1, #9
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <initPins+0x80>)
 8000368:	f000 fb64 	bl	8000a34 <gpioSetPullupPulldown>
	extiConfigureEXTI(PORT_C, PIN9);
 800036c:	2109      	movs	r1, #9
 800036e:	2002      	movs	r0, #2
 8000370:	f000 f9aa 	bl	80006c8 <extiConfigureEXTI>
	extiEnableIrq(EXTI_P9);
 8000374:	2009      	movs	r0, #9
 8000376:	f000 fa1d 	bl	80007b4 <extiEnableIrq>
	extiSetTriggerEdge(false, EXTI_P9);
 800037a:	2109      	movs	r1, #9
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fa2f 	bl	80007e0 <extiSetTriggerEdge>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000382:	2017      	movs	r0, #23
 8000384:	f7ff ffb8 	bl	80002f8 <__NVIC_EnableIRQ>
	gpioInitPort(GPIOB);
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <initPins+0x84>)
 800038a:	f000 fa51 	bl	8000830 <gpioInitPort>
	gpioSetupPin(GPIOB, PIN12, OUT_2MHZ);
 800038e:	2202      	movs	r2, #2
 8000390:	210c      	movs	r1, #12
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <initPins+0x84>)
 8000394:	f000 fa98 	bl	80008c8 <gpioSetupPin>
	gpioSetupMode(GPIOB, PIN12, GP_PP);
 8000398:	2200      	movs	r2, #0
 800039a:	210c      	movs	r1, #12
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <initPins+0x84>)
 800039e:	f000 faf8 	bl	8000992 <gpioSetupMode>
	gpioResetPin(GPIOB, PIN12);
 80003a2:	210c      	movs	r1, #12
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <initPins+0x84>)
 80003a6:	f000 fb30 	bl	8000a0a <gpioResetPin>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 fe20 	bl	8001000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f807 	bl	80003d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 f862 	bl	800048c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003c8:	f007 f9e4 	bl	8007794 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  start();
 80003cc:	f000 f886 	bl	80004dc <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x18>

080003d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b096      	sub	sp, #88	; 0x58
 80003d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003dc:	2228      	movs	r2, #40	; 0x28
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f007 fe77 	bl	80080d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000426:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fc07 	bl	8002c40 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000438:	f000 f84a 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f002 fe73 	bl	8003144 <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000464:	f000 f834 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000468:	2310      	movs	r3, #16
 800046a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800046c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000470:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f002 ffcb 	bl	8003410 <HAL_RCCEx_PeriphCLKConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000480:	f000 f826 	bl	80004d0 <Error_Handler>
  }
}
 8000484:	bf00      	nop
 8000486:	3758      	adds	r7, #88	; 0x58
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_GPIO_Init+0x40>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <MX_GPIO_Init+0x40>)
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_GPIO_Init+0x40>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_GPIO_Init+0x40>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <start>:
char foo;

static uint32_t tickCNT = 0;
char ausg[20] = "ausgabe\n";

void start(void){
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	initRS485UART();
 80004e0:	f000 f8b4 	bl	800064c <initRS485UART>
	initTimer();
 80004e4:	f7ff feba 	bl	800025c <initTimer>
	initPins();
 80004e8:	f7ff ff22 	bl	8000330 <initPins>
	while(1){
		if(usartRXFlag){
 80004ec:	4b14      	ldr	r3, [pc, #80]	; (8000540 <start+0x64>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b00      	cmp	r3, #0
 80004f2:	d0fb      	beq.n	80004ec <start+0x10>
			//modbusrequest()hier implementieren!
			USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
 80004f4:	4b13      	ldr	r3, [pc, #76]	; (8000544 <start+0x68>)
 80004f6:	68db      	ldr	r3, [r3, #12]
 80004f8:	4a12      	ldr	r2, [pc, #72]	; (8000544 <start+0x68>)
 80004fa:	f023 0320 	bic.w	r3, r3, #32
 80004fe:	60d3      	str	r3, [r2, #12]
			sprintf(ausg, "tick: %" PRIu32 "\n", tickCNT);
 8000500:	4b11      	ldr	r3, [pc, #68]	; (8000548 <start+0x6c>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	461a      	mov	r2, r3
 8000506:	4911      	ldr	r1, [pc, #68]	; (800054c <start+0x70>)
 8000508:	4811      	ldr	r0, [pc, #68]	; (8000550 <start+0x74>)
 800050a:	f007 fdeb 	bl	80080e4 <siprintf>
			gpioSetPin(GPIOB, PIN12);
 800050e:	210c      	movs	r1, #12
 8000510:	4810      	ldr	r0, [pc, #64]	; (8000554 <start+0x78>)
 8000512:	f000 fa66 	bl	80009e2 <gpioSetPin>
			USARTSendString(USART1, ausg);
 8000516:	490e      	ldr	r1, [pc, #56]	; (8000550 <start+0x74>)
 8000518:	480a      	ldr	r0, [pc, #40]	; (8000544 <start+0x68>)
 800051a:	f000 fc9b 	bl	8000e54 <USARTSendString>
			USART1->CR1 |= USART_CR1_RXNEIE;
 800051e:	4b09      	ldr	r3, [pc, #36]	; (8000544 <start+0x68>)
 8000520:	68db      	ldr	r3, [r3, #12]
 8000522:	4a08      	ldr	r2, [pc, #32]	; (8000544 <start+0x68>)
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	60d3      	str	r3, [r2, #12]
			gpioResetPin(GPIOB, PIN12);
 800052a:	210c      	movs	r1, #12
 800052c:	4809      	ldr	r0, [pc, #36]	; (8000554 <start+0x78>)
 800052e:	f000 fa6c 	bl	8000a0a <gpioResetPin>
			delay_ms(100);
 8000532:	2064      	movs	r0, #100	; 0x64
 8000534:	f7ff feb0 	bl	8000298 <delay_ms>
			usartRXFlag = false;
 8000538:	4b01      	ldr	r3, [pc, #4]	; (8000540 <start+0x64>)
 800053a:	2200      	movs	r2, #0
 800053c:	701a      	strb	r2, [r3, #0]
		if(usartRXFlag){
 800053e:	e7d5      	b.n	80004ec <start+0x10>
 8000540:	20000220 	.word	0x20000220
 8000544:	40013800 	.word	0x40013800
 8000548:	20000224 	.word	0x20000224
 800054c:	080089f0 	.word	0x080089f0
 8000550:	20000000 	.word	0x20000000
 8000554:	40010c00 	.word	0x40010c00

08000558 <USART1_IRQHandler>:


/*-----------------------------------------------------------------------------
+++++++++++++++++++++++++++++++ISR+++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
	if(!usartRXFlag){
 800055c:	4b1d      	ldr	r3, [pc, #116]	; (80005d4 <USART1_IRQHandler+0x7c>)
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	f083 0301 	eor.w	r3, r3, #1
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d020      	beq.n	80005ac <USART1_IRQHandler+0x54>
		while(!(USART1->SR & USART_SR_RXNE)){}
 800056a:	bf00      	nop
 800056c:	4b1a      	ldr	r3, [pc, #104]	; (80005d8 <USART1_IRQHandler+0x80>)
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f003 0320 	and.w	r3, r3, #32
 8000574:	2b00      	cmp	r3, #0
 8000576:	d0f9      	beq.n	800056c <USART1_IRQHandler+0x14>
		usartBuff[cnt]= USART1->DR & 0x01FF;
 8000578:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <USART1_IRQHandler+0x80>)
 800057a:	685a      	ldr	r2, [r3, #4]
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <USART1_IRQHandler+0x84>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	b2d1      	uxtb	r1, r2
 8000582:	4a17      	ldr	r2, [pc, #92]	; (80005e0 <USART1_IRQHandler+0x88>)
 8000584:	54d1      	strb	r1, [r2, r3]
		cnt++;
 8000586:	4b15      	ldr	r3, [pc, #84]	; (80005dc <USART1_IRQHandler+0x84>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	3301      	adds	r3, #1
 800058c:	4a13      	ldr	r2, [pc, #76]	; (80005dc <USART1_IRQHandler+0x84>)
 800058e:	6013      	str	r3, [r2, #0]
		if((cnt == USART_MSG_LEN-1)){
 8000590:	4b12      	ldr	r3, [pc, #72]	; (80005dc <USART1_IRQHandler+0x84>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	2b06      	cmp	r3, #6
 8000596:	d118      	bne.n	80005ca <USART1_IRQHandler+0x72>
			//USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
			USART1->DR = 0;
 8000598:	4b0f      	ldr	r3, [pc, #60]	; (80005d8 <USART1_IRQHandler+0x80>)
 800059a:	2200      	movs	r2, #0
 800059c:	605a      	str	r2, [r3, #4]
			usartRXFlag = true;
 800059e:	4b0d      	ldr	r3, [pc, #52]	; (80005d4 <USART1_IRQHandler+0x7c>)
 80005a0:	2201      	movs	r2, #1
 80005a2:	701a      	strb	r2, [r3, #0]
			cnt=0;
 80005a4:	4b0d      	ldr	r3, [pc, #52]	; (80005dc <USART1_IRQHandler+0x84>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	601a      	str	r2, [r3, #0]
	else{
		while(!(USART1->SR & USART_SR_RXNE)){}
		foo= USART1->DR & 0x01FF;
		USART1->DR = 0;
	}
}
 80005aa:	e00e      	b.n	80005ca <USART1_IRQHandler+0x72>
		while(!(USART1->SR & USART_SR_RXNE)){}
 80005ac:	bf00      	nop
 80005ae:	4b0a      	ldr	r3, [pc, #40]	; (80005d8 <USART1_IRQHandler+0x80>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d0f9      	beq.n	80005ae <USART1_IRQHandler+0x56>
		foo= USART1->DR & 0x01FF;
 80005ba:	4b07      	ldr	r3, [pc, #28]	; (80005d8 <USART1_IRQHandler+0x80>)
 80005bc:	685b      	ldr	r3, [r3, #4]
 80005be:	b2da      	uxtb	r2, r3
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <USART1_IRQHandler+0x8c>)
 80005c2:	701a      	strb	r2, [r3, #0]
		USART1->DR = 0;
 80005c4:	4b04      	ldr	r3, [pc, #16]	; (80005d8 <USART1_IRQHandler+0x80>)
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bc80      	pop	{r7}
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop
 80005d4:	20000220 	.word	0x20000220
 80005d8:	40013800 	.word	0x40013800
 80005dc:	2000021c 	.word	0x2000021c
 80005e0:	20000214 	.word	0x20000214
 80005e4:	20000221 	.word	0x20000221

080005e8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80005e8:	b480      	push	{r7}
 80005ea:	af00      	add	r7, sp, #0
	tickCNT++;
 80005ec:	4b07      	ldr	r3, [pc, #28]	; (800060c <EXTI9_5_IRQHandler+0x24>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	3301      	adds	r3, #1
 80005f2:	4a06      	ldr	r2, [pc, #24]	; (800060c <EXTI9_5_IRQHandler+0x24>)
 80005f4:	6013      	str	r3, [r2, #0]
	EXTI->PR |= EXTI_PR_PR9;
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <EXTI9_5_IRQHandler+0x28>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <EXTI9_5_IRQHandler+0x28>)
 80005fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000600:	6153      	str	r3, [r2, #20]
}
 8000602:	bf00      	nop
 8000604:	46bd      	mov	sp, r7
 8000606:	bc80      	pop	{r7}
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000224 	.word	0x20000224
 8000610:	40010400 	.word	0x40010400

08000614 <__NVIC_EnableIRQ>:
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800061e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000622:	2b00      	cmp	r3, #0
 8000624:	db0b      	blt.n	800063e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000626:	79fb      	ldrb	r3, [r7, #7]
 8000628:	f003 021f 	and.w	r2, r3, #31
 800062c:	4906      	ldr	r1, [pc, #24]	; (8000648 <__NVIC_EnableIRQ+0x34>)
 800062e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000632:	095b      	lsrs	r3, r3, #5
 8000634:	2001      	movs	r0, #1
 8000636:	fa00 f202 	lsl.w	r2, r0, r2
 800063a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	bc80      	pop	{r7}
 8000646:	4770      	bx	lr
 8000648:	e000e100 	.word	0xe000e100

0800064c <initRS485UART>:
#include <shalf1.h>
#include <stdbool.h>
#include "rs485uart.h"

//USART in DMA Modus -> Modbus empfängt 5 Bytes
void initRS485UART(void){
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000650:	b672      	cpsid	i
}
 8000652:	bf00      	nop
	__disable_irq();
	gpioInitPort(GPIOA);
 8000654:	481a      	ldr	r0, [pc, #104]	; (80006c0 <initRS485UART+0x74>)
 8000656:	f000 f8eb 	bl	8000830 <gpioInitPort>
	afioInit();
 800065a:	f000 fa0f 	bl	8000a7c <afioInit>
	USARTEnable(USART1);
 800065e:	4819      	ldr	r0, [pc, #100]	; (80006c4 <initRS485UART+0x78>)
 8000660:	f000 fac0 	bl	8000be4 <USARTEnable>
	gpioSetupPin(GPIOA, PIN9, OUT_50MHZ);
 8000664:	2203      	movs	r2, #3
 8000666:	2109      	movs	r1, #9
 8000668:	4815      	ldr	r0, [pc, #84]	; (80006c0 <initRS485UART+0x74>)
 800066a:	f000 f92d 	bl	80008c8 <gpioSetupPin>
	gpioSetupMode(GPIOA, PIN9, AF_PP);
 800066e:	2202      	movs	r2, #2
 8000670:	2109      	movs	r1, #9
 8000672:	4813      	ldr	r0, [pc, #76]	; (80006c0 <initRS485UART+0x74>)
 8000674:	f000 f98d 	bl	8000992 <gpioSetupMode>
	gpioSetupPin(GPIOA, PIN10, INPUT);
 8000678:	2200      	movs	r2, #0
 800067a:	210a      	movs	r1, #10
 800067c:	4810      	ldr	r0, [pc, #64]	; (80006c0 <initRS485UART+0x74>)
 800067e:	f000 f923 	bl	80008c8 <gpioSetupPin>
	gpioSetupInput(GPIOA, PIN10, FLOATING);
 8000682:	2201      	movs	r2, #1
 8000684:	210a      	movs	r1, #10
 8000686:	480e      	ldr	r0, [pc, #56]	; (80006c0 <initRS485UART+0x74>)
 8000688:	f000 f95b 	bl	8000942 <gpioSetupInput>
	USARTIRQ(USART1, USART_IRQ_RXNEIE, true);
 800068c:	2201      	movs	r2, #1
 800068e:	2103      	movs	r1, #3
 8000690:	480c      	ldr	r0, [pc, #48]	; (80006c4 <initRS485UART+0x78>)
 8000692:	f000 fb43 	bl	8000d1c <USARTIRQ>
	//usartSetDmaRxMode(USART1, DMA_RECEIVE_ON);
	//gpioSetupOutput(GPIOA, PIN3, AF_PP);
	USARTSetBaudrate(USART1, 9600);
 8000696:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800069a:	480a      	ldr	r0, [pc, #40]	; (80006c4 <initRS485UART+0x78>)
 800069c:	f000 fae6 	bl	8000c6c <USARTSetBaudrate>
	USARTTXOn(USART1, TRANSMITTER_ON);
 80006a0:	2101      	movs	r1, #1
 80006a2:	4808      	ldr	r0, [pc, #32]	; (80006c4 <initRS485UART+0x78>)
 80006a4:	f000 fb1f 	bl	8000ce6 <USARTTXOn>
	USARTRXOn(USART1, RECEIVER_ON);
 80006a8:	2101      	movs	r1, #1
 80006aa:	4806      	ldr	r0, [pc, #24]	; (80006c4 <initRS485UART+0x78>)
 80006ac:	f000 fb00 	bl	8000cb0 <USARTRXOn>
	NVIC_EnableIRQ(USART1_IRQn);
 80006b0:	2025      	movs	r0, #37	; 0x25
 80006b2:	f7ff ffaf 	bl	8000614 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80006b6:	b662      	cpsie	i
}
 80006b8:	bf00      	nop
	__enable_irq();
}
 80006ba:	bf00      	nop
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40010800 	.word	0x40010800
 80006c4:	40013800 	.word	0x40013800

080006c8 <extiConfigureEXTI>:
  * Desc.: sets the Bits in AFIO EXTICR Register, to set the Interrupts as Sources. Ther are four EXTICR Registers (4 Pins per EXTICR)
  * @param: (PORT) port: Port
  * @param: (Pin) pin: Pin
  * @return: none
  */
extern void extiConfigureEXTI(PORT port, PIN_NUM pin){
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	460a      	mov	r2, r1
 80006d2:	71fb      	strb	r3, [r7, #7]
 80006d4:	4613      	mov	r3, r2
 80006d6:	71bb      	strb	r3, [r7, #6]
	uint8_t mask = port;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
 80006da:	737b      	strb	r3, [r7, #13]
	uint8_t shift = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	73bb      	strb	r3, [r7, #14]
	switch(pin){
 80006e4:	79bb      	ldrb	r3, [r7, #6]
 80006e6:	2b0f      	cmp	r3, #15
 80006e8:	d840      	bhi.n	800076c <extiConfigureEXTI+0xa4>
 80006ea:	a201      	add	r2, pc, #4	; (adr r2, 80006f0 <extiConfigureEXTI+0x28>)
 80006ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f0:	08000731 	.word	0x08000731
 80006f4:	08000731 	.word	0x08000731
 80006f8:	08000731 	.word	0x08000731
 80006fc:	08000731 	.word	0x08000731
 8000700:	0800073d 	.word	0x0800073d
 8000704:	0800073d 	.word	0x0800073d
 8000708:	0800073d 	.word	0x0800073d
 800070c:	0800073d 	.word	0x0800073d
 8000710:	0800074d 	.word	0x0800074d
 8000714:	0800074d 	.word	0x0800074d
 8000718:	0800074d 	.word	0x0800074d
 800071c:	0800074d 	.word	0x0800074d
 8000720:	0800075d 	.word	0x0800075d
 8000724:	0800075d 	.word	0x0800075d
 8000728:	0800075d 	.word	0x0800075d
 800072c:	0800075d 	.word	0x0800075d
	case 0:
	case 1:
	case 2:
	case 3:
		shift = pin * 4;
 8000730:	79bb      	ldrb	r3, [r7, #6]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	73fb      	strb	r3, [r7, #15]
		index = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	73bb      	strb	r3, [r7, #14]
		break;
 800073a:	e017      	b.n	800076c <extiConfigureEXTI+0xa4>
	case 4:
	case 5:
	case 6:
	case 7:
		shift = (pin-4)*4;
 800073c:	79bb      	ldrb	r3, [r7, #6]
 800073e:	3b04      	subs	r3, #4
 8000740:	b2db      	uxtb	r3, r3
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	73fb      	strb	r3, [r7, #15]
		index = 1;
 8000746:	2301      	movs	r3, #1
 8000748:	73bb      	strb	r3, [r7, #14]
		break;
 800074a:	e00f      	b.n	800076c <extiConfigureEXTI+0xa4>
	case 8:
	case 9:
	case 10:
	case 11:
		shift = (pin-8)*4;
 800074c:	79bb      	ldrb	r3, [r7, #6]
 800074e:	3b08      	subs	r3, #8
 8000750:	b2db      	uxtb	r3, r3
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	73fb      	strb	r3, [r7, #15]
		index = 2;
 8000756:	2302      	movs	r3, #2
 8000758:	73bb      	strb	r3, [r7, #14]
		break;
 800075a:	e007      	b.n	800076c <extiConfigureEXTI+0xa4>
	case 12:
	case 13:
	case 14:
	case 15:
		shift = (pin-12)*4;
 800075c:	79bb      	ldrb	r3, [r7, #6]
 800075e:	3b0c      	subs	r3, #12
 8000760:	b2db      	uxtb	r3, r3
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	73fb      	strb	r3, [r7, #15]
		index = 3;
 8000766:	2303      	movs	r3, #3
 8000768:	73bb      	strb	r3, [r7, #14]
		break;
 800076a:	bf00      	nop
	}

	AFIO->EXTICR[index] &= ~0xFFFF;
 800076c:	4a10      	ldr	r2, [pc, #64]	; (80007b0 <extiConfigureEXTI+0xe8>)
 800076e:	7bbb      	ldrb	r3, [r7, #14]
 8000770:	3302      	adds	r3, #2
 8000772:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000776:	490e      	ldr	r1, [pc, #56]	; (80007b0 <extiConfigureEXTI+0xe8>)
 8000778:	7bba      	ldrb	r2, [r7, #14]
 800077a:	0c1b      	lsrs	r3, r3, #16
 800077c:	041b      	lsls	r3, r3, #16
 800077e:	3202      	adds	r2, #2
 8000780:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	AFIO->EXTICR[index] |= (mask << shift);
 8000784:	4a0a      	ldr	r2, [pc, #40]	; (80007b0 <extiConfigureEXTI+0xe8>)
 8000786:	7bbb      	ldrb	r3, [r7, #14]
 8000788:	3302      	adds	r3, #2
 800078a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800078e:	7b79      	ldrb	r1, [r7, #13]
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	fa01 f303 	lsl.w	r3, r1, r3
 8000796:	4618      	mov	r0, r3
 8000798:	4905      	ldr	r1, [pc, #20]	; (80007b0 <extiConfigureEXTI+0xe8>)
 800079a:	7bbb      	ldrb	r3, [r7, #14]
 800079c:	4302      	orrs	r2, r0
 800079e:	3302      	adds	r3, #2
 80007a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80007a4:	bf00      	nop
 80007a6:	3714      	adds	r7, #20
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bc80      	pop	{r7}
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	40010000 	.word	0x40010000

080007b4 <extiEnableIrq>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiEnableIrq(irq_NUM irq){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |= 1 << irq; //schiebt das Bit an die korrespondierende Stelle des IMR
 80007be:	4b07      	ldr	r3, [pc, #28]	; (80007dc <extiEnableIrq+0x28>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	79fa      	ldrb	r2, [r7, #7]
 80007c4:	2101      	movs	r1, #1
 80007c6:	fa01 f202 	lsl.w	r2, r1, r2
 80007ca:	4611      	mov	r1, r2
 80007cc:	4a03      	ldr	r2, [pc, #12]	; (80007dc <extiEnableIrq+0x28>)
 80007ce:	430b      	orrs	r3, r1
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40010400 	.word	0x40010400

080007e0 <extiSetTriggerEdge>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiSetTriggerEdge(bool rising, irq_NUM irq){
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	460a      	mov	r2, r1
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	4613      	mov	r3, r2
 80007ee:	71bb      	strb	r3, [r7, #6]
	if(rising == true){
 80007f0:	79fb      	ldrb	r3, [r7, #7]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d00a      	beq.n	800080c <extiSetTriggerEdge+0x2c>
		EXTI->RTSR |= 1 << irq;
 80007f6:	4b0d      	ldr	r3, [pc, #52]	; (800082c <extiSetTriggerEdge+0x4c>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	79ba      	ldrb	r2, [r7, #6]
 80007fc:	2101      	movs	r1, #1
 80007fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000802:	4611      	mov	r1, r2
 8000804:	4a09      	ldr	r2, [pc, #36]	; (800082c <extiSetTriggerEdge+0x4c>)
 8000806:	430b      	orrs	r3, r1
 8000808:	6093      	str	r3, [r2, #8]
	}
	else{
		EXTI->FTSR |= 1 << irq;
	}
}
 800080a:	e009      	b.n	8000820 <extiSetTriggerEdge+0x40>
		EXTI->FTSR |= 1 << irq;
 800080c:	4b07      	ldr	r3, [pc, #28]	; (800082c <extiSetTriggerEdge+0x4c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	2101      	movs	r1, #1
 8000814:	fa01 f202 	lsl.w	r2, r1, r2
 8000818:	4611      	mov	r1, r2
 800081a:	4a04      	ldr	r2, [pc, #16]	; (800082c <extiSetTriggerEdge+0x4c>)
 800081c:	430b      	orrs	r3, r1
 800081e:	60d3      	str	r3, [r2, #12]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	bc80      	pop	{r7}
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40010400 	.word	0x40010400

08000830 <gpioInitPort>:
/*
  * Desc.: enables the Clock for the corresponding GPIO Port
  * @param: (GPIO_TypeDef*) port: Port which should be supplied with Clock
  * @return: none
  */
extern void gpioInitPort(GPIO_TypeDef *port){
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
		if (port == GPIOA){
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a1d      	ldr	r2, [pc, #116]	; (80008b0 <gpioInitPort+0x80>)
 800083c:	4293      	cmp	r3, r2
 800083e:	d106      	bne.n	800084e <gpioInitPort+0x1e>
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000840:	4b1c      	ldr	r3, [pc, #112]	; (80008b4 <gpioInitPort+0x84>)
 8000842:	699b      	ldr	r3, [r3, #24]
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <gpioInitPort+0x84>)
 8000846:	f043 0304 	orr.w	r3, r3, #4
 800084a:	6193      	str	r3, [r2, #24]
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
		}
		else if(port == GPIOE){
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
		}
}
 800084c:	e02a      	b.n	80008a4 <gpioInitPort+0x74>
		else if(port == GPIOB){
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	4a19      	ldr	r2, [pc, #100]	; (80008b8 <gpioInitPort+0x88>)
 8000852:	4293      	cmp	r3, r2
 8000854:	d106      	bne.n	8000864 <gpioInitPort+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <gpioInitPort+0x84>)
 8000858:	699b      	ldr	r3, [r3, #24]
 800085a:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <gpioInitPort+0x84>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6193      	str	r3, [r2, #24]
}
 8000862:	e01f      	b.n	80008a4 <gpioInitPort+0x74>
		else if(port == GPIOC){
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4a15      	ldr	r2, [pc, #84]	; (80008bc <gpioInitPort+0x8c>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d106      	bne.n	800087a <gpioInitPort+0x4a>
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <gpioInitPort+0x84>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <gpioInitPort+0x84>)
 8000872:	f043 0310 	orr.w	r3, r3, #16
 8000876:	6193      	str	r3, [r2, #24]
}
 8000878:	e014      	b.n	80008a4 <gpioInitPort+0x74>
		else if(port == GPIOD){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4a10      	ldr	r2, [pc, #64]	; (80008c0 <gpioInitPort+0x90>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d106      	bne.n	8000890 <gpioInitPort+0x60>
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000882:	4b0c      	ldr	r3, [pc, #48]	; (80008b4 <gpioInitPort+0x84>)
 8000884:	699b      	ldr	r3, [r3, #24]
 8000886:	4a0b      	ldr	r2, [pc, #44]	; (80008b4 <gpioInitPort+0x84>)
 8000888:	f043 0320 	orr.w	r3, r3, #32
 800088c:	6193      	str	r3, [r2, #24]
}
 800088e:	e009      	b.n	80008a4 <gpioInitPort+0x74>
		else if(port == GPIOE){
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	4a0c      	ldr	r2, [pc, #48]	; (80008c4 <gpioInitPort+0x94>)
 8000894:	4293      	cmp	r3, r2
 8000896:	d105      	bne.n	80008a4 <gpioInitPort+0x74>
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
 8000898:	4b06      	ldr	r3, [pc, #24]	; (80008b4 <gpioInitPort+0x84>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	4a05      	ldr	r2, [pc, #20]	; (80008b4 <gpioInitPort+0x84>)
 800089e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a2:	6193      	str	r3, [r2, #24]
}
 80008a4:	bf00      	nop
 80008a6:	370c      	adds	r7, #12
 80008a8:	46bd      	mov	sp, r7
 80008aa:	bc80      	pop	{r7}
 80008ac:	4770      	bx	lr
 80008ae:	bf00      	nop
 80008b0:	40010800 	.word	0x40010800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40010c00 	.word	0x40010c00
 80008bc:	40011000 	.word	0x40011000
 80008c0:	40011400 	.word	0x40011400
 80008c4:	40011800 	.word	0x40011800

080008c8 <gpioSetupPin>:
									OUT_10MHZ,
									OUT_2MHZ,
									OUT_50MHZ
  * @return: none
  */
extern void gpioSetupPin(GPIO_TypeDef *port, PIN_NUM pin, GPIO_MODE pinmode){
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
 80008d0:	460b      	mov	r3, r1
 80008d2:	70fb      	strb	r3, [r7, #3]
 80008d4:	4613      	mov	r3, r2
 80008d6:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 80008d8:	78fb      	ldrb	r3, [r7, #3]
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d815      	bhi.n	800090a <gpioSetupPin+0x42>
		port -> CRL &= ~(0b1111 << (pin*4));
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	78fa      	ldrb	r2, [r7, #3]
 80008e4:	0092      	lsls	r2, r2, #2
 80008e6:	210f      	movs	r1, #15
 80008e8:	fa01 f202 	lsl.w	r2, r1, r2
 80008ec:	43d2      	mvns	r2, r2
 80008ee:	401a      	ands	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	601a      	str	r2, [r3, #0]
		port ->CRL |= (pinmode << (pin*4));
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	78b9      	ldrb	r1, [r7, #2]
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	0092      	lsls	r2, r2, #2
 80008fe:	fa01 f202 	lsl.w	r2, r1, r2
 8000902:	431a      	orrs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	601a      	str	r2, [r3, #0]
	}
	else{
		port->CRH &= ~(0b1111 << ((pin-8)*4));
		port->CRH |= (pinmode << ((pin-8)*4));
	}
}
 8000908:	e016      	b.n	8000938 <gpioSetupPin+0x70>
		port->CRH &= ~(0b1111 << ((pin-8)*4));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	685b      	ldr	r3, [r3, #4]
 800090e:	78fa      	ldrb	r2, [r7, #3]
 8000910:	3a08      	subs	r2, #8
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	210f      	movs	r1, #15
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	401a      	ands	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	605a      	str	r2, [r3, #4]
		port->CRH |= (pinmode << ((pin-8)*4));
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	685b      	ldr	r3, [r3, #4]
 8000926:	78b9      	ldrb	r1, [r7, #2]
 8000928:	78fa      	ldrb	r2, [r7, #3]
 800092a:	3a08      	subs	r2, #8
 800092c:	0092      	lsls	r2, r2, #2
 800092e:	fa01 f202 	lsl.w	r2, r1, r2
 8000932:	431a      	orrs	r2, r3
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	605a      	str	r2, [r3, #4]
}
 8000938:	bf00      	nop
 800093a:	370c      	adds	r7, #12
 800093c:	46bd      	mov	sp, r7
 800093e:	bc80      	pop	{r7}
 8000940:	4770      	bx	lr

08000942 <gpioSetupInput>:
  * @param: (INPUT_MODE) mode: ANALOG = 0,
								FLOATING,
								IN_PUPD
  * @return: none
  */
extern void gpioSetupInput(GPIO_TypeDef *port, PIN_NUM pin, INPUT_MODE mode){
 8000942:	b480      	push	{r7}
 8000944:	b083      	sub	sp, #12
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	460b      	mov	r3, r1
 800094c:	70fb      	strb	r3, [r7, #3]
 800094e:	4613      	mov	r3, r2
 8000950:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d80b      	bhi.n	8000970 <gpioSetupInput+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	78b9      	ldrb	r1, [r7, #2]
 800095e:	78fa      	ldrb	r2, [r7, #3]
 8000960:	0092      	lsls	r2, r2, #2
 8000962:	3202      	adds	r2, #2
 8000964:	fa01 f202 	lsl.w	r2, r1, r2
 8000968:	431a      	orrs	r2, r3
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 800096e:	e00b      	b.n	8000988 <gpioSetupInput+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	685b      	ldr	r3, [r3, #4]
 8000974:	78b9      	ldrb	r1, [r7, #2]
 8000976:	78fa      	ldrb	r2, [r7, #3]
 8000978:	3a08      	subs	r2, #8
 800097a:	0092      	lsls	r2, r2, #2
 800097c:	3202      	adds	r2, #2
 800097e:	fa01 f202 	lsl.w	r2, r1, r2
 8000982:	431a      	orrs	r2, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	605a      	str	r2, [r3, #4]
}
 8000988:	bf00      	nop
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	bc80      	pop	{r7}
 8000990:	4770      	bx	lr

08000992 <gpioSetupMode>:
								GP_OD, -> general purpose opendrain
								AF_PP, -> alternate function Push pull
								AF_OD  -> alternate function opendrain
  * @return: none
  */
extern void gpioSetupMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode){
 8000992:	b480      	push	{r7}
 8000994:	b083      	sub	sp, #12
 8000996:	af00      	add	r7, sp, #0
 8000998:	6078      	str	r0, [r7, #4]
 800099a:	460b      	mov	r3, r1
 800099c:	70fb      	strb	r3, [r7, #3]
 800099e:	4613      	mov	r3, r2
 80009a0:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 80009a2:	78fb      	ldrb	r3, [r7, #3]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d80b      	bhi.n	80009c0 <gpioSetupMode+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	78b9      	ldrb	r1, [r7, #2]
 80009ae:	78fa      	ldrb	r2, [r7, #3]
 80009b0:	0092      	lsls	r2, r2, #2
 80009b2:	3202      	adds	r2, #2
 80009b4:	fa01 f202 	lsl.w	r2, r1, r2
 80009b8:	431a      	orrs	r2, r3
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 80009be:	e00b      	b.n	80009d8 <gpioSetupMode+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	685b      	ldr	r3, [r3, #4]
 80009c4:	78b9      	ldrb	r1, [r7, #2]
 80009c6:	78fa      	ldrb	r2, [r7, #3]
 80009c8:	3a08      	subs	r2, #8
 80009ca:	0092      	lsls	r2, r2, #2
 80009cc:	3202      	adds	r2, #2
 80009ce:	fa01 f202 	lsl.w	r2, r1, r2
 80009d2:	431a      	orrs	r2, r3
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	605a      	str	r2, [r3, #4]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	bc80      	pop	{r7}
 80009e0:	4770      	bx	lr

080009e2 <gpioSetPin>:
  * Desc.: sets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin){
 80009e2:	b480      	push	{r7}
 80009e4:	b083      	sub	sp, #12
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	6078      	str	r0, [r7, #4]
 80009ea:	460b      	mov	r3, r1
 80009ec:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	691b      	ldr	r3, [r3, #16]
 80009f2:	78fa      	ldrb	r2, [r7, #3]
 80009f4:	2101      	movs	r1, #1
 80009f6:	fa01 f202 	lsl.w	r2, r1, r2
 80009fa:	431a      	orrs	r2, r3
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	611a      	str	r2, [r3, #16]
}
 8000a00:	bf00      	nop
 8000a02:	370c      	adds	r7, #12
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <gpioResetPin>:
  * Desc.: resets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8000a0a:	b480      	push	{r7}
 8000a0c:	b083      	sub	sp, #12
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
 8000a12:	460b      	mov	r3, r1
 8000a14:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	691b      	ldr	r3, [r3, #16]
 8000a1a:	78fa      	ldrb	r2, [r7, #3]
 8000a1c:	3210      	adds	r2, #16
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	431a      	orrs	r2, r3
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	611a      	str	r2, [r3, #16]
}
 8000a2a:	bf00      	nop
 8000a2c:	370c      	adds	r7, #12
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr

08000a34 <gpioSetPullupPulldown>:
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @param: (bool)pullup: true -> activate Pullup; false -> activate Pulldown
  * @return: none
  */
extern void gpioSetPullupPulldown(GPIO_TypeDef *port, PIN_NUM pin, bool pullup){
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	460b      	mov	r3, r1
 8000a3e:	70fb      	strb	r3, [r7, #3]
 8000a40:	4613      	mov	r3, r2
 8000a42:	70bb      	strb	r3, [r7, #2]
	if((pullup == true)){
 8000a44:	78bb      	ldrb	r3, [r7, #2]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d009      	beq.n	8000a5e <gpioSetPullupPulldown+0x2a>
		port -> ODR |=  (1<< pin);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	68db      	ldr	r3, [r3, #12]
 8000a4e:	78fa      	ldrb	r2, [r7, #3]
 8000a50:	2101      	movs	r1, #1
 8000a52:	fa01 f202 	lsl.w	r2, r1, r2
 8000a56:	431a      	orrs	r2, r3
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	60da      	str	r2, [r3, #12]
	}
	else{
		port->ODR &= ~(1<<pin);
	}
}
 8000a5c:	e009      	b.n	8000a72 <gpioSetPullupPulldown+0x3e>
		port->ODR &= ~(1<<pin);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	78fa      	ldrb	r2, [r7, #3]
 8000a64:	2101      	movs	r1, #1
 8000a66:	fa01 f202 	lsl.w	r2, r1, r2
 8000a6a:	43d2      	mvns	r2, r2
 8000a6c:	401a      	ands	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	60da      	str	r2, [r3, #12]
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bc80      	pop	{r7}
 8000a7a:	4770      	bx	lr

08000a7c <afioInit>:
/*
  * Desc.: enables the Clock for alternative functions, this Clock must be activated in Order to use alternative pinfunctions!
  * @param: none
  * @return: none
  */
extern void afioInit(){
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000a80:	4b04      	ldr	r3, [pc, #16]	; (8000a94 <afioInit+0x18>)
 8000a82:	699b      	ldr	r3, [r3, #24]
 8000a84:	4a03      	ldr	r2, [pc, #12]	; (8000a94 <afioInit+0x18>)
 8000a86:	f043 0301 	orr.w	r3, r3, #1
 8000a8a:	6193      	str	r3, [r2, #24]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bc80      	pop	{r7}
 8000a92:	4770      	bx	lr
 8000a94:	40021000 	.word	0x40021000

08000a98 <SysTick_Handler>:
/*
 * Desc.: SysTick ISR Handler
 * @param: none
 * @return: none
 */
extern void SysTick_Handler(void){
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
	--tick;
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <SysTick_Handler+0x18>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	4a03      	ldr	r2, [pc, #12]	; (8000ab0 <SysTick_Handler+0x18>)
 8000aa4:	6013      	str	r3, [r2, #0]
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	20000228 	.word	0x20000228

08000ab4 <timerBusClkOn>:
 /*
  * Desc.: activates Clock for Timer
  * @param: (TIM_TypeDef*)timer: Timer which should be activated
  * @return: none
  */
extern void timerBusClkOn(TIM_TypeDef* timer){
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
	 if (TIM1 == timer)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	4a1a      	ldr	r2, [pc, #104]	; (8000b28 <timerBusClkOn+0x74>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d106      	bne.n	8000ad2 <timerBusClkOn+0x1e>
	    {
	        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <timerBusClkOn+0x78>)
 8000ac6:	699b      	ldr	r3, [r3, #24]
 8000ac8:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <timerBusClkOn+0x78>)
 8000aca:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ace:	6193      	str	r3, [r2, #24]
 8000ad0:	e021      	b.n	8000b16 <timerBusClkOn+0x62>
	    }
	    else if (TIM2 == timer)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ad8:	d106      	bne.n	8000ae8 <timerBusClkOn+0x34>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ada:	4b14      	ldr	r3, [pc, #80]	; (8000b2c <timerBusClkOn+0x78>)
 8000adc:	69db      	ldr	r3, [r3, #28]
 8000ade:	4a13      	ldr	r2, [pc, #76]	; (8000b2c <timerBusClkOn+0x78>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	61d3      	str	r3, [r2, #28]
 8000ae6:	e016      	b.n	8000b16 <timerBusClkOn+0x62>
	    }
	    else if (TIM3 == timer)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	4a11      	ldr	r2, [pc, #68]	; (8000b30 <timerBusClkOn+0x7c>)
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d106      	bne.n	8000afe <timerBusClkOn+0x4a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000af0:	4b0e      	ldr	r3, [pc, #56]	; (8000b2c <timerBusClkOn+0x78>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	4a0d      	ldr	r2, [pc, #52]	; (8000b2c <timerBusClkOn+0x78>)
 8000af6:	f043 0302 	orr.w	r3, r3, #2
 8000afa:	61d3      	str	r3, [r2, #28]
 8000afc:	e00b      	b.n	8000b16 <timerBusClkOn+0x62>
	    }
	    else if (TIM4 == timer)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <timerBusClkOn+0x80>)
 8000b02:	4293      	cmp	r3, r2
 8000b04:	d106      	bne.n	8000b14 <timerBusClkOn+0x60>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <timerBusClkOn+0x78>)
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4a08      	ldr	r2, [pc, #32]	; (8000b2c <timerBusClkOn+0x78>)
 8000b0c:	f043 0304 	orr.w	r3, r3, #4
 8000b10:	61d3      	str	r3, [r2, #28]
 8000b12:	e000      	b.n	8000b16 <timerBusClkOn+0x62>
	    }
	    else
	    {
	        while(1)
 8000b14:	e7fe      	b.n	8000b14 <timerBusClkOn+0x60>
	        {
	            // Timer not supported
	        }
	    }

	    timer->CR1 = 0;  // Reset all bits of TIMx_CR1 to 0
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40012c00 	.word	0x40012c00
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	40000400 	.word	0x40000400
 8000b34:	40000800 	.word	0x40000800

08000b38 <timerSetPrescaler>:
  * Desc.: sets Prescaler for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) presc: Prescaler Value
  * @return: none
  */
extern void timerSetPrescaler(TIM_TypeDef* timer, uint16_t presc){
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]
 8000b40:	460b      	mov	r3, r1
 8000b42:	807b      	strh	r3, [r7, #2]
	timer->PSC = presc;
 8000b44:	887a      	ldrh	r2, [r7, #2]
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b4a:	bf00      	nop
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <timerSetAutoReloadValue>:
  * Desc.: sets AutoreloadValue for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) arrv: Autoreloadvalue
  * @return: none
  */
extern void timerSetAutoReloadValue(TIM_TypeDef* timer, uint16_t arrv){
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	807b      	strh	r3, [r7, #2]
	timer->ARR = arrv;
 8000b60:	887a      	ldrh	r2, [r7, #2]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000b66:	bf00      	nop
 8000b68:	370c      	adds	r7, #12
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <timerEnableInterrupt>:
/*
  * Desc.: enables Interrupt
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerEnableInterrupt(TIM_TypeDef* timer){
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	timer->DIER |= TIM_DIER_UIE;
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	f043 0201 	orr.w	r2, r3, #1
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	60da      	str	r2, [r3, #12]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bc80      	pop	{r7}
 8000b8c:	4770      	bx	lr

08000b8e <timerSetOnePulseMode>:
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (OPM_MODE) opmmode: ONE_PULSE_MODE_OFF
								ONE_PULSE_MODE_ON
  * @return: none
  */
extern void timerSetOnePulseMode(TIM_TypeDef* timer, OPM_MODE opmmode){
 8000b8e:	b480      	push	{r7}
 8000b90:	b083      	sub	sp, #12
 8000b92:	af00      	add	r7, sp, #0
 8000b94:	6078      	str	r0, [r7, #4]
 8000b96:	460b      	mov	r3, r1
 8000b98:	70fb      	strb	r3, [r7, #3]
	if(opmmode == 1){
 8000b9a:	78fb      	ldrb	r3, [r7, #3]
 8000b9c:	2b01      	cmp	r3, #1
 8000b9e:	d106      	bne.n	8000bae <timerSetOnePulseMode+0x20>
		timer->CR1 |= TIM_CR1_OPM ;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f043 0208 	orr.w	r2, r3, #8
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	601a      	str	r2, [r3, #0]
	}
	else{
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
	}
}
 8000bac:	e005      	b.n	8000bba <timerSetOnePulseMode+0x2c>
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f023 0208 	bic.w	r2, r3, #8
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	601a      	str	r2, [r3, #0]
}
 8000bba:	bf00      	nop
 8000bbc:	370c      	adds	r7, #12
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr

08000bc4 <timerStart>:
/*
  * Desc.: starts Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerStart(TIM_TypeDef* timer){
 8000bc4:	b480      	push	{r7}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f043 0201 	orr.w	r2, r3, #1
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	601a      	str	r2, [r3, #0]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bc80      	pop	{r7}
 8000be0:	4770      	bx	lr
	...

08000be4 <USARTEnable>:
/*
  * Desc.: enables Clock for the corresponding USART and activates the USART in it's Control Register
  * @param: (USART_TypeDef*)usart: USART
  * @return: none
  */
void USARTEnable(USART_TypeDef* usart){
 8000be4:	b480      	push	{r7}
 8000be6:	b083      	sub	sp, #12
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	6078      	str	r0, [r7, #4]
	if(usart == USART1){
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a1b      	ldr	r2, [pc, #108]	; (8000c5c <USARTEnable+0x78>)
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d10c      	bne.n	8000c0e <USARTEnable+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000bf4:	4b1a      	ldr	r3, [pc, #104]	; (8000c60 <USARTEnable+0x7c>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a19      	ldr	r2, [pc, #100]	; (8000c60 <USARTEnable+0x7c>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bfe:	6193      	str	r3, [r2, #24]
		USART1->CR1 |= USART_CR1_UE;
 8000c00:	4b16      	ldr	r3, [pc, #88]	; (8000c5c <USARTEnable+0x78>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <USARTEnable+0x78>)
 8000c06:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c0a:	60d3      	str	r3, [r2, #12]
 8000c0c:	e022      	b.n	8000c54 <USARTEnable+0x70>
	}
	else if(usart == USART2){
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a14      	ldr	r2, [pc, #80]	; (8000c64 <USARTEnable+0x80>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d10c      	bne.n	8000c30 <USARTEnable+0x4c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <USARTEnable+0x7c>)
 8000c18:	69db      	ldr	r3, [r3, #28]
 8000c1a:	4a11      	ldr	r2, [pc, #68]	; (8000c60 <USARTEnable+0x7c>)
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	61d3      	str	r3, [r2, #28]
		USART2->CR1 |= USART_CR1_UE;
 8000c22:	4b10      	ldr	r3, [pc, #64]	; (8000c64 <USARTEnable+0x80>)
 8000c24:	68db      	ldr	r3, [r3, #12]
 8000c26:	4a0f      	ldr	r2, [pc, #60]	; (8000c64 <USARTEnable+0x80>)
 8000c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c2c:	60d3      	str	r3, [r2, #12]
 8000c2e:	e011      	b.n	8000c54 <USARTEnable+0x70>
	}
	else if(usart == USART3){
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a0d      	ldr	r2, [pc, #52]	; (8000c68 <USARTEnable+0x84>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d10c      	bne.n	8000c52 <USARTEnable+0x6e>
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000c38:	4b09      	ldr	r3, [pc, #36]	; (8000c60 <USARTEnable+0x7c>)
 8000c3a:	69db      	ldr	r3, [r3, #28]
 8000c3c:	4a08      	ldr	r2, [pc, #32]	; (8000c60 <USARTEnable+0x7c>)
 8000c3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c42:	61d3      	str	r3, [r2, #28]
		USART3->CR1 |= USART_CR1_UE;
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <USARTEnable+0x84>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <USARTEnable+0x84>)
 8000c4a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c4e:	60d3      	str	r3, [r2, #12]
 8000c50:	e000      	b.n	8000c54 <USARTEnable+0x70>
	}
	else{
		return;
 8000c52:	bf00      	nop
	}
}
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr
 8000c5c:	40013800 	.word	0x40013800
 8000c60:	40021000 	.word	0x40021000
 8000c64:	40004400 	.word	0x40004400
 8000c68:	40004800 	.word	0x40004800

08000c6c <USARTSetBaudrate>:
  * Desc.: sets the Baudrate for the USART (system clock > 36 MHZ!), default: 115200 bps
  * @param: (USART_TypeDef*)usart: USART
  * @param: (uint16_t) brrVal: Baudrate
  * @return: none
  */
void USARTSetBaudrate(USART_TypeDef* usart, uint16_t brrVal){
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
 8000c74:	460b      	mov	r3, r1
 8000c76:	807b      	strh	r3, [r7, #2]
	if(brrVal != 0){
 8000c78:	887b      	ldrh	r3, [r7, #2]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d00b      	beq.n	8000c96 <USARTSetBaudrate+0x2a>
		usart -> BRR |= (SystemCoreClock / 2 / brrVal);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	689a      	ldr	r2, [r3, #8]
 8000c82:	4b0a      	ldr	r3, [pc, #40]	; (8000cac <USARTSetBaudrate+0x40>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	0859      	lsrs	r1, r3, #1
 8000c88:	887b      	ldrh	r3, [r7, #2]
 8000c8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000c8e:	431a      	orrs	r2, r3
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= 0x8B;
	}
}
 8000c94:	e005      	b.n	8000ca2 <USARTSetBaudrate+0x36>
		usart->BRR |= 0x8B;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f043 028b 	orr.w	r2, r3, #139	; 0x8b
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	609a      	str	r2, [r3, #8]
}
 8000ca2:	bf00      	nop
 8000ca4:	370c      	adds	r7, #12
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bc80      	pop	{r7}
 8000caa:	4770      	bx	lr
 8000cac:	20000014 	.word	0x20000014

08000cb0 <USARTRXOn>:
  * Desc.: enables the Receiver of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Receiver shall be activated
  * @return: none
  */
void USARTRXOn(USART_TypeDef* usart, USART_RX on_off){
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	70fb      	strb	r3, [r7, #3]
	if(on_off == RECEIVER_ON){
 8000cbc:	78fb      	ldrb	r3, [r7, #3]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d106      	bne.n	8000cd0 <USARTRXOn+0x20>
		usart->CR1 |= USART_CR1_RE;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	f043 0204 	orr.w	r2, r3, #4
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	60da      	str	r2, [r3, #12]
	}
	else{
		usart->CR1 &= USART_CR1_RE_Msk;
	}
}
 8000cce:	e005      	b.n	8000cdc <USARTRXOn+0x2c>
		usart->CR1 &= USART_CR1_RE_Msk;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	68db      	ldr	r3, [r3, #12]
 8000cd4:	f003 0204 	and.w	r2, r3, #4
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60da      	str	r2, [r3, #12]
}
 8000cdc:	bf00      	nop
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bc80      	pop	{r7}
 8000ce4:	4770      	bx	lr

08000ce6 <USARTTXOn>:
  * Desc.: enables the Transmitter of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Transmitter shall be activated
  * @return: none
  */
void USARTTXOn(USART_TypeDef* usart, USART_TX on_off){
 8000ce6:	b480      	push	{r7}
 8000ce8:	b083      	sub	sp, #12
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
 8000cee:	460b      	mov	r3, r1
 8000cf0:	70fb      	strb	r3, [r7, #3]
	if(on_off == TRANSMITTER_ON){
 8000cf2:	78fb      	ldrb	r3, [r7, #3]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d106      	bne.n	8000d06 <USARTTXOn+0x20>
			usart->CR1 |= USART_CR1_TE;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	68db      	ldr	r3, [r3, #12]
 8000cfc:	f043 0208 	orr.w	r2, r3, #8
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= USART_CR1_TE_Msk;
		}
}
 8000d04:	e005      	b.n	8000d12 <USARTTXOn+0x2c>
			usart->CR1 &= USART_CR1_TE_Msk;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	f003 0208 	and.w	r2, r3, #8
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	60da      	str	r2, [r3, #12]
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <USARTIRQ>:
    									USART_IRQ_LBDIE,(LIN Break Detection Interrupt)
    									USART_IRQ_EIE(Error Interrupt)
  *  @param: (bool) enable_disable: determines if the interrupt shall be enabled or disabled
  * @return: none
  */
extern void USARTIRQ(USART_TypeDef* usart, USART_IRQ_TYPES irq_type, bool enable_disable){
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
 8000d28:	4613      	mov	r3, r2
 8000d2a:	70bb      	strb	r3, [r7, #2]
	switch(irq_type){
 8000d2c:	78fb      	ldrb	r3, [r7, #3]
 8000d2e:	2b07      	cmp	r3, #7
 8000d30:	f200 808b 	bhi.w	8000e4a <USARTIRQ+0x12e>
 8000d34:	a201      	add	r2, pc, #4	; (adr r2, 8000d3c <USARTIRQ+0x20>)
 8000d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d3a:	bf00      	nop
 8000d3c:	08000d5d 	.word	0x08000d5d
 8000d40:	08000d7f 	.word	0x08000d7f
 8000d44:	08000da1 	.word	0x08000da1
 8000d48:	08000dc3 	.word	0x08000dc3
 8000d4c:	08000e4b 	.word	0x08000e4b
 8000d50:	08000de5 	.word	0x08000de5
 8000d54:	08000e07 	.word	0x08000e07
 8000d58:	08000e29 	.word	0x08000e29
	case USART_IRQ_TXEIE:
		if(enable_disable){
 8000d5c:	78bb      	ldrb	r3, [r7, #2]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d006      	beq.n	8000d70 <USARTIRQ+0x54>
			usart->CR1 |= USART_CR1_TXEIE;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	68db      	ldr	r3, [r3, #12]
 8000d66:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
		}
		break;
 8000d6e:	e06d      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	68db      	ldr	r3, [r3, #12]
 8000d74:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	60da      	str	r2, [r3, #12]
		break;
 8000d7c:	e066      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_CTSIE:
		if(enable_disable){
 8000d7e:	78bb      	ldrb	r3, [r7, #2]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d006      	beq.n	8000d92 <USARTIRQ+0x76>
			usart->CR3 |= USART_CR3_CTSIE;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
		}
		break;
 8000d90:	e05c      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	695b      	ldr	r3, [r3, #20]
 8000d96:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	615a      	str	r2, [r3, #20]
		break;
 8000d9e:	e055      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_TCIE:
		if(enable_disable){
 8000da0:	78bb      	ldrb	r3, [r7, #2]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d006      	beq.n	8000db4 <USARTIRQ+0x98>
			usart->CR1 |= USART_CR1_TCIE;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68db      	ldr	r3, [r3, #12]
 8000daa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
		}
		break;
 8000db2:	e04b      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	60da      	str	r2, [r3, #12]
		break;
 8000dc0:	e044      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_RXNEIE:
		if(enable_disable){
 8000dc2:	78bb      	ldrb	r3, [r7, #2]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d006      	beq.n	8000dd6 <USARTIRQ+0xba>
			usart->CR1 |= USART_CR1_RXNEIE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	68db      	ldr	r3, [r3, #12]
 8000dcc:	f043 0220 	orr.w	r2, r3, #32
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
		}
		break;
 8000dd4:	e03a      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	68db      	ldr	r3, [r3, #12]
 8000dda:	f023 0220 	bic.w	r2, r3, #32
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	60da      	str	r2, [r3, #12]
		break;
 8000de2:	e033      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_PEIE:
		if(enable_disable){
 8000de4:	78bb      	ldrb	r3, [r7, #2]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d006      	beq.n	8000df8 <USARTIRQ+0xdc>
			usart->CR1 |= USART_CR1_PEIE;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	68db      	ldr	r3, [r3, #12]
 8000dee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
		}
		break;
 8000df6:	e029      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	68db      	ldr	r3, [r3, #12]
 8000dfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	60da      	str	r2, [r3, #12]
		break;
 8000e04:	e022      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_LBDIE:
		if(enable_disable){
 8000e06:	78bb      	ldrb	r3, [r7, #2]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d006      	beq.n	8000e1a <USARTIRQ+0xfe>
			usart->CR2 |= USART_CR2_LBDIE;
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
		}
		else{
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
		}
		break;
 8000e18:	e018      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	691b      	ldr	r3, [r3, #16]
 8000e1e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	611a      	str	r2, [r3, #16]
		break;
 8000e26:	e011      	b.n	8000e4c <USARTIRQ+0x130>
	case USART_IRQ_EIE:
		if(enable_disable){
 8000e28:	78bb      	ldrb	r3, [r7, #2]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d006      	beq.n	8000e3c <USARTIRQ+0x120>
			usart->CR3 |= USART_CR3_EIE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	695b      	ldr	r3, [r3, #20]
 8000e32:	f043 0201 	orr.w	r2, r3, #1
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_EIE_Msk;
		}
		break;
 8000e3a:	e007      	b.n	8000e4c <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_EIE_Msk;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	f023 0201 	bic.w	r2, r3, #1
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	615a      	str	r2, [r3, #20]
		break;
 8000e48:	e000      	b.n	8000e4c <USARTIRQ+0x130>
	default:
		return;
 8000e4a:	bf00      	nop
	}
}
 8000e4c:	370c      	adds	r7, #12
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bc80      	pop	{r7}
 8000e52:	4770      	bx	lr

08000e54 <USARTSendString>:
  * Desc.: send a String over the USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (char*) str: String to be sent
  * @return: none
  */
extern void USARTSendString(USART_TypeDef* usart, char* str){
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	while(*str){
 8000e5e:	e014      	b.n	8000e8a <USARTSendString+0x36>
		USART_WAIT(usart);
 8000e60:	bf00      	nop
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f9      	beq.n	8000e62 <USARTSendString+0xe>
		usart->DR = *str++ & 0x01FF;
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	1c5a      	adds	r2, r3, #1
 8000e72:	603a      	str	r2, [r7, #0]
 8000e74:	781b      	ldrb	r3, [r3, #0]
 8000e76:	461a      	mov	r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	605a      	str	r2, [r3, #4]
		USART_WAIT(usart);
 8000e7c:	bf00      	nop
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d0f9      	beq.n	8000e7e <USARTSendString+0x2a>
	while(*str){
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1e6      	bne.n	8000e60 <USARTSendString+0xc>
	}
}
 8000e92:	bf00      	nop
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bc80      	pop	{r7}
 8000e9c:	4770      	bx	lr
	...

08000ea0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	; (8000ee0 <HAL_MspInit+0x40>)
 8000ea8:	699b      	ldr	r3, [r3, #24]
 8000eaa:	4a0d      	ldr	r2, [pc, #52]	; (8000ee0 <HAL_MspInit+0x40>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6193      	str	r3, [r2, #24]
 8000eb2:	4b0b      	ldr	r3, [pc, #44]	; (8000ee0 <HAL_MspInit+0x40>)
 8000eb4:	699b      	ldr	r3, [r3, #24]
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	4b08      	ldr	r3, [pc, #32]	; (8000ee0 <HAL_MspInit+0x40>)
 8000ec0:	69db      	ldr	r3, [r3, #28]
 8000ec2:	4a07      	ldr	r2, [pc, #28]	; (8000ee0 <HAL_MspInit+0x40>)
 8000ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ec8:	61d3      	str	r3, [r2, #28]
 8000eca:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_MspInit+0x40>)
 8000ecc:	69db      	ldr	r3, [r3, #28]
 8000ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed2:	603b      	str	r3, [r7, #0]
 8000ed4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	370c      	adds	r7, #12
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ee8:	e7fe      	b.n	8000ee8 <NMI_Handler+0x4>

08000eea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eea:	b480      	push	{r7}
 8000eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eee:	e7fe      	b.n	8000eee <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	e7fe      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efa:	e7fe      	b.n	8000efa <BusFault_Handler+0x4>

08000efc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f00:	e7fe      	b.n	8000f00 <UsageFault_Handler+0x4>

08000f02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bc80      	pop	{r7}
 8000f0c:	4770      	bx	lr

08000f0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr

08000f1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f1a:	b480      	push	{r7}
 8000f1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bc80      	pop	{r7}
 8000f24:	4770      	bx	lr
	...

08000f28 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000f2e:	f000 faf5 	bl	800151c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000efc 	.word	0x20000efc

08000f3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <_sbrk+0x5c>)
 8000f46:	4b15      	ldr	r3, [pc, #84]	; (8000f9c <_sbrk+0x60>)
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f4c:	697b      	ldr	r3, [r7, #20]
 8000f4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f50:	4b13      	ldr	r3, [pc, #76]	; (8000fa0 <_sbrk+0x64>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d102      	bne.n	8000f5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f58:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_sbrk+0x64>)
 8000f5a:	4a12      	ldr	r2, [pc, #72]	; (8000fa4 <_sbrk+0x68>)
 8000f5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5e:	4b10      	ldr	r3, [pc, #64]	; (8000fa0 <_sbrk+0x64>)
 8000f60:	681a      	ldr	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4413      	add	r3, r2
 8000f66:	693a      	ldr	r2, [r7, #16]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d207      	bcs.n	8000f7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f6c:	f007 f888 	bl	8008080 <__errno>
 8000f70:	4603      	mov	r3, r0
 8000f72:	220c      	movs	r2, #12
 8000f74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f7a:	e009      	b.n	8000f90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f7c:	4b08      	ldr	r3, [pc, #32]	; (8000fa0 <_sbrk+0x64>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f82:	4b07      	ldr	r3, [pc, #28]	; (8000fa0 <_sbrk+0x64>)
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4413      	add	r3, r2
 8000f8a:	4a05      	ldr	r2, [pc, #20]	; (8000fa0 <_sbrk+0x64>)
 8000f8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	3718      	adds	r7, #24
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	20010000 	.word	0x20010000
 8000f9c:	00000400 	.word	0x00000400
 8000fa0:	2000022c 	.word	0x2000022c
 8000fa4:	20001418 	.word	0x20001418

08000fa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fb4:	480c      	ldr	r0, [pc, #48]	; (8000fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000fb6:	490d      	ldr	r1, [pc, #52]	; (8000fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000fb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fbc:	e002      	b.n	8000fc4 <LoopCopyDataInit>

08000fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fc2:	3304      	adds	r3, #4

08000fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fc8:	d3f9      	bcc.n	8000fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fca:	4a0a      	ldr	r2, [pc, #40]	; (8000ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000fcc:	4c0a      	ldr	r4, [pc, #40]	; (8000ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd0:	e001      	b.n	8000fd6 <LoopFillZerobss>

08000fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fd4:	3204      	adds	r2, #4

08000fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fd8:	d3fb      	bcc.n	8000fd2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000fda:	f7ff ffe5 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fde:	f007 f855 	bl	800808c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fe2:	f7ff f9e9 	bl	80003b8 <main>
  bx lr
 8000fe6:	4770      	bx	lr
  ldr r0, =_sdata
 8000fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fec:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8000ff0:	08008aa0 	.word	0x08008aa0
  ldr r2, =_sbss
 8000ff4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8000ff8:	20001418 	.word	0x20001418

08000ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ffc:	e7fe      	b.n	8000ffc <ADC1_2_IRQHandler>
	...

08001000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <HAL_Init+0x28>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_Init+0x28>)
 800100a:	f043 0310 	orr.w	r3, r3, #16
 800100e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001010:	2003      	movs	r0, #3
 8001012:	f000 f911 	bl	8001238 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001016:	200f      	movs	r0, #15
 8001018:	f000 f808 	bl	800102c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800101c:	f7ff ff40 	bl	8000ea0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001020:	2300      	movs	r3, #0
}
 8001022:	4618      	mov	r0, r3
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40022000 	.word	0x40022000

0800102c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001034:	4b12      	ldr	r3, [pc, #72]	; (8001080 <HAL_InitTick+0x54>)
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	4b12      	ldr	r3, [pc, #72]	; (8001084 <HAL_InitTick+0x58>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	4619      	mov	r1, r3
 800103e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001042:	fbb3 f3f1 	udiv	r3, r3, r1
 8001046:	fbb2 f3f3 	udiv	r3, r2, r3
 800104a:	4618      	mov	r0, r3
 800104c:	f000 f929 	bl	80012a2 <HAL_SYSTICK_Config>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e00e      	b.n	8001078 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2b0f      	cmp	r3, #15
 800105e:	d80a      	bhi.n	8001076 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001060:	2200      	movs	r2, #0
 8001062:	6879      	ldr	r1, [r7, #4]
 8001064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001068:	f000 f8f1 	bl	800124e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800106c:	4a06      	ldr	r2, [pc, #24]	; (8001088 <HAL_InitTick+0x5c>)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
 8001074:	e000      	b.n	8001078 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001076:	2301      	movs	r3, #1
}
 8001078:	4618      	mov	r0, r3
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	20000014 	.word	0x20000014
 8001084:	2000001c 	.word	0x2000001c
 8001088:	20000018 	.word	0x20000018

0800108c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr
 800109c:	20000230 	.word	0x20000230

080010a0 <__NVIC_SetPriorityGrouping>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f003 0307 	and.w	r3, r3, #7
 80010ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010b0:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b6:	68ba      	ldr	r2, [r7, #8]
 80010b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010bc:	4013      	ands	r3, r2
 80010be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010d2:	4a04      	ldr	r2, [pc, #16]	; (80010e4 <__NVIC_SetPriorityGrouping+0x44>)
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	60d3      	str	r3, [r2, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	e000ed00 	.word	0xe000ed00

080010e8 <__NVIC_GetPriorityGrouping>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010ec:	4b04      	ldr	r3, [pc, #16]	; (8001100 <__NVIC_GetPriorityGrouping+0x18>)
 80010ee:	68db      	ldr	r3, [r3, #12]
 80010f0:	0a1b      	lsrs	r3, r3, #8
 80010f2:	f003 0307 	and.w	r3, r3, #7
}
 80010f6:	4618      	mov	r0, r3
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <__NVIC_EnableIRQ>:
{
 8001104:	b480      	push	{r7}
 8001106:	b083      	sub	sp, #12
 8001108:	af00      	add	r7, sp, #0
 800110a:	4603      	mov	r3, r0
 800110c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	2b00      	cmp	r3, #0
 8001114:	db0b      	blt.n	800112e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	f003 021f 	and.w	r2, r3, #31
 800111c:	4906      	ldr	r1, [pc, #24]	; (8001138 <__NVIC_EnableIRQ+0x34>)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	095b      	lsrs	r3, r3, #5
 8001124:	2001      	movs	r0, #1
 8001126:	fa00 f202 	lsl.w	r2, r0, r2
 800112a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800112e:	bf00      	nop
 8001130:	370c      	adds	r7, #12
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	; (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	; (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	bc80      	pop	{r7}
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	; 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	; 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bc80      	pop	{r7}
 80011f2:	4770      	bx	lr

080011f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001204:	d301      	bcc.n	800120a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001206:	2301      	movs	r3, #1
 8001208:	e00f      	b.n	800122a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <SysTick_Config+0x40>)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3b01      	subs	r3, #1
 8001210:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001212:	210f      	movs	r1, #15
 8001214:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001218:	f7ff ff90 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800121c:	4b05      	ldr	r3, [pc, #20]	; (8001234 <SysTick_Config+0x40>)
 800121e:	2200      	movs	r2, #0
 8001220:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001222:	4b04      	ldr	r3, [pc, #16]	; (8001234 <SysTick_Config+0x40>)
 8001224:	2207      	movs	r2, #7
 8001226:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001228:	2300      	movs	r3, #0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	e000e010 	.word	0xe000e010

08001238 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff2d 	bl	80010a0 <__NVIC_SetPriorityGrouping>
}
 8001246:	bf00      	nop
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800124e:	b580      	push	{r7, lr}
 8001250:	b086      	sub	sp, #24
 8001252:	af00      	add	r7, sp, #0
 8001254:	4603      	mov	r3, r0
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001260:	f7ff ff42 	bl	80010e8 <__NVIC_GetPriorityGrouping>
 8001264:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001266:	687a      	ldr	r2, [r7, #4]
 8001268:	68b9      	ldr	r1, [r7, #8]
 800126a:	6978      	ldr	r0, [r7, #20]
 800126c:	f7ff ff90 	bl	8001190 <NVIC_EncodePriority>
 8001270:	4602      	mov	r2, r0
 8001272:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001276:	4611      	mov	r1, r2
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff5f 	bl	800113c <__NVIC_SetPriority>
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	4603      	mov	r3, r0
 800128e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff ff35 	bl	8001104 <__NVIC_EnableIRQ>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ffa2 	bl	80011f4 <SysTick_Config>
 80012b0:	4603      	mov	r3, r0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}

080012ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80012ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012bc:	b08b      	sub	sp, #44	; 0x2c
 80012be:	af06      	add	r7, sp, #24
 80012c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d101      	bne.n	80012cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80012c8:	2301      	movs	r3, #1
 80012ca:	e0fd      	b.n	80014c8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d106      	bne.n	80012e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f006 fc23 	bl	8007b2c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2203      	movs	r2, #3
 80012ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f002 f968 	bl	80035c8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	687e      	ldr	r6, [r7, #4]
 8001300:	466d      	mov	r5, sp
 8001302:	f106 0410 	add.w	r4, r6, #16
 8001306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001308:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800130a:	6823      	ldr	r3, [r4, #0]
 800130c:	602b      	str	r3, [r5, #0]
 800130e:	1d33      	adds	r3, r6, #4
 8001310:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001312:	6838      	ldr	r0, [r7, #0]
 8001314:	f002 f932 	bl	800357c <USB_CoreInit>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d005      	beq.n	800132a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2202      	movs	r2, #2
 8001322:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e0ce      	b.n	80014c8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f002 f963 	bl	80035fc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001336:	2300      	movs	r3, #0
 8001338:	73fb      	strb	r3, [r7, #15]
 800133a:	e04c      	b.n	80013d6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800133c:	7bfb      	ldrb	r3, [r7, #15]
 800133e:	6879      	ldr	r1, [r7, #4]
 8001340:	1c5a      	adds	r2, r3, #1
 8001342:	4613      	mov	r3, r2
 8001344:	009b      	lsls	r3, r3, #2
 8001346:	4413      	add	r3, r2
 8001348:	00db      	lsls	r3, r3, #3
 800134a:	440b      	add	r3, r1
 800134c:	3301      	adds	r3, #1
 800134e:	2201      	movs	r2, #1
 8001350:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	1c5a      	adds	r2, r3, #1
 8001358:	4613      	mov	r3, r2
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	00db      	lsls	r3, r3, #3
 8001360:	440b      	add	r3, r1
 8001362:	7bfa      	ldrb	r2, [r7, #15]
 8001364:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001366:	7bfa      	ldrb	r2, [r7, #15]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	b298      	uxth	r0, r3
 800136c:	6879      	ldr	r1, [r7, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	440b      	add	r3, r1
 8001378:	3336      	adds	r3, #54	; 0x36
 800137a:	4602      	mov	r2, r0
 800137c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	6879      	ldr	r1, [r7, #4]
 8001382:	1c5a      	adds	r2, r3, #1
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	00db      	lsls	r3, r3, #3
 800138c:	440b      	add	r3, r1
 800138e:	3303      	adds	r3, #3
 8001390:	2200      	movs	r2, #0
 8001392:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001394:	7bfa      	ldrb	r2, [r7, #15]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	00db      	lsls	r3, r3, #3
 80013a0:	440b      	add	r3, r1
 80013a2:	3338      	adds	r3, #56	; 0x38
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	4413      	add	r3, r2
 80013b2:	00db      	lsls	r3, r3, #3
 80013b4:	440b      	add	r3, r1
 80013b6:	333c      	adds	r3, #60	; 0x3c
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80013bc:	7bfa      	ldrb	r2, [r7, #15]
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	3340      	adds	r3, #64	; 0x40
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013d0:	7bfb      	ldrb	r3, [r7, #15]
 80013d2:	3301      	adds	r3, #1
 80013d4:	73fb      	strb	r3, [r7, #15]
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d3ad      	bcc.n	800133c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
 80013e4:	e044      	b.n	8001470 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	6879      	ldr	r1, [r7, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	440b      	add	r3, r1
 80013f4:	f203 1369 	addw	r3, r3, #361	; 0x169
 80013f8:	2200      	movs	r2, #0
 80013fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80013fc:	7bfa      	ldrb	r2, [r7, #15]
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	00db      	lsls	r3, r3, #3
 8001408:	440b      	add	r3, r1
 800140a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800140e:	7bfa      	ldrb	r2, [r7, #15]
 8001410:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001412:	7bfa      	ldrb	r2, [r7, #15]
 8001414:	6879      	ldr	r1, [r7, #4]
 8001416:	4613      	mov	r3, r2
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	440b      	add	r3, r1
 8001420:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	6879      	ldr	r1, [r7, #4]
 800142c:	4613      	mov	r3, r2
 800142e:	009b      	lsls	r3, r3, #2
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	4413      	add	r3, r2
 8001448:	00db      	lsls	r3, r3, #3
 800144a:	440b      	add	r3, r1
 800144c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	4613      	mov	r3, r2
 800145a:	009b      	lsls	r3, r3, #2
 800145c:	4413      	add	r3, r2
 800145e:	00db      	lsls	r3, r3, #3
 8001460:	440b      	add	r3, r1
 8001462:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	3301      	adds	r3, #1
 800146e:	73fb      	strb	r3, [r7, #15]
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	429a      	cmp	r2, r3
 8001478:	d3b5      	bcc.n	80013e6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	603b      	str	r3, [r7, #0]
 8001480:	687e      	ldr	r6, [r7, #4]
 8001482:	466d      	mov	r5, sp
 8001484:	f106 0410 	add.w	r4, r6, #16
 8001488:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800148a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800148c:	6823      	ldr	r3, [r4, #0]
 800148e:	602b      	str	r3, [r5, #0]
 8001490:	1d33      	adds	r3, r6, #4
 8001492:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001494:	6838      	ldr	r0, [r7, #0]
 8001496:	f002 f8bd 	bl	8003614 <USB_DevInit>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d005      	beq.n	80014ac <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2202      	movs	r2, #2
 80014a4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014a8:	2301      	movs	r3, #1
 80014aa:	e00d      	b.n	80014c8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f004 fd6f 	bl	8005fa4 <USB_DevDisconnect>

  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080014d0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d101      	bne.n	80014e6 <HAL_PCD_Start+0x16>
 80014e2:	2302      	movs	r3, #2
 80014e4:	e016      	b.n	8001514 <HAL_PCD_Start+0x44>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2201      	movs	r2, #1
 80014ea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f002 f852 	bl	800359c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80014f8:	2101      	movs	r1, #1
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f006 fd89 	bl	8008012 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4618      	mov	r0, r3
 8001506:	f004 fd43 	bl	8005f90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3708      	adds	r7, #8
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4618      	mov	r0, r3
 800152a:	f004 fd45 	bl	8005fb8 <USB_ReadInterrupts>
 800152e:	4603      	mov	r3, r0
 8001530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001534:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001538:	d102      	bne.n	8001540 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f000 fb5f 	bl	8001bfe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4618      	mov	r0, r3
 8001546:	f004 fd37 	bl	8005fb8 <USB_ReadInterrupts>
 800154a:	4603      	mov	r3, r0
 800154c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001554:	d112      	bne.n	800157c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800155e:	b29a      	uxth	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001568:	b292      	uxth	r2, r2
 800156a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f006 fb57 	bl	8007c22 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001574:	2100      	movs	r1, #0
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 f923 	bl	80017c2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4618      	mov	r0, r3
 8001582:	f004 fd19 	bl	8005fb8 <USB_ReadInterrupts>
 8001586:	4603      	mov	r3, r0
 8001588:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800158c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001590:	d10b      	bne.n	80015aa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800159a:	b29a      	uxth	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015a4:	b292      	uxth	r2, r2
 80015a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f004 fd02 	bl	8005fb8 <USB_ReadInterrupts>
 80015b4:	4603      	mov	r3, r0
 80015b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80015be:	d10b      	bne.n	80015d8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015c8:	b29a      	uxth	r2, r3
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015d2:	b292      	uxth	r2, r2
 80015d4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f004 fceb 	bl	8005fb8 <USB_ReadInterrupts>
 80015e2:	4603      	mov	r3, r0
 80015e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015ec:	d126      	bne.n	800163c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 0204 	bic.w	r2, r2, #4
 8001600:	b292      	uxth	r2, r2
 8001602:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800160e:	b29a      	uxth	r2, r3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0208 	bic.w	r2, r2, #8
 8001618:	b292      	uxth	r2, r2
 800161a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f006 fb38 	bl	8007c94 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800162c:	b29a      	uxth	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001636:	b292      	uxth	r2, r2
 8001638:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4618      	mov	r0, r3
 8001642:	f004 fcb9 	bl	8005fb8 <USB_ReadInterrupts>
 8001646:	4603      	mov	r3, r0
 8001648:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800164c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001650:	f040 8082 	bne.w	8001758 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001654:	2300      	movs	r3, #0
 8001656:	77fb      	strb	r3, [r7, #31]
 8001658:	e010      	b.n	800167c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	461a      	mov	r2, r3
 8001660:	7ffb      	ldrb	r3, [r7, #31]
 8001662:	009b      	lsls	r3, r3, #2
 8001664:	441a      	add	r2, r3
 8001666:	7ffb      	ldrb	r3, [r7, #31]
 8001668:	8812      	ldrh	r2, [r2, #0]
 800166a:	b292      	uxth	r2, r2
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	3320      	adds	r3, #32
 8001670:	443b      	add	r3, r7
 8001672:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001676:	7ffb      	ldrb	r3, [r7, #31]
 8001678:	3301      	adds	r3, #1
 800167a:	77fb      	strb	r3, [r7, #31]
 800167c:	7ffb      	ldrb	r3, [r7, #31]
 800167e:	2b07      	cmp	r3, #7
 8001680:	d9eb      	bls.n	800165a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800168a:	b29a      	uxth	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f042 0201 	orr.w	r2, r2, #1
 8001694:	b292      	uxth	r2, r2
 8001696:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016a2:	b29a      	uxth	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f022 0201 	bic.w	r2, r2, #1
 80016ac:	b292      	uxth	r2, r2
 80016ae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80016b2:	bf00      	nop
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016bc:	b29b      	uxth	r3, r3
 80016be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f6      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80016de:	2300      	movs	r3, #0
 80016e0:	77fb      	strb	r3, [r7, #31]
 80016e2:	e00f      	b.n	8001704 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80016e4:	7ffb      	ldrb	r3, [r7, #31]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	4611      	mov	r1, r2
 80016ec:	7ffa      	ldrb	r2, [r7, #31]
 80016ee:	0092      	lsls	r2, r2, #2
 80016f0:	440a      	add	r2, r1
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	3320      	adds	r3, #32
 80016f6:	443b      	add	r3, r7
 80016f8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80016fc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	3301      	adds	r3, #1
 8001702:	77fb      	strb	r3, [r7, #31]
 8001704:	7ffb      	ldrb	r3, [r7, #31]
 8001706:	2b07      	cmp	r3, #7
 8001708:	d9ec      	bls.n	80016e4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 0208 	orr.w	r2, r2, #8
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172a:	b29a      	uxth	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001734:	b292      	uxth	r2, r2
 8001736:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001742:	b29a      	uxth	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f042 0204 	orr.w	r2, r2, #4
 800174c:	b292      	uxth	r2, r2
 800174e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f006 fa84 	bl	8007c60 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f004 fc2b 	bl	8005fb8 <USB_ReadInterrupts>
 8001762:	4603      	mov	r3, r0
 8001764:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001768:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176c:	d10e      	bne.n	800178c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001776:	b29a      	uxth	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001780:	b292      	uxth	r2, r2
 8001782:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f006 fa3d 	bl	8007c06 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f004 fc11 	bl	8005fb8 <USB_ReadInterrupts>
 8001796:	4603      	mov	r3, r0
 8001798:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800179c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80017a0:	d10b      	bne.n	80017ba <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017b4:	b292      	uxth	r2, r2
 80017b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80017ba:	bf00      	nop
 80017bc:	3720      	adds	r7, #32
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	460b      	mov	r3, r1
 80017cc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_PCD_SetAddress+0x1a>
 80017d8:	2302      	movs	r3, #2
 80017da:	e013      	b.n	8001804 <HAL_PCD_SetAddress+0x42>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	78fa      	ldrb	r2, [r7, #3]
 80017e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	4611      	mov	r1, r2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f004 fbb8 	bl	8005f6a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	2200      	movs	r2, #0
 80017fe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	3708      	adds	r7, #8
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}

0800180c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	4608      	mov	r0, r1
 8001816:	4611      	mov	r1, r2
 8001818:	461a      	mov	r2, r3
 800181a:	4603      	mov	r3, r0
 800181c:	70fb      	strb	r3, [r7, #3]
 800181e:	460b      	mov	r3, r1
 8001820:	803b      	strh	r3, [r7, #0]
 8001822:	4613      	mov	r3, r2
 8001824:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001826:	2300      	movs	r3, #0
 8001828:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800182a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800182e:	2b00      	cmp	r3, #0
 8001830:	da0e      	bge.n	8001850 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001832:	78fb      	ldrb	r3, [r7, #3]
 8001834:	f003 0307 	and.w	r3, r3, #7
 8001838:	1c5a      	adds	r2, r3, #1
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	4413      	add	r3, r2
 8001846:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2201      	movs	r2, #1
 800184c:	705a      	strb	r2, [r3, #1]
 800184e:	e00e      	b.n	800186e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001850:	78fb      	ldrb	r3, [r7, #3]
 8001852:	f003 0207 	and.w	r2, r3, #7
 8001856:	4613      	mov	r3, r2
 8001858:	009b      	lsls	r3, r3, #2
 800185a:	4413      	add	r3, r2
 800185c:	00db      	lsls	r3, r3, #3
 800185e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001862:	687a      	ldr	r2, [r7, #4]
 8001864:	4413      	add	r3, r2
 8001866:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2200      	movs	r2, #0
 800186c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800186e:	78fb      	ldrb	r3, [r7, #3]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	b2da      	uxtb	r2, r3
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800187a:	883a      	ldrh	r2, [r7, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	78ba      	ldrb	r2, [r7, #2]
 8001884:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	785b      	ldrb	r3, [r3, #1]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d004      	beq.n	8001898 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001898:	78bb      	ldrb	r3, [r7, #2]
 800189a:	2b02      	cmp	r3, #2
 800189c:	d102      	bne.n	80018a4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d101      	bne.n	80018b2 <HAL_PCD_EP_Open+0xa6>
 80018ae:	2302      	movs	r3, #2
 80018b0:	e00e      	b.n	80018d0 <HAL_PCD_EP_Open+0xc4>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	2201      	movs	r2, #1
 80018b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	68f9      	ldr	r1, [r7, #12]
 80018c0:	4618      	mov	r0, r3
 80018c2:	f001 fec7 	bl	8003654 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2200      	movs	r2, #0
 80018ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80018ce:	7afb      	ldrb	r3, [r7, #11]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b084      	sub	sp, #16
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	460b      	mov	r3, r1
 80018e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80018e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	da0e      	bge.n	800190a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	f003 0307 	and.w	r3, r3, #7
 80018f2:	1c5a      	adds	r2, r3, #1
 80018f4:	4613      	mov	r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	4413      	add	r3, r2
 80018fa:	00db      	lsls	r3, r3, #3
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	4413      	add	r3, r2
 8001900:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	2201      	movs	r2, #1
 8001906:	705a      	strb	r2, [r3, #1]
 8001908:	e00e      	b.n	8001928 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800190a:	78fb      	ldrb	r3, [r7, #3]
 800190c:	f003 0207 	and.w	r2, r3, #7
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	4413      	add	r3, r2
 8001920:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	f003 0307 	and.w	r3, r3, #7
 800192e:	b2da      	uxtb	r2, r3
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800193a:	2b01      	cmp	r3, #1
 800193c:	d101      	bne.n	8001942 <HAL_PCD_EP_Close+0x6a>
 800193e:	2302      	movs	r3, #2
 8001940:	e00e      	b.n	8001960 <HAL_PCD_EP_Close+0x88>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68f9      	ldr	r1, [r7, #12]
 8001950:	4618      	mov	r0, r3
 8001952:	f002 f9e9 	bl	8003d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800195e:	2300      	movs	r3, #0
}
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}

08001968 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	603b      	str	r3, [r7, #0]
 8001974:	460b      	mov	r3, r1
 8001976:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001978:	7afb      	ldrb	r3, [r7, #11]
 800197a:	f003 0207 	and.w	r2, r3, #7
 800197e:	4613      	mov	r3, r2
 8001980:	009b      	lsls	r3, r3, #2
 8001982:	4413      	add	r3, r2
 8001984:	00db      	lsls	r3, r3, #3
 8001986:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	4413      	add	r3, r2
 800198e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	683a      	ldr	r2, [r7, #0]
 800199a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	2200      	movs	r2, #0
 80019a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	2200      	movs	r2, #0
 80019a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019a8:	7afb      	ldrb	r3, [r7, #11]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80019b4:	7afb      	ldrb	r3, [r7, #11]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6979      	ldr	r1, [r7, #20]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f002 fb9b 	bl	8004100 <USB_EPStartXfer>
 80019ca:	e005      	b.n	80019d8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	6979      	ldr	r1, [r7, #20]
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fb94 	bl	8004100 <USB_EPStartXfer>
  }

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80019ee:	78fb      	ldrb	r3, [r7, #3]
 80019f0:	f003 0207 	and.w	r2, r3, #7
 80019f4:	6879      	ldr	r1, [r7, #4]
 80019f6:	4613      	mov	r3, r2
 80019f8:	009b      	lsls	r3, r3, #2
 80019fa:	4413      	add	r3, r2
 80019fc:	00db      	lsls	r3, r3, #3
 80019fe:	440b      	add	r3, r1
 8001a00:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a04:	681b      	ldr	r3, [r3, #0]
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bc80      	pop	{r7}
 8001a0e:	4770      	bx	lr

08001a10 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
 8001a1c:	460b      	mov	r3, r1
 8001a1e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a20:	7afb      	ldrb	r3, [r7, #11]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	1c5a      	adds	r2, r3, #1
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	4413      	add	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	683a      	ldr	r2, [r7, #0]
 8001a40:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	2200      	movs	r2, #0
 8001a54:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a5c:	7afb      	ldrb	r3, [r7, #11]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	b2da      	uxtb	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a68:	7afb      	ldrb	r3, [r7, #11]
 8001a6a:	f003 0307 	and.w	r3, r3, #7
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d106      	bne.n	8001a80 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6979      	ldr	r1, [r7, #20]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f002 fb41 	bl	8004100 <USB_EPStartXfer>
 8001a7e:	e005      	b.n	8001a8c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	6979      	ldr	r1, [r7, #20]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f002 fb3a 	bl	8004100 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3718      	adds	r7, #24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b084      	sub	sp, #16
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	6078      	str	r0, [r7, #4]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001aa2:	78fb      	ldrb	r3, [r7, #3]
 8001aa4:	f003 0207 	and.w	r2, r3, #7
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d901      	bls.n	8001ab4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e04c      	b.n	8001b4e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ab4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	da0e      	bge.n	8001ada <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001abc:	78fb      	ldrb	r3, [r7, #3]
 8001abe:	f003 0307 	and.w	r3, r3, #7
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	4413      	add	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	687a      	ldr	r2, [r7, #4]
 8001ace:	4413      	add	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	705a      	strb	r2, [r3, #1]
 8001ad8:	e00c      	b.n	8001af4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	4613      	mov	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	4413      	add	r3, r2
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	4413      	add	r3, r2
 8001aec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2200      	movs	r2, #0
 8001af2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	2201      	movs	r2, #1
 8001af8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	b2da      	uxtb	r2, r3
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d101      	bne.n	8001b14 <HAL_PCD_EP_SetStall+0x7e>
 8001b10:	2302      	movs	r3, #2
 8001b12:	e01c      	b.n	8001b4e <HAL_PCD_EP_SetStall+0xb8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f004 f924 	bl	8005d70 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d108      	bne.n	8001b44 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4610      	mov	r0, r2
 8001b40:	f004 fa49 	bl	8005fd6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b084      	sub	sp, #16
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001b62:	78fb      	ldrb	r3, [r7, #3]
 8001b64:	f003 020f 	and.w	r2, r3, #15
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	429a      	cmp	r2, r3
 8001b6e:	d901      	bls.n	8001b74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e040      	b.n	8001bf6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	da0e      	bge.n	8001b9a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b7c:	78fb      	ldrb	r3, [r7, #3]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	4413      	add	r3, r2
 8001b90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	2201      	movs	r2, #1
 8001b96:	705a      	strb	r2, [r3, #1]
 8001b98:	e00e      	b.n	8001bb8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b9a:	78fb      	ldrb	r3, [r7, #3]
 8001b9c:	f003 0207 	and.w	r2, r3, #7
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	4413      	add	r3, r2
 8001ba6:	00db      	lsls	r3, r3, #3
 8001ba8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	4413      	add	r3, r2
 8001bb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	2200      	movs	r2, #0
 8001bbc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bbe:	78fb      	ldrb	r3, [r7, #3]
 8001bc0:	f003 0307 	and.w	r3, r3, #7
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <HAL_PCD_EP_ClrStall+0x82>
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	e00e      	b.n	8001bf6 <HAL_PCD_EP_ClrStall+0xa0>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2201      	movs	r2, #1
 8001bdc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68f9      	ldr	r1, [r7, #12]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f004 f912 	bl	8005e10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2200      	movs	r2, #0
 8001bf0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3710      	adds	r7, #16
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}

08001bfe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001bfe:	b580      	push	{r7, lr}
 8001c00:	b08e      	sub	sp, #56	; 0x38
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c06:	e2ec      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c10:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c12:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c1e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f040 8161 	bne.w	8001eea <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c28:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c2a:	f003 0310 	and.w	r3, r3, #16
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d152      	bne.n	8001cd8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001c3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001c42:	81fb      	strh	r3, [r7, #14]
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	89fb      	ldrh	r3, [r7, #14]
 8001c4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001c4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3328      	adds	r3, #40	; 0x28
 8001c5a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	461a      	mov	r2, r3
 8001c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	00db      	lsls	r3, r3, #3
 8001c6e:	4413      	add	r3, r2
 8001c70:	3302      	adds	r3, #2
 8001c72:	005b      	lsls	r3, r3, #1
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	4413      	add	r3, r2
 8001c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c7e:	881b      	ldrh	r3, [r3, #0]
 8001c80:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	441a      	add	r2, r3
 8001c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c94:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f005 ff9a 	bl	8007bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	f000 829b 	beq.w	80021e2 <PCD_EP_ISR_Handler+0x5e4>
 8001cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	f040 8296 	bne.w	80021e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	b292      	uxth	r2, r2
 8001cca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001cd6:	e284      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	881b      	ldrh	r3, [r3, #0]
 8001ce6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001ce8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d034      	beq.n	8001d5c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	4413      	add	r3, r2
 8001d06:	3306      	adds	r3, #6
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	6812      	ldr	r2, [r2, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d14:	881b      	ldrh	r3, [r3, #0]
 8001d16:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6818      	ldr	r0, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f004 f9a0 	bl	8006076 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d42:	4013      	ands	r3, r2
 8001d44:	823b      	strh	r3, [r7, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	8a3a      	ldrh	r2, [r7, #16]
 8001d4c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d50:	b292      	uxth	r2, r2
 8001d52:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f005 ff0f 	bl	8007b78 <HAL_PCD_SetupStageCallback>
 8001d5a:	e242      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001d5c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f280 823e 	bge.w	80021e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	881b      	ldrh	r3, [r3, #0]
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001d72:	4013      	ands	r3, r2
 8001d74:	83bb      	strh	r3, [r7, #28]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	8bba      	ldrh	r2, [r7, #28]
 8001d7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d80:	b292      	uxth	r2, r2
 8001d82:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	461a      	mov	r2, r3
 8001d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	3306      	adds	r3, #6
 8001d9a:	005b      	lsls	r3, r3, #1
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	6812      	ldr	r2, [r2, #0]
 8001da0:	4413      	add	r3, r2
 8001da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db2:	69db      	ldr	r3, [r3, #28]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d019      	beq.n	8001dec <PCD_EP_ISR_Handler+0x1ee>
 8001db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dba:	695b      	ldr	r3, [r3, #20]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d015      	beq.n	8001dec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	6959      	ldr	r1, [r3, #20]
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f004 f950 	bl	8006076 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd8:	695a      	ldr	r2, [r3, #20]
 8001dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	441a      	add	r2, r3
 8001de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001de4:	2100      	movs	r1, #0
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f005 fed8 	bl	8007b9c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	881b      	ldrh	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	f040 81f2 	bne.w	80021e2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	61bb      	str	r3, [r7, #24]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	461a      	mov	r2, r3
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	4413      	add	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d112      	bne.n	8001e4c <PCD_EP_ISR_Handler+0x24e>
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	881b      	ldrh	r3, [r3, #0]
 8001e2a:	b29b      	uxth	r3, r3
 8001e2c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001e30:	b29a      	uxth	r2, r3
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	801a      	strh	r2, [r3, #0]
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	881b      	ldrh	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	e02f      	b.n	8001eac <PCD_EP_ISR_Handler+0x2ae>
 8001e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4e:	691b      	ldr	r3, [r3, #16]
 8001e50:	2b3e      	cmp	r3, #62	; 0x3e
 8001e52:	d813      	bhi.n	8001e7c <PCD_EP_ISR_Handler+0x27e>
 8001e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e56:	691b      	ldr	r3, [r3, #16]
 8001e58:	085b      	lsrs	r3, r3, #1
 8001e5a:	633b      	str	r3, [r7, #48]	; 0x30
 8001e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5e:	691b      	ldr	r3, [r3, #16]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <PCD_EP_ISR_Handler+0x270>
 8001e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	029b      	lsls	r3, r3, #10
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	801a      	strh	r2, [r3, #0]
 8001e7a:	e017      	b.n	8001eac <PCD_EP_ISR_Handler+0x2ae>
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e7e:	691b      	ldr	r3, [r3, #16]
 8001e80:	095b      	lsrs	r3, r3, #5
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	691b      	ldr	r3, [r3, #16]
 8001e88:	f003 031f 	and.w	r3, r3, #31
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d102      	bne.n	8001e96 <PCD_EP_ISR_Handler+0x298>
 8001e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e92:	3b01      	subs	r3, #1
 8001e94:	633b      	str	r3, [r7, #48]	; 0x30
 8001e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	029b      	lsls	r3, r3, #10
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001ea2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001eb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ebc:	827b      	strh	r3, [r7, #18]
 8001ebe:	8a7b      	ldrh	r3, [r7, #18]
 8001ec0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001ec4:	827b      	strh	r3, [r7, #18]
 8001ec6:	8a7b      	ldrh	r3, [r7, #18]
 8001ec8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001ecc:	827b      	strh	r3, [r7, #18]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681a      	ldr	r2, [r3, #0]
 8001ed2:	8a7b      	ldrh	r3, [r7, #18]
 8001ed4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001ed8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ee4:	b29b      	uxth	r3, r3
 8001ee6:	8013      	strh	r3, [r2, #0]
 8001ee8:	e17b      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	881b      	ldrh	r3, [r3, #0]
 8001efa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001efc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f280 80ea 	bge.w	80020da <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	4413      	add	r3, r2
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	461a      	mov	r2, r3
 8001f26:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	4413      	add	r3, r2
 8001f2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f34:	b292      	uxth	r2, r2
 8001f36:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001f38:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f50:	7b1b      	ldrb	r3, [r3, #12]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d122      	bne.n	8001f9c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	781b      	ldrb	r3, [r3, #0]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	4413      	add	r3, r2
 8001f6a:	3306      	adds	r3, #6
 8001f6c:	005b      	lsls	r3, r3, #1
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	6812      	ldr	r2, [r2, #0]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f7e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001f80:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 8087 	beq.w	8002096 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6818      	ldr	r0, [r3, #0]
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	6959      	ldr	r1, [r3, #20]
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	88da      	ldrh	r2, [r3, #6]
 8001f94:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f96:	f004 f86e 	bl	8006076 <USB_ReadPMA>
 8001f9a:	e07c      	b.n	8002096 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9e:	78db      	ldrb	r3, [r3, #3]
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d108      	bne.n	8001fb6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001fa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fa6:	461a      	mov	r2, r3
 8001fa8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f927 	bl	80021fe <HAL_PCD_EP_DB_Receive>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001fb4:	e06f      	b.n	8002096 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	881b      	ldrh	r3, [r3, #0]
 8001fc6:	b29b      	uxth	r3, r3
 8001fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001fcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fd0:	847b      	strh	r3, [r7, #34]	; 0x22
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	461a      	mov	r2, r3
 8001fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	441a      	add	r2, r3
 8001fe0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001fe2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001fe6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001fea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001fee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	009b      	lsls	r3, r3, #2
 8002002:	4413      	add	r3, r2
 8002004:	881b      	ldrh	r3, [r3, #0]
 8002006:	b29b      	uxth	r3, r3
 8002008:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d021      	beq.n	8002054 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002018:	b29b      	uxth	r3, r3
 800201a:	461a      	mov	r2, r3
 800201c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201e:	781b      	ldrb	r3, [r3, #0]
 8002020:	00db      	lsls	r3, r3, #3
 8002022:	4413      	add	r3, r2
 8002024:	3302      	adds	r3, #2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	4413      	add	r3, r2
 800202e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002038:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800203a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800203c:	2b00      	cmp	r3, #0
 800203e:	d02a      	beq.n	8002096 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6818      	ldr	r0, [r3, #0]
 8002044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002046:	6959      	ldr	r1, [r3, #20]
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	891a      	ldrh	r2, [r3, #8]
 800204c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800204e:	f004 f812 	bl	8006076 <USB_ReadPMA>
 8002052:	e020      	b.n	8002096 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800205c:	b29b      	uxth	r3, r3
 800205e:	461a      	mov	r2, r3
 8002060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	3306      	adds	r3, #6
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	4413      	add	r3, r2
 8002072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800207c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800207e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002080:	2b00      	cmp	r3, #0
 8002082:	d008      	beq.n	8002096 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6818      	ldr	r0, [r3, #0]
 8002088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208a:	6959      	ldr	r1, [r3, #20]
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	895a      	ldrh	r2, [r3, #10]
 8002090:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002092:	f003 fff0 	bl	8006076 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002098:	69da      	ldr	r2, [r3, #28]
 800209a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800209c:	441a      	add	r2, r3
 800209e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	695a      	ldr	r2, [r3, #20]
 80020a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020a8:	441a      	add	r2, r3
 80020aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d004      	beq.n	80020c0 <PCD_EP_ISR_Handler+0x4c2>
 80020b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d206      	bcs.n	80020ce <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	4619      	mov	r1, r3
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f005 fd68 	bl	8007b9c <HAL_PCD_DataOutStageCallback>
 80020cc:	e005      	b.n	80020da <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d4:	4618      	mov	r0, r3
 80020d6:	f002 f813 	bl	8004100 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80020da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d07e      	beq.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80020e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80020e8:	1c5a      	adds	r2, r3, #1
 80020ea:	4613      	mov	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	4413      	add	r3, r2
 80020f0:	00db      	lsls	r3, r3, #3
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	461a      	mov	r2, r3
 80020fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	4413      	add	r3, r2
 8002106:	881b      	ldrh	r3, [r3, #0]
 8002108:	b29b      	uxth	r3, r3
 800210a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002112:	843b      	strh	r3, [r7, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	461a      	mov	r2, r3
 800211a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	441a      	add	r2, r3
 8002122:	8c3b      	ldrh	r3, [r7, #32]
 8002124:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002128:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800212c:	b29b      	uxth	r3, r3
 800212e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	78db      	ldrb	r3, [r3, #3]
 8002134:	2b03      	cmp	r3, #3
 8002136:	d00c      	beq.n	8002152 <PCD_EP_ISR_Handler+0x554>
 8002138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213a:	78db      	ldrb	r3, [r3, #3]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d008      	beq.n	8002152 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002144:	2b02      	cmp	r3, #2
 8002146:	d146      	bne.n	80021d6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002148:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800214e:	2b00      	cmp	r3, #0
 8002150:	d141      	bne.n	80021d6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800215a:	b29b      	uxth	r3, r3
 800215c:	461a      	mov	r2, r3
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	00db      	lsls	r3, r3, #3
 8002164:	4413      	add	r3, r2
 8002166:	3302      	adds	r3, #2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6812      	ldr	r2, [r2, #0]
 800216e:	4413      	add	r3, r2
 8002170:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002174:	881b      	ldrh	r3, [r3, #0]
 8002176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800217a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	699a      	ldr	r2, [r3, #24]
 8002180:	8bfb      	ldrh	r3, [r7, #30]
 8002182:	429a      	cmp	r2, r3
 8002184:	d906      	bls.n	8002194 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	699a      	ldr	r2, [r3, #24]
 800218a:	8bfb      	ldrh	r3, [r7, #30]
 800218c:	1ad2      	subs	r2, r2, r3
 800218e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002190:	619a      	str	r2, [r3, #24]
 8002192:	e002      	b.n	800219a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d106      	bne.n	80021b0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80021a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a4:	781b      	ldrb	r3, [r3, #0]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f005 fd12 	bl	8007bd2 <HAL_PCD_DataInStageCallback>
 80021ae:	e018      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	695a      	ldr	r2, [r3, #20]
 80021b4:	8bfb      	ldrh	r3, [r7, #30]
 80021b6:	441a      	add	r2, r3
 80021b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	69da      	ldr	r2, [r3, #28]
 80021c0:	8bfb      	ldrh	r3, [r7, #30]
 80021c2:	441a      	add	r2, r3
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021ce:	4618      	mov	r0, r3
 80021d0:	f001 ff96 	bl	8004100 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80021d4:	e005      	b.n	80021e2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80021d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d8:	461a      	mov	r2, r3
 80021da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	f000 f91b 	bl	8002418 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	f6ff ad0a 	blt.w	8001c08 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80021f4:	2300      	movs	r3, #0
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	3738      	adds	r7, #56	; 0x38
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}

080021fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80021fe:	b580      	push	{r7, lr}
 8002200:	b088      	sub	sp, #32
 8002202:	af00      	add	r7, sp, #0
 8002204:	60f8      	str	r0, [r7, #12]
 8002206:	60b9      	str	r1, [r7, #8]
 8002208:	4613      	mov	r3, r2
 800220a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800220c:	88fb      	ldrh	r3, [r7, #6]
 800220e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d07e      	beq.n	8002314 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800221e:	b29b      	uxth	r3, r3
 8002220:	461a      	mov	r2, r3
 8002222:	68bb      	ldr	r3, [r7, #8]
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	00db      	lsls	r3, r3, #3
 8002228:	4413      	add	r3, r2
 800222a:	3302      	adds	r3, #2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	68fa      	ldr	r2, [r7, #12]
 8002230:	6812      	ldr	r2, [r2, #0]
 8002232:	4413      	add	r3, r2
 8002234:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002238:	881b      	ldrh	r3, [r3, #0]
 800223a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800223e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	699a      	ldr	r2, [r3, #24]
 8002244:	8b7b      	ldrh	r3, [r7, #26]
 8002246:	429a      	cmp	r2, r3
 8002248:	d306      	bcc.n	8002258 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	699a      	ldr	r2, [r3, #24]
 800224e:	8b7b      	ldrh	r3, [r7, #26]
 8002250:	1ad2      	subs	r2, r2, r3
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	619a      	str	r2, [r3, #24]
 8002256:	e002      	b.n	800225e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2200      	movs	r2, #0
 800225c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	699b      	ldr	r3, [r3, #24]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d123      	bne.n	80022ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	461a      	mov	r2, r3
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	4413      	add	r3, r2
 8002274:	881b      	ldrh	r3, [r3, #0]
 8002276:	b29b      	uxth	r3, r3
 8002278:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800227c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002280:	833b      	strh	r3, [r7, #24]
 8002282:	8b3b      	ldrh	r3, [r7, #24]
 8002284:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002288:	833b      	strh	r3, [r7, #24]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	68bb      	ldr	r3, [r7, #8]
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	441a      	add	r2, r3
 8002298:	8b3b      	ldrh	r3, [r7, #24]
 800229a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800229e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80022ae:	88fb      	ldrh	r3, [r7, #6]
 80022b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d01f      	beq.n	80022f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	461a      	mov	r2, r3
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	881b      	ldrh	r3, [r3, #0]
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d2:	82fb      	strh	r3, [r7, #22]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	461a      	mov	r2, r3
 80022da:	68bb      	ldr	r3, [r7, #8]
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	441a      	add	r2, r3
 80022e2:	8afb      	ldrh	r3, [r7, #22]
 80022e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022f8:	8b7b      	ldrh	r3, [r7, #26]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	f000 8087 	beq.w	800240e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6818      	ldr	r0, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	6959      	ldr	r1, [r3, #20]
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	891a      	ldrh	r2, [r3, #8]
 800230c:	8b7b      	ldrh	r3, [r7, #26]
 800230e:	f003 feb2 	bl	8006076 <USB_ReadPMA>
 8002312:	e07c      	b.n	800240e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800231c:	b29b      	uxth	r3, r3
 800231e:	461a      	mov	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	00db      	lsls	r3, r3, #3
 8002326:	4413      	add	r3, r2
 8002328:	3306      	adds	r3, #6
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	6812      	ldr	r2, [r2, #0]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800233c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	699a      	ldr	r2, [r3, #24]
 8002342:	8b7b      	ldrh	r3, [r7, #26]
 8002344:	429a      	cmp	r2, r3
 8002346:	d306      	bcc.n	8002356 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	8b7b      	ldrh	r3, [r7, #26]
 800234e:	1ad2      	subs	r2, r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	619a      	str	r2, [r3, #24]
 8002354:	e002      	b.n	800235c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	2200      	movs	r2, #0
 800235a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	699b      	ldr	r3, [r3, #24]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d123      	bne.n	80023ac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	4413      	add	r3, r2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	b29b      	uxth	r3, r3
 8002376:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800237a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800237e:	83fb      	strh	r3, [r7, #30]
 8002380:	8bfb      	ldrh	r3, [r7, #30]
 8002382:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002386:	83fb      	strh	r3, [r7, #30]
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	441a      	add	r2, r3
 8002396:	8bfb      	ldrh	r3, [r7, #30]
 8002398:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800239c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023a0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80023ac:	88fb      	ldrh	r3, [r7, #6]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d11f      	bne.n	80023f6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	781b      	ldrb	r3, [r3, #0]
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	881b      	ldrh	r3, [r3, #0]
 80023c6:	b29b      	uxth	r3, r3
 80023c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023d0:	83bb      	strh	r3, [r7, #28]
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	441a      	add	r2, r3
 80023e0:	8bbb      	ldrh	r3, [r7, #28]
 80023e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80023e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80023ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80023ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80023f6:	8b7b      	ldrh	r3, [r7, #26]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d008      	beq.n	800240e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	6959      	ldr	r1, [r3, #20]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	895a      	ldrh	r2, [r3, #10]
 8002408:	8b7b      	ldrh	r3, [r7, #26]
 800240a:	f003 fe34 	bl	8006076 <USB_ReadPMA>
    }
  }

  return count;
 800240e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3720      	adds	r7, #32
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b0a2      	sub	sp, #136	; 0x88
 800241c:	af00      	add	r7, sp, #0
 800241e:	60f8      	str	r0, [r7, #12]
 8002420:	60b9      	str	r1, [r7, #8]
 8002422:	4613      	mov	r3, r2
 8002424:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 81c7 	beq.w	80027c0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800243a:	b29b      	uxth	r3, r3
 800243c:	461a      	mov	r2, r3
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	4413      	add	r3, r2
 8002446:	3302      	adds	r3, #2
 8002448:	005b      	lsls	r3, r3, #1
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	6812      	ldr	r2, [r2, #0]
 800244e:	4413      	add	r3, r2
 8002450:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800245a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	699a      	ldr	r2, [r3, #24]
 8002462:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002466:	429a      	cmp	r2, r3
 8002468:	d907      	bls.n	800247a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	699a      	ldr	r2, [r3, #24]
 800246e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002472:	1ad2      	subs	r2, r2, r3
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	619a      	str	r2, [r3, #24]
 8002478:	e002      	b.n	8002480 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	2200      	movs	r2, #0
 800247e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002480:	68bb      	ldr	r3, [r7, #8]
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f040 80b9 	bne.w	80025fc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	785b      	ldrb	r3, [r3, #1]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d126      	bne.n	80024e0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	62bb      	str	r3, [r7, #40]	; 0x28
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024a0:	b29b      	uxth	r3, r3
 80024a2:	461a      	mov	r2, r3
 80024a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a6:	4413      	add	r3, r2
 80024a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	011a      	lsls	r2, r3, #4
 80024b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b2:	4413      	add	r3, r2
 80024b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29b      	uxth	r3, r3
 80024c0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c8:	801a      	strh	r2, [r3, #0]
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	881b      	ldrh	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80024d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80024d8:	b29a      	uxth	r2, r3
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	801a      	strh	r2, [r3, #0]
 80024de:	e01a      	b.n	8002516 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	785b      	ldrb	r3, [r3, #1]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d116      	bne.n	8002516 <HAL_PCD_EP_DB_Transmit+0xfe>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	633b      	str	r3, [r7, #48]	; 0x30
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	461a      	mov	r2, r3
 80024fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024fc:	4413      	add	r3, r2
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	011a      	lsls	r2, r3, #4
 8002506:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002508:	4413      	add	r3, r2
 800250a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800250e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002512:	2200      	movs	r2, #0
 8002514:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	623b      	str	r3, [r7, #32]
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	785b      	ldrb	r3, [r3, #1]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d126      	bne.n	8002572 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	61bb      	str	r3, [r7, #24]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002532:	b29b      	uxth	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	4413      	add	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	011a      	lsls	r2, r3, #4
 8002542:	69bb      	ldr	r3, [r7, #24]
 8002544:	4413      	add	r3, r2
 8002546:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	881b      	ldrh	r3, [r3, #0]
 8002550:	b29b      	uxth	r3, r3
 8002552:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002556:	b29a      	uxth	r2, r3
 8002558:	697b      	ldr	r3, [r7, #20]
 800255a:	801a      	strh	r2, [r3, #0]
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	b29b      	uxth	r3, r3
 8002562:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002566:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800256a:	b29a      	uxth	r2, r3
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	801a      	strh	r2, [r3, #0]
 8002570:	e017      	b.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	785b      	ldrb	r3, [r3, #1]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d113      	bne.n	80025a2 <HAL_PCD_EP_DB_Transmit+0x18a>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002582:	b29b      	uxth	r3, r3
 8002584:	461a      	mov	r2, r3
 8002586:	6a3b      	ldr	r3, [r7, #32]
 8002588:	4413      	add	r3, r2
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	011a      	lsls	r2, r3, #4
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	4413      	add	r3, r2
 8002596:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800259a:	61fb      	str	r3, [r7, #28]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	2200      	movs	r2, #0
 80025a0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	4619      	mov	r1, r3
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f005 fb12 	bl	8007bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025ae:	88fb      	ldrh	r3, [r7, #6]
 80025b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 82d4 	beq.w	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	781b      	ldrb	r3, [r3, #0]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	881b      	ldrh	r3, [r3, #0]
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025d4:	827b      	strh	r3, [r7, #18]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	461a      	mov	r2, r3
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	441a      	add	r2, r3
 80025e4:	8a7b      	ldrh	r3, [r7, #18]
 80025e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	8013      	strh	r3, [r2, #0]
 80025fa:	e2b2      	b.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d021      	beq.n	800264a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	68bb      	ldr	r3, [r7, #8]
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29b      	uxth	r3, r3
 8002618:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800261c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002620:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	461a      	mov	r2, r3
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	441a      	add	r2, r3
 8002632:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002636:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800263a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800263e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002642:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002646:	b29b      	uxth	r3, r3
 8002648:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002650:	2b01      	cmp	r3, #1
 8002652:	f040 8286 	bne.w	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800266c:	441a      	add	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	6a1a      	ldr	r2, [r3, #32]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	691b      	ldr	r3, [r3, #16]
 800267a:	429a      	cmp	r2, r3
 800267c:	d309      	bcc.n	8002692 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 800267e:	68bb      	ldr	r3, [r7, #8]
 8002680:	691b      	ldr	r3, [r3, #16]
 8002682:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	6a1a      	ldr	r2, [r3, #32]
 8002688:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800268a:	1ad2      	subs	r2, r2, r3
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	621a      	str	r2, [r3, #32]
 8002690:	e015      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	6a1b      	ldr	r3, [r3, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d107      	bne.n	80026aa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800269a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800269e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80026a8:	e009      	b.n	80026be <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	2200      	movs	r2, #0
 80026bc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	785b      	ldrb	r3, [r3, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d155      	bne.n	8002772 <HAL_PCD_EP_DB_Transmit+0x35a>
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	461a      	mov	r2, r3
 80026d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026da:	4413      	add	r3, r2
 80026dc:	63bb      	str	r3, [r7, #56]	; 0x38
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	011a      	lsls	r2, r3, #4
 80026e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e6:	4413      	add	r3, r2
 80026e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026ec:	637b      	str	r3, [r7, #52]	; 0x34
 80026ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d112      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x302>
 80026f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026f6:	881b      	ldrh	r3, [r3, #0]
 80026f8:	b29b      	uxth	r3, r3
 80026fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026fe:	b29a      	uxth	r2, r3
 8002700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002702:	801a      	strh	r2, [r3, #0]
 8002704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002706:	881b      	ldrh	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002712:	b29a      	uxth	r2, r3
 8002714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002716:	801a      	strh	r2, [r3, #0]
 8002718:	e047      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x392>
 800271a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800271c:	2b3e      	cmp	r3, #62	; 0x3e
 800271e:	d811      	bhi.n	8002744 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002720:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002722:	085b      	lsrs	r3, r3, #1
 8002724:	64bb      	str	r3, [r7, #72]	; 0x48
 8002726:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d002      	beq.n	8002736 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002732:	3301      	adds	r3, #1
 8002734:	64bb      	str	r3, [r7, #72]	; 0x48
 8002736:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002738:	b29b      	uxth	r3, r3
 800273a:	029b      	lsls	r3, r3, #10
 800273c:	b29a      	uxth	r2, r3
 800273e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002740:	801a      	strh	r2, [r3, #0]
 8002742:	e032      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x392>
 8002744:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002746:	095b      	lsrs	r3, r3, #5
 8002748:	64bb      	str	r3, [r7, #72]	; 0x48
 800274a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800274c:	f003 031f 	and.w	r3, r3, #31
 8002750:	2b00      	cmp	r3, #0
 8002752:	d102      	bne.n	800275a <HAL_PCD_EP_DB_Transmit+0x342>
 8002754:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002756:	3b01      	subs	r3, #1
 8002758:	64bb      	str	r3, [r7, #72]	; 0x48
 800275a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800275c:	b29b      	uxth	r3, r3
 800275e:	029b      	lsls	r3, r3, #10
 8002760:	b29b      	uxth	r3, r3
 8002762:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002766:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800276a:	b29a      	uxth	r2, r3
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	801a      	strh	r2, [r3, #0]
 8002770:	e01b      	b.n	80027aa <HAL_PCD_EP_DB_Transmit+0x392>
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	785b      	ldrb	r3, [r3, #1]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d117      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x392>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	643b      	str	r3, [r7, #64]	; 0x40
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002788:	b29b      	uxth	r3, r3
 800278a:	461a      	mov	r2, r3
 800278c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800278e:	4413      	add	r3, r2
 8002790:	643b      	str	r3, [r7, #64]	; 0x40
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	011a      	lsls	r2, r3, #4
 8002798:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800279a:	4413      	add	r3, r2
 800279c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80027a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027a4:	b29a      	uxth	r2, r3
 80027a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027a8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	6959      	ldr	r1, [r3, #20]
 80027b2:	68bb      	ldr	r3, [r7, #8]
 80027b4:	891a      	ldrh	r2, [r3, #8]
 80027b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	f003 fc17 	bl	8005fec <USB_WritePMA>
 80027be:	e1d0      	b.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c8:	b29b      	uxth	r3, r3
 80027ca:	461a      	mov	r2, r3
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	4413      	add	r3, r2
 80027d4:	3306      	adds	r3, #6
 80027d6:	005b      	lsls	r3, r3, #1
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	6812      	ldr	r2, [r2, #0]
 80027dc:	4413      	add	r3, r2
 80027de:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	699a      	ldr	r2, [r3, #24]
 80027f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d307      	bcc.n	8002808 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	699a      	ldr	r2, [r3, #24]
 80027fc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002800:	1ad2      	subs	r2, r2, r3
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	619a      	str	r2, [r3, #24]
 8002806:	e002      	b.n	800280e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2200      	movs	r2, #0
 800280c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800280e:	68bb      	ldr	r3, [r7, #8]
 8002810:	699b      	ldr	r3, [r3, #24]
 8002812:	2b00      	cmp	r3, #0
 8002814:	f040 80c4 	bne.w	80029a0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	785b      	ldrb	r3, [r3, #1]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d126      	bne.n	800286e <HAL_PCD_EP_DB_Transmit+0x456>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800282e:	b29b      	uxth	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002834:	4413      	add	r3, r2
 8002836:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	011a      	lsls	r2, r3, #4
 800283e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002840:	4413      	add	r3, r2
 8002842:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002846:	66bb      	str	r3, [r7, #104]	; 0x68
 8002848:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800284a:	881b      	ldrh	r3, [r3, #0]
 800284c:	b29b      	uxth	r3, r3
 800284e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002852:	b29a      	uxth	r2, r3
 8002854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002856:	801a      	strh	r2, [r3, #0]
 8002858:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	b29b      	uxth	r3, r3
 800285e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002862:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002866:	b29a      	uxth	r2, r3
 8002868:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800286a:	801a      	strh	r2, [r3, #0]
 800286c:	e01a      	b.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	785b      	ldrb	r3, [r3, #1]
 8002872:	2b01      	cmp	r3, #1
 8002874:	d116      	bne.n	80028a4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	677b      	str	r3, [r7, #116]	; 0x74
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002884:	b29b      	uxth	r3, r3
 8002886:	461a      	mov	r2, r3
 8002888:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800288a:	4413      	add	r3, r2
 800288c:	677b      	str	r3, [r7, #116]	; 0x74
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	781b      	ldrb	r3, [r3, #0]
 8002892:	011a      	lsls	r2, r3, #4
 8002894:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002896:	4413      	add	r3, r2
 8002898:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800289c:	673b      	str	r3, [r7, #112]	; 0x70
 800289e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80028a0:	2200      	movs	r2, #0
 80028a2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	785b      	ldrb	r3, [r3, #1]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d12f      	bne.n	8002912 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	461a      	mov	r2, r3
 80028c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028ca:	4413      	add	r3, r2
 80028cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	011a      	lsls	r2, r3, #4
 80028d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80028da:	4413      	add	r3, r2
 80028dc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80028e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80028e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028e8:	881b      	ldrh	r3, [r3, #0]
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028f6:	801a      	strh	r2, [r3, #0]
 80028f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80028fc:	881b      	ldrh	r3, [r3, #0]
 80028fe:	b29b      	uxth	r3, r3
 8002900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002908:	b29a      	uxth	r2, r3
 800290a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800290e:	801a      	strh	r2, [r3, #0]
 8002910:	e017      	b.n	8002942 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	785b      	ldrb	r3, [r3, #1]
 8002916:	2b01      	cmp	r3, #1
 8002918:	d113      	bne.n	8002942 <HAL_PCD_EP_DB_Transmit+0x52a>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002922:	b29b      	uxth	r3, r3
 8002924:	461a      	mov	r2, r3
 8002926:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002928:	4413      	add	r3, r2
 800292a:	67bb      	str	r3, [r7, #120]	; 0x78
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	011a      	lsls	r2, r3, #4
 8002932:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002934:	4413      	add	r3, r2
 8002936:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800293a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800293c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800293e:	2200      	movs	r2, #0
 8002940:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	4619      	mov	r1, r3
 8002948:	68f8      	ldr	r0, [r7, #12]
 800294a:	f005 f942 	bl	8007bd2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f040 8104 	bne.w	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	4413      	add	r3, r2
 8002968:	881b      	ldrh	r3, [r3, #0]
 800296a:	b29b      	uxth	r3, r3
 800296c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002970:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002974:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	461a      	mov	r2, r3
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	441a      	add	r2, r3
 8002986:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800298a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800298e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002992:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800299a:	b29b      	uxth	r3, r3
 800299c:	8013      	strh	r3, [r2, #0]
 800299e:	e0e0      	b.n	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029a0:	88fb      	ldrh	r3, [r7, #6]
 80029a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d121      	bne.n	80029ee <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	461a      	mov	r2, r3
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	881b      	ldrh	r3, [r3, #0]
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	461a      	mov	r2, r3
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	441a      	add	r2, r3
 80029d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029ea:	b29b      	uxth	r3, r3
 80029ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	f040 80b4 	bne.w	8002b62 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a02:	441a      	add	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	69da      	ldr	r2, [r3, #28]
 8002a0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a10:	441a      	add	r2, r3
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	6a1a      	ldr	r2, [r3, #32]
 8002a1a:	68bb      	ldr	r3, [r7, #8]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d309      	bcc.n	8002a36 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	6a1a      	ldr	r2, [r3, #32]
 8002a2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a2e:	1ad2      	subs	r2, r2, r3
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	621a      	str	r2, [r3, #32]
 8002a34:	e015      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d107      	bne.n	8002a4e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002a3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002a4c:	e009      	b.n	8002a62 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	667b      	str	r3, [r7, #100]	; 0x64
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	785b      	ldrb	r3, [r3, #1]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d155      	bne.n	8002b1c <HAL_PCD_EP_DB_Transmit+0x704>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	461a      	mov	r2, r3
 8002a82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a84:	4413      	add	r3, r2
 8002a86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	011a      	lsls	r2, r3, #4
 8002a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002a90:	4413      	add	r3, r2
 8002a92:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a96:	65bb      	str	r3, [r7, #88]	; 0x58
 8002a98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d112      	bne.n	8002ac4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002a9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aa0:	881b      	ldrh	r3, [r3, #0]
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aa8:	b29a      	uxth	r2, r3
 8002aaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aac:	801a      	strh	r2, [r3, #0]
 8002aae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ab0:	881b      	ldrh	r3, [r3, #0]
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ab8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002abc:	b29a      	uxth	r2, r3
 8002abe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ac0:	801a      	strh	r2, [r3, #0]
 8002ac2:	e044      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x736>
 8002ac4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ac6:	2b3e      	cmp	r3, #62	; 0x3e
 8002ac8:	d811      	bhi.n	8002aee <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002acc:	085b      	lsrs	r3, r3, #1
 8002ace:	657b      	str	r3, [r7, #84]	; 0x54
 8002ad0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d002      	beq.n	8002ae0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002ada:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002adc:	3301      	adds	r3, #1
 8002ade:	657b      	str	r3, [r7, #84]	; 0x54
 8002ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	029b      	lsls	r3, r3, #10
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002aea:	801a      	strh	r2, [r3, #0]
 8002aec:	e02f      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x736>
 8002aee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	657b      	str	r3, [r7, #84]	; 0x54
 8002af4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002af6:	f003 031f 	and.w	r3, r3, #31
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d102      	bne.n	8002b04 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002afe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b00:	3b01      	subs	r3, #1
 8002b02:	657b      	str	r3, [r7, #84]	; 0x54
 8002b04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b06:	b29b      	uxth	r3, r3
 8002b08:	029b      	lsls	r3, r3, #10
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b18:	801a      	strh	r2, [r3, #0]
 8002b1a:	e018      	b.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x736>
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	785b      	ldrb	r3, [r3, #1]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d114      	bne.n	8002b4e <HAL_PCD_EP_DB_Transmit+0x736>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	461a      	mov	r2, r3
 8002b30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b32:	4413      	add	r3, r2
 8002b34:	667b      	str	r3, [r7, #100]	; 0x64
 8002b36:	68bb      	ldr	r3, [r7, #8]
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	011a      	lsls	r2, r3, #4
 8002b3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b3e:	4413      	add	r3, r2
 8002b40:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b44:	663b      	str	r3, [r7, #96]	; 0x60
 8002b46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b4c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	6818      	ldr	r0, [r3, #0]
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	6959      	ldr	r1, [r3, #20]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	895a      	ldrh	r2, [r3, #10]
 8002b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	f003 fa45 	bl	8005fec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	881b      	ldrh	r3, [r3, #0]
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b7c:	823b      	strh	r3, [r7, #16]
 8002b7e:	8a3b      	ldrh	r3, [r7, #16]
 8002b80:	f083 0310 	eor.w	r3, r3, #16
 8002b84:	823b      	strh	r3, [r7, #16]
 8002b86:	8a3b      	ldrh	r3, [r7, #16]
 8002b88:	f083 0320 	eor.w	r3, r3, #32
 8002b8c:	823b      	strh	r3, [r7, #16]
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	441a      	add	r2, r3
 8002b9c:	8a3b      	ldrh	r3, [r7, #16]
 8002b9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ba2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ba6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002baa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3788      	adds	r7, #136	; 0x88
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b087      	sub	sp, #28
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	607b      	str	r3, [r7, #4]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	817b      	strh	r3, [r7, #10]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002bce:	897b      	ldrh	r3, [r7, #10]
 8002bd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00b      	beq.n	8002bf2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	1c5a      	adds	r2, r3, #1
 8002be2:	4613      	mov	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4413      	add	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
 8002bf0:	e009      	b.n	8002c06 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002bf2:	897a      	ldrh	r2, [r7, #10]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4413      	add	r3, r2
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c00:	68fa      	ldr	r2, [r7, #12]
 8002c02:	4413      	add	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c06:	893b      	ldrh	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	b29a      	uxth	r2, r3
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	80da      	strh	r2, [r3, #6]
 8002c1a:	e00b      	b.n	8002c34 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	b29a      	uxth	r2, r3
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	0c1b      	lsrs	r3, r3, #16
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	371c      	adds	r7, #28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bc80      	pop	{r7}
 8002c3e:	4770      	bx	lr

08002c40 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e272      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	f000 8087 	beq.w	8002d6e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c60:	4b92      	ldr	r3, [pc, #584]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 030c 	and.w	r3, r3, #12
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	d00c      	beq.n	8002c86 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002c6c:	4b8f      	ldr	r3, [pc, #572]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d112      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5e>
 8002c78:	4b8c      	ldr	r3, [pc, #560]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d10b      	bne.n	8002c9e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c86:	4b89      	ldr	r3, [pc, #548]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d06c      	beq.n	8002d6c <HAL_RCC_OscConfig+0x12c>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d168      	bne.n	8002d6c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e24c      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca6:	d106      	bne.n	8002cb6 <HAL_RCC_OscConfig+0x76>
 8002ca8:	4b80      	ldr	r3, [pc, #512]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a7f      	ldr	r2, [pc, #508]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cb2:	6013      	str	r3, [r2, #0]
 8002cb4:	e02e      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d10c      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x98>
 8002cbe:	4b7b      	ldr	r3, [pc, #492]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a7a      	ldr	r2, [pc, #488]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cc8:	6013      	str	r3, [r2, #0]
 8002cca:	4b78      	ldr	r3, [pc, #480]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a77      	ldr	r2, [pc, #476]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cd0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002cd4:	6013      	str	r3, [r2, #0]
 8002cd6:	e01d      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce0:	d10c      	bne.n	8002cfc <HAL_RCC_OscConfig+0xbc>
 8002ce2:	4b72      	ldr	r3, [pc, #456]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a71      	ldr	r2, [pc, #452]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002ce8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cec:	6013      	str	r3, [r2, #0]
 8002cee:	4b6f      	ldr	r3, [pc, #444]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a6e      	ldr	r2, [pc, #440]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e00b      	b.n	8002d14 <HAL_RCC_OscConfig+0xd4>
 8002cfc:	4b6b      	ldr	r3, [pc, #428]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a6a      	ldr	r2, [pc, #424]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d06:	6013      	str	r3, [r2, #0]
 8002d08:	4b68      	ldr	r3, [pc, #416]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a67      	ldr	r2, [pc, #412]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d12:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d013      	beq.n	8002d44 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d1c:	f7fe f9b6 	bl	800108c <HAL_GetTick>
 8002d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d22:	e008      	b.n	8002d36 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d24:	f7fe f9b2 	bl	800108c <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	1ad3      	subs	r3, r2, r3
 8002d2e:	2b64      	cmp	r3, #100	; 0x64
 8002d30:	d901      	bls.n	8002d36 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002d32:	2303      	movs	r3, #3
 8002d34:	e200      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d36:	4b5d      	ldr	r3, [pc, #372]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d0f0      	beq.n	8002d24 <HAL_RCC_OscConfig+0xe4>
 8002d42:	e014      	b.n	8002d6e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe f9a2 	bl	800108c <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe f99e 	bl	800108c <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	; 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e1ec      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d5e:	4b53      	ldr	r3, [pc, #332]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d1f0      	bne.n	8002d4c <HAL_RCC_OscConfig+0x10c>
 8002d6a:	e000      	b.n	8002d6e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d6c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d063      	beq.n	8002e42 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d7a:	4b4c      	ldr	r3, [pc, #304]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d11c      	bne.n	8002dcc <HAL_RCC_OscConfig+0x18c>
 8002d92:	4b46      	ldr	r3, [pc, #280]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d116      	bne.n	8002dcc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0302 	and.w	r3, r3, #2
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_RCC_OscConfig+0x176>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	691b      	ldr	r3, [r3, #16]
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e1c0      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002db6:	4b3d      	ldr	r3, [pc, #244]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	4939      	ldr	r1, [pc, #228]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dca:	e03a      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d020      	beq.n	8002e16 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd4:	4b36      	ldr	r3, [pc, #216]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dda:	f7fe f957 	bl	800108c <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002de2:	f7fe f953 	bl	800108c <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e1a1      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df4:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 0302 	and.w	r3, r3, #2
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e00:	4b2a      	ldr	r3, [pc, #168]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	00db      	lsls	r3, r3, #3
 8002e0e:	4927      	ldr	r1, [pc, #156]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e015      	b.n	8002e42 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e16:	4b26      	ldr	r3, [pc, #152]	; (8002eb0 <HAL_RCC_OscConfig+0x270>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e1c:	f7fe f936 	bl	800108c <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e22:	e008      	b.n	8002e36 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e24:	f7fe f932 	bl	800108c <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d901      	bls.n	8002e36 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e180      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e36:	4b1d      	ldr	r3, [pc, #116]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d1f0      	bne.n	8002e24 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0308 	and.w	r3, r3, #8
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d03a      	beq.n	8002ec4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	699b      	ldr	r3, [r3, #24]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d019      	beq.n	8002e8a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e56:	4b17      	ldr	r3, [pc, #92]	; (8002eb4 <HAL_RCC_OscConfig+0x274>)
 8002e58:	2201      	movs	r2, #1
 8002e5a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e5c:	f7fe f916 	bl	800108c <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e62:	e008      	b.n	8002e76 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e64:	f7fe f912 	bl	800108c <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e160      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e76:	4b0d      	ldr	r3, [pc, #52]	; (8002eac <HAL_RCC_OscConfig+0x26c>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f0      	beq.n	8002e64 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e82:	2001      	movs	r0, #1
 8002e84:	f000 faa6 	bl	80033d4 <RCC_Delay>
 8002e88:	e01c      	b.n	8002ec4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e8a:	4b0a      	ldr	r3, [pc, #40]	; (8002eb4 <HAL_RCC_OscConfig+0x274>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e90:	f7fe f8fc 	bl	800108c <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e96:	e00f      	b.n	8002eb8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e98:	f7fe f8f8 	bl	800108c <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d908      	bls.n	8002eb8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e146      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
 8002eaa:	bf00      	nop
 8002eac:	40021000 	.word	0x40021000
 8002eb0:	42420000 	.word	0x42420000
 8002eb4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	4b92      	ldr	r3, [pc, #584]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e9      	bne.n	8002e98 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	f000 80a6 	beq.w	800301e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ed6:	4b8b      	ldr	r3, [pc, #556]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee2:	4b88      	ldr	r3, [pc, #544]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ee4:	69db      	ldr	r3, [r3, #28]
 8002ee6:	4a87      	ldr	r2, [pc, #540]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eec:	61d3      	str	r3, [r2, #28]
 8002eee:	4b85      	ldr	r3, [pc, #532]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002ef0:	69db      	ldr	r3, [r3, #28]
 8002ef2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef6:	60bb      	str	r3, [r7, #8]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002efa:	2301      	movs	r3, #1
 8002efc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efe:	4b82      	ldr	r3, [pc, #520]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f0a:	4b7f      	ldr	r3, [pc, #508]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a7e      	ldr	r2, [pc, #504]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f16:	f7fe f8b9 	bl	800108c <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1c:	e008      	b.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f1e:	f7fe f8b5 	bl	800108c <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b64      	cmp	r3, #100	; 0x64
 8002f2a:	d901      	bls.n	8002f30 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e103      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f30:	4b75      	ldr	r3, [pc, #468]	; (8003108 <HAL_RCC_OscConfig+0x4c8>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d0f0      	beq.n	8002f1e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d106      	bne.n	8002f52 <HAL_RCC_OscConfig+0x312>
 8002f44:	4b6f      	ldr	r3, [pc, #444]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f46:	6a1b      	ldr	r3, [r3, #32]
 8002f48:	4a6e      	ldr	r2, [pc, #440]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f4a:	f043 0301 	orr.w	r3, r3, #1
 8002f4e:	6213      	str	r3, [r2, #32]
 8002f50:	e02d      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10c      	bne.n	8002f74 <HAL_RCC_OscConfig+0x334>
 8002f5a:	4b6a      	ldr	r3, [pc, #424]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	4a69      	ldr	r2, [pc, #420]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	f023 0301 	bic.w	r3, r3, #1
 8002f64:	6213      	str	r3, [r2, #32]
 8002f66:	4b67      	ldr	r3, [pc, #412]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	4a66      	ldr	r2, [pc, #408]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f6c:	f023 0304 	bic.w	r3, r3, #4
 8002f70:	6213      	str	r3, [r2, #32]
 8002f72:	e01c      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	2b05      	cmp	r3, #5
 8002f7a:	d10c      	bne.n	8002f96 <HAL_RCC_OscConfig+0x356>
 8002f7c:	4b61      	ldr	r3, [pc, #388]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f7e:	6a1b      	ldr	r3, [r3, #32]
 8002f80:	4a60      	ldr	r2, [pc, #384]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f82:	f043 0304 	orr.w	r3, r3, #4
 8002f86:	6213      	str	r3, [r2, #32]
 8002f88:	4b5e      	ldr	r3, [pc, #376]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f8a:	6a1b      	ldr	r3, [r3, #32]
 8002f8c:	4a5d      	ldr	r2, [pc, #372]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6213      	str	r3, [r2, #32]
 8002f94:	e00b      	b.n	8002fae <HAL_RCC_OscConfig+0x36e>
 8002f96:	4b5b      	ldr	r3, [pc, #364]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f98:	6a1b      	ldr	r3, [r3, #32]
 8002f9a:	4a5a      	ldr	r2, [pc, #360]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002f9c:	f023 0301 	bic.w	r3, r3, #1
 8002fa0:	6213      	str	r3, [r2, #32]
 8002fa2:	4b58      	ldr	r3, [pc, #352]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	4a57      	ldr	r2, [pc, #348]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fa8:	f023 0304 	bic.w	r3, r3, #4
 8002fac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68db      	ldr	r3, [r3, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d015      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe f869 	bl	800108c <HAL_GetTick>
 8002fba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbc:	e00a      	b.n	8002fd4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fbe:	f7fe f865 	bl	800108c <HAL_GetTick>
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e0b1      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd4:	4b4b      	ldr	r3, [pc, #300]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	f003 0302 	and.w	r3, r3, #2
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0ee      	beq.n	8002fbe <HAL_RCC_OscConfig+0x37e>
 8002fe0:	e014      	b.n	800300c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe2:	f7fe f853 	bl	800108c <HAL_GetTick>
 8002fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe8:	e00a      	b.n	8003000 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fea:	f7fe f84f 	bl	800108c <HAL_GetTick>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e09b      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003000:	4b40      	ldr	r3, [pc, #256]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d1ee      	bne.n	8002fea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800300c:	7dfb      	ldrb	r3, [r7, #23]
 800300e:	2b01      	cmp	r3, #1
 8003010:	d105      	bne.n	800301e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003012:	4b3c      	ldr	r3, [pc, #240]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4a3b      	ldr	r2, [pc, #236]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 8087 	beq.w	8003136 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003028:	4b36      	ldr	r3, [pc, #216]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 030c 	and.w	r3, r3, #12
 8003030:	2b08      	cmp	r3, #8
 8003032:	d061      	beq.n	80030f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	69db      	ldr	r3, [r3, #28]
 8003038:	2b02      	cmp	r3, #2
 800303a:	d146      	bne.n	80030ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303c:	4b33      	ldr	r3, [pc, #204]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 800303e:	2200      	movs	r2, #0
 8003040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003042:	f7fe f823 	bl	800108c <HAL_GetTick>
 8003046:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003048:	e008      	b.n	800305c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304a:	f7fe f81f 	bl	800108c <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d901      	bls.n	800305c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003058:	2303      	movs	r3, #3
 800305a:	e06d      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800305c:	4b29      	ldr	r3, [pc, #164]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d1f0      	bne.n	800304a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a1b      	ldr	r3, [r3, #32]
 800306c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003070:	d108      	bne.n	8003084 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	4921      	ldr	r1, [pc, #132]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	4313      	orrs	r3, r2
 8003082:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003084:	4b1f      	ldr	r3, [pc, #124]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a19      	ldr	r1, [r3, #32]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003094:	430b      	orrs	r3, r1
 8003096:	491b      	ldr	r1, [pc, #108]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800309c:	4b1b      	ldr	r3, [pc, #108]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 800309e:	2201      	movs	r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a2:	f7fd fff3 	bl	800108c <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030a8:	e008      	b.n	80030bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030aa:	f7fd ffef 	bl	800108c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d901      	bls.n	80030bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e03d      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80030bc:	4b11      	ldr	r3, [pc, #68]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d0f0      	beq.n	80030aa <HAL_RCC_OscConfig+0x46a>
 80030c8:	e035      	b.n	8003136 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ca:	4b10      	ldr	r3, [pc, #64]	; (800310c <HAL_RCC_OscConfig+0x4cc>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd ffdc 	bl	800108c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d8:	f7fd ffd8 	bl	800108c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e026      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_RCC_OscConfig+0x4c4>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x498>
 80030f6:	e01e      	b.n	8003136 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	69db      	ldr	r3, [r3, #28]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d107      	bne.n	8003110 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e019      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
 8003104:	40021000 	.word	0x40021000
 8003108:	40007000 	.word	0x40007000
 800310c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_OscConfig+0x500>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	429a      	cmp	r2, r3
 8003122:	d106      	bne.n	8003132 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d001      	beq.n	8003136 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e000      	b.n	8003138 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3718      	adds	r7, #24
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b084      	sub	sp, #16
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
 800314c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e0d0      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003158:	4b6a      	ldr	r3, [pc, #424]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d910      	bls.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b67      	ldr	r3, [pc, #412]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4965      	ldr	r1, [pc, #404]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e0b8      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f003 0304 	and.w	r3, r3, #4
 800319c:	2b00      	cmp	r3, #0
 800319e:	d005      	beq.n	80031ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031a0:	4b59      	ldr	r3, [pc, #356]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	4a58      	ldr	r2, [pc, #352]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80031aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0308 	and.w	r3, r3, #8
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d005      	beq.n	80031c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b8:	4b53      	ldr	r3, [pc, #332]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	4a52      	ldr	r2, [pc, #328]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80031c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031c4:	4b50      	ldr	r3, [pc, #320]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	494d      	ldr	r1, [pc, #308]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031d2:	4313      	orrs	r3, r2
 80031d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d040      	beq.n	8003264 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d107      	bne.n	80031fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ea:	4b47      	ldr	r3, [pc, #284]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d115      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e07f      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d107      	bne.n	8003212 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003202:	4b41      	ldr	r3, [pc, #260]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d109      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e073      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003212:	4b3d      	ldr	r3, [pc, #244]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e06b      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	f023 0203 	bic.w	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4936      	ldr	r1, [pc, #216]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003234:	f7fd ff2a 	bl	800108c <HAL_GetTick>
 8003238:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323a:	e00a      	b.n	8003252 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800323c:	f7fd ff26 	bl	800108c <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	f241 3288 	movw	r2, #5000	; 0x1388
 800324a:	4293      	cmp	r3, r2
 800324c:	d901      	bls.n	8003252 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800324e:	2303      	movs	r3, #3
 8003250:	e053      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003252:	4b2d      	ldr	r3, [pc, #180]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 020c 	and.w	r2, r3, #12
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	429a      	cmp	r2, r3
 8003262:	d1eb      	bne.n	800323c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003264:	4b27      	ldr	r3, [pc, #156]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0307 	and.w	r3, r3, #7
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	429a      	cmp	r2, r3
 8003270:	d210      	bcs.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f023 0207 	bic.w	r2, r3, #7
 800327a:	4922      	ldr	r1, [pc, #136]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	4313      	orrs	r3, r2
 8003280:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_RCC_ClockConfig+0x1c0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0307 	and.w	r3, r3, #7
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	429a      	cmp	r2, r3
 800328e:	d001      	beq.n	8003294 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e032      	b.n	80032fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d008      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032a0:	4b19      	ldr	r3, [pc, #100]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	4916      	ldr	r1, [pc, #88]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d009      	beq.n	80032d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80032be:	4b12      	ldr	r3, [pc, #72]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	490e      	ldr	r1, [pc, #56]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80032d2:	f000 f821 	bl	8003318 <HAL_RCC_GetSysClockFreq>
 80032d6:	4602      	mov	r2, r0
 80032d8:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <HAL_RCC_ClockConfig+0x1c4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	091b      	lsrs	r3, r3, #4
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	490a      	ldr	r1, [pc, #40]	; (800330c <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ea:	4a09      	ldr	r2, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1cc>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80032ee:	4b09      	ldr	r3, [pc, #36]	; (8003314 <HAL_RCC_ClockConfig+0x1d0>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd fe9a 	bl	800102c <HAL_InitTick>

  return HAL_OK;
 80032f8:	2300      	movs	r3, #0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3710      	adds	r7, #16
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
 8003302:	bf00      	nop
 8003304:	40022000 	.word	0x40022000
 8003308:	40021000 	.word	0x40021000
 800330c:	08008a54 	.word	0x08008a54
 8003310:	20000014 	.word	0x20000014
 8003314:	20000018 	.word	0x20000018

08003318 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003318:	b490      	push	{r4, r7}
 800331a:	b08a      	sub	sp, #40	; 0x28
 800331c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800331e:	4b29      	ldr	r3, [pc, #164]	; (80033c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003320:	1d3c      	adds	r4, r7, #4
 8003322:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003324:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003328:	f240 2301 	movw	r3, #513	; 0x201
 800332c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800332e:	2300      	movs	r3, #0
 8003330:	61fb      	str	r3, [r7, #28]
 8003332:	2300      	movs	r3, #0
 8003334:	61bb      	str	r3, [r7, #24]
 8003336:	2300      	movs	r3, #0
 8003338:	627b      	str	r3, [r7, #36]	; 0x24
 800333a:	2300      	movs	r3, #0
 800333c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800333e:	2300      	movs	r3, #0
 8003340:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003342:	4b21      	ldr	r3, [pc, #132]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 030c 	and.w	r3, r3, #12
 800334e:	2b04      	cmp	r3, #4
 8003350:	d002      	beq.n	8003358 <HAL_RCC_GetSysClockFreq+0x40>
 8003352:	2b08      	cmp	r3, #8
 8003354:	d003      	beq.n	800335e <HAL_RCC_GetSysClockFreq+0x46>
 8003356:	e02b      	b.n	80033b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003358:	4b1c      	ldr	r3, [pc, #112]	; (80033cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800335a:	623b      	str	r3, [r7, #32]
      break;
 800335c:	e02b      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800335e:	69fb      	ldr	r3, [r7, #28]
 8003360:	0c9b      	lsrs	r3, r3, #18
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	3328      	adds	r3, #40	; 0x28
 8003368:	443b      	add	r3, r7
 800336a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800336e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d012      	beq.n	80033a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800337a:	4b13      	ldr	r3, [pc, #76]	; (80033c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	0c5b      	lsrs	r3, r3, #17
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	3328      	adds	r3, #40	; 0x28
 8003386:	443b      	add	r3, r7
 8003388:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800338c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003392:	fb03 f202 	mul.w	r2, r3, r2
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	fbb2 f3f3 	udiv	r3, r2, r3
 800339c:	627b      	str	r3, [r7, #36]	; 0x24
 800339e:	e004      	b.n	80033aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80033a4:	fb02 f303 	mul.w	r3, r2, r3
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80033aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ac:	623b      	str	r3, [r7, #32]
      break;
 80033ae:	e002      	b.n	80033b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80033b0:	4b06      	ldr	r3, [pc, #24]	; (80033cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80033b2:	623b      	str	r3, [r7, #32]
      break;
 80033b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033b6:	6a3b      	ldr	r3, [r7, #32]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	3728      	adds	r7, #40	; 0x28
 80033bc:	46bd      	mov	sp, r7
 80033be:	bc90      	pop	{r4, r7}
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	080089fc 	.word	0x080089fc
 80033c8:	40021000 	.word	0x40021000
 80033cc:	007a1200 	.word	0x007a1200
 80033d0:	003d0900 	.word	0x003d0900

080033d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033dc:	4b0a      	ldr	r3, [pc, #40]	; (8003408 <RCC_Delay+0x34>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a0a      	ldr	r2, [pc, #40]	; (800340c <RCC_Delay+0x38>)
 80033e2:	fba2 2303 	umull	r2, r3, r2, r3
 80033e6:	0a5b      	lsrs	r3, r3, #9
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	fb02 f303 	mul.w	r3, r2, r3
 80033ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033f0:	bf00      	nop
  }
  while (Delay --);
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	1e5a      	subs	r2, r3, #1
 80033f6:	60fa      	str	r2, [r7, #12]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d1f9      	bne.n	80033f0 <RCC_Delay+0x1c>
}
 80033fc:	bf00      	nop
 80033fe:	bf00      	nop
 8003400:	3714      	adds	r7, #20
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	20000014 	.word	0x20000014
 800340c:	10624dd3 	.word	0x10624dd3

08003410 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003418:	2300      	movs	r3, #0
 800341a:	613b      	str	r3, [r7, #16]
 800341c:	2300      	movs	r3, #0
 800341e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d07d      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800342c:	2300      	movs	r3, #0
 800342e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003430:	4b4f      	ldr	r3, [pc, #316]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003432:	69db      	ldr	r3, [r3, #28]
 8003434:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d10d      	bne.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343c:	4b4c      	ldr	r3, [pc, #304]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	4a4b      	ldr	r2, [pc, #300]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003446:	61d3      	str	r3, [r2, #28]
 8003448:	4b49      	ldr	r3, [pc, #292]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344a:	69db      	ldr	r3, [r3, #28]
 800344c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003450:	60bb      	str	r3, [r7, #8]
 8003452:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003454:	2301      	movs	r3, #1
 8003456:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003458:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003460:	2b00      	cmp	r3, #0
 8003462:	d118      	bne.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003464:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a42      	ldr	r2, [pc, #264]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003470:	f7fd fe0c 	bl	800108c <HAL_GetTick>
 8003474:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003476:	e008      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003478:	f7fd fe08 	bl	800108c <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	1ad3      	subs	r3, r2, r3
 8003482:	2b64      	cmp	r3, #100	; 0x64
 8003484:	d901      	bls.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e06d      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348a:	4b3a      	ldr	r3, [pc, #232]	; (8003574 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003492:	2b00      	cmp	r3, #0
 8003494:	d0f0      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003496:	4b36      	ldr	r3, [pc, #216]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003498:	6a1b      	ldr	r3, [r3, #32]
 800349a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800349e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d02e      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d027      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034b4:	4b2e      	ldr	r3, [pc, #184]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b6:	6a1b      	ldr	r3, [r3, #32]
 80034b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034bc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80034be:	4b2e      	ldr	r3, [pc, #184]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c0:	2201      	movs	r2, #1
 80034c2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80034c4:	4b2c      	ldr	r3, [pc, #176]	; (8003578 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80034c6:	2200      	movs	r2, #0
 80034c8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80034ca:	4a29      	ldr	r2, [pc, #164]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d014      	beq.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fd fdd7 	bl	800108c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e0:	e00a      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e2:	f7fd fdd3 	bl	800108c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d901      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80034f4:	2303      	movs	r3, #3
 80034f6:	e036      	b.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f8:	4b1d      	ldr	r3, [pc, #116]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034fa:	6a1b      	ldr	r3, [r3, #32]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b00      	cmp	r3, #0
 8003502:	d0ee      	beq.n	80034e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003504:	4b1a      	ldr	r3, [pc, #104]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003506:	6a1b      	ldr	r3, [r3, #32]
 8003508:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4917      	ldr	r1, [pc, #92]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003512:	4313      	orrs	r3, r2
 8003514:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003516:	7dfb      	ldrb	r3, [r7, #23]
 8003518:	2b01      	cmp	r3, #1
 800351a:	d105      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800351c:	4b14      	ldr	r3, [pc, #80]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800351e:	69db      	ldr	r3, [r3, #28]
 8003520:	4a13      	ldr	r2, [pc, #76]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003526:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d008      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003534:	4b0e      	ldr	r3, [pc, #56]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	490b      	ldr	r1, [pc, #44]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003542:	4313      	orrs	r3, r2
 8003544:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f003 0310 	and.w	r3, r3, #16
 800354e:	2b00      	cmp	r3, #0
 8003550:	d008      	beq.n	8003564 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003552:	4b07      	ldr	r3, [pc, #28]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	695b      	ldr	r3, [r3, #20]
 800355e:	4904      	ldr	r1, [pc, #16]	; (8003570 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003560:	4313      	orrs	r3, r2
 8003562:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	4618      	mov	r0, r3
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40021000 	.word	0x40021000
 8003574:	40007000 	.word	0x40007000
 8003578:	42420440 	.word	0x42420440

0800357c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800357c:	b084      	sub	sp, #16
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	f107 0014 	add.w	r0, r7, #20
 800358a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800358e:	2300      	movs	r3, #0
}
 8003590:	4618      	mov	r0, r3
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	bc80      	pop	{r7}
 8003598:	b004      	add	sp, #16
 800359a:	4770      	bx	lr

0800359c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 800359c:	b480      	push	{r7}
 800359e:	b085      	sub	sp, #20
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035ac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035b0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035bc:	2300      	movs	r3, #0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3714      	adds	r7, #20
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bc80      	pop	{r7}
 80035c6:	4770      	bx	lr

080035c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80035d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80035d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80035dc:	b29a      	uxth	r2, r3
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	43db      	mvns	r3, r3
 80035e4:	b29b      	uxth	r3, r3
 80035e6:	4013      	ands	r3, r2
 80035e8:	b29a      	uxth	r2, r3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3714      	adds	r7, #20
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bc80      	pop	{r7}
 80035fa:	4770      	bx	lr

080035fc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	460b      	mov	r3, r1
 8003606:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	bc80      	pop	{r7}
 8003612:	4770      	bx	lr

08003614 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003614:	b084      	sub	sp, #16
 8003616:	b480      	push	{r7}
 8003618:	b083      	sub	sp, #12
 800361a:	af00      	add	r7, sp, #0
 800361c:	6078      	str	r0, [r7, #4]
 800361e:	f107 0014 	add.w	r0, r7, #20
 8003622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2201      	movs	r2, #1
 800362a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003646:	2300      	movs	r3, #0
}
 8003648:	4618      	mov	r0, r3
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	bc80      	pop	{r7}
 8003650:	b004      	add	sp, #16
 8003652:	4770      	bx	lr

08003654 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003654:	b480      	push	{r7}
 8003656:	b09b      	sub	sp, #108	; 0x6c
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800365e:	2300      	movs	r3, #0
 8003660:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	881b      	ldrh	r3, [r3, #0]
 8003670:	b29b      	uxth	r3, r3
 8003672:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003676:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800367a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	78db      	ldrb	r3, [r3, #3]
 8003682:	2b03      	cmp	r3, #3
 8003684:	d81f      	bhi.n	80036c6 <USB_ActivateEndpoint+0x72>
 8003686:	a201      	add	r2, pc, #4	; (adr r2, 800368c <USB_ActivateEndpoint+0x38>)
 8003688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368c:	0800369d 	.word	0x0800369d
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036cf 	.word	0x080036cf
 8003698:	080036ab 	.word	0x080036ab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800369c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036a4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036a8:	e012      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80036aa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036ae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80036b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036b6:	e00b      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80036b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036bc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80036c4:	e004      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80036cc:	e000      	b.n	80036d0 <USB_ActivateEndpoint+0x7c>
      break;
 80036ce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	441a      	add	r2, r3
 80036da:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80036de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80036e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80036e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80036ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ee:	b29b      	uxth	r3, r3
 80036f0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	009b      	lsls	r3, r3, #2
 80036fa:	4413      	add	r3, r2
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	b29b      	uxth	r3, r3
 8003700:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003708:	b29a      	uxth	r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	781b      	ldrb	r3, [r3, #0]
 800370e:	b29b      	uxth	r3, r3
 8003710:	4313      	orrs	r3, r2
 8003712:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	441a      	add	r2, r3
 8003720:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003724:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003728:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800372c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003730:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003734:	b29b      	uxth	r3, r3
 8003736:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	7b1b      	ldrb	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	f040 8149 	bne.w	80039d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	785b      	ldrb	r3, [r3, #1]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 8084 	beq.w	8003854 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	617b      	str	r3, [r7, #20]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003756:	b29b      	uxth	r3, r3
 8003758:	461a      	mov	r2, r3
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	4413      	add	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	011a      	lsls	r2, r3, #4
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	4413      	add	r3, r2
 800376a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800376e:	613b      	str	r3, [r7, #16]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	88db      	ldrh	r3, [r3, #6]
 8003774:	085b      	lsrs	r3, r3, #1
 8003776:	b29b      	uxth	r3, r3
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003780:	687a      	ldr	r2, [r7, #4]
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	881b      	ldrh	r3, [r3, #0]
 800378c:	81fb      	strh	r3, [r7, #14]
 800378e:	89fb      	ldrh	r3, [r7, #14]
 8003790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01b      	beq.n	80037d0 <USB_ActivateEndpoint+0x17c>
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	4413      	add	r3, r2
 80037a2:	881b      	ldrh	r3, [r3, #0]
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037ae:	81bb      	strh	r3, [r7, #12]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	89bb      	ldrh	r3, [r7, #12]
 80037bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80037c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80037c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037c8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	78db      	ldrb	r3, [r3, #3]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d020      	beq.n	800381a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	4413      	add	r3, r2
 80037e2:	881b      	ldrh	r3, [r3, #0]
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037ee:	813b      	strh	r3, [r7, #8]
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	f083 0320 	eor.w	r3, r3, #32
 80037f6:	813b      	strh	r3, [r7, #8]
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	441a      	add	r2, r3
 8003802:	893b      	ldrh	r3, [r7, #8]
 8003804:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003808:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003814:	b29b      	uxth	r3, r3
 8003816:	8013      	strh	r3, [r2, #0]
 8003818:	e27f      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	4413      	add	r3, r2
 8003824:	881b      	ldrh	r3, [r3, #0]
 8003826:	b29b      	uxth	r3, r3
 8003828:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800382c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003830:	817b      	strh	r3, [r7, #10]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	441a      	add	r2, r3
 800383c:	897b      	ldrh	r3, [r7, #10]
 800383e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003842:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003846:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800384a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800384e:	b29b      	uxth	r3, r3
 8003850:	8013      	strh	r3, [r2, #0]
 8003852:	e262      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800385e:	b29b      	uxth	r3, r3
 8003860:	461a      	mov	r2, r3
 8003862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003864:	4413      	add	r3, r2
 8003866:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	781b      	ldrb	r3, [r3, #0]
 800386c:	011a      	lsls	r2, r3, #4
 800386e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003870:	4413      	add	r3, r2
 8003872:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003876:	62bb      	str	r3, [r7, #40]	; 0x28
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	88db      	ldrh	r3, [r3, #6]
 800387c:	085b      	lsrs	r3, r3, #1
 800387e:	b29b      	uxth	r3, r3
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	b29a      	uxth	r2, r3
 8003884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003886:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	627b      	str	r3, [r7, #36]	; 0x24
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003892:	b29b      	uxth	r3, r3
 8003894:	461a      	mov	r2, r3
 8003896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003898:	4413      	add	r3, r2
 800389a:	627b      	str	r3, [r7, #36]	; 0x24
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	011a      	lsls	r2, r3, #4
 80038a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038a4:	4413      	add	r3, r2
 80038a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80038aa:	623b      	str	r3, [r7, #32]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d112      	bne.n	80038da <USB_ActivateEndpoint+0x286>
 80038b4:	6a3b      	ldr	r3, [r7, #32]
 80038b6:	881b      	ldrh	r3, [r3, #0]
 80038b8:	b29b      	uxth	r3, r3
 80038ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80038be:	b29a      	uxth	r2, r3
 80038c0:	6a3b      	ldr	r3, [r7, #32]
 80038c2:	801a      	strh	r2, [r3, #0]
 80038c4:	6a3b      	ldr	r3, [r7, #32]
 80038c6:	881b      	ldrh	r3, [r3, #0]
 80038c8:	b29b      	uxth	r3, r3
 80038ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80038ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	801a      	strh	r2, [r3, #0]
 80038d8:	e02f      	b.n	800393a <USB_ActivateEndpoint+0x2e6>
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b3e      	cmp	r3, #62	; 0x3e
 80038e0:	d813      	bhi.n	800390a <USB_ActivateEndpoint+0x2b6>
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	085b      	lsrs	r3, r3, #1
 80038e8:	663b      	str	r3, [r7, #96]	; 0x60
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <USB_ActivateEndpoint+0x2a8>
 80038f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038f8:	3301      	adds	r3, #1
 80038fa:	663b      	str	r3, [r7, #96]	; 0x60
 80038fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038fe:	b29b      	uxth	r3, r3
 8003900:	029b      	lsls	r3, r3, #10
 8003902:	b29a      	uxth	r2, r3
 8003904:	6a3b      	ldr	r3, [r7, #32]
 8003906:	801a      	strh	r2, [r3, #0]
 8003908:	e017      	b.n	800393a <USB_ActivateEndpoint+0x2e6>
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	663b      	str	r3, [r7, #96]	; 0x60
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	f003 031f 	and.w	r3, r3, #31
 800391a:	2b00      	cmp	r3, #0
 800391c:	d102      	bne.n	8003924 <USB_ActivateEndpoint+0x2d0>
 800391e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003920:	3b01      	subs	r3, #1
 8003922:	663b      	str	r3, [r7, #96]	; 0x60
 8003924:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003926:	b29b      	uxth	r3, r3
 8003928:	029b      	lsls	r3, r3, #10
 800392a:	b29b      	uxth	r3, r3
 800392c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003930:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003934:	b29a      	uxth	r2, r3
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	881b      	ldrh	r3, [r3, #0]
 8003946:	83fb      	strh	r3, [r7, #30]
 8003948:	8bfb      	ldrh	r3, [r7, #30]
 800394a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d01b      	beq.n	800398a <USB_ActivateEndpoint+0x336>
 8003952:	687a      	ldr	r2, [r7, #4]
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	009b      	lsls	r3, r3, #2
 800395a:	4413      	add	r3, r2
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	b29b      	uxth	r3, r3
 8003960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003968:	83bb      	strh	r3, [r7, #28]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	441a      	add	r2, r3
 8003974:	8bbb      	ldrh	r3, [r7, #28]
 8003976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800397a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800397e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003986:	b29b      	uxth	r3, r3
 8003988:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	4413      	add	r3, r2
 8003994:	881b      	ldrh	r3, [r3, #0]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800399c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039a0:	837b      	strh	r3, [r7, #26]
 80039a2:	8b7b      	ldrh	r3, [r7, #26]
 80039a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80039a8:	837b      	strh	r3, [r7, #26]
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80039b0:	837b      	strh	r3, [r7, #26]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	009b      	lsls	r3, r3, #2
 80039ba:	441a      	add	r2, r3
 80039bc:	8b7b      	ldrh	r3, [r7, #26]
 80039be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	8013      	strh	r3, [r2, #0]
 80039d2:	e1a2      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80039d4:	687a      	ldr	r2, [r7, #4]
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	881b      	ldrh	r3, [r3, #0]
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	441a      	add	r2, r3
 80039f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80039fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a00:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a04:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003a08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a0c:	b29b      	uxth	r3, r3
 8003a0e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a20:	4413      	add	r3, r2
 8003a22:	65bb      	str	r3, [r7, #88]	; 0x58
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	011a      	lsls	r2, r3, #4
 8003a2a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003a32:	657b      	str	r3, [r7, #84]	; 0x54
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	891b      	ldrh	r3, [r3, #8]
 8003a38:	085b      	lsrs	r3, r3, #1
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a42:	801a      	strh	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	461a      	mov	r2, r3
 8003a52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a54:	4413      	add	r3, r2
 8003a56:	653b      	str	r3, [r7, #80]	; 0x50
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	011a      	lsls	r2, r3, #4
 8003a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	895b      	ldrh	r3, [r3, #10]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	005b      	lsls	r3, r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a76:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	785b      	ldrb	r3, [r3, #1]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	f040 8091 	bne.w	8003ba4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	881b      	ldrh	r3, [r3, #0]
 8003a8e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003a90:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003a92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d01b      	beq.n	8003ad2 <USB_ActivateEndpoint+0x47e>
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	683b      	ldr	r3, [r7, #0]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	009b      	lsls	r3, r3, #2
 8003aa2:	4413      	add	r3, r2
 8003aa4:	881b      	ldrh	r3, [r3, #0]
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	441a      	add	r2, r3
 8003abc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003abe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ac2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ac6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ad2:	687a      	ldr	r2, [r7, #4]
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4413      	add	r3, r2
 8003adc:	881b      	ldrh	r3, [r3, #0]
 8003ade:	873b      	strh	r3, [r7, #56]	; 0x38
 8003ae0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d01b      	beq.n	8003b22 <USB_ActivateEndpoint+0x4ce>
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781b      	ldrb	r3, [r3, #0]
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	4413      	add	r3, r2
 8003af4:	881b      	ldrh	r3, [r3, #0]
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b00:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	009b      	lsls	r3, r3, #2
 8003b0a:	441a      	add	r2, r3
 8003b0c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003b1e:	b29b      	uxth	r3, r3
 8003b20:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	881b      	ldrh	r3, [r3, #0]
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b38:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b3a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b3c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003b40:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b44:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003b48:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	781b      	ldrb	r3, [r3, #0]
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	441a      	add	r2, r3
 8003b54:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003b56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b66:	b29b      	uxth	r3, r3
 8003b68:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4413      	add	r3, r2
 8003b74:	881b      	ldrh	r3, [r3, #0]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b80:	867b      	strh	r3, [r7, #50]	; 0x32
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	441a      	add	r2, r3
 8003b8c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003b8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003b92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003b96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	8013      	strh	r3, [r2, #0]
 8003ba2:	e0ba      	b.n	8003d1a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ba4:	687a      	ldr	r2, [r7, #4]
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	781b      	ldrb	r3, [r3, #0]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	4413      	add	r3, r2
 8003bae:	881b      	ldrh	r3, [r3, #0]
 8003bb0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003bb4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01d      	beq.n	8003bfc <USB_ActivateEndpoint+0x5a8>
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	4413      	add	r3, r2
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	441a      	add	r2, r3
 8003be4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003be8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bf0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	4413      	add	r3, r2
 8003c06:	881b      	ldrh	r3, [r3, #0]
 8003c08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003c0c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d01d      	beq.n	8003c54 <USB_ActivateEndpoint+0x600>
 8003c18:	687a      	ldr	r2, [r7, #4]
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	4413      	add	r3, r2
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	b29b      	uxth	r3, r3
 8003c26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	009b      	lsls	r3, r3, #2
 8003c3a:	441a      	add	r2, r3
 8003c3c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003c50:	b29b      	uxth	r3, r3
 8003c52:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	78db      	ldrb	r3, [r3, #3]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d024      	beq.n	8003ca6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	009b      	lsls	r3, r3, #2
 8003c64:	4413      	add	r3, r2
 8003c66:	881b      	ldrh	r3, [r3, #0]
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c72:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c76:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c7a:	f083 0320 	eor.w	r3, r3, #32
 8003c7e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003c82:	687a      	ldr	r2, [r7, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	441a      	add	r2, r3
 8003c8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003c90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ca0:	b29b      	uxth	r3, r3
 8003ca2:	8013      	strh	r3, [r2, #0]
 8003ca4:	e01d      	b.n	8003ce2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	009b      	lsls	r3, r3, #2
 8003cae:	4413      	add	r3, r2
 8003cb0:	881b      	ldrh	r3, [r3, #0]
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003cbc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	781b      	ldrb	r3, [r3, #0]
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	441a      	add	r2, r3
 8003cca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003cce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	009b      	lsls	r3, r3, #2
 8003cea:	4413      	add	r3, r2
 8003cec:	881b      	ldrh	r3, [r3, #0]
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cf4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003cfa:	687a      	ldr	r2, [r7, #4]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	781b      	ldrb	r3, [r3, #0]
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	441a      	add	r2, r3
 8003d04:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003d06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	376c      	adds	r7, #108	; 0x6c
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bc80      	pop	{r7}
 8003d26:	4770      	bx	lr

08003d28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b08d      	sub	sp, #52	; 0x34
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	7b1b      	ldrb	r3, [r3, #12]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f040 808e 	bne.w	8003e58 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	785b      	ldrb	r3, [r3, #1]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d044      	beq.n	8003dce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	4413      	add	r3, r2
 8003d4e:	881b      	ldrh	r3, [r3, #0]
 8003d50:	81bb      	strh	r3, [r7, #12]
 8003d52:	89bb      	ldrh	r3, [r7, #12]
 8003d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d01b      	beq.n	8003d94 <USB_DeactivateEndpoint+0x6c>
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	781b      	ldrb	r3, [r3, #0]
 8003d62:	009b      	lsls	r3, r3, #2
 8003d64:	4413      	add	r3, r2
 8003d66:	881b      	ldrh	r3, [r3, #0]
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d72:	817b      	strh	r3, [r7, #10]
 8003d74:	687a      	ldr	r2, [r7, #4]
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	781b      	ldrb	r3, [r3, #0]
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	441a      	add	r2, r3
 8003d7e:	897b      	ldrh	r3, [r7, #10]
 8003d80:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d84:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d88:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d8c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d90:	b29b      	uxth	r3, r3
 8003d92:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003da6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003daa:	813b      	strh	r3, [r7, #8]
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	441a      	add	r2, r3
 8003db6:	893b      	ldrh	r3, [r7, #8]
 8003db8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	8013      	strh	r3, [r2, #0]
 8003dcc:	e192      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	4413      	add	r3, r2
 8003dd8:	881b      	ldrh	r3, [r3, #0]
 8003dda:	827b      	strh	r3, [r7, #18]
 8003ddc:	8a7b      	ldrh	r3, [r7, #18]
 8003dde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d01b      	beq.n	8003e1e <USB_DeactivateEndpoint+0xf6>
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	009b      	lsls	r3, r3, #2
 8003dee:	4413      	add	r3, r2
 8003df0:	881b      	ldrh	r3, [r3, #0]
 8003df2:	b29b      	uxth	r3, r3
 8003df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dfc:	823b      	strh	r3, [r7, #16]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	441a      	add	r2, r3
 8003e08:	8a3b      	ldrh	r3, [r7, #16]
 8003e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	4413      	add	r3, r2
 8003e28:	881b      	ldrh	r3, [r3, #0]
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e34:	81fb      	strh	r3, [r7, #14]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	781b      	ldrb	r3, [r3, #0]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	441a      	add	r2, r3
 8003e40:	89fb      	ldrh	r3, [r7, #14]
 8003e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e52:	b29b      	uxth	r3, r3
 8003e54:	8013      	strh	r3, [r2, #0]
 8003e56:	e14d      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	785b      	ldrb	r3, [r3, #1]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	f040 80a5 	bne.w	8003fac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	4413      	add	r3, r2
 8003e6c:	881b      	ldrh	r3, [r3, #0]
 8003e6e:	843b      	strh	r3, [r7, #32]
 8003e70:	8c3b      	ldrh	r3, [r7, #32]
 8003e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d01b      	beq.n	8003eb2 <USB_DeactivateEndpoint+0x18a>
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	881b      	ldrh	r3, [r3, #0]
 8003e86:	b29b      	uxth	r3, r3
 8003e88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e90:	83fb      	strh	r3, [r7, #30]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	441a      	add	r2, r3
 8003e9c:	8bfb      	ldrh	r3, [r7, #30]
 8003e9e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ea2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ea6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003eaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	781b      	ldrb	r3, [r3, #0]
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	4413      	add	r3, r2
 8003ebc:	881b      	ldrh	r3, [r3, #0]
 8003ebe:	83bb      	strh	r3, [r7, #28]
 8003ec0:	8bbb      	ldrh	r3, [r7, #28]
 8003ec2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d01b      	beq.n	8003f02 <USB_DeactivateEndpoint+0x1da>
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	009b      	lsls	r3, r3, #2
 8003ed2:	4413      	add	r3, r2
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	837b      	strh	r3, [r7, #26]
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	009b      	lsls	r3, r3, #2
 8003eea:	441a      	add	r2, r3
 8003eec:	8b7b      	ldrh	r3, [r7, #26]
 8003eee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ef2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ef6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003efa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	4413      	add	r3, r2
 8003f0c:	881b      	ldrh	r3, [r3, #0]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f18:	833b      	strh	r3, [r7, #24]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	441a      	add	r2, r3
 8003f24:	8b3b      	ldrh	r3, [r7, #24]
 8003f26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f32:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003f36:	b29b      	uxth	r3, r3
 8003f38:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f50:	82fb      	strh	r3, [r7, #22]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	441a      	add	r2, r3
 8003f5c:	8afb      	ldrh	r3, [r7, #22]
 8003f5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f6e:	b29b      	uxth	r3, r3
 8003f70:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	781b      	ldrb	r3, [r3, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	4413      	add	r3, r2
 8003f7c:	881b      	ldrh	r3, [r3, #0]
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f88:	82bb      	strh	r3, [r7, #20]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	009b      	lsls	r3, r3, #2
 8003f92:	441a      	add	r2, r3
 8003f94:	8abb      	ldrh	r3, [r7, #20]
 8003f96:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f9a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	8013      	strh	r3, [r2, #0]
 8003faa:	e0a3      	b.n	80040f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	4413      	add	r3, r2
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8003fba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d01b      	beq.n	8003ffc <USB_DeactivateEndpoint+0x2d4>
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	4413      	add	r3, r2
 8003fce:	881b      	ldrh	r3, [r3, #0]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fda:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003fdc:	687a      	ldr	r2, [r7, #4]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	441a      	add	r2, r3
 8003fe6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003fe8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	009b      	lsls	r3, r3, #2
 8004004:	4413      	add	r3, r2
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	857b      	strh	r3, [r7, #42]	; 0x2a
 800400a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800400c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004010:	2b00      	cmp	r3, #0
 8004012:	d01b      	beq.n	800404c <USB_DeactivateEndpoint+0x324>
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	881b      	ldrh	r3, [r3, #0]
 8004020:	b29b      	uxth	r3, r3
 8004022:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800402a:	853b      	strh	r3, [r7, #40]	; 0x28
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	441a      	add	r2, r3
 8004036:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004038:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800403c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004040:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004044:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004048:	b29b      	uxth	r3, r3
 800404a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	009b      	lsls	r3, r3, #2
 8004054:	4413      	add	r3, r2
 8004056:	881b      	ldrh	r3, [r3, #0]
 8004058:	b29b      	uxth	r3, r3
 800405a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	441a      	add	r2, r3
 800406e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004070:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004074:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004078:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800407c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004080:	b29b      	uxth	r3, r3
 8004082:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	781b      	ldrb	r3, [r3, #0]
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	4413      	add	r3, r2
 800408e:	881b      	ldrh	r3, [r3, #0]
 8004090:	b29b      	uxth	r3, r3
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004096:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800409a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	441a      	add	r2, r3
 80040a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80040a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	009b      	lsls	r3, r3, #2
 80040c4:	4413      	add	r3, r2
 80040c6:	881b      	ldrh	r3, [r3, #0]
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80040ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	441a      	add	r2, r3
 80040de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80040e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3734      	adds	r7, #52	; 0x34
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b0cc      	sub	sp, #304	; 0x130
 8004104:	af00      	add	r7, sp, #0
 8004106:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800410a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800410e:	6018      	str	r0, [r3, #0]
 8004110:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004114:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004118:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800411a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800411e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	785b      	ldrb	r3, [r3, #1]
 8004126:	2b01      	cmp	r3, #1
 8004128:	f041 817d 	bne.w	8005426 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800412c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004130:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	699a      	ldr	r2, [r3, #24]
 8004138:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800413c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d908      	bls.n	800415a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004148:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800414c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	691b      	ldr	r3, [r3, #16]
 8004154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004158:	e007      	b.n	800416a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800415a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800415e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800416a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800416e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	7b1b      	ldrb	r3, [r3, #12]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d152      	bne.n	8004220 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800417a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800417e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6959      	ldr	r1, [r3, #20]
 8004186:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800418a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	88da      	ldrh	r2, [r3, #6]
 8004192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004196:	b29b      	uxth	r3, r3
 8004198:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800419c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80041a0:	6800      	ldr	r0, [r0, #0]
 80041a2:	f001 ff23 	bl	8005fec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80041a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80041b6:	6812      	ldr	r2, [r2, #0]
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	4619      	mov	r1, r3
 80041cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80041d8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80041dc:	6812      	ldr	r2, [r2, #0]
 80041de:	440a      	add	r2, r1
 80041e0:	601a      	str	r2, [r3, #0]
 80041e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	011a      	lsls	r2, r3, #4
 80041f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80041f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4413      	add	r3, r2
 80041fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004204:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800420e:	b29a      	uxth	r2, r3
 8004210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004214:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	801a      	strh	r2, [r3, #0]
 800421c:	f001 b8b5 	b.w	800538a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	78db      	ldrb	r3, [r3, #3]
 800422c:	2b02      	cmp	r3, #2
 800422e:	f040 84c6 	bne.w	8004bbe <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004232:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004236:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	6a1a      	ldr	r2, [r3, #32]
 800423e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004242:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	429a      	cmp	r2, r3
 800424c:	f240 8443 	bls.w	8004ad6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004250:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004254:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800425e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	881b      	ldrh	r3, [r3, #0]
 800426c:	b29b      	uxth	r3, r3
 800426e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800427a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800427e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004288:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	441a      	add	r2, r3
 8004294:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004298:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800429c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80042a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a8:	b29b      	uxth	r3, r3
 80042aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80042ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	6a1a      	ldr	r2, [r3, #32]
 80042b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80042bc:	1ad2      	subs	r2, r2, r3
 80042be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80042ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80042d2:	681a      	ldr	r2, [r3, #0]
 80042d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	4413      	add	r3, r2
 80042e4:	881b      	ldrh	r3, [r3, #0]
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 823e 	beq.w	800476e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80042f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80042f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80042fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80042fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004302:	6812      	ldr	r2, [r2, #0]
 8004304:	601a      	str	r2, [r3, #0]
 8004306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800430a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	785b      	ldrb	r3, [r3, #1]
 8004312:	2b00      	cmp	r3, #0
 8004314:	f040 809a 	bne.w	800444c <USB_EPStartXfer+0x34c>
 8004318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800431c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004320:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004324:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004330:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800433a:	b29b      	uxth	r3, r3
 800433c:	4619      	mov	r1, r3
 800433e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004342:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004346:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800434a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800434e:	6812      	ldr	r2, [r2, #0]
 8004350:	440a      	add	r2, r1
 8004352:	601a      	str	r2, [r3, #0]
 8004354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	781b      	ldrb	r3, [r3, #0]
 8004360:	011a      	lsls	r2, r3, #4
 8004362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004366:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4413      	add	r3, r2
 800436e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004372:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004376:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800437a:	601a      	str	r2, [r3, #0]
 800437c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004380:	2b00      	cmp	r3, #0
 8004382:	d122      	bne.n	80043ca <USB_EPStartXfer+0x2ca>
 8004384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004388:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	881b      	ldrh	r3, [r3, #0]
 8004390:	b29b      	uxth	r3, r3
 8004392:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004396:	b29a      	uxth	r2, r3
 8004398:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800439c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	801a      	strh	r2, [r3, #0]
 80043a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80043b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80043ba:	b29a      	uxth	r2, r3
 80043bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	801a      	strh	r2, [r3, #0]
 80043c8:	e079      	b.n	80044be <USB_EPStartXfer+0x3be>
 80043ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ce:	2b3e      	cmp	r3, #62	; 0x3e
 80043d0:	d81b      	bhi.n	800440a <USB_EPStartXfer+0x30a>
 80043d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d004      	beq.n	80043f2 <USB_EPStartXfer+0x2f2>
 80043e8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043ec:	3301      	adds	r3, #1
 80043ee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80043f2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80043f6:	b29b      	uxth	r3, r3
 80043f8:	029b      	lsls	r3, r3, #10
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004400:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	801a      	strh	r2, [r3, #0]
 8004408:	e059      	b.n	80044be <USB_EPStartXfer+0x3be>
 800440a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800440e:	095b      	lsrs	r3, r3, #5
 8004410:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004414:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004418:	f003 031f 	and.w	r3, r3, #31
 800441c:	2b00      	cmp	r3, #0
 800441e:	d104      	bne.n	800442a <USB_EPStartXfer+0x32a>
 8004420:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004424:	3b01      	subs	r3, #1
 8004426:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800442a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800442e:	b29b      	uxth	r3, r3
 8004430:	029b      	lsls	r3, r3, #10
 8004432:	b29b      	uxth	r3, r3
 8004434:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004438:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443c:	b29a      	uxth	r2, r3
 800443e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004442:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	801a      	strh	r2, [r3, #0]
 800444a:	e038      	b.n	80044be <USB_EPStartXfer+0x3be>
 800444c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004450:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d130      	bne.n	80044be <USB_EPStartXfer+0x3be>
 800445c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004460:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800446a:	b29b      	uxth	r3, r3
 800446c:	4619      	mov	r1, r3
 800446e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004472:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004476:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800447a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800447e:	6812      	ldr	r2, [r2, #0]
 8004480:	440a      	add	r2, r1
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	011a      	lsls	r2, r3, #4
 8004492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004496:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4413      	add	r3, r2
 800449e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80044a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044aa:	601a      	str	r2, [r3, #0]
 80044ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044b0:	b29a      	uxth	r2, r3
 80044b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80044be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	895b      	ldrh	r3, [r3, #10]
 80044ca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80044ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	6959      	ldr	r1, [r3, #20]
 80044da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044de:	b29b      	uxth	r3, r3
 80044e0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80044e4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80044e8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80044ec:	6800      	ldr	r0, [r0, #0]
 80044ee:	f001 fd7d 	bl	8005fec <USB_WritePMA>
            ep->xfer_buff += len;
 80044f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	695a      	ldr	r2, [r3, #20]
 80044fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004502:	441a      	add	r2, r3
 8004504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004508:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004510:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004514:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	6a1a      	ldr	r2, [r3, #32]
 800451c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004520:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	429a      	cmp	r2, r3
 800452a:	d90f      	bls.n	800454c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800452c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004530:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a1a      	ldr	r2, [r3, #32]
 8004538:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800453c:	1ad2      	subs	r2, r2, r3
 800453e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	621a      	str	r2, [r3, #32]
 800454a:	e00e      	b.n	800456a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800454c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800455c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004560:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2200      	movs	r2, #0
 8004568:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800456a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800456e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	785b      	ldrb	r3, [r3, #1]
 8004576:	2b00      	cmp	r3, #0
 8004578:	f040 809a 	bne.w	80046b0 <USB_EPStartXfer+0x5b0>
 800457c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004580:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004584:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004588:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800458c:	6812      	ldr	r2, [r2, #0]
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004594:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800459e:	b29b      	uxth	r3, r3
 80045a0:	4619      	mov	r1, r3
 80045a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045a6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045aa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80045ae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80045b2:	6812      	ldr	r2, [r2, #0]
 80045b4:	440a      	add	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	011a      	lsls	r2, r3, #4
 80045c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4413      	add	r3, r2
 80045d2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80045d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045de:	601a      	str	r2, [r3, #0]
 80045e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d122      	bne.n	800462e <USB_EPStartXfer+0x52e>
 80045e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	881b      	ldrh	r3, [r3, #0]
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045fa:	b29a      	uxth	r2, r3
 80045fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004600:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	801a      	strh	r2, [r3, #0]
 8004608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800460c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	b29b      	uxth	r3, r3
 8004616:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800461a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800461e:	b29a      	uxth	r2, r3
 8004620:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004624:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	801a      	strh	r2, [r3, #0]
 800462c:	e083      	b.n	8004736 <USB_EPStartXfer+0x636>
 800462e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004632:	2b3e      	cmp	r3, #62	; 0x3e
 8004634:	d81b      	bhi.n	800466e <USB_EPStartXfer+0x56e>
 8004636:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800463a:	085b      	lsrs	r3, r3, #1
 800463c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004644:	f003 0301 	and.w	r3, r3, #1
 8004648:	2b00      	cmp	r3, #0
 800464a:	d004      	beq.n	8004656 <USB_EPStartXfer+0x556>
 800464c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004650:	3301      	adds	r3, #1
 8004652:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004656:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800465a:	b29b      	uxth	r3, r3
 800465c:	029b      	lsls	r3, r3, #10
 800465e:	b29a      	uxth	r2, r3
 8004660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004664:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	801a      	strh	r2, [r3, #0]
 800466c:	e063      	b.n	8004736 <USB_EPStartXfer+0x636>
 800466e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004672:	095b      	lsrs	r3, r3, #5
 8004674:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004678:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800467c:	f003 031f 	and.w	r3, r3, #31
 8004680:	2b00      	cmp	r3, #0
 8004682:	d104      	bne.n	800468e <USB_EPStartXfer+0x58e>
 8004684:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004688:	3b01      	subs	r3, #1
 800468a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800468e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004692:	b29b      	uxth	r3, r3
 8004694:	029b      	lsls	r3, r3, #10
 8004696:	b29b      	uxth	r3, r3
 8004698:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800469c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80046a0:	b29a      	uxth	r2, r3
 80046a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046a6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	801a      	strh	r2, [r3, #0]
 80046ae:	e042      	b.n	8004736 <USB_EPStartXfer+0x636>
 80046b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	785b      	ldrb	r3, [r3, #1]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d13a      	bne.n	8004736 <USB_EPStartXfer+0x636>
 80046c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046cc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80046d0:	6812      	ldr	r2, [r2, #0]
 80046d2:	601a      	str	r2, [r3, #0]
 80046d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	4619      	mov	r1, r3
 80046e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80046ee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046f2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	440a      	add	r2, r1
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004700:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	781b      	ldrb	r3, [r3, #0]
 8004708:	011a      	lsls	r2, r3, #4
 800470a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4413      	add	r3, r2
 8004716:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800471a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800471e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004722:	601a      	str	r2, [r3, #0]
 8004724:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004728:	b29a      	uxth	r2, r3
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004736:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800473a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	891b      	ldrh	r3, [r3, #8]
 8004742:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004746:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6959      	ldr	r1, [r3, #20]
 8004752:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004756:	b29b      	uxth	r3, r3
 8004758:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800475c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004760:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004764:	6800      	ldr	r0, [r0, #0]
 8004766:	f001 fc41 	bl	8005fec <USB_WritePMA>
 800476a:	f000 be0e 	b.w	800538a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800476e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004772:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	785b      	ldrb	r3, [r3, #1]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d16d      	bne.n	800485a <USB_EPStartXfer+0x75a>
 800477e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004782:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	64bb      	str	r3, [r7, #72]	; 0x48
 800478a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800478e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004798:	b29b      	uxth	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800479e:	4413      	add	r3, r2
 80047a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80047a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	781b      	ldrb	r3, [r3, #0]
 80047ae:	011a      	lsls	r2, r3, #4
 80047b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80047b2:	4413      	add	r3, r2
 80047b4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80047b8:	647b      	str	r3, [r7, #68]	; 0x44
 80047ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d112      	bne.n	80047e8 <USB_EPStartXfer+0x6e8>
 80047c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047c4:	881b      	ldrh	r3, [r3, #0]
 80047c6:	b29b      	uxth	r3, r3
 80047c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047cc:	b29a      	uxth	r2, r3
 80047ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d0:	801a      	strh	r2, [r3, #0]
 80047d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047e0:	b29a      	uxth	r2, r3
 80047e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e4:	801a      	strh	r2, [r3, #0]
 80047e6:	e063      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 80047e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047ec:	2b3e      	cmp	r3, #62	; 0x3e
 80047ee:	d817      	bhi.n	8004820 <USB_EPStartXfer+0x720>
 80047f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047f4:	085b      	lsrs	r3, r3, #1
 80047f6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80047fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <USB_EPStartXfer+0x710>
 8004806:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800480a:	3301      	adds	r3, #1
 800480c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004810:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004814:	b29b      	uxth	r3, r3
 8004816:	029b      	lsls	r3, r3, #10
 8004818:	b29a      	uxth	r2, r3
 800481a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800481c:	801a      	strh	r2, [r3, #0]
 800481e:	e047      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 8004820:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004824:	095b      	lsrs	r3, r3, #5
 8004826:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800482a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800482e:	f003 031f 	and.w	r3, r3, #31
 8004832:	2b00      	cmp	r3, #0
 8004834:	d104      	bne.n	8004840 <USB_EPStartXfer+0x740>
 8004836:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800483a:	3b01      	subs	r3, #1
 800483c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004840:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004844:	b29b      	uxth	r3, r3
 8004846:	029b      	lsls	r3, r3, #10
 8004848:	b29b      	uxth	r3, r3
 800484a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004852:	b29a      	uxth	r2, r3
 8004854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004856:	801a      	strh	r2, [r3, #0]
 8004858:	e02a      	b.n	80048b0 <USB_EPStartXfer+0x7b0>
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	785b      	ldrb	r3, [r3, #1]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d122      	bne.n	80048b0 <USB_EPStartXfer+0x7b0>
 800486a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	653b      	str	r3, [r7, #80]	; 0x50
 8004876:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004884:	b29b      	uxth	r3, r3
 8004886:	461a      	mov	r2, r3
 8004888:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800488a:	4413      	add	r3, r2
 800488c:	653b      	str	r3, [r7, #80]	; 0x50
 800488e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	011a      	lsls	r2, r3, #4
 800489c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800489e:	4413      	add	r3, r2
 80048a0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80048a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80048b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	891b      	ldrh	r3, [r3, #8]
 80048bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80048c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6959      	ldr	r1, [r3, #20]
 80048cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048d0:	b29b      	uxth	r3, r3
 80048d2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80048d6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80048da:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80048de:	6800      	ldr	r0, [r0, #0]
 80048e0:	f001 fb84 	bl	8005fec <USB_WritePMA>
            ep->xfer_buff += len;
 80048e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048f4:	441a      	add	r2, r3
 80048f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6a1a      	ldr	r2, [r3, #32]
 800490e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004912:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	429a      	cmp	r2, r3
 800491c:	d90f      	bls.n	800493e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	6a1a      	ldr	r2, [r3, #32]
 800492a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800492e:	1ad2      	subs	r2, r2, r3
 8004930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	621a      	str	r2, [r3, #32]
 800493c:	e00e      	b.n	800495c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800494e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004952:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2200      	movs	r2, #0
 800495a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800495c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	643b      	str	r3, [r7, #64]	; 0x40
 8004968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800496c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	785b      	ldrb	r3, [r3, #1]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d16d      	bne.n	8004a54 <USB_EPStartXfer+0x954>
 8004978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	63bb      	str	r3, [r7, #56]	; 0x38
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004992:	b29b      	uxth	r3, r3
 8004994:	461a      	mov	r2, r3
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	4413      	add	r3, r2
 800499a:	63bb      	str	r3, [r7, #56]	; 0x38
 800499c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	011a      	lsls	r2, r3, #4
 80049aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ac:	4413      	add	r3, r2
 80049ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80049b2:	637b      	str	r3, [r7, #52]	; 0x34
 80049b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d112      	bne.n	80049e2 <USB_EPStartXfer+0x8e2>
 80049bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049be:	881b      	ldrh	r3, [r3, #0]
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80049c6:	b29a      	uxth	r2, r3
 80049c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ca:	801a      	strh	r2, [r3, #0]
 80049cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049ce:	881b      	ldrh	r3, [r3, #0]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80049d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80049da:	b29a      	uxth	r2, r3
 80049dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049de:	801a      	strh	r2, [r3, #0]
 80049e0:	e05d      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 80049e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049e6:	2b3e      	cmp	r3, #62	; 0x3e
 80049e8:	d817      	bhi.n	8004a1a <USB_EPStartXfer+0x91a>
 80049ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049ee:	085b      	lsrs	r3, r3, #1
 80049f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80049f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f8:	f003 0301 	and.w	r3, r3, #1
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <USB_EPStartXfer+0x90a>
 8004a00:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a04:	3301      	adds	r3, #1
 8004a06:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	029b      	lsls	r3, r3, #10
 8004a12:	b29a      	uxth	r2, r3
 8004a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a16:	801a      	strh	r2, [r3, #0]
 8004a18:	e041      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a28:	f003 031f 	and.w	r3, r3, #31
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d104      	bne.n	8004a3a <USB_EPStartXfer+0x93a>
 8004a30:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a34:	3b01      	subs	r3, #1
 8004a36:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	029b      	lsls	r3, r3, #10
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a50:	801a      	strh	r2, [r3, #0]
 8004a52:	e024      	b.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	785b      	ldrb	r3, [r3, #1]
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d11c      	bne.n	8004a9e <USB_EPStartXfer+0x99e>
 8004a64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a78:	4413      	add	r3, r2
 8004a7a:	643b      	str	r3, [r7, #64]	; 0x40
 8004a7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	011a      	lsls	r2, r3, #4
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004a92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a94:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a9c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004a9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	895b      	ldrh	r3, [r3, #10]
 8004aaa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6959      	ldr	r1, [r3, #20]
 8004aba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004ac4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004ac8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004acc:	6800      	ldr	r0, [r0, #0]
 8004ace:	f001 fa8d 	bl	8005fec <USB_WritePMA>
 8004ad2:	f000 bc5a 	b.w	800538a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004ad6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ada:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6a1b      	ldr	r3, [r3, #32]
 8004ae2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004ae6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004af4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004b10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	009b      	lsls	r3, r3, #2
 8004b28:	441a      	add	r2, r3
 8004b2a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b3e:	b29b      	uxth	r3, r3
 8004b40:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b62:	4413      	add	r3, r2
 8004b64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	011a      	lsls	r2, r3, #4
 8004b74:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b76:	4413      	add	r3, r2
 8004b78:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004b7c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b82:	b29a      	uxth	r2, r3
 8004b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004b86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004b88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	891b      	ldrh	r3, [r3, #8]
 8004b94:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004b98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	6959      	ldr	r1, [r3, #20]
 8004ba4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004bae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004bb2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bb6:	6800      	ldr	r0, [r0, #0]
 8004bb8:	f001 fa18 	bl	8005fec <USB_WritePMA>
 8004bbc:	e3e5      	b.n	800538a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc6:	681a      	ldr	r2, [r3, #0]
 8004bc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	009b      	lsls	r3, r3, #2
 8004bd6:	4413      	add	r3, r2
 8004bd8:	881b      	ldrh	r3, [r3, #0]
 8004bda:	b29b      	uxth	r3, r3
 8004bdc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004be4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004be8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	441a      	add	r2, r3
 8004c02:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004c06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c0e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004c12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004c1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c3c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	009b      	lsls	r3, r3, #2
 8004c50:	4413      	add	r3, r2
 8004c52:	881b      	ldrh	r3, [r3, #0]
 8004c54:	b29b      	uxth	r3, r3
 8004c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 81bc 	beq.w	8004fd8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	785b      	ldrb	r3, [r3, #1]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d16d      	bne.n	8004d5a <USB_EPStartXfer+0xc5a>
 8004c7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	67bb      	str	r3, [r7, #120]	; 0x78
 8004c8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c9e:	4413      	add	r3, r2
 8004ca0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	011a      	lsls	r2, r3, #4
 8004cb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cb8:	677b      	str	r3, [r7, #116]	; 0x74
 8004cba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d112      	bne.n	8004ce8 <USB_EPStartXfer+0xbe8>
 8004cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cc4:	881b      	ldrh	r3, [r3, #0]
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd0:	801a      	strh	r2, [r3, #0]
 8004cd2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004cdc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ce0:	b29a      	uxth	r2, r3
 8004ce2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce4:	801a      	strh	r2, [r3, #0]
 8004ce6:	e060      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cec:	2b3e      	cmp	r3, #62	; 0x3e
 8004cee:	d817      	bhi.n	8004d20 <USB_EPStartXfer+0xc20>
 8004cf0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf4:	085b      	lsrs	r3, r3, #1
 8004cf6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004cfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d004      	beq.n	8004d10 <USB_EPStartXfer+0xc10>
 8004d06:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d10:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	029b      	lsls	r3, r3, #10
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d1c:	801a      	strh	r2, [r3, #0]
 8004d1e:	e044      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d24:	095b      	lsrs	r3, r3, #5
 8004d26:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d2e:	f003 031f 	and.w	r3, r3, #31
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d104      	bne.n	8004d40 <USB_EPStartXfer+0xc40>
 8004d36:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004d40:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004d44:	b29b      	uxth	r3, r3
 8004d46:	029b      	lsls	r3, r3, #10
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	e027      	b.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	785b      	ldrb	r3, [r3, #1]
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d11f      	bne.n	8004daa <USB_EPStartXfer+0xcaa>
 8004d6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d78:	b29b      	uxth	r3, r3
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d80:	4413      	add	r3, r2
 8004d82:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	781b      	ldrb	r3, [r3, #0]
 8004d92:	011a      	lsls	r2, r3, #4
 8004d94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004d98:	4413      	add	r3, r2
 8004d9a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004d9e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004da0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004da4:	b29a      	uxth	r2, r3
 8004da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004da8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	895b      	ldrh	r3, [r3, #10]
 8004db6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dbe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6959      	ldr	r1, [r3, #20]
 8004dc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004dd0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dd4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dd8:	6800      	ldr	r0, [r0, #0]
 8004dda:	f001 f907 	bl	8005fec <USB_WritePMA>
          ep->xfer_buff += len;
 8004dde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004de2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	695a      	ldr	r2, [r3, #20]
 8004dea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dee:	441a      	add	r2, r3
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	6a1a      	ldr	r2, [r3, #32]
 8004e08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d90f      	bls.n	8004e38 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	621a      	str	r2, [r3, #32]
 8004e36:	e00e      	b.n	8004e56 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8004e38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8004e48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2200      	movs	r2, #0
 8004e54:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8004e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8295 	beq.w	800538a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	785b      	ldrb	r3, [r3, #1]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d16d      	bne.n	8004f4c <USB_EPStartXfer+0xe4c>
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	461a      	mov	r2, r3
 8004e8e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004e90:	4413      	add	r3, r2
 8004e92:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	781b      	ldrb	r3, [r3, #0]
 8004ea0:	011a      	lsls	r2, r3, #4
 8004ea2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ea4:	4413      	add	r3, r2
 8004ea6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eaa:	667b      	str	r3, [r7, #100]	; 0x64
 8004eac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d112      	bne.n	8004eda <USB_EPStartXfer+0xdda>
 8004eb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004eb6:	881b      	ldrh	r3, [r3, #0]
 8004eb8:	b29b      	uxth	r3, r3
 8004eba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ebe:	b29a      	uxth	r2, r3
 8004ec0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec2:	801a      	strh	r2, [r3, #0]
 8004ec4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ec6:	881b      	ldrh	r3, [r3, #0]
 8004ec8:	b29b      	uxth	r3, r3
 8004eca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ece:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ed6:	801a      	strh	r2, [r3, #0]
 8004ed8:	e063      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ede:	2b3e      	cmp	r3, #62	; 0x3e
 8004ee0:	d817      	bhi.n	8004f12 <USB_EPStartXfer+0xe12>
 8004ee2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004eec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d004      	beq.n	8004f02 <USB_EPStartXfer+0xe02>
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	3301      	adds	r3, #1
 8004efe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f06:	b29b      	uxth	r3, r3
 8004f08:	029b      	lsls	r3, r3, #10
 8004f0a:	b29a      	uxth	r2, r3
 8004f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	e047      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f16:	095b      	lsrs	r3, r3, #5
 8004f18:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f1c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f20:	f003 031f 	and.w	r3, r3, #31
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d104      	bne.n	8004f32 <USB_EPStartXfer+0xe32>
 8004f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8004f32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f36:	b29b      	uxth	r3, r3
 8004f38:	029b      	lsls	r3, r3, #10
 8004f3a:	b29b      	uxth	r3, r3
 8004f3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f44:	b29a      	uxth	r2, r3
 8004f46:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f48:	801a      	strh	r2, [r3, #0]
 8004f4a:	e02a      	b.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d122      	bne.n	8004fa2 <USB_EPStartXfer+0xea2>
 8004f5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	673b      	str	r3, [r7, #112]	; 0x70
 8004f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f7c:	4413      	add	r3, r2
 8004f7e:	673b      	str	r3, [r7, #112]	; 0x70
 8004f80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	011a      	lsls	r2, r3, #4
 8004f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f90:	4413      	add	r3, r2
 8004f92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004f96:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f9c:	b29a      	uxth	r2, r3
 8004f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	891b      	ldrh	r3, [r3, #8]
 8004fae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	6959      	ldr	r1, [r3, #20]
 8004fbe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fc2:	b29b      	uxth	r3, r3
 8004fc4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fc8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fcc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fd0:	6800      	ldr	r0, [r0, #0]
 8004fd2:	f001 f80b 	bl	8005fec <USB_WritePMA>
 8004fd6:	e1d8      	b.n	800538a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004fd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	785b      	ldrb	r3, [r3, #1]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d178      	bne.n	80050da <USB_EPStartXfer+0xfda>
 8004fe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800500c:	4413      	add	r3, r2
 800500e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005012:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005016:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	781b      	ldrb	r3, [r3, #0]
 800501e:	011a      	lsls	r2, r3, #4
 8005020:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005024:	4413      	add	r3, r2
 8005026:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800502a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800502e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005032:	2b00      	cmp	r3, #0
 8005034:	d116      	bne.n	8005064 <USB_EPStartXfer+0xf64>
 8005036:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800503a:	881b      	ldrh	r3, [r3, #0]
 800503c:	b29b      	uxth	r3, r3
 800503e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005042:	b29a      	uxth	r2, r3
 8005044:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005048:	801a      	strh	r2, [r3, #0]
 800504a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800504e:	881b      	ldrh	r3, [r3, #0]
 8005050:	b29b      	uxth	r3, r3
 8005052:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005056:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800505a:	b29a      	uxth	r2, r3
 800505c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005060:	801a      	strh	r2, [r3, #0]
 8005062:	e06b      	b.n	800513c <USB_EPStartXfer+0x103c>
 8005064:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005068:	2b3e      	cmp	r3, #62	; 0x3e
 800506a:	d818      	bhi.n	800509e <USB_EPStartXfer+0xf9e>
 800506c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005070:	085b      	lsrs	r3, r3, #1
 8005072:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005076:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d004      	beq.n	800508c <USB_EPStartXfer+0xf8c>
 8005082:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005086:	3301      	adds	r3, #1
 8005088:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800508c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005090:	b29b      	uxth	r3, r3
 8005092:	029b      	lsls	r3, r3, #10
 8005094:	b29a      	uxth	r2, r3
 8005096:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800509a:	801a      	strh	r2, [r3, #0]
 800509c:	e04e      	b.n	800513c <USB_EPStartXfer+0x103c>
 800509e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a2:	095b      	lsrs	r3, r3, #5
 80050a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ac:	f003 031f 	and.w	r3, r3, #31
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d104      	bne.n	80050be <USB_EPStartXfer+0xfbe>
 80050b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050b8:	3b01      	subs	r3, #1
 80050ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80050be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	029b      	lsls	r3, r3, #10
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050d0:	b29a      	uxth	r2, r3
 80050d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80050d6:	801a      	strh	r2, [r3, #0]
 80050d8:	e030      	b.n	800513c <USB_EPStartXfer+0x103c>
 80050da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	785b      	ldrb	r3, [r3, #1]
 80050e6:	2b01      	cmp	r3, #1
 80050e8:	d128      	bne.n	800513c <USB_EPStartXfer+0x103c>
 80050ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80050f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005106:	b29b      	uxth	r3, r3
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800510e:	4413      	add	r3, r2
 8005110:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	011a      	lsls	r2, r3, #4
 8005122:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005126:	4413      	add	r3, r2
 8005128:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800512c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005134:	b29a      	uxth	r2, r3
 8005136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800513a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	891b      	ldrh	r3, [r3, #8]
 8005148:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800514c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	6959      	ldr	r1, [r3, #20]
 8005158:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800515c:	b29b      	uxth	r3, r3
 800515e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005162:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005166:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800516a:	6800      	ldr	r0, [r0, #0]
 800516c:	f000 ff3e 	bl	8005fec <USB_WritePMA>
          ep->xfer_buff += len;
 8005170:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005174:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695a      	ldr	r2, [r3, #20]
 800517c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005180:	441a      	add	r2, r3
 8005182:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005186:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800518e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005192:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	6a1a      	ldr	r2, [r3, #32]
 800519a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	429a      	cmp	r2, r3
 80051a8:	d90f      	bls.n	80051ca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80051aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6a1a      	ldr	r2, [r3, #32]
 80051b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ba:	1ad2      	subs	r2, r2, r3
 80051bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	621a      	str	r2, [r3, #32]
 80051c8:	e00e      	b.n	80051e8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80051ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	2200      	movs	r2, #0
 80051e6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80051e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 80cc 	beq.w	800538a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005200:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005204:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	785b      	ldrb	r3, [r3, #1]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d178      	bne.n	8005302 <USB_EPStartXfer+0x1202>
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800521e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005222:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800522c:	b29b      	uxth	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005234:	4413      	add	r3, r2
 8005236:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800523a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800523e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	011a      	lsls	r2, r3, #4
 8005248:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800524c:	4413      	add	r3, r2
 800524e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005252:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005256:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800525a:	2b00      	cmp	r3, #0
 800525c:	d116      	bne.n	800528c <USB_EPStartXfer+0x118c>
 800525e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005262:	881b      	ldrh	r3, [r3, #0]
 8005264:	b29b      	uxth	r3, r3
 8005266:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800526a:	b29a      	uxth	r2, r3
 800526c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005270:	801a      	strh	r2, [r3, #0]
 8005272:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005276:	881b      	ldrh	r3, [r3, #0]
 8005278:	b29b      	uxth	r3, r3
 800527a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800527e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005282:	b29a      	uxth	r2, r3
 8005284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005288:	801a      	strh	r2, [r3, #0]
 800528a:	e064      	b.n	8005356 <USB_EPStartXfer+0x1256>
 800528c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005290:	2b3e      	cmp	r3, #62	; 0x3e
 8005292:	d818      	bhi.n	80052c6 <USB_EPStartXfer+0x11c6>
 8005294:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800529e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d004      	beq.n	80052b4 <USB_EPStartXfer+0x11b4>
 80052aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ae:	3301      	adds	r3, #1
 80052b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	029b      	lsls	r3, r3, #10
 80052bc:	b29a      	uxth	r2, r3
 80052be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052c2:	801a      	strh	r2, [r3, #0]
 80052c4:	e047      	b.n	8005356 <USB_EPStartXfer+0x1256>
 80052c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ca:	095b      	lsrs	r3, r3, #5
 80052cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052d4:	f003 031f 	and.w	r3, r3, #31
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d104      	bne.n	80052e6 <USB_EPStartXfer+0x11e6>
 80052dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052e0:	3b01      	subs	r3, #1
 80052e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80052e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80052ea:	b29b      	uxth	r3, r3
 80052ec:	029b      	lsls	r3, r3, #10
 80052ee:	b29b      	uxth	r3, r3
 80052f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80052fe:	801a      	strh	r2, [r3, #0]
 8005300:	e029      	b.n	8005356 <USB_EPStartXfer+0x1256>
 8005302:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005306:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	785b      	ldrb	r3, [r3, #1]
 800530e:	2b01      	cmp	r3, #1
 8005310:	d121      	bne.n	8005356 <USB_EPStartXfer+0x1256>
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005320:	b29b      	uxth	r3, r3
 8005322:	461a      	mov	r2, r3
 8005324:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005328:	4413      	add	r3, r2
 800532a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800532e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005332:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	781b      	ldrb	r3, [r3, #0]
 800533a:	011a      	lsls	r2, r3, #4
 800533c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005340:	4413      	add	r3, r2
 8005342:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005346:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800534a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800534e:	b29a      	uxth	r2, r3
 8005350:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005354:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005356:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	895b      	ldrh	r3, [r3, #10]
 8005362:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	6959      	ldr	r1, [r3, #20]
 8005372:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005376:	b29b      	uxth	r3, r3
 8005378:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800537c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005380:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005384:	6800      	ldr	r0, [r0, #0]
 8005386:	f000 fe31 	bl	8005fec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005392:	681a      	ldr	r2, [r3, #0]
 8005394:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005398:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	4413      	add	r3, r2
 80053a4:	881b      	ldrh	r3, [r3, #0]
 80053a6:	b29b      	uxth	r3, r3
 80053a8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053ac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053b0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80053b8:	8013      	strh	r3, [r2, #0]
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053c2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053c6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053ca:	8812      	ldrh	r2, [r2, #0]
 80053cc:	f082 0210 	eor.w	r2, r2, #16
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80053da:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80053de:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80053e2:	8812      	ldrh	r2, [r2, #0]
 80053e4:	f082 0220 	eor.w	r2, r2, #32
 80053e8:	801a      	strh	r2, [r3, #0]
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	781b      	ldrb	r3, [r3, #0]
 8005400:	009b      	lsls	r3, r3, #2
 8005402:	441a      	add	r2, r3
 8005404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005408:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800540c:	881b      	ldrh	r3, [r3, #0]
 800540e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005412:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005416:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800541a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800541e:	b29b      	uxth	r3, r3
 8005420:	8013      	strh	r3, [r2, #0]
 8005422:	f000 bc9f 	b.w	8005d64 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005426:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	7b1b      	ldrb	r3, [r3, #12]
 8005432:	2b00      	cmp	r3, #0
 8005434:	f040 80ae 	bne.w	8005594 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005448:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	429a      	cmp	r2, r3
 8005452:	d917      	bls.n	8005484 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005454:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005458:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	691b      	ldr	r3, [r3, #16]
 8005460:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	699a      	ldr	r2, [r3, #24]
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	1ad2      	subs	r2, r2, r3
 8005476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	619a      	str	r2, [r3, #24]
 8005482:	e00e      	b.n	80054a2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	699b      	ldr	r3, [r3, #24]
 8005490:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005498:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	2200      	movs	r2, #0
 80054a0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80054a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054c6:	4413      	add	r3, r2
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	781b      	ldrb	r3, [r3, #0]
 80054d8:	011a      	lsls	r2, r3, #4
 80054da:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80054de:	4413      	add	r3, r2
 80054e0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80054e4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80054e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d116      	bne.n	800551e <USB_EPStartXfer+0x141e>
 80054f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054f4:	881b      	ldrh	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005502:	801a      	strh	r2, [r3, #0]
 8005504:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005508:	881b      	ldrh	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005510:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005514:	b29a      	uxth	r2, r3
 8005516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800551a:	801a      	strh	r2, [r3, #0]
 800551c:	e3e8      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 800551e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005522:	2b3e      	cmp	r3, #62	; 0x3e
 8005524:	d818      	bhi.n	8005558 <USB_EPStartXfer+0x1458>
 8005526:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005530:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d004      	beq.n	8005546 <USB_EPStartXfer+0x1446>
 800553c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005540:	3301      	adds	r3, #1
 8005542:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005546:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800554a:	b29b      	uxth	r3, r3
 800554c:	029b      	lsls	r3, r3, #10
 800554e:	b29a      	uxth	r2, r3
 8005550:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005554:	801a      	strh	r2, [r3, #0]
 8005556:	e3cb      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555c:	095b      	lsrs	r3, r3, #5
 800555e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005562:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005566:	f003 031f 	and.w	r3, r3, #31
 800556a:	2b00      	cmp	r3, #0
 800556c:	d104      	bne.n	8005578 <USB_EPStartXfer+0x1478>
 800556e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005572:	3b01      	subs	r3, #1
 8005574:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005578:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800557c:	b29b      	uxth	r3, r3
 800557e:	029b      	lsls	r3, r3, #10
 8005580:	b29b      	uxth	r3, r3
 8005582:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005586:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800558a:	b29a      	uxth	r2, r3
 800558c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005590:	801a      	strh	r2, [r3, #0]
 8005592:	e3ad      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	78db      	ldrb	r3, [r3, #3]
 80055a0:	2b02      	cmp	r3, #2
 80055a2:	f040 8200 	bne.w	80059a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80055a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	785b      	ldrb	r3, [r3, #1]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 8091 	bne.w	80056da <USB_EPStartXfer+0x15da>
 80055b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	461a      	mov	r2, r3
 80055d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055dc:	4413      	add	r3, r2
 80055de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80055e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	011a      	lsls	r2, r3, #4
 80055f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80055f4:	4413      	add	r3, r2
 80055f6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005602:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d116      	bne.n	800563c <USB_EPStartXfer+0x153c>
 800560e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	b29b      	uxth	r3, r3
 8005616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800561a:	b29a      	uxth	r2, r3
 800561c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005626:	881b      	ldrh	r3, [r3, #0]
 8005628:	b29b      	uxth	r3, r3
 800562a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800562e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005632:	b29a      	uxth	r2, r3
 8005634:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005638:	801a      	strh	r2, [r3, #0]
 800563a:	e083      	b.n	8005744 <USB_EPStartXfer+0x1644>
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	691b      	ldr	r3, [r3, #16]
 8005648:	2b3e      	cmp	r3, #62	; 0x3e
 800564a:	d820      	bhi.n	800568e <USB_EPStartXfer+0x158e>
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	085b      	lsrs	r3, r3, #1
 800565a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	691b      	ldr	r3, [r3, #16]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b00      	cmp	r3, #0
 8005670:	d004      	beq.n	800567c <USB_EPStartXfer+0x157c>
 8005672:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005676:	3301      	adds	r3, #1
 8005678:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800567c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005680:	b29b      	uxth	r3, r3
 8005682:	029b      	lsls	r3, r3, #10
 8005684:	b29a      	uxth	r2, r3
 8005686:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800568a:	801a      	strh	r2, [r3, #0]
 800568c:	e05a      	b.n	8005744 <USB_EPStartXfer+0x1644>
 800568e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	691b      	ldr	r3, [r3, #16]
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	f003 031f 	and.w	r3, r3, #31
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d104      	bne.n	80056be <USB_EPStartXfer+0x15be>
 80056b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056b8:	3b01      	subs	r3, #1
 80056ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80056be:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	029b      	lsls	r3, r3, #10
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80056d6:	801a      	strh	r2, [r3, #0]
 80056d8:	e034      	b.n	8005744 <USB_EPStartXfer+0x1644>
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	785b      	ldrb	r3, [r3, #1]
 80056e6:	2b01      	cmp	r3, #1
 80056e8:	d12c      	bne.n	8005744 <USB_EPStartXfer+0x1644>
 80056ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80056f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005706:	b29b      	uxth	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800570e:	4413      	add	r3, r2
 8005710:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	011a      	lsls	r2, r3, #4
 8005722:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005726:	4413      	add	r3, r2
 8005728:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005730:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005734:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	691b      	ldr	r3, [r3, #16]
 800573c:	b29a      	uxth	r2, r3
 800573e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005742:	801a      	strh	r2, [r3, #0]
 8005744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005752:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005756:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	785b      	ldrb	r3, [r3, #1]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8091 	bne.w	8005886 <USB_EPStartXfer+0x1786>
 8005764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005776:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005780:	b29b      	uxth	r3, r3
 8005782:	461a      	mov	r2, r3
 8005784:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005788:	4413      	add	r3, r2
 800578a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800578e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	781b      	ldrb	r3, [r3, #0]
 800579a:	011a      	lsls	r2, r3, #4
 800579c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80057a0:	4413      	add	r3, r2
 80057a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80057a6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d116      	bne.n	80057e8 <USB_EPStartXfer+0x16e8>
 80057ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057cc:	801a      	strh	r2, [r3, #0]
 80057ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057d2:	881b      	ldrh	r3, [r3, #0]
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057de:	b29a      	uxth	r2, r3
 80057e0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80057e4:	801a      	strh	r2, [r3, #0]
 80057e6:	e07c      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 80057e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	691b      	ldr	r3, [r3, #16]
 80057f4:	2b3e      	cmp	r3, #62	; 0x3e
 80057f6:	d820      	bhi.n	800583a <USB_EPStartXfer+0x173a>
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	085b      	lsrs	r3, r3, #1
 8005806:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800580a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800580e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	f003 0301 	and.w	r3, r3, #1
 800581a:	2b00      	cmp	r3, #0
 800581c:	d004      	beq.n	8005828 <USB_EPStartXfer+0x1728>
 800581e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005822:	3301      	adds	r3, #1
 8005824:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005828:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800582c:	b29b      	uxth	r3, r3
 800582e:	029b      	lsls	r3, r3, #10
 8005830:	b29a      	uxth	r2, r3
 8005832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005836:	801a      	strh	r2, [r3, #0]
 8005838:	e053      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	691b      	ldr	r3, [r3, #16]
 8005846:	095b      	lsrs	r3, r3, #5
 8005848:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	f003 031f 	and.w	r3, r3, #31
 800585c:	2b00      	cmp	r3, #0
 800585e:	d104      	bne.n	800586a <USB_EPStartXfer+0x176a>
 8005860:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005864:	3b01      	subs	r3, #1
 8005866:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800586a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800586e:	b29b      	uxth	r3, r3
 8005870:	029b      	lsls	r3, r3, #10
 8005872:	b29b      	uxth	r3, r3
 8005874:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005878:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800587c:	b29a      	uxth	r2, r3
 800587e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005882:	801a      	strh	r2, [r3, #0]
 8005884:	e02d      	b.n	80058e2 <USB_EPStartXfer+0x17e2>
 8005886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800588a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d125      	bne.n	80058e2 <USB_EPStartXfer+0x17e2>
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058a4:	b29b      	uxth	r3, r3
 80058a6:	461a      	mov	r2, r3
 80058a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058ac:	4413      	add	r3, r2
 80058ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80058b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	781b      	ldrb	r3, [r3, #0]
 80058be:	011a      	lsls	r2, r3, #4
 80058c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80058c4:	4413      	add	r3, r2
 80058c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	b29a      	uxth	r2, r3
 80058dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058e0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80058e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	69db      	ldr	r3, [r3, #28]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	f000 81fe 	beq.w	8005cf0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 80058f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005902:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	781b      	ldrb	r3, [r3, #0]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	4413      	add	r3, r2
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005914:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005918:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <USB_EPStartXfer+0x182c>
 8005920:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10d      	bne.n	8005948 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800592c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005930:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005934:	2b00      	cmp	r3, #0
 8005936:	f040 81db 	bne.w	8005cf0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800593a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800593e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005942:	2b00      	cmp	r3, #0
 8005944:	f040 81d4 	bne.w	8005cf0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005956:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	781b      	ldrb	r3, [r3, #0]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	4413      	add	r3, r2
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800596a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	009b      	lsls	r3, r3, #2
 800598a:	441a      	add	r2, r3
 800598c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005990:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005994:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800599c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	8013      	strh	r3, [r2, #0]
 80059a4:	e1a4      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80059a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	78db      	ldrb	r3, [r3, #3]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 819a 	bne.w	8005cec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80059b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	699a      	ldr	r2, [r3, #24]
 80059c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d917      	bls.n	8005a04 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80059d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80059e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	699a      	ldr	r2, [r3, #24]
 80059f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059f4:	1ad2      	subs	r2, r2, r3
 80059f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	619a      	str	r2, [r3, #24]
 8005a02:	e00e      	b.n	8005a22 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005a04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	699b      	ldr	r3, [r3, #24]
 8005a10:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005a14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005a22:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a26:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	785b      	ldrb	r3, [r3, #1]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d178      	bne.n	8005b24 <USB_EPStartXfer+0x1a24>
 8005a32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a44:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a4e:	b29b      	uxth	r3, r3
 8005a50:	461a      	mov	r2, r3
 8005a52:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a56:	4413      	add	r3, r2
 8005a58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005a5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	011a      	lsls	r2, r3, #4
 8005a6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005a6e:	4413      	add	r3, r2
 8005a70:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a74:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005a78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d116      	bne.n	8005aae <USB_EPStartXfer+0x19ae>
 8005a80:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a84:	881b      	ldrh	r3, [r3, #0]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a92:	801a      	strh	r2, [r3, #0]
 8005a94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005a98:	881b      	ldrh	r3, [r3, #0]
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aa0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005aaa:	801a      	strh	r2, [r3, #0]
 8005aac:	e06b      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005aae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab2:	2b3e      	cmp	r3, #62	; 0x3e
 8005ab4:	d818      	bhi.n	8005ae8 <USB_EPStartXfer+0x19e8>
 8005ab6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aba:	085b      	lsrs	r3, r3, #1
 8005abc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d004      	beq.n	8005ad6 <USB_EPStartXfer+0x19d6>
 8005acc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005ad6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	029b      	lsls	r3, r3, #10
 8005ade:	b29a      	uxth	r2, r3
 8005ae0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ae4:	801a      	strh	r2, [r3, #0]
 8005ae6:	e04e      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005ae8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005aec:	095b      	lsrs	r3, r3, #5
 8005aee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	f003 031f 	and.w	r3, r3, #31
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d104      	bne.n	8005b08 <USB_EPStartXfer+0x1a08>
 8005afe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b02:	3b01      	subs	r3, #1
 8005b04:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005b08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b0c:	b29b      	uxth	r3, r3
 8005b0e:	029b      	lsls	r3, r3, #10
 8005b10:	b29b      	uxth	r3, r3
 8005b12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005b20:	801a      	strh	r2, [r3, #0]
 8005b22:	e030      	b.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005b24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	785b      	ldrb	r3, [r3, #1]
 8005b30:	2b01      	cmp	r3, #1
 8005b32:	d128      	bne.n	8005b86 <USB_EPStartXfer+0x1a86>
 8005b34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b38:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b46:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b50:	b29b      	uxth	r3, r3
 8005b52:	461a      	mov	r2, r3
 8005b54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b58:	4413      	add	r3, r2
 8005b5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	011a      	lsls	r2, r3, #4
 8005b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b70:	4413      	add	r3, r2
 8005b72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b76:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b7e:	b29a      	uxth	r2, r3
 8005b80:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005b84:	801a      	strh	r2, [r3, #0]
 8005b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	785b      	ldrb	r3, [r3, #1]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d178      	bne.n	8005c96 <USB_EPStartXfer+0x1b96>
 8005ba4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bc8:	4413      	add	r3, r2
 8005bca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	011a      	lsls	r2, r3, #4
 8005bdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005be0:	4413      	add	r3, r2
 8005be2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005bea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d116      	bne.n	8005c20 <USB_EPStartXfer+0x1b20>
 8005bf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bf6:	881b      	ldrh	r3, [r3, #0]
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c04:	801a      	strh	r2, [r3, #0]
 8005c06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c0a:	881b      	ldrh	r3, [r3, #0]
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c16:	b29a      	uxth	r2, r3
 8005c18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c1c:	801a      	strh	r2, [r3, #0]
 8005c1e:	e067      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c24:	2b3e      	cmp	r3, #62	; 0x3e
 8005c26:	d818      	bhi.n	8005c5a <USB_EPStartXfer+0x1b5a>
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	085b      	lsrs	r3, r3, #1
 8005c2e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d004      	beq.n	8005c48 <USB_EPStartXfer+0x1b48>
 8005c3e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c42:	3301      	adds	r3, #1
 8005c44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c48:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	029b      	lsls	r3, r3, #10
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c56:	801a      	strh	r2, [r3, #0]
 8005c58:	e04a      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5e:	095b      	lsrs	r3, r3, #5
 8005c60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c64:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c68:	f003 031f 	and.w	r3, r3, #31
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d104      	bne.n	8005c7a <USB_EPStartXfer+0x1b7a>
 8005c70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c74:	3b01      	subs	r3, #1
 8005c76:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005c7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	029b      	lsls	r3, r3, #10
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c88:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8c:	b29a      	uxth	r2, r3
 8005c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c92:	801a      	strh	r2, [r3, #0]
 8005c94:	e02c      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005c96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	785b      	ldrb	r3, [r3, #1]
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d124      	bne.n	8005cf0 <USB_EPStartXfer+0x1bf0>
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cbc:	4413      	add	r3, r2
 8005cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005cc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	781b      	ldrb	r3, [r3, #0]
 8005cce:	011a      	lsls	r2, r3, #4
 8005cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cd4:	4413      	add	r3, r2
 8005cd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005cde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce2:	b29a      	uxth	r2, r3
 8005ce4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ce8:	801a      	strh	r2, [r3, #0]
 8005cea:	e001      	b.n	8005cf0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e03a      	b.n	8005d66 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005cf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	009b      	lsls	r3, r3, #2
 8005d08:	4413      	add	r3, r2
 8005d0a:	881b      	ldrh	r3, [r3, #0]
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d16:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d1a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d1e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005d22:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d26:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005d2e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005d32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d36:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	009b      	lsls	r3, r3, #2
 8005d4a:	441a      	add	r2, r3
 8005d4c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005d50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	785b      	ldrb	r3, [r3, #1]
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d020      	beq.n	8005dc4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	009b      	lsls	r3, r3, #2
 8005d8a:	4413      	add	r3, r2
 8005d8c:	881b      	ldrh	r3, [r3, #0]
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d98:	81bb      	strh	r3, [r7, #12]
 8005d9a:	89bb      	ldrh	r3, [r7, #12]
 8005d9c:	f083 0310 	eor.w	r3, r3, #16
 8005da0:	81bb      	strh	r3, [r7, #12]
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	781b      	ldrb	r3, [r3, #0]
 8005da8:	009b      	lsls	r3, r3, #2
 8005daa:	441a      	add	r2, r3
 8005dac:	89bb      	ldrh	r3, [r7, #12]
 8005dae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005db2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005db6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	8013      	strh	r3, [r2, #0]
 8005dc2:	e01f      	b.n	8005e04 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	009b      	lsls	r3, r3, #2
 8005dcc:	4413      	add	r3, r2
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005dd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dda:	81fb      	strh	r3, [r7, #14]
 8005ddc:	89fb      	ldrh	r3, [r7, #14]
 8005dde:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005de2:	81fb      	strh	r3, [r7, #14]
 8005de4:	687a      	ldr	r2, [r7, #4]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	441a      	add	r2, r3
 8005dee:	89fb      	ldrh	r3, [r7, #14]
 8005df0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005df4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr

08005e10 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005e10:	b480      	push	{r7}
 8005e12:	b087      	sub	sp, #28
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
 8005e18:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	7b1b      	ldrb	r3, [r3, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	f040 809d 	bne.w	8005f5e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	785b      	ldrb	r3, [r3, #1]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d04c      	beq.n	8005ec6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	4413      	add	r3, r2
 8005e36:	881b      	ldrh	r3, [r3, #0]
 8005e38:	823b      	strh	r3, [r7, #16]
 8005e3a:	8a3b      	ldrh	r3, [r7, #16]
 8005e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d01b      	beq.n	8005e7c <USB_EPClearStall+0x6c>
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	4413      	add	r3, r2
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e5a:	81fb      	strh	r3, [r7, #14]
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	009b      	lsls	r3, r3, #2
 8005e64:	441a      	add	r2, r3
 8005e66:	89fb      	ldrh	r3, [r7, #14]
 8005e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	78db      	ldrb	r3, [r3, #3]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d06c      	beq.n	8005f5e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e9a:	81bb      	strh	r3, [r7, #12]
 8005e9c:	89bb      	ldrh	r3, [r7, #12]
 8005e9e:	f083 0320 	eor.w	r3, r3, #32
 8005ea2:	81bb      	strh	r3, [r7, #12]
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	781b      	ldrb	r3, [r3, #0]
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	441a      	add	r2, r3
 8005eae:	89bb      	ldrh	r3, [r7, #12]
 8005eb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005eb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005eb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	8013      	strh	r3, [r2, #0]
 8005ec4:	e04b      	b.n	8005f5e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	781b      	ldrb	r3, [r3, #0]
 8005ecc:	009b      	lsls	r3, r3, #2
 8005ece:	4413      	add	r3, r2
 8005ed0:	881b      	ldrh	r3, [r3, #0]
 8005ed2:	82fb      	strh	r3, [r7, #22]
 8005ed4:	8afb      	ldrh	r3, [r7, #22]
 8005ed6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d01b      	beq.n	8005f16 <USB_EPClearStall+0x106>
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	781b      	ldrb	r3, [r3, #0]
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	4413      	add	r3, r2
 8005ee8:	881b      	ldrh	r3, [r3, #0]
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ef4:	82bb      	strh	r3, [r7, #20]
 8005ef6:	687a      	ldr	r2, [r7, #4]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	781b      	ldrb	r3, [r3, #0]
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	441a      	add	r2, r3
 8005f00:	8abb      	ldrh	r3, [r7, #20]
 8005f02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f0a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005f0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f16:	687a      	ldr	r2, [r7, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	881b      	ldrh	r3, [r3, #0]
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f2c:	827b      	strh	r3, [r7, #18]
 8005f2e:	8a7b      	ldrh	r3, [r7, #18]
 8005f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f34:	827b      	strh	r3, [r7, #18]
 8005f36:	8a7b      	ldrh	r3, [r7, #18]
 8005f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f3c:	827b      	strh	r3, [r7, #18]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	781b      	ldrb	r3, [r3, #0]
 8005f44:	009b      	lsls	r3, r3, #2
 8005f46:	441a      	add	r2, r3
 8005f48:	8a7b      	ldrh	r3, [r7, #18]
 8005f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	371c      	adds	r7, #28
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bc80      	pop	{r7}
 8005f68:	4770      	bx	lr

08005f6a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8005f6a:	b480      	push	{r7}
 8005f6c:	b083      	sub	sp, #12
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	6078      	str	r0, [r7, #4]
 8005f72:	460b      	mov	r3, r1
 8005f74:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8005f76:	78fb      	ldrb	r3, [r7, #3]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d103      	bne.n	8005f84 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2280      	movs	r2, #128	; 0x80
 8005f80:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bc80      	pop	{r7}
 8005f8e:	4770      	bx	lr

08005f90 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b083      	sub	sp, #12
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005f98:	2300      	movs	r3, #0
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	370c      	adds	r7, #12
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bc80      	pop	{r7}
 8005fa2:	4770      	bx	lr

08005fa4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	bc80      	pop	{r7}
 8005fb6:	4770      	bx	lr

08005fb8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8005fca:	68fb      	ldr	r3, [r7, #12]
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3714      	adds	r7, #20
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bc80      	pop	{r7}
 8005fd4:	4770      	bx	lr

08005fd6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8005fd6:	b480      	push	{r7}
 8005fd8:	b083      	sub	sp, #12
 8005fda:	af00      	add	r7, sp, #0
 8005fdc:	6078      	str	r0, [r7, #4]
 8005fde:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bc80      	pop	{r7}
 8005fea:	4770      	bx	lr

08005fec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b08d      	sub	sp, #52	; 0x34
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	460b      	mov	r3, r1
 8005ffc:	80fb      	strh	r3, [r7, #6]
 8005ffe:	4613      	mov	r3, r2
 8006000:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006002:	88bb      	ldrh	r3, [r7, #4]
 8006004:	3301      	adds	r3, #1
 8006006:	085b      	lsrs	r3, r3, #1
 8006008:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006012:	88fb      	ldrh	r3, [r7, #6]
 8006014:	005a      	lsls	r2, r3, #1
 8006016:	69fb      	ldr	r3, [r7, #28]
 8006018:	4413      	add	r3, r2
 800601a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800601e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006020:	6a3b      	ldr	r3, [r7, #32]
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006024:	e01e      	b.n	8006064 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800602c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800602e:	3301      	adds	r3, #1
 8006030:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	b29b      	uxth	r3, r3
 8006038:	021b      	lsls	r3, r3, #8
 800603a:	b29b      	uxth	r3, r3
 800603c:	461a      	mov	r2, r3
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4313      	orrs	r3, r2
 8006042:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	b29a      	uxth	r2, r3
 8006048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800604c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800604e:	3302      	adds	r3, #2
 8006050:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	3302      	adds	r3, #2
 8006056:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800605a:	3301      	adds	r3, #1
 800605c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006060:	3b01      	subs	r3, #1
 8006062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006066:	2b00      	cmp	r3, #0
 8006068:	d1dd      	bne.n	8006026 <USB_WritePMA+0x3a>
  }
}
 800606a:	bf00      	nop
 800606c:	bf00      	nop
 800606e:	3734      	adds	r7, #52	; 0x34
 8006070:	46bd      	mov	sp, r7
 8006072:	bc80      	pop	{r7}
 8006074:	4770      	bx	lr

08006076 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006076:	b480      	push	{r7}
 8006078:	b08b      	sub	sp, #44	; 0x2c
 800607a:	af00      	add	r7, sp, #0
 800607c:	60f8      	str	r0, [r7, #12]
 800607e:	60b9      	str	r1, [r7, #8]
 8006080:	4611      	mov	r1, r2
 8006082:	461a      	mov	r2, r3
 8006084:	460b      	mov	r3, r1
 8006086:	80fb      	strh	r3, [r7, #6]
 8006088:	4613      	mov	r3, r2
 800608a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800608c:	88bb      	ldrh	r3, [r7, #4]
 800608e:	085b      	lsrs	r3, r3, #1
 8006090:	b29b      	uxth	r3, r3
 8006092:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800609c:	88fb      	ldrh	r3, [r7, #6]
 800609e:	005a      	lsls	r2, r3, #1
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80060a8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80060aa:	69bb      	ldr	r3, [r7, #24]
 80060ac:	627b      	str	r3, [r7, #36]	; 0x24
 80060ae:	e01b      	b.n	80060e8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80060b0:	6a3b      	ldr	r3, [r7, #32]
 80060b2:	881b      	ldrh	r3, [r3, #0]
 80060b4:	b29b      	uxth	r3, r3
 80060b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	3302      	adds	r3, #2
 80060bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	3301      	adds	r3, #1
 80060ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	0a1b      	lsrs	r3, r3, #8
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	69fb      	ldr	r3, [r7, #28]
 80060d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	3301      	adds	r3, #1
 80060da:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	3302      	adds	r3, #2
 80060e0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	3b01      	subs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
 80060e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d1e0      	bne.n	80060b0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80060ee:	88bb      	ldrh	r3, [r7, #4]
 80060f0:	f003 0301 	and.w	r3, r3, #1
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	881b      	ldrh	r3, [r3, #0]
 80060fe:	b29b      	uxth	r3, r3
 8006100:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	701a      	strb	r2, [r3, #0]
  }
}
 800610a:	bf00      	nop
 800610c:	372c      	adds	r7, #44	; 0x2c
 800610e:	46bd      	mov	sp, r7
 8006110:	bc80      	pop	{r7}
 8006112:	4770      	bx	lr

08006114 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	460b      	mov	r3, r1
 800611e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006120:	2300      	movs	r3, #0
 8006122:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	7c1b      	ldrb	r3, [r3, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d115      	bne.n	8006158 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800612c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006130:	2202      	movs	r2, #2
 8006132:	2181      	movs	r1, #129	; 0x81
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f001 fe30 	bl	8007d9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2201      	movs	r2, #1
 800613e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006140:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006144:	2202      	movs	r2, #2
 8006146:	2101      	movs	r1, #1
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f001 fe26 	bl	8007d9a <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2201      	movs	r2, #1
 8006152:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006156:	e012      	b.n	800617e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006158:	2340      	movs	r3, #64	; 0x40
 800615a:	2202      	movs	r2, #2
 800615c:	2181      	movs	r1, #129	; 0x81
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f001 fe1b 	bl	8007d9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2201      	movs	r2, #1
 8006168:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800616a:	2340      	movs	r3, #64	; 0x40
 800616c:	2202      	movs	r2, #2
 800616e:	2101      	movs	r1, #1
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f001 fe12 	bl	8007d9a <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800617e:	2308      	movs	r3, #8
 8006180:	2203      	movs	r2, #3
 8006182:	2182      	movs	r1, #130	; 0x82
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f001 fe08 	bl	8007d9a <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2201      	movs	r2, #1
 800618e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006190:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006194:	f001 ff28 	bl	8007fe8 <USBD_static_malloc>
 8006198:	4602      	mov	r2, r0
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d102      	bne.n	80061b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80061aa:	2301      	movs	r3, #1
 80061ac:	73fb      	strb	r3, [r7, #15]
 80061ae:	e026      	b.n	80061fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2200      	movs	r2, #0
 80061ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	7c1b      	ldrb	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d109      	bne.n	80061ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80061e4:	2101      	movs	r1, #1
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f001 fec8 	bl	8007f7c <USBD_LL_PrepareReceive>
 80061ec:	e007      	b.n	80061fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80061f4:	2340      	movs	r3, #64	; 0x40
 80061f6:	2101      	movs	r1, #1
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f001 febf 	bl	8007f7c <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80061fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3710      	adds	r7, #16
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	460b      	mov	r3, r1
 8006212:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006218:	2181      	movs	r1, #129	; 0x81
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f001 fde3 	bl	8007de6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006226:	2101      	movs	r1, #1
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f001 fddc 	bl	8007de6 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006236:	2182      	movs	r1, #130	; 0x82
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fdd4 	bl	8007de6 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00e      	beq.n	800626c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800625e:	4618      	mov	r0, r3
 8006260:	f001 fece 	bl	8008000 <USBD_static_free>
    pdev->pClassData = NULL;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800626c:	7bfb      	ldrb	r3, [r7, #15]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b086      	sub	sp, #24
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006286:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006288:	2300      	movs	r3, #0
 800628a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800628c:	2300      	movs	r3, #0
 800628e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006290:	2300      	movs	r3, #0
 8006292:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	781b      	ldrb	r3, [r3, #0]
 8006298:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800629c:	2b00      	cmp	r3, #0
 800629e:	d039      	beq.n	8006314 <USBD_CDC_Setup+0x9e>
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d17f      	bne.n	80063a4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	88db      	ldrh	r3, [r3, #6]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d029      	beq.n	8006300 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	b25b      	sxtb	r3, r3
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da11      	bge.n	80062da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80062bc:	689b      	ldr	r3, [r3, #8]
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80062c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	88d2      	ldrh	r2, [r2, #6]
 80062c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062ca:	6939      	ldr	r1, [r7, #16]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	88db      	ldrh	r3, [r3, #6]
 80062d0:	461a      	mov	r2, r3
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f001 f9d9 	bl	800768a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80062d8:	e06b      	b.n	80063b2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	785a      	ldrb	r2, [r3, #1]
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	88db      	ldrh	r3, [r3, #6]
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80062f0:	6939      	ldr	r1, [r7, #16]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	88db      	ldrh	r3, [r3, #6]
 80062f6:	461a      	mov	r2, r3
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f001 f9f4 	bl	80076e6 <USBD_CtlPrepareRx>
      break;
 80062fe:	e058      	b.n	80063b2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	7850      	ldrb	r0, [r2, #1]
 800630c:	2200      	movs	r2, #0
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4798      	blx	r3
      break;
 8006312:	e04e      	b.n	80063b2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b0b      	cmp	r3, #11
 800631a:	d02e      	beq.n	800637a <USBD_CDC_Setup+0x104>
 800631c:	2b0b      	cmp	r3, #11
 800631e:	dc38      	bgt.n	8006392 <USBD_CDC_Setup+0x11c>
 8006320:	2b00      	cmp	r3, #0
 8006322:	d002      	beq.n	800632a <USBD_CDC_Setup+0xb4>
 8006324:	2b0a      	cmp	r3, #10
 8006326:	d014      	beq.n	8006352 <USBD_CDC_Setup+0xdc>
 8006328:	e033      	b.n	8006392 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006330:	2b03      	cmp	r3, #3
 8006332:	d107      	bne.n	8006344 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006334:	f107 030c 	add.w	r3, r7, #12
 8006338:	2202      	movs	r2, #2
 800633a:	4619      	mov	r1, r3
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 f9a4 	bl	800768a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006342:	e02e      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f001 f935 	bl	80075b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800634c:	2302      	movs	r3, #2
 800634e:	75fb      	strb	r3, [r7, #23]
          break;
 8006350:	e027      	b.n	80063a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006358:	2b03      	cmp	r3, #3
 800635a:	d107      	bne.n	800636c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 800635c:	f107 030f 	add.w	r3, r7, #15
 8006360:	2201      	movs	r2, #1
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f001 f990 	bl	800768a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800636a:	e01a      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800636c:	6839      	ldr	r1, [r7, #0]
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f001 f921 	bl	80075b6 <USBD_CtlError>
            ret = USBD_FAIL;
 8006374:	2302      	movs	r3, #2
 8006376:	75fb      	strb	r3, [r7, #23]
          break;
 8006378:	e013      	b.n	80063a2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006380:	2b03      	cmp	r3, #3
 8006382:	d00d      	beq.n	80063a0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006384:	6839      	ldr	r1, [r7, #0]
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f001 f915 	bl	80075b6 <USBD_CtlError>
            ret = USBD_FAIL;
 800638c:	2302      	movs	r3, #2
 800638e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006390:	e006      	b.n	80063a0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006392:	6839      	ldr	r1, [r7, #0]
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 f90e 	bl	80075b6 <USBD_CtlError>
          ret = USBD_FAIL;
 800639a:	2302      	movs	r3, #2
 800639c:	75fb      	strb	r3, [r7, #23]
          break;
 800639e:	e000      	b.n	80063a2 <USBD_CDC_Setup+0x12c>
          break;
 80063a0:	bf00      	nop
      }
      break;
 80063a2:	e006      	b.n	80063b2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f001 f905 	bl	80075b6 <USBD_CtlError>
      ret = USBD_FAIL;
 80063ac:	2302      	movs	r3, #2
 80063ae:	75fb      	strb	r3, [r7, #23]
      break;
 80063b0:	bf00      	nop
  }

  return ret;
 80063b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3718      	adds	r7, #24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd80      	pop	{r7, pc}

080063bc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b084      	sub	sp, #16
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	460b      	mov	r3, r1
 80063c6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ce:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80063d6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d03a      	beq.n	8006458 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80063e2:	78fa      	ldrb	r2, [r7, #3]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	331c      	adds	r3, #28
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d029      	beq.n	800644c <USBD_CDC_DataIn+0x90>
 80063f8:	78fa      	ldrb	r2, [r7, #3]
 80063fa:	6879      	ldr	r1, [r7, #4]
 80063fc:	4613      	mov	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	440b      	add	r3, r1
 8006406:	331c      	adds	r3, #28
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	78f9      	ldrb	r1, [r7, #3]
 800640c:	68b8      	ldr	r0, [r7, #8]
 800640e:	460b      	mov	r3, r1
 8006410:	009b      	lsls	r3, r3, #2
 8006412:	440b      	add	r3, r1
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4403      	add	r3, r0
 8006418:	3338      	adds	r3, #56	; 0x38
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006420:	fb01 f303 	mul.w	r3, r1, r3
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d110      	bne.n	800644c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800642a:	78fa      	ldrb	r2, [r7, #3]
 800642c:	6879      	ldr	r1, [r7, #4]
 800642e:	4613      	mov	r3, r2
 8006430:	009b      	lsls	r3, r3, #2
 8006432:	4413      	add	r3, r2
 8006434:	009b      	lsls	r3, r3, #2
 8006436:	440b      	add	r3, r1
 8006438:	331c      	adds	r3, #28
 800643a:	2200      	movs	r2, #0
 800643c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800643e:	78f9      	ldrb	r1, [r7, #3]
 8006440:	2300      	movs	r3, #0
 8006442:	2200      	movs	r2, #0
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f001 fd76 	bl	8007f36 <USBD_LL_Transmit>
 800644a:	e003      	b.n	8006454 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006454:	2300      	movs	r3, #0
 8006456:	e000      	b.n	800645a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006458:	2302      	movs	r3, #2
  }
}
 800645a:	4618      	mov	r0, r3
 800645c:	3710      	adds	r7, #16
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}

08006462 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006462:	b580      	push	{r7, lr}
 8006464:	b084      	sub	sp, #16
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006474:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	4619      	mov	r1, r3
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	f001 fda1 	bl	8007fc2 <USBD_LL_GetRxDataSize>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00d      	beq.n	80064ae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	68fa      	ldr	r2, [r7, #12]
 800649c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80064a6:	4611      	mov	r1, r2
 80064a8:	4798      	blx	r3

    return USBD_OK;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e000      	b.n	80064b0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80064ae:	2302      	movs	r3, #2
  }
}
 80064b0:	4618      	mov	r0, r3
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b084      	sub	sp, #16
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064c6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d015      	beq.n	80064fe <USBD_CDC_EP0_RxReady+0x46>
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80064d8:	2bff      	cmp	r3, #255	; 0xff
 80064da:	d010      	beq.n	80064fe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	68fa      	ldr	r2, [r7, #12]
 80064e6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 80064ea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80064f2:	b292      	uxth	r2, r2
 80064f4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	22ff      	movs	r2, #255	; 0xff
 80064fa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 80064fe:	2300      	movs	r3, #0
}
 8006500:	4618      	mov	r0, r3
 8006502:	3710      	adds	r7, #16
 8006504:	46bd      	mov	sp, r7
 8006506:	bd80      	pop	{r7, pc}

08006508 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2243      	movs	r2, #67	; 0x43
 8006514:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006516:	4b03      	ldr	r3, [pc, #12]	; (8006524 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006518:	4618      	mov	r0, r3
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	bc80      	pop	{r7}
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	200000a8 	.word	0x200000a8

08006528 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006528:	b480      	push	{r7}
 800652a:	b083      	sub	sp, #12
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2243      	movs	r2, #67	; 0x43
 8006534:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006536:	4b03      	ldr	r3, [pc, #12]	; (8006544 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006538:	4618      	mov	r0, r3
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	bc80      	pop	{r7}
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000064 	.word	0x20000064

08006548 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2243      	movs	r2, #67	; 0x43
 8006554:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006556:	4b03      	ldr	r3, [pc, #12]	; (8006564 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006558:	4618      	mov	r0, r3
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	bc80      	pop	{r7}
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	200000ec 	.word	0x200000ec

08006568 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	220a      	movs	r2, #10
 8006574:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006576:	4b03      	ldr	r3, [pc, #12]	; (8006584 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006578:	4618      	mov	r0, r3
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	bc80      	pop	{r7}
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop
 8006584:	20000020 	.word	0x20000020

08006588 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006592:	2302      	movs	r3, #2
 8006594:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d005      	beq.n	80065a8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	683a      	ldr	r2, [r7, #0]
 80065a0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3714      	adds	r7, #20
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bc80      	pop	{r7}
 80065b2:	4770      	bx	lr

080065b4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b087      	sub	sp, #28
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	4613      	mov	r3, r2
 80065c0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	68ba      	ldr	r2, [r7, #8]
 80065ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80065d2:	88fa      	ldrh	r2, [r7, #6]
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80065da:	2300      	movs	r3, #0
}
 80065dc:	4618      	mov	r0, r3
 80065de:	371c      	adds	r7, #28
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bc80      	pop	{r7}
 80065e4:	4770      	bx	lr

080065e6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065f6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	683a      	ldr	r2, [r7, #0]
 80065fc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	bc80      	pop	{r7}
 800660a:	4770      	bx	lr

0800660c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800661a:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006622:	2b00      	cmp	r3, #0
 8006624:	d017      	beq.n	8006656 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	7c1b      	ldrb	r3, [r3, #16]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d109      	bne.n	8006642 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006634:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006638:	2101      	movs	r1, #1
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f001 fc9e 	bl	8007f7c <USBD_LL_PrepareReceive>
 8006640:	e007      	b.n	8006652 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006648:	2340      	movs	r3, #64	; 0x40
 800664a:	2101      	movs	r1, #1
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 fc95 	bl	8007f7c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006652:	2300      	movs	r3, #0
 8006654:	e000      	b.n	8006658 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006656:	2302      	movs	r3, #2
  }
}
 8006658:	4618      	mov	r0, r3
 800665a:	3710      	adds	r7, #16
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}

08006660 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	60f8      	str	r0, [r7, #12]
 8006668:	60b9      	str	r1, [r7, #8]
 800666a:	4613      	mov	r3, r2
 800666c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d101      	bne.n	8006678 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006674:	2302      	movs	r3, #2
 8006676:	e01a      	b.n	80066ae <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2200      	movs	r2, #0
 8006686:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d003      	beq.n	8006698 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	68ba      	ldr	r2, [r7, #8]
 8006694:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	79fa      	ldrb	r2, [r7, #7]
 80066a4:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80066a6:	68f8      	ldr	r0, [r7, #12]
 80066a8:	f001 fb02 	bl	8007cb0 <USBD_LL_Init>

  return USBD_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80066b6:	b480      	push	{r7}
 80066b8:	b085      	sub	sp, #20
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80066c0:	2300      	movs	r3, #0
 80066c2:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d006      	beq.n	80066d8 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	683a      	ldr	r2, [r7, #0]
 80066ce:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 80066d2:	2300      	movs	r3, #0
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e001      	b.n	80066dc <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 80066d8:	2302      	movs	r3, #2
 80066da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bc80      	pop	{r7}
 80066e6:	4770      	bx	lr

080066e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b082      	sub	sp, #8
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 80066f0:	6878      	ldr	r0, [r7, #4]
 80066f2:	f001 fb37 	bl	8007d64 <USBD_LL_Start>

  return USBD_OK;
 80066f6:	2300      	movs	r3, #0
}
 80066f8:	4618      	mov	r0, r3
 80066fa:	3708      	adds	r7, #8
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006708:	2300      	movs	r3, #0
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	bc80      	pop	{r7}
 8006712:	4770      	bx	lr

08006714 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b084      	sub	sp, #16
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	460b      	mov	r3, r1
 800671e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006720:	2302      	movs	r3, #2
 8006722:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00c      	beq.n	8006748 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	78fa      	ldrb	r2, [r7, #3]
 8006738:	4611      	mov	r1, r2
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	2b00      	cmp	r3, #0
 8006742:	d101      	bne.n	8006748 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006744:	2300      	movs	r3, #0
 8006746:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006748:	7bfb      	ldrb	r3, [r7, #15]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b082      	sub	sp, #8
 8006756:	af00      	add	r7, sp, #0
 8006758:	6078      	str	r0, [r7, #4]
 800675a:	460b      	mov	r3, r1
 800675c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006764:	685b      	ldr	r3, [r3, #4]
 8006766:	78fa      	ldrb	r2, [r7, #3]
 8006768:	4611      	mov	r1, r2
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	4798      	blx	r3

  return USBD_OK;
 800676e:	2300      	movs	r3, #0
}
 8006770:	4618      	mov	r0, r3
 8006772:	3708      	adds	r7, #8
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}

08006778 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b082      	sub	sp, #8
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	4618      	mov	r0, r3
 800678c:	f000 fed7 	bl	800753e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2201      	movs	r2, #1
 8006794:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800679e:	461a      	mov	r2, r3
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067ac:	f003 031f 	and.w	r3, r3, #31
 80067b0:	2b02      	cmp	r3, #2
 80067b2:	d016      	beq.n	80067e2 <USBD_LL_SetupStage+0x6a>
 80067b4:	2b02      	cmp	r3, #2
 80067b6:	d81c      	bhi.n	80067f2 <USBD_LL_SetupStage+0x7a>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d002      	beq.n	80067c2 <USBD_LL_SetupStage+0x4a>
 80067bc:	2b01      	cmp	r3, #1
 80067be:	d008      	beq.n	80067d2 <USBD_LL_SetupStage+0x5a>
 80067c0:	e017      	b.n	80067f2 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067c8:	4619      	mov	r1, r3
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9ca 	bl	8006b64 <USBD_StdDevReq>
      break;
 80067d0:	e01a      	b.n	8006808 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067d8:	4619      	mov	r1, r3
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 fa2c 	bl	8006c38 <USBD_StdItfReq>
      break;
 80067e0:	e012      	b.n	8006808 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 fa6c 	bl	8006cc8 <USBD_StdEPReq>
      break;
 80067f0:	e00a      	b.n	8006808 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80067f8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	4619      	mov	r1, r3
 8006800:	6878      	ldr	r0, [r7, #4]
 8006802:	f001 fb0f 	bl	8007e24 <USBD_LL_StallEP>
      break;
 8006806:	bf00      	nop
  }

  return USBD_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}

08006812 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006812:	b580      	push	{r7, lr}
 8006814:	b086      	sub	sp, #24
 8006816:	af00      	add	r7, sp, #0
 8006818:	60f8      	str	r0, [r7, #12]
 800681a:	460b      	mov	r3, r1
 800681c:	607a      	str	r2, [r7, #4]
 800681e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006820:	7afb      	ldrb	r3, [r7, #11]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d14b      	bne.n	80068be <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800682c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006834:	2b03      	cmp	r3, #3
 8006836:	d134      	bne.n	80068a2 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	68da      	ldr	r2, [r3, #12]
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	691b      	ldr	r3, [r3, #16]
 8006840:	429a      	cmp	r2, r3
 8006842:	d919      	bls.n	8006878 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	68da      	ldr	r2, [r3, #12]
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	691b      	ldr	r3, [r3, #16]
 800684c:	1ad2      	subs	r2, r2, r3
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	68da      	ldr	r2, [r3, #12]
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800685a:	429a      	cmp	r2, r3
 800685c:	d203      	bcs.n	8006866 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006862:	b29b      	uxth	r3, r3
 8006864:	e002      	b.n	800686c <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 800686a:	b29b      	uxth	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	6879      	ldr	r1, [r7, #4]
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 ff56 	bl	8007722 <USBD_CtlContinueRx>
 8006876:	e038      	b.n	80068ea <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800687e:	691b      	ldr	r3, [r3, #16]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00a      	beq.n	800689a <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800688a:	2b03      	cmp	r3, #3
 800688c:	d105      	bne.n	800689a <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006894:	691b      	ldr	r3, [r3, #16]
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f000 ff53 	bl	8007746 <USBD_CtlSendStatus>
 80068a0:	e023      	b.n	80068ea <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80068a8:	2b05      	cmp	r3, #5
 80068aa:	d11e      	bne.n	80068ea <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 80068b4:	2100      	movs	r1, #0
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f001 fab4 	bl	8007e24 <USBD_LL_StallEP>
 80068bc:	e015      	b.n	80068ea <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d00d      	beq.n	80068e6 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 80068d0:	2b03      	cmp	r3, #3
 80068d2:	d108      	bne.n	80068e6 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068da:	699b      	ldr	r3, [r3, #24]
 80068dc:	7afa      	ldrb	r2, [r7, #11]
 80068de:	4611      	mov	r1, r2
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	4798      	blx	r3
 80068e4:	e001      	b.n	80068ea <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80068e6:	2302      	movs	r3, #2
 80068e8:	e000      	b.n	80068ec <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 80068ea:	2300      	movs	r3, #0
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3718      	adds	r7, #24
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}

080068f4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	460b      	mov	r3, r1
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006902:	7afb      	ldrb	r3, [r7, #11]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d17f      	bne.n	8006a08 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3314      	adds	r3, #20
 800690c:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006914:	2b02      	cmp	r3, #2
 8006916:	d15c      	bne.n	80069d2 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	68da      	ldr	r2, [r3, #12]
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	429a      	cmp	r2, r3
 8006922:	d915      	bls.n	8006950 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	68da      	ldr	r2, [r3, #12]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	1ad2      	subs	r2, r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6879      	ldr	r1, [r7, #4]
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 fec0 	bl	80076c2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006942:	2300      	movs	r3, #0
 8006944:	2200      	movs	r2, #0
 8006946:	2100      	movs	r1, #0
 8006948:	68f8      	ldr	r0, [r7, #12]
 800694a:	f001 fb17 	bl	8007f7c <USBD_LL_PrepareReceive>
 800694e:	e04e      	b.n	80069ee <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	697a      	ldr	r2, [r7, #20]
 8006956:	6912      	ldr	r2, [r2, #16]
 8006958:	fbb3 f1f2 	udiv	r1, r3, r2
 800695c:	fb01 f202 	mul.w	r2, r1, r2
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d11c      	bne.n	80069a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	689a      	ldr	r2, [r3, #8]
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 800696e:	429a      	cmp	r2, r3
 8006970:	d316      	bcc.n	80069a0 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	689a      	ldr	r2, [r3, #8]
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800697c:	429a      	cmp	r2, r3
 800697e:	d20f      	bcs.n	80069a0 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006980:	2200      	movs	r2, #0
 8006982:	2100      	movs	r1, #0
 8006984:	68f8      	ldr	r0, [r7, #12]
 8006986:	f000 fe9c 	bl	80076c2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006992:	2300      	movs	r3, #0
 8006994:	2200      	movs	r2, #0
 8006996:	2100      	movs	r1, #0
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f001 faef 	bl	8007f7c <USBD_LL_PrepareReceive>
 800699e:	e026      	b.n	80069ee <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00a      	beq.n	80069c2 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80069b2:	2b03      	cmp	r3, #3
 80069b4:	d105      	bne.n	80069c2 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069bc:	68db      	ldr	r3, [r3, #12]
 80069be:	68f8      	ldr	r0, [r7, #12]
 80069c0:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80069c2:	2180      	movs	r1, #128	; 0x80
 80069c4:	68f8      	ldr	r0, [r7, #12]
 80069c6:	f001 fa2d 	bl	8007e24 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80069ca:	68f8      	ldr	r0, [r7, #12]
 80069cc:	f000 fece 	bl	800776c <USBD_CtlReceiveStatus>
 80069d0:	e00d      	b.n	80069ee <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d004      	beq.n	80069e6 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d103      	bne.n	80069ee <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80069e6:	2180      	movs	r1, #128	; 0x80
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f001 fa1b 	bl	8007e24 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d11d      	bne.n	8006a34 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fe81 	bl	8006700 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006a06:	e015      	b.n	8006a34 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00d      	beq.n	8006a30 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006a1a:	2b03      	cmp	r3, #3
 8006a1c:	d108      	bne.n	8006a30 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	7afa      	ldrb	r2, [r7, #11]
 8006a28:	4611      	mov	r1, r2
 8006a2a:	68f8      	ldr	r0, [r7, #12]
 8006a2c:	4798      	blx	r3
 8006a2e:	e001      	b.n	8006a34 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006a30:	2302      	movs	r3, #2
 8006a32:	e000      	b.n	8006a36 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3718      	adds	r7, #24
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b082      	sub	sp, #8
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a46:	2340      	movs	r3, #64	; 0x40
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f001 f9a4 	bl	8007d9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2240      	movs	r2, #64	; 0x40
 8006a5e:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a62:	2340      	movs	r3, #64	; 0x40
 8006a64:	2200      	movs	r2, #0
 8006a66:	2180      	movs	r1, #128	; 0x80
 8006a68:	6878      	ldr	r0, [r7, #4]
 8006a6a:	f001 f996 	bl	8007d9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2240      	movs	r2, #64	; 0x40
 8006a78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d009      	beq.n	8006ab6 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	6852      	ldr	r2, [r2, #4]
 8006aae:	b2d2      	uxtb	r2, r2
 8006ab0:	4611      	mov	r1, r2
 8006ab2:	6878      	ldr	r0, [r7, #4]
 8006ab4:	4798      	blx	r3
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3708      	adds	r7, #8
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006ac0:	b480      	push	{r7}
 8006ac2:	b083      	sub	sp, #12
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	460b      	mov	r3, r1
 8006aca:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	78fa      	ldrb	r2, [r7, #3]
 8006ad0:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006ad2:	2300      	movs	r3, #0
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bc80      	pop	{r7}
 8006adc:	4770      	bx	lr

08006ade <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2204      	movs	r2, #4
 8006af6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bc80      	pop	{r7}
 8006b04:	4770      	bx	lr

08006b06 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b14:	2b04      	cmp	r3, #4
 8006b16:	d105      	bne.n	8006b24 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b24:	2300      	movs	r3, #0
}
 8006b26:	4618      	mov	r0, r3
 8006b28:	370c      	adds	r7, #12
 8006b2a:	46bd      	mov	sp, r7
 8006b2c:	bc80      	pop	{r7}
 8006b2e:	4770      	bx	lr

08006b30 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d10b      	bne.n	8006b5a <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b48:	69db      	ldr	r3, [r3, #28]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d005      	beq.n	8006b5a <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b54:	69db      	ldr	r3, [r3, #28]
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b5a:	2300      	movs	r3, #0
}
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}

08006b64 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	781b      	ldrb	r3, [r3, #0]
 8006b76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b7a:	2b40      	cmp	r3, #64	; 0x40
 8006b7c:	d005      	beq.n	8006b8a <USBD_StdDevReq+0x26>
 8006b7e:	2b40      	cmp	r3, #64	; 0x40
 8006b80:	d84f      	bhi.n	8006c22 <USBD_StdDevReq+0xbe>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d009      	beq.n	8006b9a <USBD_StdDevReq+0x36>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	d14b      	bne.n	8006c22 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b90:	689b      	ldr	r3, [r3, #8]
 8006b92:	6839      	ldr	r1, [r7, #0]
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	4798      	blx	r3
      break;
 8006b98:	e048      	b.n	8006c2c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	785b      	ldrb	r3, [r3, #1]
 8006b9e:	2b09      	cmp	r3, #9
 8006ba0:	d839      	bhi.n	8006c16 <USBD_StdDevReq+0xb2>
 8006ba2:	a201      	add	r2, pc, #4	; (adr r2, 8006ba8 <USBD_StdDevReq+0x44>)
 8006ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ba8:	08006bf9 	.word	0x08006bf9
 8006bac:	08006c0d 	.word	0x08006c0d
 8006bb0:	08006c17 	.word	0x08006c17
 8006bb4:	08006c03 	.word	0x08006c03
 8006bb8:	08006c17 	.word	0x08006c17
 8006bbc:	08006bdb 	.word	0x08006bdb
 8006bc0:	08006bd1 	.word	0x08006bd1
 8006bc4:	08006c17 	.word	0x08006c17
 8006bc8:	08006bef 	.word	0x08006bef
 8006bcc:	08006be5 	.word	0x08006be5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f000 f9dc 	bl	8006f90 <USBD_GetDescriptor>
          break;
 8006bd8:	e022      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fb3f 	bl	8007260 <USBD_SetAddress>
          break;
 8006be2:	e01d      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb7e 	bl	80072e8 <USBD_SetConfig>
          break;
 8006bec:	e018      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006bee:	6839      	ldr	r1, [r7, #0]
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fc07 	bl	8007404 <USBD_GetConfig>
          break;
 8006bf6:	e013      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bf8:	6839      	ldr	r1, [r7, #0]
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 fc37 	bl	800746e <USBD_GetStatus>
          break;
 8006c00:	e00e      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fc65 	bl	80074d4 <USBD_SetFeature>
          break;
 8006c0a:	e009      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c0c:	6839      	ldr	r1, [r7, #0]
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f000 fc74 	bl	80074fc <USBD_ClrFeature>
          break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fccc 	bl	80075b6 <USBD_CtlError>
          break;
 8006c1e:	bf00      	nop
      }
      break;
 8006c20:	e004      	b.n	8006c2c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006c22:	6839      	ldr	r1, [r7, #0]
 8006c24:	6878      	ldr	r0, [r7, #4]
 8006c26:	f000 fcc6 	bl	80075b6 <USBD_CtlError>
      break;
 8006c2a:	bf00      	nop
  }

  return ret;
 8006c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3710      	adds	r7, #16
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop

08006c38 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c4e:	2b40      	cmp	r3, #64	; 0x40
 8006c50:	d005      	beq.n	8006c5e <USBD_StdItfReq+0x26>
 8006c52:	2b40      	cmp	r3, #64	; 0x40
 8006c54:	d82e      	bhi.n	8006cb4 <USBD_StdItfReq+0x7c>
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d001      	beq.n	8006c5e <USBD_StdItfReq+0x26>
 8006c5a:	2b20      	cmp	r3, #32
 8006c5c:	d12a      	bne.n	8006cb4 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c64:	3b01      	subs	r3, #1
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d81d      	bhi.n	8006ca6 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	2b01      	cmp	r3, #1
 8006c72:	d813      	bhi.n	8006c9c <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	6839      	ldr	r1, [r7, #0]
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	4798      	blx	r3
 8006c82:	4603      	mov	r3, r0
 8006c84:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	88db      	ldrh	r3, [r3, #6]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d110      	bne.n	8006cb0 <USBD_StdItfReq+0x78>
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d10d      	bne.n	8006cb0 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fd56 	bl	8007746 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c9a:	e009      	b.n	8006cb0 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006c9c:	6839      	ldr	r1, [r7, #0]
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fc89 	bl	80075b6 <USBD_CtlError>
          break;
 8006ca4:	e004      	b.n	8006cb0 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ca6:	6839      	ldr	r1, [r7, #0]
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fc84 	bl	80075b6 <USBD_CtlError>
          break;
 8006cae:	e000      	b.n	8006cb2 <USBD_StdItfReq+0x7a>
          break;
 8006cb0:	bf00      	nop
      }
      break;
 8006cb2:	e004      	b.n	8006cbe <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006cb4:	6839      	ldr	r1, [r7, #0]
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 fc7d 	bl	80075b6 <USBD_CtlError>
      break;
 8006cbc:	bf00      	nop
  }

  return USBD_OK;
 8006cbe:	2300      	movs	r3, #0
}
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	3710      	adds	r7, #16
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	889b      	ldrh	r3, [r3, #4]
 8006cda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	781b      	ldrb	r3, [r3, #0]
 8006ce0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006ce4:	2b40      	cmp	r3, #64	; 0x40
 8006ce6:	d007      	beq.n	8006cf8 <USBD_StdEPReq+0x30>
 8006ce8:	2b40      	cmp	r3, #64	; 0x40
 8006cea:	f200 8146 	bhi.w	8006f7a <USBD_StdEPReq+0x2b2>
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00a      	beq.n	8006d08 <USBD_StdEPReq+0x40>
 8006cf2:	2b20      	cmp	r3, #32
 8006cf4:	f040 8141 	bne.w	8006f7a <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	6839      	ldr	r1, [r7, #0]
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	4798      	blx	r3
      break;
 8006d06:	e13d      	b.n	8006f84 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d10:	2b20      	cmp	r3, #32
 8006d12:	d10a      	bne.n	8006d2a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	689b      	ldr	r3, [r3, #8]
 8006d1c:	6839      	ldr	r1, [r7, #0]
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	4798      	blx	r3
 8006d22:	4603      	mov	r3, r0
 8006d24:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006d26:	7bfb      	ldrb	r3, [r7, #15]
 8006d28:	e12d      	b.n	8006f86 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	785b      	ldrb	r3, [r3, #1]
 8006d2e:	2b03      	cmp	r3, #3
 8006d30:	d007      	beq.n	8006d42 <USBD_StdEPReq+0x7a>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	f300 811b 	bgt.w	8006f6e <USBD_StdEPReq+0x2a6>
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d072      	beq.n	8006e22 <USBD_StdEPReq+0x15a>
 8006d3c:	2b01      	cmp	r3, #1
 8006d3e:	d03a      	beq.n	8006db6 <USBD_StdEPReq+0xee>
 8006d40:	e115      	b.n	8006f6e <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d48:	2b02      	cmp	r3, #2
 8006d4a:	d002      	beq.n	8006d52 <USBD_StdEPReq+0x8a>
 8006d4c:	2b03      	cmp	r3, #3
 8006d4e:	d015      	beq.n	8006d7c <USBD_StdEPReq+0xb4>
 8006d50:	e02b      	b.n	8006daa <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d52:	7bbb      	ldrb	r3, [r7, #14]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d00c      	beq.n	8006d72 <USBD_StdEPReq+0xaa>
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b80      	cmp	r3, #128	; 0x80
 8006d5c:	d009      	beq.n	8006d72 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	4619      	mov	r1, r3
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f001 f85e 	bl	8007e24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006d68:	2180      	movs	r1, #128	; 0x80
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f001 f85a 	bl	8007e24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d70:	e020      	b.n	8006db4 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006d72:	6839      	ldr	r1, [r7, #0]
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 fc1e 	bl	80075b6 <USBD_CtlError>
              break;
 8006d7a:	e01b      	b.n	8006db4 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	885b      	ldrh	r3, [r3, #2]
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d10e      	bne.n	8006da2 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006d84:	7bbb      	ldrb	r3, [r7, #14]
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00b      	beq.n	8006da2 <USBD_StdEPReq+0xda>
 8006d8a:	7bbb      	ldrb	r3, [r7, #14]
 8006d8c:	2b80      	cmp	r3, #128	; 0x80
 8006d8e:	d008      	beq.n	8006da2 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	88db      	ldrh	r3, [r3, #6]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d104      	bne.n	8006da2 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006d98:	7bbb      	ldrb	r3, [r7, #14]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 f841 	bl	8007e24 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 fccf 	bl	8007746 <USBD_CtlSendStatus>

              break;
 8006da8:	e004      	b.n	8006db4 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006daa:	6839      	ldr	r1, [r7, #0]
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f000 fc02 	bl	80075b6 <USBD_CtlError>
              break;
 8006db2:	bf00      	nop
          }
          break;
 8006db4:	e0e0      	b.n	8006f78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dbc:	2b02      	cmp	r3, #2
 8006dbe:	d002      	beq.n	8006dc6 <USBD_StdEPReq+0xfe>
 8006dc0:	2b03      	cmp	r3, #3
 8006dc2:	d015      	beq.n	8006df0 <USBD_StdEPReq+0x128>
 8006dc4:	e026      	b.n	8006e14 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00c      	beq.n	8006de6 <USBD_StdEPReq+0x11e>
 8006dcc:	7bbb      	ldrb	r3, [r7, #14]
 8006dce:	2b80      	cmp	r3, #128	; 0x80
 8006dd0:	d009      	beq.n	8006de6 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006dd2:	7bbb      	ldrb	r3, [r7, #14]
 8006dd4:	4619      	mov	r1, r3
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f001 f824 	bl	8007e24 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006ddc:	2180      	movs	r1, #128	; 0x80
 8006dde:	6878      	ldr	r0, [r7, #4]
 8006de0:	f001 f820 	bl	8007e24 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006de4:	e01c      	b.n	8006e20 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8006de6:	6839      	ldr	r1, [r7, #0]
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f000 fbe4 	bl	80075b6 <USBD_CtlError>
              break;
 8006dee:	e017      	b.n	8006e20 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	885b      	ldrh	r3, [r3, #2]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d112      	bne.n	8006e1e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d004      	beq.n	8006e0c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e02:	7bbb      	ldrb	r3, [r7, #14]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f001 f82b 	bl	8007e62 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc9a 	bl	8007746 <USBD_CtlSendStatus>
              }
              break;
 8006e12:	e004      	b.n	8006e1e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8006e14:	6839      	ldr	r1, [r7, #0]
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	f000 fbcd 	bl	80075b6 <USBD_CtlError>
              break;
 8006e1c:	e000      	b.n	8006e20 <USBD_StdEPReq+0x158>
              break;
 8006e1e:	bf00      	nop
          }
          break;
 8006e20:	e0aa      	b.n	8006f78 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e28:	2b02      	cmp	r3, #2
 8006e2a:	d002      	beq.n	8006e32 <USBD_StdEPReq+0x16a>
 8006e2c:	2b03      	cmp	r3, #3
 8006e2e:	d032      	beq.n	8006e96 <USBD_StdEPReq+0x1ce>
 8006e30:	e097      	b.n	8006f62 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e32:	7bbb      	ldrb	r3, [r7, #14]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d007      	beq.n	8006e48 <USBD_StdEPReq+0x180>
 8006e38:	7bbb      	ldrb	r3, [r7, #14]
 8006e3a:	2b80      	cmp	r3, #128	; 0x80
 8006e3c:	d004      	beq.n	8006e48 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8006e3e:	6839      	ldr	r1, [r7, #0]
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f000 fbb8 	bl	80075b6 <USBD_CtlError>
                break;
 8006e46:	e091      	b.n	8006f6c <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e48:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	da0b      	bge.n	8006e68 <USBD_StdEPReq+0x1a0>
 8006e50:	7bbb      	ldrb	r3, [r7, #14]
 8006e52:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006e56:	4613      	mov	r3, r2
 8006e58:	009b      	lsls	r3, r3, #2
 8006e5a:	4413      	add	r3, r2
 8006e5c:	009b      	lsls	r3, r3, #2
 8006e5e:	3310      	adds	r3, #16
 8006e60:	687a      	ldr	r2, [r7, #4]
 8006e62:	4413      	add	r3, r2
 8006e64:	3304      	adds	r3, #4
 8006e66:	e00b      	b.n	8006e80 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e68:	7bbb      	ldrb	r3, [r7, #14]
 8006e6a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e6e:	4613      	mov	r3, r2
 8006e70:	009b      	lsls	r3, r3, #2
 8006e72:	4413      	add	r3, r2
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	3304      	adds	r3, #4
 8006e80:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	2200      	movs	r2, #0
 8006e86:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fbfb 	bl	800768a <USBD_CtlSendData>
              break;
 8006e94:	e06a      	b.n	8006f6c <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006e96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da11      	bge.n	8006ec2 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	f003 020f 	and.w	r2, r3, #15
 8006ea4:	6879      	ldr	r1, [r7, #4]
 8006ea6:	4613      	mov	r3, r2
 8006ea8:	009b      	lsls	r3, r3, #2
 8006eaa:	4413      	add	r3, r2
 8006eac:	009b      	lsls	r3, r3, #2
 8006eae:	440b      	add	r3, r1
 8006eb0:	3318      	adds	r3, #24
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d117      	bne.n	8006ee8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fb7b 	bl	80075b6 <USBD_CtlError>
                  break;
 8006ec0:	e054      	b.n	8006f6c <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006ec2:	7bbb      	ldrb	r3, [r7, #14]
 8006ec4:	f003 020f 	and.w	r2, r3, #15
 8006ec8:	6879      	ldr	r1, [r7, #4]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	009b      	lsls	r3, r3, #2
 8006ece:	4413      	add	r3, r2
 8006ed0:	009b      	lsls	r3, r3, #2
 8006ed2:	440b      	add	r3, r1
 8006ed4:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fb68 	bl	80075b6 <USBD_CtlError>
                  break;
 8006ee6:	e041      	b.n	8006f6c <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	da0b      	bge.n	8006f08 <USBD_StdEPReq+0x240>
 8006ef0:	7bbb      	ldrb	r3, [r7, #14]
 8006ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ef6:	4613      	mov	r3, r2
 8006ef8:	009b      	lsls	r3, r3, #2
 8006efa:	4413      	add	r3, r2
 8006efc:	009b      	lsls	r3, r3, #2
 8006efe:	3310      	adds	r3, #16
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	4413      	add	r3, r2
 8006f04:	3304      	adds	r3, #4
 8006f06:	e00b      	b.n	8006f20 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f0e:	4613      	mov	r3, r2
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	4413      	add	r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f1a:	687a      	ldr	r2, [r7, #4]
 8006f1c:	4413      	add	r3, r2
 8006f1e:	3304      	adds	r3, #4
 8006f20:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <USBD_StdEPReq+0x266>
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
 8006f2a:	2b80      	cmp	r3, #128	; 0x80
 8006f2c:	d103      	bne.n	8006f36 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2200      	movs	r2, #0
 8006f32:	601a      	str	r2, [r3, #0]
 8006f34:	e00e      	b.n	8006f54 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8006f36:	7bbb      	ldrb	r3, [r7, #14]
 8006f38:	4619      	mov	r1, r3
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f000 ffb0 	bl	8007ea0 <USBD_LL_IsStallEP>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d003      	beq.n	8006f4e <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	2201      	movs	r2, #1
 8006f4a:	601a      	str	r2, [r3, #0]
 8006f4c:	e002      	b.n	8006f54 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	2200      	movs	r2, #0
 8006f52:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2202      	movs	r2, #2
 8006f58:	4619      	mov	r1, r3
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fb95 	bl	800768a <USBD_CtlSendData>
              break;
 8006f60:	e004      	b.n	8006f6c <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8006f62:	6839      	ldr	r1, [r7, #0]
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fb26 	bl	80075b6 <USBD_CtlError>
              break;
 8006f6a:	bf00      	nop
          }
          break;
 8006f6c:	e004      	b.n	8006f78 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8006f6e:	6839      	ldr	r1, [r7, #0]
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fb20 	bl	80075b6 <USBD_CtlError>
          break;
 8006f76:	bf00      	nop
      }
      break;
 8006f78:	e004      	b.n	8006f84 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8006f7a:	6839      	ldr	r1, [r7, #0]
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 fb1a 	bl	80075b6 <USBD_CtlError>
      break;
 8006f82:	bf00      	nop
  }

  return ret;
 8006f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
	...

08006f90 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b084      	sub	sp, #16
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	885b      	ldrh	r3, [r3, #2]
 8006faa:	0a1b      	lsrs	r3, r3, #8
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	2b06      	cmp	r3, #6
 8006fb2:	f200 8128 	bhi.w	8007206 <USBD_GetDescriptor+0x276>
 8006fb6:	a201      	add	r2, pc, #4	; (adr r2, 8006fbc <USBD_GetDescriptor+0x2c>)
 8006fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fbc:	08006fd9 	.word	0x08006fd9
 8006fc0:	08006ff1 	.word	0x08006ff1
 8006fc4:	08007031 	.word	0x08007031
 8006fc8:	08007207 	.word	0x08007207
 8006fcc:	08007207 	.word	0x08007207
 8006fd0:	080071a7 	.word	0x080071a7
 8006fd4:	080071d3 	.word	0x080071d3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
      break;
 8006fee:	e112      	b.n	8007216 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	7c1b      	ldrb	r3, [r3, #16]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10d      	bne.n	8007014 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007000:	f107 0208 	add.w	r2, r7, #8
 8007004:	4610      	mov	r0, r2
 8007006:	4798      	blx	r3
 8007008:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3301      	adds	r3, #1
 800700e:	2202      	movs	r2, #2
 8007010:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007012:	e100      	b.n	8007216 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800701a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701c:	f107 0208 	add.w	r2, r7, #8
 8007020:	4610      	mov	r0, r2
 8007022:	4798      	blx	r3
 8007024:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	2202      	movs	r2, #2
 800702c:	701a      	strb	r2, [r3, #0]
      break;
 800702e:	e0f2      	b.n	8007216 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	885b      	ldrh	r3, [r3, #2]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b05      	cmp	r3, #5
 8007038:	f200 80ac 	bhi.w	8007194 <USBD_GetDescriptor+0x204>
 800703c:	a201      	add	r2, pc, #4	; (adr r2, 8007044 <USBD_GetDescriptor+0xb4>)
 800703e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007042:	bf00      	nop
 8007044:	0800705d 	.word	0x0800705d
 8007048:	08007091 	.word	0x08007091
 800704c:	080070c5 	.word	0x080070c5
 8007050:	080070f9 	.word	0x080070f9
 8007054:	0800712d 	.word	0x0800712d
 8007058:	08007161 	.word	0x08007161
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d00b      	beq.n	8007080 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	7c12      	ldrb	r2, [r2, #16]
 8007074:	f107 0108 	add.w	r1, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800707e:	e091      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007080:	6839      	ldr	r1, [r7, #0]
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 fa97 	bl	80075b6 <USBD_CtlError>
            err++;
 8007088:	7afb      	ldrb	r3, [r7, #11]
 800708a:	3301      	adds	r3, #1
 800708c:	72fb      	strb	r3, [r7, #11]
          break;
 800708e:	e089      	b.n	80071a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00b      	beq.n	80070b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070a2:	689b      	ldr	r3, [r3, #8]
 80070a4:	687a      	ldr	r2, [r7, #4]
 80070a6:	7c12      	ldrb	r2, [r2, #16]
 80070a8:	f107 0108 	add.w	r1, r7, #8
 80070ac:	4610      	mov	r0, r2
 80070ae:	4798      	blx	r3
 80070b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070b2:	e077      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070b4:	6839      	ldr	r1, [r7, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fa7d 	bl	80075b6 <USBD_CtlError>
            err++;
 80070bc:	7afb      	ldrb	r3, [r7, #11]
 80070be:	3301      	adds	r3, #1
 80070c0:	72fb      	strb	r3, [r7, #11]
          break;
 80070c2:	e06f      	b.n	80071a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d00b      	beq.n	80070e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070d6:	68db      	ldr	r3, [r3, #12]
 80070d8:	687a      	ldr	r2, [r7, #4]
 80070da:	7c12      	ldrb	r2, [r2, #16]
 80070dc:	f107 0108 	add.w	r1, r7, #8
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
 80070e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070e6:	e05d      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fa63 	bl	80075b6 <USBD_CtlError>
            err++;
 80070f0:	7afb      	ldrb	r3, [r7, #11]
 80070f2:	3301      	adds	r3, #1
 80070f4:	72fb      	strb	r3, [r7, #11]
          break;
 80070f6:	e055      	b.n	80071a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80070fe:	691b      	ldr	r3, [r3, #16]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d00b      	beq.n	800711c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800710a:	691b      	ldr	r3, [r3, #16]
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	7c12      	ldrb	r2, [r2, #16]
 8007110:	f107 0108 	add.w	r1, r7, #8
 8007114:	4610      	mov	r0, r2
 8007116:	4798      	blx	r3
 8007118:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800711a:	e043      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	6878      	ldr	r0, [r7, #4]
 8007120:	f000 fa49 	bl	80075b6 <USBD_CtlError>
            err++;
 8007124:	7afb      	ldrb	r3, [r7, #11]
 8007126:	3301      	adds	r3, #1
 8007128:	72fb      	strb	r3, [r7, #11]
          break;
 800712a:	e03b      	b.n	80071a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d00b      	beq.n	8007150 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800713e:	695b      	ldr	r3, [r3, #20]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	7c12      	ldrb	r2, [r2, #16]
 8007144:	f107 0108 	add.w	r1, r7, #8
 8007148:	4610      	mov	r0, r2
 800714a:	4798      	blx	r3
 800714c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800714e:	e029      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 fa2f 	bl	80075b6 <USBD_CtlError>
            err++;
 8007158:	7afb      	ldrb	r3, [r7, #11]
 800715a:	3301      	adds	r3, #1
 800715c:	72fb      	strb	r3, [r7, #11]
          break;
 800715e:	e021      	b.n	80071a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007172:	699b      	ldr	r3, [r3, #24]
 8007174:	687a      	ldr	r2, [r7, #4]
 8007176:	7c12      	ldrb	r2, [r2, #16]
 8007178:	f107 0108 	add.w	r1, r7, #8
 800717c:	4610      	mov	r0, r2
 800717e:	4798      	blx	r3
 8007180:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007182:	e00f      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f000 fa15 	bl	80075b6 <USBD_CtlError>
            err++;
 800718c:	7afb      	ldrb	r3, [r7, #11]
 800718e:	3301      	adds	r3, #1
 8007190:	72fb      	strb	r3, [r7, #11]
          break;
 8007192:	e007      	b.n	80071a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8007194:	6839      	ldr	r1, [r7, #0]
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 fa0d 	bl	80075b6 <USBD_CtlError>
          err++;
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	3301      	adds	r3, #1
 80071a0:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80071a2:	e038      	b.n	8007216 <USBD_GetDescriptor+0x286>
 80071a4:	e037      	b.n	8007216 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	7c1b      	ldrb	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d109      	bne.n	80071c2 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	f107 0208 	add.w	r2, r7, #8
 80071ba:	4610      	mov	r0, r2
 80071bc:	4798      	blx	r3
 80071be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071c0:	e029      	b.n	8007216 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071c2:	6839      	ldr	r1, [r7, #0]
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 f9f6 	bl	80075b6 <USBD_CtlError>
        err++;
 80071ca:	7afb      	ldrb	r3, [r7, #11]
 80071cc:	3301      	adds	r3, #1
 80071ce:	72fb      	strb	r3, [r7, #11]
      break;
 80071d0:	e021      	b.n	8007216 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	7c1b      	ldrb	r3, [r3, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10d      	bne.n	80071f6 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e2:	f107 0208 	add.w	r2, r7, #8
 80071e6:	4610      	mov	r0, r2
 80071e8:	4798      	blx	r3
 80071ea:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	3301      	adds	r3, #1
 80071f0:	2207      	movs	r2, #7
 80071f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80071f4:	e00f      	b.n	8007216 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80071f6:	6839      	ldr	r1, [r7, #0]
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 f9dc 	bl	80075b6 <USBD_CtlError>
        err++;
 80071fe:	7afb      	ldrb	r3, [r7, #11]
 8007200:	3301      	adds	r3, #1
 8007202:	72fb      	strb	r3, [r7, #11]
      break;
 8007204:	e007      	b.n	8007216 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007206:	6839      	ldr	r1, [r7, #0]
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 f9d4 	bl	80075b6 <USBD_CtlError>
      err++;
 800720e:	7afb      	ldrb	r3, [r7, #11]
 8007210:	3301      	adds	r3, #1
 8007212:	72fb      	strb	r3, [r7, #11]
      break;
 8007214:	bf00      	nop
  }

  if (err != 0U)
 8007216:	7afb      	ldrb	r3, [r7, #11]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d11c      	bne.n	8007256 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800721c:	893b      	ldrh	r3, [r7, #8]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d011      	beq.n	8007246 <USBD_GetDescriptor+0x2b6>
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	88db      	ldrh	r3, [r3, #6]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d00d      	beq.n	8007246 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	88da      	ldrh	r2, [r3, #6]
 800722e:	893b      	ldrh	r3, [r7, #8]
 8007230:	4293      	cmp	r3, r2
 8007232:	bf28      	it	cs
 8007234:	4613      	movcs	r3, r2
 8007236:	b29b      	uxth	r3, r3
 8007238:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800723a:	893b      	ldrh	r3, [r7, #8]
 800723c:	461a      	mov	r2, r3
 800723e:	68f9      	ldr	r1, [r7, #12]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fa22 	bl	800768a <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	88db      	ldrh	r3, [r3, #6]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d104      	bne.n	8007258 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 800724e:	6878      	ldr	r0, [r7, #4]
 8007250:	f000 fa79 	bl	8007746 <USBD_CtlSendStatus>
 8007254:	e000      	b.n	8007258 <USBD_GetDescriptor+0x2c8>
    return;
 8007256:	bf00      	nop
    }
  }
}
 8007258:	3710      	adds	r7, #16
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop

08007260 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b084      	sub	sp, #16
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
 8007268:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	889b      	ldrh	r3, [r3, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d130      	bne.n	80072d4 <USBD_SetAddress+0x74>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	88db      	ldrh	r3, [r3, #6]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d12c      	bne.n	80072d4 <USBD_SetAddress+0x74>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	885b      	ldrh	r3, [r3, #2]
 800727e:	2b7f      	cmp	r3, #127	; 0x7f
 8007280:	d828      	bhi.n	80072d4 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	885b      	ldrh	r3, [r3, #2]
 8007286:	b2db      	uxtb	r3, r3
 8007288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800728c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007294:	2b03      	cmp	r3, #3
 8007296:	d104      	bne.n	80072a2 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007298:	6839      	ldr	r1, [r7, #0]
 800729a:	6878      	ldr	r0, [r7, #4]
 800729c:	f000 f98b 	bl	80075b6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a0:	e01d      	b.n	80072de <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	7bfa      	ldrb	r2, [r7, #15]
 80072a6:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80072aa:	7bfb      	ldrb	r3, [r7, #15]
 80072ac:	4619      	mov	r1, r3
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fe22 	bl	8007ef8 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 fa46 	bl	8007746 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80072ba:	7bfb      	ldrb	r3, [r7, #15]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d004      	beq.n	80072ca <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072c8:	e009      	b.n	80072de <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2201      	movs	r2, #1
 80072ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072d2:	e004      	b.n	80072de <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f96d 	bl	80075b6 <USBD_CtlError>
  }
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
	...

080072e8 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	885b      	ldrh	r3, [r3, #2]
 80072f6:	b2da      	uxtb	r2, r3
 80072f8:	4b41      	ldr	r3, [pc, #260]	; (8007400 <USBD_SetConfig+0x118>)
 80072fa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80072fc:	4b40      	ldr	r3, [pc, #256]	; (8007400 <USBD_SetConfig+0x118>)
 80072fe:	781b      	ldrb	r3, [r3, #0]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d904      	bls.n	800730e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007304:	6839      	ldr	r1, [r7, #0]
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f955 	bl	80075b6 <USBD_CtlError>
 800730c:	e075      	b.n	80073fa <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007314:	2b02      	cmp	r3, #2
 8007316:	d002      	beq.n	800731e <USBD_SetConfig+0x36>
 8007318:	2b03      	cmp	r3, #3
 800731a:	d023      	beq.n	8007364 <USBD_SetConfig+0x7c>
 800731c:	e062      	b.n	80073e4 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800731e:	4b38      	ldr	r3, [pc, #224]	; (8007400 <USBD_SetConfig+0x118>)
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d01a      	beq.n	800735c <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007326:	4b36      	ldr	r3, [pc, #216]	; (8007400 <USBD_SetConfig+0x118>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2203      	movs	r2, #3
 8007334:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007338:	4b31      	ldr	r3, [pc, #196]	; (8007400 <USBD_SetConfig+0x118>)
 800733a:	781b      	ldrb	r3, [r3, #0]
 800733c:	4619      	mov	r1, r3
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f7ff f9e8 	bl	8006714 <USBD_SetClassConfig>
 8007344:	4603      	mov	r3, r0
 8007346:	2b02      	cmp	r3, #2
 8007348:	d104      	bne.n	8007354 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 800734a:	6839      	ldr	r1, [r7, #0]
 800734c:	6878      	ldr	r0, [r7, #4]
 800734e:	f000 f932 	bl	80075b6 <USBD_CtlError>
            return;
 8007352:	e052      	b.n	80073fa <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 f9f6 	bl	8007746 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800735a:	e04e      	b.n	80073fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f9f2 	bl	8007746 <USBD_CtlSendStatus>
        break;
 8007362:	e04a      	b.n	80073fa <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007364:	4b26      	ldr	r3, [pc, #152]	; (8007400 <USBD_SetConfig+0x118>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	d112      	bne.n	8007392 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	2202      	movs	r2, #2
 8007370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007374:	4b22      	ldr	r3, [pc, #136]	; (8007400 <USBD_SetConfig+0x118>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	461a      	mov	r2, r3
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 800737e:	4b20      	ldr	r3, [pc, #128]	; (8007400 <USBD_SetConfig+0x118>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	4619      	mov	r1, r3
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f7ff f9e4 	bl	8006752 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f9db 	bl	8007746 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007390:	e033      	b.n	80073fa <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007392:	4b1b      	ldr	r3, [pc, #108]	; (8007400 <USBD_SetConfig+0x118>)
 8007394:	781b      	ldrb	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	685b      	ldr	r3, [r3, #4]
 800739c:	429a      	cmp	r2, r3
 800739e:	d01d      	beq.n	80073dc <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	685b      	ldr	r3, [r3, #4]
 80073a4:	b2db      	uxtb	r3, r3
 80073a6:	4619      	mov	r1, r3
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff f9d2 	bl	8006752 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80073ae:	4b14      	ldr	r3, [pc, #80]	; (8007400 <USBD_SetConfig+0x118>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	461a      	mov	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80073b8:	4b11      	ldr	r3, [pc, #68]	; (8007400 <USBD_SetConfig+0x118>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	4619      	mov	r1, r3
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff f9a8 	bl	8006714 <USBD_SetClassConfig>
 80073c4:	4603      	mov	r3, r0
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d104      	bne.n	80073d4 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 80073ca:	6839      	ldr	r1, [r7, #0]
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 f8f2 	bl	80075b6 <USBD_CtlError>
            return;
 80073d2:	e012      	b.n	80073fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 f9b6 	bl	8007746 <USBD_CtlSendStatus>
        break;
 80073da:	e00e      	b.n	80073fa <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80073dc:	6878      	ldr	r0, [r7, #4]
 80073de:	f000 f9b2 	bl	8007746 <USBD_CtlSendStatus>
        break;
 80073e2:	e00a      	b.n	80073fa <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 80073e4:	6839      	ldr	r1, [r7, #0]
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f8e5 	bl	80075b6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 80073ec:	4b04      	ldr	r3, [pc, #16]	; (8007400 <USBD_SetConfig+0x118>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7ff f9ad 	bl	8006752 <USBD_ClrClassConfig>
        break;
 80073f8:	bf00      	nop
    }
  }
}
 80073fa:	3708      	adds	r7, #8
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}
 8007400:	20000234 	.word	0x20000234

08007404 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b082      	sub	sp, #8
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	88db      	ldrh	r3, [r3, #6]
 8007412:	2b01      	cmp	r3, #1
 8007414:	d004      	beq.n	8007420 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007416:	6839      	ldr	r1, [r7, #0]
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f000 f8cc 	bl	80075b6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800741e:	e022      	b.n	8007466 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007426:	2b02      	cmp	r3, #2
 8007428:	dc02      	bgt.n	8007430 <USBD_GetConfig+0x2c>
 800742a:	2b00      	cmp	r3, #0
 800742c:	dc03      	bgt.n	8007436 <USBD_GetConfig+0x32>
 800742e:	e015      	b.n	800745c <USBD_GetConfig+0x58>
 8007430:	2b03      	cmp	r3, #3
 8007432:	d00b      	beq.n	800744c <USBD_GetConfig+0x48>
 8007434:	e012      	b.n	800745c <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	3308      	adds	r3, #8
 8007440:	2201      	movs	r2, #1
 8007442:	4619      	mov	r1, r3
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 f920 	bl	800768a <USBD_CtlSendData>
        break;
 800744a:	e00c      	b.n	8007466 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	3304      	adds	r3, #4
 8007450:	2201      	movs	r2, #1
 8007452:	4619      	mov	r1, r3
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f918 	bl	800768a <USBD_CtlSendData>
        break;
 800745a:	e004      	b.n	8007466 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 800745c:	6839      	ldr	r1, [r7, #0]
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f8a9 	bl	80075b6 <USBD_CtlError>
        break;
 8007464:	bf00      	nop
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747e:	3b01      	subs	r3, #1
 8007480:	2b02      	cmp	r3, #2
 8007482:	d81e      	bhi.n	80074c2 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	88db      	ldrh	r3, [r3, #6]
 8007488:	2b02      	cmp	r3, #2
 800748a:	d004      	beq.n	8007496 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 800748c:	6839      	ldr	r1, [r7, #0]
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f000 f891 	bl	80075b6 <USBD_CtlError>
        break;
 8007494:	e01a      	b.n	80074cc <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68db      	ldr	r3, [r3, #12]
 80074aa:	f043 0202 	orr.w	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	330c      	adds	r3, #12
 80074b6:	2202      	movs	r2, #2
 80074b8:	4619      	mov	r1, r3
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8e5 	bl	800768a <USBD_CtlSendData>
      break;
 80074c0:	e004      	b.n	80074cc <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80074c2:	6839      	ldr	r1, [r7, #0]
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f000 f876 	bl	80075b6 <USBD_CtlError>
      break;
 80074ca:	bf00      	nop
  }
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	885b      	ldrh	r3, [r3, #2]
 80074e2:	2b01      	cmp	r3, #1
 80074e4:	d106      	bne.n	80074f4 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	2201      	movs	r2, #1
 80074ea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 f929 	bl	8007746 <USBD_CtlSendStatus>
  }
}
 80074f4:	bf00      	nop
 80074f6:	3708      	adds	r7, #8
 80074f8:	46bd      	mov	sp, r7
 80074fa:	bd80      	pop	{r7, pc}

080074fc <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80074fc:	b580      	push	{r7, lr}
 80074fe:	b082      	sub	sp, #8
 8007500:	af00      	add	r7, sp, #0
 8007502:	6078      	str	r0, [r7, #4]
 8007504:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800750c:	3b01      	subs	r3, #1
 800750e:	2b02      	cmp	r3, #2
 8007510:	d80b      	bhi.n	800752a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	885b      	ldrh	r3, [r3, #2]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d10c      	bne.n	8007534 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2200      	movs	r2, #0
 800751e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f90f 	bl	8007746 <USBD_CtlSendStatus>
      }
      break;
 8007528:	e004      	b.n	8007534 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f842 	bl	80075b6 <USBD_CtlError>
      break;
 8007532:	e000      	b.n	8007536 <USBD_ClrFeature+0x3a>
      break;
 8007534:	bf00      	nop
  }
}
 8007536:	bf00      	nop
 8007538:	3708      	adds	r7, #8
 800753a:	46bd      	mov	sp, r7
 800753c:	bd80      	pop	{r7, pc}

0800753e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800753e:	b480      	push	{r7}
 8007540:	b083      	sub	sp, #12
 8007542:	af00      	add	r7, sp, #0
 8007544:	6078      	str	r0, [r7, #4]
 8007546:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007548:	683b      	ldr	r3, [r7, #0]
 800754a:	781a      	ldrb	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	785a      	ldrb	r2, [r3, #1]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	3302      	adds	r3, #2
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	b29a      	uxth	r2, r3
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	3303      	adds	r3, #3
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b29b      	uxth	r3, r3
 8007568:	021b      	lsls	r3, r3, #8
 800756a:	b29b      	uxth	r3, r3
 800756c:	4413      	add	r3, r2
 800756e:	b29a      	uxth	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	3304      	adds	r3, #4
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	b29a      	uxth	r2, r3
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	3305      	adds	r3, #5
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	b29b      	uxth	r3, r3
 8007584:	021b      	lsls	r3, r3, #8
 8007586:	b29b      	uxth	r3, r3
 8007588:	4413      	add	r3, r2
 800758a:	b29a      	uxth	r2, r3
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007590:	683b      	ldr	r3, [r7, #0]
 8007592:	3306      	adds	r3, #6
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	b29a      	uxth	r2, r3
 8007598:	683b      	ldr	r3, [r7, #0]
 800759a:	3307      	adds	r3, #7
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	b29b      	uxth	r3, r3
 80075a0:	021b      	lsls	r3, r3, #8
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	4413      	add	r3, r2
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	80da      	strh	r2, [r3, #6]

}
 80075ac:	bf00      	nop
 80075ae:	370c      	adds	r7, #12
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bc80      	pop	{r7}
 80075b4:	4770      	bx	lr

080075b6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80075b6:	b580      	push	{r7, lr}
 80075b8:	b082      	sub	sp, #8
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	6078      	str	r0, [r7, #4]
 80075be:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80075c0:	2180      	movs	r1, #128	; 0x80
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fc2e 	bl	8007e24 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80075c8:	2100      	movs	r1, #0
 80075ca:	6878      	ldr	r0, [r7, #4]
 80075cc:	f000 fc2a 	bl	8007e24 <USBD_LL_StallEP>
}
 80075d0:	bf00      	nop
 80075d2:	3708      	adds	r7, #8
 80075d4:	46bd      	mov	sp, r7
 80075d6:	bd80      	pop	{r7, pc}

080075d8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b086      	sub	sp, #24
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80075e4:	2300      	movs	r3, #0
 80075e6:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d032      	beq.n	8007654 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 80075ee:	68f8      	ldr	r0, [r7, #12]
 80075f0:	f000 f834 	bl	800765c <USBD_GetLen>
 80075f4:	4603      	mov	r3, r0
 80075f6:	3301      	adds	r3, #1
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	005b      	lsls	r3, r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007602:	7dfb      	ldrb	r3, [r7, #23]
 8007604:	1c5a      	adds	r2, r3, #1
 8007606:	75fa      	strb	r2, [r7, #23]
 8007608:	461a      	mov	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	4413      	add	r3, r2
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	7812      	ldrb	r2, [r2, #0]
 8007612:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007614:	7dfb      	ldrb	r3, [r7, #23]
 8007616:	1c5a      	adds	r2, r3, #1
 8007618:	75fa      	strb	r2, [r7, #23]
 800761a:	461a      	mov	r2, r3
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	4413      	add	r3, r2
 8007620:	2203      	movs	r2, #3
 8007622:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007624:	e012      	b.n	800764c <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	60fa      	str	r2, [r7, #12]
 800762c:	7dfa      	ldrb	r2, [r7, #23]
 800762e:	1c51      	adds	r1, r2, #1
 8007630:	75f9      	strb	r1, [r7, #23]
 8007632:	4611      	mov	r1, r2
 8007634:	68ba      	ldr	r2, [r7, #8]
 8007636:	440a      	add	r2, r1
 8007638:	781b      	ldrb	r3, [r3, #0]
 800763a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	1c5a      	adds	r2, r3, #1
 8007640:	75fa      	strb	r2, [r7, #23]
 8007642:	461a      	mov	r2, r3
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	4413      	add	r3, r2
 8007648:	2200      	movs	r2, #0
 800764a:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	781b      	ldrb	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1e8      	bne.n	8007626 <USBD_GetString+0x4e>
    }
  }
}
 8007654:	bf00      	nop
 8007656:	3718      	adds	r7, #24
 8007658:	46bd      	mov	sp, r7
 800765a:	bd80      	pop	{r7, pc}

0800765c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007664:	2300      	movs	r3, #0
 8007666:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007668:	e005      	b.n	8007676 <USBD_GetLen+0x1a>
  {
    len++;
 800766a:	7bfb      	ldrb	r3, [r7, #15]
 800766c:	3301      	adds	r3, #1
 800766e:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	3301      	adds	r3, #1
 8007674:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d1f5      	bne.n	800766a <USBD_GetLen+0xe>
  }

  return len;
 800767e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3714      	adds	r7, #20
 8007684:	46bd      	mov	sp, r7
 8007686:	bc80      	pop	{r7}
 8007688:	4770      	bx	lr

0800768a <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	60f8      	str	r0, [r7, #12]
 8007692:	60b9      	str	r1, [r7, #8]
 8007694:	4613      	mov	r3, r2
 8007696:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	2202      	movs	r2, #2
 800769c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80076a0:	88fa      	ldrh	r2, [r7, #6]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80076a6:	88fa      	ldrh	r2, [r7, #6]
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076ac:	88fb      	ldrh	r3, [r7, #6]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	2100      	movs	r1, #0
 80076b2:	68f8      	ldr	r0, [r7, #12]
 80076b4:	f000 fc3f 	bl	8007f36 <USBD_LL_Transmit>

  return USBD_OK;
 80076b8:	2300      	movs	r3, #0
}
 80076ba:	4618      	mov	r0, r3
 80076bc:	3710      	adds	r7, #16
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	60f8      	str	r0, [r7, #12]
 80076ca:	60b9      	str	r1, [r7, #8]
 80076cc:	4613      	mov	r3, r2
 80076ce:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80076d0:	88fb      	ldrh	r3, [r7, #6]
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	2100      	movs	r1, #0
 80076d6:	68f8      	ldr	r0, [r7, #12]
 80076d8:	f000 fc2d 	bl	8007f36 <USBD_LL_Transmit>

  return USBD_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	60f8      	str	r0, [r7, #12]
 80076ee:	60b9      	str	r1, [r7, #8]
 80076f0:	4613      	mov	r3, r2
 80076f2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	2203      	movs	r2, #3
 80076f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80076fc:	88fa      	ldrh	r2, [r7, #6]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007704:	88fa      	ldrh	r2, [r7, #6]
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800770c:	88fb      	ldrh	r3, [r7, #6]
 800770e:	68ba      	ldr	r2, [r7, #8]
 8007710:	2100      	movs	r1, #0
 8007712:	68f8      	ldr	r0, [r7, #12]
 8007714:	f000 fc32 	bl	8007f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007718:	2300      	movs	r3, #0
}
 800771a:	4618      	mov	r0, r3
 800771c:	3710      	adds	r7, #16
 800771e:	46bd      	mov	sp, r7
 8007720:	bd80      	pop	{r7, pc}

08007722 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007722:	b580      	push	{r7, lr}
 8007724:	b084      	sub	sp, #16
 8007726:	af00      	add	r7, sp, #0
 8007728:	60f8      	str	r0, [r7, #12]
 800772a:	60b9      	str	r1, [r7, #8]
 800772c:	4613      	mov	r3, r2
 800772e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007730:	88fb      	ldrh	r3, [r7, #6]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	2100      	movs	r1, #0
 8007736:	68f8      	ldr	r0, [r7, #12]
 8007738:	f000 fc20 	bl	8007f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}

08007746 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007746:	b580      	push	{r7, lr}
 8007748:	b082      	sub	sp, #8
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2204      	movs	r2, #4
 8007752:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007756:	2300      	movs	r3, #0
 8007758:	2200      	movs	r2, #0
 800775a:	2100      	movs	r1, #0
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fbea 	bl	8007f36 <USBD_LL_Transmit>

  return USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3708      	adds	r7, #8
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b082      	sub	sp, #8
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2205      	movs	r2, #5
 8007778:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800777c:	2300      	movs	r3, #0
 800777e:	2200      	movs	r2, #0
 8007780:	2100      	movs	r1, #0
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fbfa 	bl	8007f7c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3708      	adds	r7, #8
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007798:	2200      	movs	r2, #0
 800779a:	4912      	ldr	r1, [pc, #72]	; (80077e4 <MX_USB_DEVICE_Init+0x50>)
 800779c:	4812      	ldr	r0, [pc, #72]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 800779e:	f7fe ff5f 	bl	8006660 <USBD_Init>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80077a8:	f7f8 fe92 	bl	80004d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80077ac:	490f      	ldr	r1, [pc, #60]	; (80077ec <MX_USB_DEVICE_Init+0x58>)
 80077ae:	480e      	ldr	r0, [pc, #56]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077b0:	f7fe ff81 	bl	80066b6 <USBD_RegisterClass>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d001      	beq.n	80077be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80077ba:	f7f8 fe89 	bl	80004d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80077be:	490c      	ldr	r1, [pc, #48]	; (80077f0 <MX_USB_DEVICE_Init+0x5c>)
 80077c0:	4809      	ldr	r0, [pc, #36]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077c2:	f7fe fee1 	bl	8006588 <USBD_CDC_RegisterInterface>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80077cc:	f7f8 fe80 	bl	80004d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80077d0:	4805      	ldr	r0, [pc, #20]	; (80077e8 <MX_USB_DEVICE_Init+0x54>)
 80077d2:	f7fe ff89 	bl	80066e8 <USBD_Start>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80077dc:	f7f8 fe78 	bl	80004d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80077e0:	bf00      	nop
 80077e2:	bd80      	pop	{r7, pc}
 80077e4:	20000140 	.word	0x20000140
 80077e8:	20000238 	.word	0x20000238
 80077ec:	2000002c 	.word	0x2000002c
 80077f0:	20000130 	.word	0x20000130

080077f4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80077f8:	2200      	movs	r2, #0
 80077fa:	4905      	ldr	r1, [pc, #20]	; (8007810 <CDC_Init_FS+0x1c>)
 80077fc:	4805      	ldr	r0, [pc, #20]	; (8007814 <CDC_Init_FS+0x20>)
 80077fe:	f7fe fed9 	bl	80065b4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007802:	4905      	ldr	r1, [pc, #20]	; (8007818 <CDC_Init_FS+0x24>)
 8007804:	4803      	ldr	r0, [pc, #12]	; (8007814 <CDC_Init_FS+0x20>)
 8007806:	f7fe feee 	bl	80065e6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800780a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800780c:	4618      	mov	r0, r3
 800780e:	bd80      	pop	{r7, pc}
 8007810:	200008fc 	.word	0x200008fc
 8007814:	20000238 	.word	0x20000238
 8007818:	200004fc 	.word	0x200004fc

0800781c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800781c:	b480      	push	{r7}
 800781e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007820:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007822:	4618      	mov	r0, r3
 8007824:	46bd      	mov	sp, r7
 8007826:	bc80      	pop	{r7}
 8007828:	4770      	bx	lr
	...

0800782c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	4603      	mov	r3, r0
 8007834:	6039      	str	r1, [r7, #0]
 8007836:	71fb      	strb	r3, [r7, #7]
 8007838:	4613      	mov	r3, r2
 800783a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800783c:	79fb      	ldrb	r3, [r7, #7]
 800783e:	2b23      	cmp	r3, #35	; 0x23
 8007840:	d84a      	bhi.n	80078d8 <CDC_Control_FS+0xac>
 8007842:	a201      	add	r2, pc, #4	; (adr r2, 8007848 <CDC_Control_FS+0x1c>)
 8007844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007848:	080078d9 	.word	0x080078d9
 800784c:	080078d9 	.word	0x080078d9
 8007850:	080078d9 	.word	0x080078d9
 8007854:	080078d9 	.word	0x080078d9
 8007858:	080078d9 	.word	0x080078d9
 800785c:	080078d9 	.word	0x080078d9
 8007860:	080078d9 	.word	0x080078d9
 8007864:	080078d9 	.word	0x080078d9
 8007868:	080078d9 	.word	0x080078d9
 800786c:	080078d9 	.word	0x080078d9
 8007870:	080078d9 	.word	0x080078d9
 8007874:	080078d9 	.word	0x080078d9
 8007878:	080078d9 	.word	0x080078d9
 800787c:	080078d9 	.word	0x080078d9
 8007880:	080078d9 	.word	0x080078d9
 8007884:	080078d9 	.word	0x080078d9
 8007888:	080078d9 	.word	0x080078d9
 800788c:	080078d9 	.word	0x080078d9
 8007890:	080078d9 	.word	0x080078d9
 8007894:	080078d9 	.word	0x080078d9
 8007898:	080078d9 	.word	0x080078d9
 800789c:	080078d9 	.word	0x080078d9
 80078a0:	080078d9 	.word	0x080078d9
 80078a4:	080078d9 	.word	0x080078d9
 80078a8:	080078d9 	.word	0x080078d9
 80078ac:	080078d9 	.word	0x080078d9
 80078b0:	080078d9 	.word	0x080078d9
 80078b4:	080078d9 	.word	0x080078d9
 80078b8:	080078d9 	.word	0x080078d9
 80078bc:	080078d9 	.word	0x080078d9
 80078c0:	080078d9 	.word	0x080078d9
 80078c4:	080078d9 	.word	0x080078d9
 80078c8:	080078d9 	.word	0x080078d9
 80078cc:	080078d9 	.word	0x080078d9
 80078d0:	080078d9 	.word	0x080078d9
 80078d4:	080078d9 	.word	0x080078d9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80078d8:	bf00      	nop
  }

  return (USBD_OK);
 80078da:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80078dc:	4618      	mov	r0, r3
 80078de:	370c      	adds	r7, #12
 80078e0:	46bd      	mov	sp, r7
 80078e2:	bc80      	pop	{r7}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b082      	sub	sp, #8
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
 80078f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80078f2:	6879      	ldr	r1, [r7, #4]
 80078f4:	4805      	ldr	r0, [pc, #20]	; (800790c <CDC_Receive_FS+0x24>)
 80078f6:	f7fe fe76 	bl	80065e6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80078fa:	4804      	ldr	r0, [pc, #16]	; (800790c <CDC_Receive_FS+0x24>)
 80078fc:	f7fe fe86 	bl	800660c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007900:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007902:	4618      	mov	r0, r3
 8007904:	3708      	adds	r7, #8
 8007906:	46bd      	mov	sp, r7
 8007908:	bd80      	pop	{r7, pc}
 800790a:	bf00      	nop
 800790c:	20000238 	.word	0x20000238

08007910 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007910:	b480      	push	{r7}
 8007912:	b083      	sub	sp, #12
 8007914:	af00      	add	r7, sp, #0
 8007916:	4603      	mov	r3, r0
 8007918:	6039      	str	r1, [r7, #0]
 800791a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2212      	movs	r2, #18
 8007920:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007922:	4b03      	ldr	r3, [pc, #12]	; (8007930 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007924:	4618      	mov	r0, r3
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	bc80      	pop	{r7}
 800792c:	4770      	bx	lr
 800792e:	bf00      	nop
 8007930:	2000015c 	.word	0x2000015c

08007934 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007934:	b480      	push	{r7}
 8007936:	b083      	sub	sp, #12
 8007938:	af00      	add	r7, sp, #0
 800793a:	4603      	mov	r3, r0
 800793c:	6039      	str	r1, [r7, #0]
 800793e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007940:	683b      	ldr	r3, [r7, #0]
 8007942:	2204      	movs	r2, #4
 8007944:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007946:	4b03      	ldr	r3, [pc, #12]	; (8007954 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007948:	4618      	mov	r0, r3
 800794a:	370c      	adds	r7, #12
 800794c:	46bd      	mov	sp, r7
 800794e:	bc80      	pop	{r7}
 8007950:	4770      	bx	lr
 8007952:	bf00      	nop
 8007954:	20000170 	.word	0x20000170

08007958 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	4603      	mov	r3, r0
 8007960:	6039      	str	r1, [r7, #0]
 8007962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d105      	bne.n	8007976 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	4907      	ldr	r1, [pc, #28]	; (800798c <USBD_FS_ProductStrDescriptor+0x34>)
 800796e:	4808      	ldr	r0, [pc, #32]	; (8007990 <USBD_FS_ProductStrDescriptor+0x38>)
 8007970:	f7ff fe32 	bl	80075d8 <USBD_GetString>
 8007974:	e004      	b.n	8007980 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007976:	683a      	ldr	r2, [r7, #0]
 8007978:	4904      	ldr	r1, [pc, #16]	; (800798c <USBD_FS_ProductStrDescriptor+0x34>)
 800797a:	4805      	ldr	r0, [pc, #20]	; (8007990 <USBD_FS_ProductStrDescriptor+0x38>)
 800797c:	f7ff fe2c 	bl	80075d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007980:	4b02      	ldr	r3, [pc, #8]	; (800798c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007982:	4618      	mov	r0, r3
 8007984:	3708      	adds	r7, #8
 8007986:	46bd      	mov	sp, r7
 8007988:	bd80      	pop	{r7, pc}
 800798a:	bf00      	nop
 800798c:	20000cfc 	.word	0x20000cfc
 8007990:	08008a0c 	.word	0x08008a0c

08007994 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80079a0:	683a      	ldr	r2, [r7, #0]
 80079a2:	4904      	ldr	r1, [pc, #16]	; (80079b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80079a4:	4804      	ldr	r0, [pc, #16]	; (80079b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80079a6:	f7ff fe17 	bl	80075d8 <USBD_GetString>
  return USBD_StrDesc;
 80079aa:	4b02      	ldr	r3, [pc, #8]	; (80079b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	20000cfc 	.word	0x20000cfc
 80079b8:	08008a24 	.word	0x08008a24

080079bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b082      	sub	sp, #8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	4603      	mov	r3, r0
 80079c4:	6039      	str	r1, [r7, #0]
 80079c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	221a      	movs	r2, #26
 80079cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80079ce:	f000 f843 	bl	8007a58 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80079d2:	4b02      	ldr	r3, [pc, #8]	; (80079dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}
 80079dc:	20000174 	.word	0x20000174

080079e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b082      	sub	sp, #8
 80079e4:	af00      	add	r7, sp, #0
 80079e6:	4603      	mov	r3, r0
 80079e8:	6039      	str	r1, [r7, #0]
 80079ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079ec:	79fb      	ldrb	r3, [r7, #7]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d105      	bne.n	80079fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079f2:	683a      	ldr	r2, [r7, #0]
 80079f4:	4907      	ldr	r1, [pc, #28]	; (8007a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079f6:	4808      	ldr	r0, [pc, #32]	; (8007a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 80079f8:	f7ff fdee 	bl	80075d8 <USBD_GetString>
 80079fc:	e004      	b.n	8007a08 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079fe:	683a      	ldr	r2, [r7, #0]
 8007a00:	4904      	ldr	r1, [pc, #16]	; (8007a14 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007a02:	4805      	ldr	r0, [pc, #20]	; (8007a18 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007a04:	f7ff fde8 	bl	80075d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a08:	4b02      	ldr	r3, [pc, #8]	; (8007a14 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3708      	adds	r7, #8
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}
 8007a12:	bf00      	nop
 8007a14:	20000cfc 	.word	0x20000cfc
 8007a18:	08008a38 	.word	0x08008a38

08007a1c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	b082      	sub	sp, #8
 8007a20:	af00      	add	r7, sp, #0
 8007a22:	4603      	mov	r3, r0
 8007a24:	6039      	str	r1, [r7, #0]
 8007a26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a2e:	683a      	ldr	r2, [r7, #0]
 8007a30:	4907      	ldr	r1, [pc, #28]	; (8007a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a32:	4808      	ldr	r0, [pc, #32]	; (8007a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a34:	f7ff fdd0 	bl	80075d8 <USBD_GetString>
 8007a38:	e004      	b.n	8007a44 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007a3a:	683a      	ldr	r2, [r7, #0]
 8007a3c:	4904      	ldr	r1, [pc, #16]	; (8007a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007a3e:	4805      	ldr	r0, [pc, #20]	; (8007a54 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007a40:	f7ff fdca 	bl	80075d8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007a44:	4b02      	ldr	r3, [pc, #8]	; (8007a50 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	20000cfc 	.word	0x20000cfc
 8007a54:	08008a44 	.word	0x08008a44

08007a58 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a5e:	4b0f      	ldr	r3, [pc, #60]	; (8007a9c <Get_SerialNum+0x44>)
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a64:	4b0e      	ldr	r3, [pc, #56]	; (8007aa0 <Get_SerialNum+0x48>)
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a6a:	4b0e      	ldr	r3, [pc, #56]	; (8007aa4 <Get_SerialNum+0x4c>)
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4413      	add	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d009      	beq.n	8007a92 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a7e:	2208      	movs	r2, #8
 8007a80:	4909      	ldr	r1, [pc, #36]	; (8007aa8 <Get_SerialNum+0x50>)
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f814 	bl	8007ab0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a88:	2204      	movs	r2, #4
 8007a8a:	4908      	ldr	r1, [pc, #32]	; (8007aac <Get_SerialNum+0x54>)
 8007a8c:	68b8      	ldr	r0, [r7, #8]
 8007a8e:	f000 f80f 	bl	8007ab0 <IntToUnicode>
  }
}
 8007a92:	bf00      	nop
 8007a94:	3710      	adds	r7, #16
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	bf00      	nop
 8007a9c:	1ffff7e8 	.word	0x1ffff7e8
 8007aa0:	1ffff7ec 	.word	0x1ffff7ec
 8007aa4:	1ffff7f0 	.word	0x1ffff7f0
 8007aa8:	20000176 	.word	0x20000176
 8007aac:	20000186 	.word	0x20000186

08007ab0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b087      	sub	sp, #28
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	4613      	mov	r3, r2
 8007abc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
 8007ac6:	e027      	b.n	8007b18 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	0f1b      	lsrs	r3, r3, #28
 8007acc:	2b09      	cmp	r3, #9
 8007ace:	d80b      	bhi.n	8007ae8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	0f1b      	lsrs	r3, r3, #28
 8007ad4:	b2da      	uxtb	r2, r3
 8007ad6:	7dfb      	ldrb	r3, [r7, #23]
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	4619      	mov	r1, r3
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	440b      	add	r3, r1
 8007ae0:	3230      	adds	r2, #48	; 0x30
 8007ae2:	b2d2      	uxtb	r2, r2
 8007ae4:	701a      	strb	r2, [r3, #0]
 8007ae6:	e00a      	b.n	8007afe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	0f1b      	lsrs	r3, r3, #28
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	7dfb      	ldrb	r3, [r7, #23]
 8007af0:	005b      	lsls	r3, r3, #1
 8007af2:	4619      	mov	r1, r3
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	440b      	add	r3, r1
 8007af8:	3237      	adds	r2, #55	; 0x37
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	011b      	lsls	r3, r3, #4
 8007b02:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007b04:	7dfb      	ldrb	r3, [r7, #23]
 8007b06:	005b      	lsls	r3, r3, #1
 8007b08:	3301      	adds	r3, #1
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007b12:	7dfb      	ldrb	r3, [r7, #23]
 8007b14:	3301      	adds	r3, #1
 8007b16:	75fb      	strb	r3, [r7, #23]
 8007b18:	7dfa      	ldrb	r2, [r7, #23]
 8007b1a:	79fb      	ldrb	r3, [r7, #7]
 8007b1c:	429a      	cmp	r2, r3
 8007b1e:	d3d3      	bcc.n	8007ac8 <IntToUnicode+0x18>
  }
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	b084      	sub	sp, #16
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a0d      	ldr	r2, [pc, #52]	; (8007b70 <HAL_PCD_MspInit+0x44>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d113      	bne.n	8007b66 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007b3e:	4b0d      	ldr	r3, [pc, #52]	; (8007b74 <HAL_PCD_MspInit+0x48>)
 8007b40:	69db      	ldr	r3, [r3, #28]
 8007b42:	4a0c      	ldr	r2, [pc, #48]	; (8007b74 <HAL_PCD_MspInit+0x48>)
 8007b44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007b48:	61d3      	str	r3, [r2, #28]
 8007b4a:	4b0a      	ldr	r3, [pc, #40]	; (8007b74 <HAL_PCD_MspInit+0x48>)
 8007b4c:	69db      	ldr	r3, [r3, #28]
 8007b4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007b56:	2200      	movs	r2, #0
 8007b58:	2100      	movs	r1, #0
 8007b5a:	2014      	movs	r0, #20
 8007b5c:	f7f9 fb77 	bl	800124e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007b60:	2014      	movs	r0, #20
 8007b62:	f7f9 fb90 	bl	8001286 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007b66:	bf00      	nop
 8007b68:	3710      	adds	r7, #16
 8007b6a:	46bd      	mov	sp, r7
 8007b6c:	bd80      	pop	{r7, pc}
 8007b6e:	bf00      	nop
 8007b70:	40005c00 	.word	0x40005c00
 8007b74:	40021000 	.word	0x40021000

08007b78 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b082      	sub	sp, #8
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fdf2 	bl	8006778 <USBD_LL_SetupStage>
}
 8007b94:	bf00      	nop
 8007b96:	3708      	adds	r7, #8
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	460b      	mov	r3, r1
 8007ba6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007bae:	78fa      	ldrb	r2, [r7, #3]
 8007bb0:	6879      	ldr	r1, [r7, #4]
 8007bb2:	4613      	mov	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4413      	add	r3, r2
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	440b      	add	r3, r1
 8007bbc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007bc0:	681a      	ldr	r2, [r3, #0]
 8007bc2:	78fb      	ldrb	r3, [r7, #3]
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	f7fe fe24 	bl	8006812 <USBD_LL_DataOutStage>
}
 8007bca:	bf00      	nop
 8007bcc:	3708      	adds	r7, #8
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	bd80      	pop	{r7, pc}

08007bd2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bd2:	b580      	push	{r7, lr}
 8007bd4:	b082      	sub	sp, #8
 8007bd6:	af00      	add	r7, sp, #0
 8007bd8:	6078      	str	r0, [r7, #4]
 8007bda:	460b      	mov	r3, r1
 8007bdc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007be4:	78fa      	ldrb	r2, [r7, #3]
 8007be6:	6879      	ldr	r1, [r7, #4]
 8007be8:	4613      	mov	r3, r2
 8007bea:	009b      	lsls	r3, r3, #2
 8007bec:	4413      	add	r3, r2
 8007bee:	00db      	lsls	r3, r3, #3
 8007bf0:	440b      	add	r3, r1
 8007bf2:	333c      	adds	r3, #60	; 0x3c
 8007bf4:	681a      	ldr	r2, [r3, #0]
 8007bf6:	78fb      	ldrb	r3, [r7, #3]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	f7fe fe7b 	bl	80068f4 <USBD_LL_DataInStage>
}
 8007bfe:	bf00      	nop
 8007c00:	3708      	adds	r7, #8
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c06:	b580      	push	{r7, lr}
 8007c08:	b082      	sub	sp, #8
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c14:	4618      	mov	r0, r3
 8007c16:	f7fe ff8b 	bl	8006b30 <USBD_LL_SOF>
}
 8007c1a:	bf00      	nop
 8007c1c:	3708      	adds	r7, #8
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	bd80      	pop	{r7, pc}

08007c22 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c22:	b580      	push	{r7, lr}
 8007c24:	b084      	sub	sp, #16
 8007c26:	af00      	add	r7, sp, #0
 8007c28:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	689b      	ldr	r3, [r3, #8]
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d001      	beq.n	8007c3a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c36:	f7f8 fc4b 	bl	80004d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c40:	7bfa      	ldrb	r2, [r7, #15]
 8007c42:	4611      	mov	r1, r2
 8007c44:	4618      	mov	r0, r3
 8007c46:	f7fe ff3b 	bl	8006ac0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c50:	4618      	mov	r0, r3
 8007c52:	f7fe fef4 	bl	8006a3e <USBD_LL_Reset>
}
 8007c56:	bf00      	nop
 8007c58:	3710      	adds	r7, #16
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}
	...

08007c60 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b082      	sub	sp, #8
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007c6e:	4618      	mov	r0, r3
 8007c70:	f7fe ff35 	bl	8006ade <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	699b      	ldr	r3, [r3, #24]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d005      	beq.n	8007c88 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c7c:	4b04      	ldr	r3, [pc, #16]	; (8007c90 <HAL_PCD_SuspendCallback+0x30>)
 8007c7e:	691b      	ldr	r3, [r3, #16]
 8007c80:	4a03      	ldr	r2, [pc, #12]	; (8007c90 <HAL_PCD_SuspendCallback+0x30>)
 8007c82:	f043 0306 	orr.w	r3, r3, #6
 8007c86:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c88:	bf00      	nop
 8007c8a:	3708      	adds	r7, #8
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	e000ed00 	.word	0xe000ed00

08007c94 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b082      	sub	sp, #8
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe ff2f 	bl	8006b06 <USBD_LL_Resume>
}
 8007ca8:	bf00      	nop
 8007caa:	3708      	adds	r7, #8
 8007cac:	46bd      	mov	sp, r7
 8007cae:	bd80      	pop	{r7, pc}

08007cb0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b082      	sub	sp, #8
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007cb8:	4a28      	ldr	r2, [pc, #160]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	4a26      	ldr	r2, [pc, #152]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cc4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007cc8:	4b24      	ldr	r3, [pc, #144]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cca:	4a25      	ldr	r2, [pc, #148]	; (8007d60 <USBD_LL_Init+0xb0>)
 8007ccc:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007cce:	4b23      	ldr	r3, [pc, #140]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cd0:	2208      	movs	r2, #8
 8007cd2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007cd4:	4b21      	ldr	r3, [pc, #132]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cd6:	2202      	movs	r2, #2
 8007cd8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007cda:	4b20      	ldr	r3, [pc, #128]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007ce0:	4b1e      	ldr	r3, [pc, #120]	; (8007d5c <USBD_LL_Init+0xac>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007ce6:	4b1d      	ldr	r3, [pc, #116]	; (8007d5c <USBD_LL_Init+0xac>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007cec:	481b      	ldr	r0, [pc, #108]	; (8007d5c <USBD_LL_Init+0xac>)
 8007cee:	f7f9 fae4 	bl	80012ba <HAL_PCD_Init>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d001      	beq.n	8007cfc <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007cf8:	f7f8 fbea 	bl	80004d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d02:	2318      	movs	r3, #24
 8007d04:	2200      	movs	r2, #0
 8007d06:	2100      	movs	r1, #0
 8007d08:	f7fa ff58 	bl	8002bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d12:	2358      	movs	r3, #88	; 0x58
 8007d14:	2200      	movs	r2, #0
 8007d16:	2180      	movs	r1, #128	; 0x80
 8007d18:	f7fa ff50 	bl	8002bbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d22:	23c0      	movs	r3, #192	; 0xc0
 8007d24:	2200      	movs	r2, #0
 8007d26:	2181      	movs	r1, #129	; 0x81
 8007d28:	f7fa ff48 	bl	8002bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007d36:	2200      	movs	r2, #0
 8007d38:	2101      	movs	r1, #1
 8007d3a:	f7fa ff3f 	bl	8002bbc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007d44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2182      	movs	r1, #130	; 0x82
 8007d4c:	f7fa ff36 	bl	8002bbc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007d50:	2300      	movs	r3, #0
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	3708      	adds	r7, #8
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd80      	pop	{r7, pc}
 8007d5a:	bf00      	nop
 8007d5c:	20000efc 	.word	0x20000efc
 8007d60:	40005c00 	.word	0x40005c00

08007d64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007d70:	2300      	movs	r3, #0
 8007d72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7f9 fba8 	bl	80014d0 <HAL_PCD_Start>
 8007d80:	4603      	mov	r3, r0
 8007d82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007d84:	7bfb      	ldrb	r3, [r7, #15]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 f94e 	bl	8008028 <USBD_Get_USB_Status>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007d90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
 8007da2:	4608      	mov	r0, r1
 8007da4:	4611      	mov	r1, r2
 8007da6:	461a      	mov	r2, r3
 8007da8:	4603      	mov	r3, r0
 8007daa:	70fb      	strb	r3, [r7, #3]
 8007dac:	460b      	mov	r3, r1
 8007dae:	70bb      	strb	r3, [r7, #2]
 8007db0:	4613      	mov	r3, r2
 8007db2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007db4:	2300      	movs	r3, #0
 8007db6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007db8:	2300      	movs	r3, #0
 8007dba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007dc2:	78bb      	ldrb	r3, [r7, #2]
 8007dc4:	883a      	ldrh	r2, [r7, #0]
 8007dc6:	78f9      	ldrb	r1, [r7, #3]
 8007dc8:	f7f9 fd20 	bl	800180c <HAL_PCD_EP_Open>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dd0:	7bfb      	ldrb	r3, [r7, #15]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f000 f928 	bl	8008028 <USBD_Get_USB_Status>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ddc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}

08007de6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007de6:	b580      	push	{r7, lr}
 8007de8:	b084      	sub	sp, #16
 8007dea:	af00      	add	r7, sp, #0
 8007dec:	6078      	str	r0, [r7, #4]
 8007dee:	460b      	mov	r3, r1
 8007df0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007df2:	2300      	movs	r3, #0
 8007df4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df6:	2300      	movs	r3, #0
 8007df8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e00:	78fa      	ldrb	r2, [r7, #3]
 8007e02:	4611      	mov	r1, r2
 8007e04:	4618      	mov	r0, r3
 8007e06:	f7f9 fd67 	bl	80018d8 <HAL_PCD_EP_Close>
 8007e0a:	4603      	mov	r3, r0
 8007e0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e0e:	7bfb      	ldrb	r3, [r7, #15]
 8007e10:	4618      	mov	r0, r3
 8007e12:	f000 f909 	bl	8008028 <USBD_Get_USB_Status>
 8007e16:	4603      	mov	r3, r0
 8007e18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	3710      	adds	r7, #16
 8007e20:	46bd      	mov	sp, r7
 8007e22:	bd80      	pop	{r7, pc}

08007e24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e24:	b580      	push	{r7, lr}
 8007e26:	b084      	sub	sp, #16
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e30:	2300      	movs	r3, #0
 8007e32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e3e:	78fa      	ldrb	r2, [r7, #3]
 8007e40:	4611      	mov	r1, r2
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7f9 fe27 	bl	8001a96 <HAL_PCD_EP_SetStall>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e4c:	7bfb      	ldrb	r3, [r7, #15]
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f000 f8ea 	bl	8008028 <USBD_Get_USB_Status>
 8007e54:	4603      	mov	r3, r0
 8007e56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e58:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	af00      	add	r7, sp, #0
 8007e68:	6078      	str	r0, [r7, #4]
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e72:	2300      	movs	r3, #0
 8007e74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007e7c:	78fa      	ldrb	r2, [r7, #3]
 8007e7e:	4611      	mov	r1, r2
 8007e80:	4618      	mov	r0, r3
 8007e82:	f7f9 fe68 	bl	8001b56 <HAL_PCD_EP_ClrStall>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e8a:	7bfb      	ldrb	r3, [r7, #15]
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 f8cb 	bl	8008028 <USBD_Get_USB_Status>
 8007e92:	4603      	mov	r3, r0
 8007e94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e96:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	460b      	mov	r3, r1
 8007eaa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007eb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	da0c      	bge.n	8007ed6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ebc:	78fb      	ldrb	r3, [r7, #3]
 8007ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ec2:	68f9      	ldr	r1, [r7, #12]
 8007ec4:	1c5a      	adds	r2, r3, #1
 8007ec6:	4613      	mov	r3, r2
 8007ec8:	009b      	lsls	r3, r3, #2
 8007eca:	4413      	add	r3, r2
 8007ecc:	00db      	lsls	r3, r3, #3
 8007ece:	440b      	add	r3, r1
 8007ed0:	3302      	adds	r3, #2
 8007ed2:	781b      	ldrb	r3, [r3, #0]
 8007ed4:	e00b      	b.n	8007eee <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007ed6:	78fb      	ldrb	r3, [r7, #3]
 8007ed8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007edc:	68f9      	ldr	r1, [r7, #12]
 8007ede:	4613      	mov	r3, r2
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	4413      	add	r3, r2
 8007ee4:	00db      	lsls	r3, r3, #3
 8007ee6:	440b      	add	r3, r1
 8007ee8:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8007eec:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007eee:	4618      	mov	r0, r3
 8007ef0:	3714      	adds	r7, #20
 8007ef2:	46bd      	mov	sp, r7
 8007ef4:	bc80      	pop	{r7}
 8007ef6:	4770      	bx	lr

08007ef8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b084      	sub	sp, #16
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
 8007f00:	460b      	mov	r3, r1
 8007f02:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f04:	2300      	movs	r3, #0
 8007f06:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007f12:	78fa      	ldrb	r2, [r7, #3]
 8007f14:	4611      	mov	r1, r2
 8007f16:	4618      	mov	r0, r3
 8007f18:	f7f9 fc53 	bl	80017c2 <HAL_PCD_SetAddress>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 f880 	bl	8008028 <USBD_Get_USB_Status>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3710      	adds	r7, #16
 8007f32:	46bd      	mov	sp, r7
 8007f34:	bd80      	pop	{r7, pc}

08007f36 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f36:	b580      	push	{r7, lr}
 8007f38:	b086      	sub	sp, #24
 8007f3a:	af00      	add	r7, sp, #0
 8007f3c:	60f8      	str	r0, [r7, #12]
 8007f3e:	607a      	str	r2, [r7, #4]
 8007f40:	461a      	mov	r2, r3
 8007f42:	460b      	mov	r3, r1
 8007f44:	72fb      	strb	r3, [r7, #11]
 8007f46:	4613      	mov	r3, r2
 8007f48:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f58:	893b      	ldrh	r3, [r7, #8]
 8007f5a:	7af9      	ldrb	r1, [r7, #11]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	f7f9 fd57 	bl	8001a10 <HAL_PCD_EP_Transmit>
 8007f62:	4603      	mov	r3, r0
 8007f64:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f66:	7dfb      	ldrb	r3, [r7, #23]
 8007f68:	4618      	mov	r0, r3
 8007f6a:	f000 f85d 	bl	8008028 <USBD_Get_USB_Status>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007f72:	7dbb      	ldrb	r3, [r7, #22]
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3718      	adds	r7, #24
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bd80      	pop	{r7, pc}

08007f7c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8007f7c:	b580      	push	{r7, lr}
 8007f7e:	b086      	sub	sp, #24
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	60f8      	str	r0, [r7, #12]
 8007f84:	607a      	str	r2, [r7, #4]
 8007f86:	461a      	mov	r2, r3
 8007f88:	460b      	mov	r3, r1
 8007f8a:	72fb      	strb	r3, [r7, #11]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f9e:	893b      	ldrh	r3, [r7, #8]
 8007fa0:	7af9      	ldrb	r1, [r7, #11]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	f7f9 fce0 	bl	8001968 <HAL_PCD_EP_Receive>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fac:	7dfb      	ldrb	r3, [r7, #23]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 f83a 	bl	8008028 <USBD_Get_USB_Status>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fb8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b082      	sub	sp, #8
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	460b      	mov	r3, r1
 8007fcc:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fd4:	78fa      	ldrb	r2, [r7, #3]
 8007fd6:	4611      	mov	r1, r2
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f7f9 fd02 	bl	80019e2 <HAL_PCD_EP_GetRxCount>
 8007fde:	4603      	mov	r3, r0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007fe8:	b480      	push	{r7}
 8007fea:	b083      	sub	sp, #12
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ff0:	4b02      	ldr	r3, [pc, #8]	; (8007ffc <USBD_static_malloc+0x14>)
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	bc80      	pop	{r7}
 8007ffa:	4770      	bx	lr
 8007ffc:	200011e8 	.word	0x200011e8

08008000 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]

}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	bc80      	pop	{r7}
 8008010:	4770      	bx	lr

08008012 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	460b      	mov	r3, r1
 800801c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	bc80      	pop	{r7}
 8008026:	4770      	bx	lr

08008028 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008028:	b480      	push	{r7}
 800802a:	b085      	sub	sp, #20
 800802c:	af00      	add	r7, sp, #0
 800802e:	4603      	mov	r3, r0
 8008030:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008032:	2300      	movs	r3, #0
 8008034:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	2b03      	cmp	r3, #3
 800803a:	d817      	bhi.n	800806c <USBD_Get_USB_Status+0x44>
 800803c:	a201      	add	r2, pc, #4	; (adr r2, 8008044 <USBD_Get_USB_Status+0x1c>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008055 	.word	0x08008055
 8008048:	0800805b 	.word	0x0800805b
 800804c:	08008061 	.word	0x08008061
 8008050:	08008067 	.word	0x08008067
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008054:	2300      	movs	r3, #0
 8008056:	73fb      	strb	r3, [r7, #15]
    break;
 8008058:	e00b      	b.n	8008072 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800805a:	2302      	movs	r3, #2
 800805c:	73fb      	strb	r3, [r7, #15]
    break;
 800805e:	e008      	b.n	8008072 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008060:	2301      	movs	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
    break;
 8008064:	e005      	b.n	8008072 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008066:	2302      	movs	r3, #2
 8008068:	73fb      	strb	r3, [r7, #15]
    break;
 800806a:	e002      	b.n	8008072 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800806c:	2302      	movs	r3, #2
 800806e:	73fb      	strb	r3, [r7, #15]
    break;
 8008070:	bf00      	nop
  }
  return usb_status;
 8008072:	7bfb      	ldrb	r3, [r7, #15]
}
 8008074:	4618      	mov	r0, r3
 8008076:	3714      	adds	r7, #20
 8008078:	46bd      	mov	sp, r7
 800807a:	bc80      	pop	{r7}
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop

08008080 <__errno>:
 8008080:	4b01      	ldr	r3, [pc, #4]	; (8008088 <__errno+0x8>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	4770      	bx	lr
 8008086:	bf00      	nop
 8008088:	20000190 	.word	0x20000190

0800808c <__libc_init_array>:
 800808c:	b570      	push	{r4, r5, r6, lr}
 800808e:	2600      	movs	r6, #0
 8008090:	4d0c      	ldr	r5, [pc, #48]	; (80080c4 <__libc_init_array+0x38>)
 8008092:	4c0d      	ldr	r4, [pc, #52]	; (80080c8 <__libc_init_array+0x3c>)
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	42a6      	cmp	r6, r4
 800809a:	d109      	bne.n	80080b0 <__libc_init_array+0x24>
 800809c:	f000 fc9c 	bl	80089d8 <_init>
 80080a0:	2600      	movs	r6, #0
 80080a2:	4d0a      	ldr	r5, [pc, #40]	; (80080cc <__libc_init_array+0x40>)
 80080a4:	4c0a      	ldr	r4, [pc, #40]	; (80080d0 <__libc_init_array+0x44>)
 80080a6:	1b64      	subs	r4, r4, r5
 80080a8:	10a4      	asrs	r4, r4, #2
 80080aa:	42a6      	cmp	r6, r4
 80080ac:	d105      	bne.n	80080ba <__libc_init_array+0x2e>
 80080ae:	bd70      	pop	{r4, r5, r6, pc}
 80080b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080b4:	4798      	blx	r3
 80080b6:	3601      	adds	r6, #1
 80080b8:	e7ee      	b.n	8008098 <__libc_init_array+0xc>
 80080ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80080be:	4798      	blx	r3
 80080c0:	3601      	adds	r6, #1
 80080c2:	e7f2      	b.n	80080aa <__libc_init_array+0x1e>
 80080c4:	08008a98 	.word	0x08008a98
 80080c8:	08008a98 	.word	0x08008a98
 80080cc:	08008a98 	.word	0x08008a98
 80080d0:	08008a9c 	.word	0x08008a9c

080080d4 <memset>:
 80080d4:	4603      	mov	r3, r0
 80080d6:	4402      	add	r2, r0
 80080d8:	4293      	cmp	r3, r2
 80080da:	d100      	bne.n	80080de <memset+0xa>
 80080dc:	4770      	bx	lr
 80080de:	f803 1b01 	strb.w	r1, [r3], #1
 80080e2:	e7f9      	b.n	80080d8 <memset+0x4>

080080e4 <siprintf>:
 80080e4:	b40e      	push	{r1, r2, r3}
 80080e6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80080ea:	b500      	push	{lr}
 80080ec:	b09c      	sub	sp, #112	; 0x70
 80080ee:	ab1d      	add	r3, sp, #116	; 0x74
 80080f0:	9002      	str	r0, [sp, #8]
 80080f2:	9006      	str	r0, [sp, #24]
 80080f4:	9107      	str	r1, [sp, #28]
 80080f6:	9104      	str	r1, [sp, #16]
 80080f8:	4808      	ldr	r0, [pc, #32]	; (800811c <siprintf+0x38>)
 80080fa:	4909      	ldr	r1, [pc, #36]	; (8008120 <siprintf+0x3c>)
 80080fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8008100:	9105      	str	r1, [sp, #20]
 8008102:	6800      	ldr	r0, [r0, #0]
 8008104:	a902      	add	r1, sp, #8
 8008106:	9301      	str	r3, [sp, #4]
 8008108:	f000 f868 	bl	80081dc <_svfiprintf_r>
 800810c:	2200      	movs	r2, #0
 800810e:	9b02      	ldr	r3, [sp, #8]
 8008110:	701a      	strb	r2, [r3, #0]
 8008112:	b01c      	add	sp, #112	; 0x70
 8008114:	f85d eb04 	ldr.w	lr, [sp], #4
 8008118:	b003      	add	sp, #12
 800811a:	4770      	bx	lr
 800811c:	20000190 	.word	0x20000190
 8008120:	ffff0208 	.word	0xffff0208

08008124 <__ssputs_r>:
 8008124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008128:	688e      	ldr	r6, [r1, #8]
 800812a:	4682      	mov	sl, r0
 800812c:	429e      	cmp	r6, r3
 800812e:	460c      	mov	r4, r1
 8008130:	4690      	mov	r8, r2
 8008132:	461f      	mov	r7, r3
 8008134:	d838      	bhi.n	80081a8 <__ssputs_r+0x84>
 8008136:	898a      	ldrh	r2, [r1, #12]
 8008138:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800813c:	d032      	beq.n	80081a4 <__ssputs_r+0x80>
 800813e:	6825      	ldr	r5, [r4, #0]
 8008140:	6909      	ldr	r1, [r1, #16]
 8008142:	3301      	adds	r3, #1
 8008144:	eba5 0901 	sub.w	r9, r5, r1
 8008148:	6965      	ldr	r5, [r4, #20]
 800814a:	444b      	add	r3, r9
 800814c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008150:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008154:	106d      	asrs	r5, r5, #1
 8008156:	429d      	cmp	r5, r3
 8008158:	bf38      	it	cc
 800815a:	461d      	movcc	r5, r3
 800815c:	0553      	lsls	r3, r2, #21
 800815e:	d531      	bpl.n	80081c4 <__ssputs_r+0xa0>
 8008160:	4629      	mov	r1, r5
 8008162:	f000 fb6f 	bl	8008844 <_malloc_r>
 8008166:	4606      	mov	r6, r0
 8008168:	b950      	cbnz	r0, 8008180 <__ssputs_r+0x5c>
 800816a:	230c      	movs	r3, #12
 800816c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008170:	f8ca 3000 	str.w	r3, [sl]
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817a:	81a3      	strh	r3, [r4, #12]
 800817c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008180:	464a      	mov	r2, r9
 8008182:	6921      	ldr	r1, [r4, #16]
 8008184:	f000 face 	bl	8008724 <memcpy>
 8008188:	89a3      	ldrh	r3, [r4, #12]
 800818a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800818e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008192:	81a3      	strh	r3, [r4, #12]
 8008194:	6126      	str	r6, [r4, #16]
 8008196:	444e      	add	r6, r9
 8008198:	6026      	str	r6, [r4, #0]
 800819a:	463e      	mov	r6, r7
 800819c:	6165      	str	r5, [r4, #20]
 800819e:	eba5 0509 	sub.w	r5, r5, r9
 80081a2:	60a5      	str	r5, [r4, #8]
 80081a4:	42be      	cmp	r6, r7
 80081a6:	d900      	bls.n	80081aa <__ssputs_r+0x86>
 80081a8:	463e      	mov	r6, r7
 80081aa:	4632      	mov	r2, r6
 80081ac:	4641      	mov	r1, r8
 80081ae:	6820      	ldr	r0, [r4, #0]
 80081b0:	f000 fac6 	bl	8008740 <memmove>
 80081b4:	68a3      	ldr	r3, [r4, #8]
 80081b6:	2000      	movs	r0, #0
 80081b8:	1b9b      	subs	r3, r3, r6
 80081ba:	60a3      	str	r3, [r4, #8]
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	4433      	add	r3, r6
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	e7db      	b.n	800817c <__ssputs_r+0x58>
 80081c4:	462a      	mov	r2, r5
 80081c6:	f000 fbb1 	bl	800892c <_realloc_r>
 80081ca:	4606      	mov	r6, r0
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d1e1      	bne.n	8008194 <__ssputs_r+0x70>
 80081d0:	4650      	mov	r0, sl
 80081d2:	6921      	ldr	r1, [r4, #16]
 80081d4:	f000 face 	bl	8008774 <_free_r>
 80081d8:	e7c7      	b.n	800816a <__ssputs_r+0x46>
	...

080081dc <_svfiprintf_r>:
 80081dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081e0:	4698      	mov	r8, r3
 80081e2:	898b      	ldrh	r3, [r1, #12]
 80081e4:	4607      	mov	r7, r0
 80081e6:	061b      	lsls	r3, r3, #24
 80081e8:	460d      	mov	r5, r1
 80081ea:	4614      	mov	r4, r2
 80081ec:	b09d      	sub	sp, #116	; 0x74
 80081ee:	d50e      	bpl.n	800820e <_svfiprintf_r+0x32>
 80081f0:	690b      	ldr	r3, [r1, #16]
 80081f2:	b963      	cbnz	r3, 800820e <_svfiprintf_r+0x32>
 80081f4:	2140      	movs	r1, #64	; 0x40
 80081f6:	f000 fb25 	bl	8008844 <_malloc_r>
 80081fa:	6028      	str	r0, [r5, #0]
 80081fc:	6128      	str	r0, [r5, #16]
 80081fe:	b920      	cbnz	r0, 800820a <_svfiprintf_r+0x2e>
 8008200:	230c      	movs	r3, #12
 8008202:	603b      	str	r3, [r7, #0]
 8008204:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008208:	e0d1      	b.n	80083ae <_svfiprintf_r+0x1d2>
 800820a:	2340      	movs	r3, #64	; 0x40
 800820c:	616b      	str	r3, [r5, #20]
 800820e:	2300      	movs	r3, #0
 8008210:	9309      	str	r3, [sp, #36]	; 0x24
 8008212:	2320      	movs	r3, #32
 8008214:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008218:	2330      	movs	r3, #48	; 0x30
 800821a:	f04f 0901 	mov.w	r9, #1
 800821e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008222:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083c8 <_svfiprintf_r+0x1ec>
 8008226:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800822a:	4623      	mov	r3, r4
 800822c:	469a      	mov	sl, r3
 800822e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008232:	b10a      	cbz	r2, 8008238 <_svfiprintf_r+0x5c>
 8008234:	2a25      	cmp	r2, #37	; 0x25
 8008236:	d1f9      	bne.n	800822c <_svfiprintf_r+0x50>
 8008238:	ebba 0b04 	subs.w	fp, sl, r4
 800823c:	d00b      	beq.n	8008256 <_svfiprintf_r+0x7a>
 800823e:	465b      	mov	r3, fp
 8008240:	4622      	mov	r2, r4
 8008242:	4629      	mov	r1, r5
 8008244:	4638      	mov	r0, r7
 8008246:	f7ff ff6d 	bl	8008124 <__ssputs_r>
 800824a:	3001      	adds	r0, #1
 800824c:	f000 80aa 	beq.w	80083a4 <_svfiprintf_r+0x1c8>
 8008250:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008252:	445a      	add	r2, fp
 8008254:	9209      	str	r2, [sp, #36]	; 0x24
 8008256:	f89a 3000 	ldrb.w	r3, [sl]
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 80a2 	beq.w	80083a4 <_svfiprintf_r+0x1c8>
 8008260:	2300      	movs	r3, #0
 8008262:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008266:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800826a:	f10a 0a01 	add.w	sl, sl, #1
 800826e:	9304      	str	r3, [sp, #16]
 8008270:	9307      	str	r3, [sp, #28]
 8008272:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008276:	931a      	str	r3, [sp, #104]	; 0x68
 8008278:	4654      	mov	r4, sl
 800827a:	2205      	movs	r2, #5
 800827c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008280:	4851      	ldr	r0, [pc, #324]	; (80083c8 <_svfiprintf_r+0x1ec>)
 8008282:	f000 fa41 	bl	8008708 <memchr>
 8008286:	9a04      	ldr	r2, [sp, #16]
 8008288:	b9d8      	cbnz	r0, 80082c2 <_svfiprintf_r+0xe6>
 800828a:	06d0      	lsls	r0, r2, #27
 800828c:	bf44      	itt	mi
 800828e:	2320      	movmi	r3, #32
 8008290:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008294:	0711      	lsls	r1, r2, #28
 8008296:	bf44      	itt	mi
 8008298:	232b      	movmi	r3, #43	; 0x2b
 800829a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800829e:	f89a 3000 	ldrb.w	r3, [sl]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d015      	beq.n	80082d2 <_svfiprintf_r+0xf6>
 80082a6:	4654      	mov	r4, sl
 80082a8:	2000      	movs	r0, #0
 80082aa:	f04f 0c0a 	mov.w	ip, #10
 80082ae:	9a07      	ldr	r2, [sp, #28]
 80082b0:	4621      	mov	r1, r4
 80082b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082b6:	3b30      	subs	r3, #48	; 0x30
 80082b8:	2b09      	cmp	r3, #9
 80082ba:	d94e      	bls.n	800835a <_svfiprintf_r+0x17e>
 80082bc:	b1b0      	cbz	r0, 80082ec <_svfiprintf_r+0x110>
 80082be:	9207      	str	r2, [sp, #28]
 80082c0:	e014      	b.n	80082ec <_svfiprintf_r+0x110>
 80082c2:	eba0 0308 	sub.w	r3, r0, r8
 80082c6:	fa09 f303 	lsl.w	r3, r9, r3
 80082ca:	4313      	orrs	r3, r2
 80082cc:	46a2      	mov	sl, r4
 80082ce:	9304      	str	r3, [sp, #16]
 80082d0:	e7d2      	b.n	8008278 <_svfiprintf_r+0x9c>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	1d19      	adds	r1, r3, #4
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	9103      	str	r1, [sp, #12]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	bfbb      	ittet	lt
 80082de:	425b      	neglt	r3, r3
 80082e0:	f042 0202 	orrlt.w	r2, r2, #2
 80082e4:	9307      	strge	r3, [sp, #28]
 80082e6:	9307      	strlt	r3, [sp, #28]
 80082e8:	bfb8      	it	lt
 80082ea:	9204      	strlt	r2, [sp, #16]
 80082ec:	7823      	ldrb	r3, [r4, #0]
 80082ee:	2b2e      	cmp	r3, #46	; 0x2e
 80082f0:	d10c      	bne.n	800830c <_svfiprintf_r+0x130>
 80082f2:	7863      	ldrb	r3, [r4, #1]
 80082f4:	2b2a      	cmp	r3, #42	; 0x2a
 80082f6:	d135      	bne.n	8008364 <_svfiprintf_r+0x188>
 80082f8:	9b03      	ldr	r3, [sp, #12]
 80082fa:	3402      	adds	r4, #2
 80082fc:	1d1a      	adds	r2, r3, #4
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	9203      	str	r2, [sp, #12]
 8008302:	2b00      	cmp	r3, #0
 8008304:	bfb8      	it	lt
 8008306:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800830a:	9305      	str	r3, [sp, #20]
 800830c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80083cc <_svfiprintf_r+0x1f0>
 8008310:	2203      	movs	r2, #3
 8008312:	4650      	mov	r0, sl
 8008314:	7821      	ldrb	r1, [r4, #0]
 8008316:	f000 f9f7 	bl	8008708 <memchr>
 800831a:	b140      	cbz	r0, 800832e <_svfiprintf_r+0x152>
 800831c:	2340      	movs	r3, #64	; 0x40
 800831e:	eba0 000a 	sub.w	r0, r0, sl
 8008322:	fa03 f000 	lsl.w	r0, r3, r0
 8008326:	9b04      	ldr	r3, [sp, #16]
 8008328:	3401      	adds	r4, #1
 800832a:	4303      	orrs	r3, r0
 800832c:	9304      	str	r3, [sp, #16]
 800832e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008332:	2206      	movs	r2, #6
 8008334:	4826      	ldr	r0, [pc, #152]	; (80083d0 <_svfiprintf_r+0x1f4>)
 8008336:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800833a:	f000 f9e5 	bl	8008708 <memchr>
 800833e:	2800      	cmp	r0, #0
 8008340:	d038      	beq.n	80083b4 <_svfiprintf_r+0x1d8>
 8008342:	4b24      	ldr	r3, [pc, #144]	; (80083d4 <_svfiprintf_r+0x1f8>)
 8008344:	bb1b      	cbnz	r3, 800838e <_svfiprintf_r+0x1b2>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	3307      	adds	r3, #7
 800834a:	f023 0307 	bic.w	r3, r3, #7
 800834e:	3308      	adds	r3, #8
 8008350:	9303      	str	r3, [sp, #12]
 8008352:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008354:	4433      	add	r3, r6
 8008356:	9309      	str	r3, [sp, #36]	; 0x24
 8008358:	e767      	b.n	800822a <_svfiprintf_r+0x4e>
 800835a:	460c      	mov	r4, r1
 800835c:	2001      	movs	r0, #1
 800835e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008362:	e7a5      	b.n	80082b0 <_svfiprintf_r+0xd4>
 8008364:	2300      	movs	r3, #0
 8008366:	f04f 0c0a 	mov.w	ip, #10
 800836a:	4619      	mov	r1, r3
 800836c:	3401      	adds	r4, #1
 800836e:	9305      	str	r3, [sp, #20]
 8008370:	4620      	mov	r0, r4
 8008372:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008376:	3a30      	subs	r2, #48	; 0x30
 8008378:	2a09      	cmp	r2, #9
 800837a:	d903      	bls.n	8008384 <_svfiprintf_r+0x1a8>
 800837c:	2b00      	cmp	r3, #0
 800837e:	d0c5      	beq.n	800830c <_svfiprintf_r+0x130>
 8008380:	9105      	str	r1, [sp, #20]
 8008382:	e7c3      	b.n	800830c <_svfiprintf_r+0x130>
 8008384:	4604      	mov	r4, r0
 8008386:	2301      	movs	r3, #1
 8008388:	fb0c 2101 	mla	r1, ip, r1, r2
 800838c:	e7f0      	b.n	8008370 <_svfiprintf_r+0x194>
 800838e:	ab03      	add	r3, sp, #12
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	462a      	mov	r2, r5
 8008394:	4638      	mov	r0, r7
 8008396:	4b10      	ldr	r3, [pc, #64]	; (80083d8 <_svfiprintf_r+0x1fc>)
 8008398:	a904      	add	r1, sp, #16
 800839a:	f3af 8000 	nop.w
 800839e:	1c42      	adds	r2, r0, #1
 80083a0:	4606      	mov	r6, r0
 80083a2:	d1d6      	bne.n	8008352 <_svfiprintf_r+0x176>
 80083a4:	89ab      	ldrh	r3, [r5, #12]
 80083a6:	065b      	lsls	r3, r3, #25
 80083a8:	f53f af2c 	bmi.w	8008204 <_svfiprintf_r+0x28>
 80083ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083ae:	b01d      	add	sp, #116	; 0x74
 80083b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083b4:	ab03      	add	r3, sp, #12
 80083b6:	9300      	str	r3, [sp, #0]
 80083b8:	462a      	mov	r2, r5
 80083ba:	4638      	mov	r0, r7
 80083bc:	4b06      	ldr	r3, [pc, #24]	; (80083d8 <_svfiprintf_r+0x1fc>)
 80083be:	a904      	add	r1, sp, #16
 80083c0:	f000 f87c 	bl	80084bc <_printf_i>
 80083c4:	e7eb      	b.n	800839e <_svfiprintf_r+0x1c2>
 80083c6:	bf00      	nop
 80083c8:	08008a64 	.word	0x08008a64
 80083cc:	08008a6a 	.word	0x08008a6a
 80083d0:	08008a6e 	.word	0x08008a6e
 80083d4:	00000000 	.word	0x00000000
 80083d8:	08008125 	.word	0x08008125

080083dc <_printf_common>:
 80083dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083e0:	4616      	mov	r6, r2
 80083e2:	4699      	mov	r9, r3
 80083e4:	688a      	ldr	r2, [r1, #8]
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	4607      	mov	r7, r0
 80083ea:	4293      	cmp	r3, r2
 80083ec:	bfb8      	it	lt
 80083ee:	4613      	movlt	r3, r2
 80083f0:	6033      	str	r3, [r6, #0]
 80083f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083f6:	460c      	mov	r4, r1
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	b10a      	cbz	r2, 8008402 <_printf_common+0x26>
 80083fe:	3301      	adds	r3, #1
 8008400:	6033      	str	r3, [r6, #0]
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	0699      	lsls	r1, r3, #26
 8008406:	bf42      	ittt	mi
 8008408:	6833      	ldrmi	r3, [r6, #0]
 800840a:	3302      	addmi	r3, #2
 800840c:	6033      	strmi	r3, [r6, #0]
 800840e:	6825      	ldr	r5, [r4, #0]
 8008410:	f015 0506 	ands.w	r5, r5, #6
 8008414:	d106      	bne.n	8008424 <_printf_common+0x48>
 8008416:	f104 0a19 	add.w	sl, r4, #25
 800841a:	68e3      	ldr	r3, [r4, #12]
 800841c:	6832      	ldr	r2, [r6, #0]
 800841e:	1a9b      	subs	r3, r3, r2
 8008420:	42ab      	cmp	r3, r5
 8008422:	dc28      	bgt.n	8008476 <_printf_common+0x9a>
 8008424:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008428:	1e13      	subs	r3, r2, #0
 800842a:	6822      	ldr	r2, [r4, #0]
 800842c:	bf18      	it	ne
 800842e:	2301      	movne	r3, #1
 8008430:	0692      	lsls	r2, r2, #26
 8008432:	d42d      	bmi.n	8008490 <_printf_common+0xb4>
 8008434:	4649      	mov	r1, r9
 8008436:	4638      	mov	r0, r7
 8008438:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800843c:	47c0      	blx	r8
 800843e:	3001      	adds	r0, #1
 8008440:	d020      	beq.n	8008484 <_printf_common+0xa8>
 8008442:	6823      	ldr	r3, [r4, #0]
 8008444:	68e5      	ldr	r5, [r4, #12]
 8008446:	f003 0306 	and.w	r3, r3, #6
 800844a:	2b04      	cmp	r3, #4
 800844c:	bf18      	it	ne
 800844e:	2500      	movne	r5, #0
 8008450:	6832      	ldr	r2, [r6, #0]
 8008452:	f04f 0600 	mov.w	r6, #0
 8008456:	68a3      	ldr	r3, [r4, #8]
 8008458:	bf08      	it	eq
 800845a:	1aad      	subeq	r5, r5, r2
 800845c:	6922      	ldr	r2, [r4, #16]
 800845e:	bf08      	it	eq
 8008460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008464:	4293      	cmp	r3, r2
 8008466:	bfc4      	itt	gt
 8008468:	1a9b      	subgt	r3, r3, r2
 800846a:	18ed      	addgt	r5, r5, r3
 800846c:	341a      	adds	r4, #26
 800846e:	42b5      	cmp	r5, r6
 8008470:	d11a      	bne.n	80084a8 <_printf_common+0xcc>
 8008472:	2000      	movs	r0, #0
 8008474:	e008      	b.n	8008488 <_printf_common+0xac>
 8008476:	2301      	movs	r3, #1
 8008478:	4652      	mov	r2, sl
 800847a:	4649      	mov	r1, r9
 800847c:	4638      	mov	r0, r7
 800847e:	47c0      	blx	r8
 8008480:	3001      	adds	r0, #1
 8008482:	d103      	bne.n	800848c <_printf_common+0xb0>
 8008484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800848c:	3501      	adds	r5, #1
 800848e:	e7c4      	b.n	800841a <_printf_common+0x3e>
 8008490:	2030      	movs	r0, #48	; 0x30
 8008492:	18e1      	adds	r1, r4, r3
 8008494:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800849e:	4422      	add	r2, r4
 80084a0:	3302      	adds	r3, #2
 80084a2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084a6:	e7c5      	b.n	8008434 <_printf_common+0x58>
 80084a8:	2301      	movs	r3, #1
 80084aa:	4622      	mov	r2, r4
 80084ac:	4649      	mov	r1, r9
 80084ae:	4638      	mov	r0, r7
 80084b0:	47c0      	blx	r8
 80084b2:	3001      	adds	r0, #1
 80084b4:	d0e6      	beq.n	8008484 <_printf_common+0xa8>
 80084b6:	3601      	adds	r6, #1
 80084b8:	e7d9      	b.n	800846e <_printf_common+0x92>
	...

080084bc <_printf_i>:
 80084bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c0:	7e0f      	ldrb	r7, [r1, #24]
 80084c2:	4691      	mov	r9, r2
 80084c4:	2f78      	cmp	r7, #120	; 0x78
 80084c6:	4680      	mov	r8, r0
 80084c8:	460c      	mov	r4, r1
 80084ca:	469a      	mov	sl, r3
 80084cc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084d2:	d807      	bhi.n	80084e4 <_printf_i+0x28>
 80084d4:	2f62      	cmp	r7, #98	; 0x62
 80084d6:	d80a      	bhi.n	80084ee <_printf_i+0x32>
 80084d8:	2f00      	cmp	r7, #0
 80084da:	f000 80d9 	beq.w	8008690 <_printf_i+0x1d4>
 80084de:	2f58      	cmp	r7, #88	; 0x58
 80084e0:	f000 80a4 	beq.w	800862c <_printf_i+0x170>
 80084e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084ec:	e03a      	b.n	8008564 <_printf_i+0xa8>
 80084ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084f2:	2b15      	cmp	r3, #21
 80084f4:	d8f6      	bhi.n	80084e4 <_printf_i+0x28>
 80084f6:	a101      	add	r1, pc, #4	; (adr r1, 80084fc <_printf_i+0x40>)
 80084f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084fc:	08008555 	.word	0x08008555
 8008500:	08008569 	.word	0x08008569
 8008504:	080084e5 	.word	0x080084e5
 8008508:	080084e5 	.word	0x080084e5
 800850c:	080084e5 	.word	0x080084e5
 8008510:	080084e5 	.word	0x080084e5
 8008514:	08008569 	.word	0x08008569
 8008518:	080084e5 	.word	0x080084e5
 800851c:	080084e5 	.word	0x080084e5
 8008520:	080084e5 	.word	0x080084e5
 8008524:	080084e5 	.word	0x080084e5
 8008528:	08008677 	.word	0x08008677
 800852c:	08008599 	.word	0x08008599
 8008530:	08008659 	.word	0x08008659
 8008534:	080084e5 	.word	0x080084e5
 8008538:	080084e5 	.word	0x080084e5
 800853c:	08008699 	.word	0x08008699
 8008540:	080084e5 	.word	0x080084e5
 8008544:	08008599 	.word	0x08008599
 8008548:	080084e5 	.word	0x080084e5
 800854c:	080084e5 	.word	0x080084e5
 8008550:	08008661 	.word	0x08008661
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	1d1a      	adds	r2, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008564:	2301      	movs	r3, #1
 8008566:	e0a4      	b.n	80086b2 <_printf_i+0x1f6>
 8008568:	6820      	ldr	r0, [r4, #0]
 800856a:	6829      	ldr	r1, [r5, #0]
 800856c:	0606      	lsls	r6, r0, #24
 800856e:	f101 0304 	add.w	r3, r1, #4
 8008572:	d50a      	bpl.n	800858a <_printf_i+0xce>
 8008574:	680e      	ldr	r6, [r1, #0]
 8008576:	602b      	str	r3, [r5, #0]
 8008578:	2e00      	cmp	r6, #0
 800857a:	da03      	bge.n	8008584 <_printf_i+0xc8>
 800857c:	232d      	movs	r3, #45	; 0x2d
 800857e:	4276      	negs	r6, r6
 8008580:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008584:	230a      	movs	r3, #10
 8008586:	485e      	ldr	r0, [pc, #376]	; (8008700 <_printf_i+0x244>)
 8008588:	e019      	b.n	80085be <_printf_i+0x102>
 800858a:	680e      	ldr	r6, [r1, #0]
 800858c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	bf18      	it	ne
 8008594:	b236      	sxthne	r6, r6
 8008596:	e7ef      	b.n	8008578 <_printf_i+0xbc>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	6820      	ldr	r0, [r4, #0]
 800859c:	1d19      	adds	r1, r3, #4
 800859e:	6029      	str	r1, [r5, #0]
 80085a0:	0601      	lsls	r1, r0, #24
 80085a2:	d501      	bpl.n	80085a8 <_printf_i+0xec>
 80085a4:	681e      	ldr	r6, [r3, #0]
 80085a6:	e002      	b.n	80085ae <_printf_i+0xf2>
 80085a8:	0646      	lsls	r6, r0, #25
 80085aa:	d5fb      	bpl.n	80085a4 <_printf_i+0xe8>
 80085ac:	881e      	ldrh	r6, [r3, #0]
 80085ae:	2f6f      	cmp	r7, #111	; 0x6f
 80085b0:	bf0c      	ite	eq
 80085b2:	2308      	moveq	r3, #8
 80085b4:	230a      	movne	r3, #10
 80085b6:	4852      	ldr	r0, [pc, #328]	; (8008700 <_printf_i+0x244>)
 80085b8:	2100      	movs	r1, #0
 80085ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085be:	6865      	ldr	r5, [r4, #4]
 80085c0:	2d00      	cmp	r5, #0
 80085c2:	bfa8      	it	ge
 80085c4:	6821      	ldrge	r1, [r4, #0]
 80085c6:	60a5      	str	r5, [r4, #8]
 80085c8:	bfa4      	itt	ge
 80085ca:	f021 0104 	bicge.w	r1, r1, #4
 80085ce:	6021      	strge	r1, [r4, #0]
 80085d0:	b90e      	cbnz	r6, 80085d6 <_printf_i+0x11a>
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	d04d      	beq.n	8008672 <_printf_i+0x1b6>
 80085d6:	4615      	mov	r5, r2
 80085d8:	fbb6 f1f3 	udiv	r1, r6, r3
 80085dc:	fb03 6711 	mls	r7, r3, r1, r6
 80085e0:	5dc7      	ldrb	r7, [r0, r7]
 80085e2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085e6:	4637      	mov	r7, r6
 80085e8:	42bb      	cmp	r3, r7
 80085ea:	460e      	mov	r6, r1
 80085ec:	d9f4      	bls.n	80085d8 <_printf_i+0x11c>
 80085ee:	2b08      	cmp	r3, #8
 80085f0:	d10b      	bne.n	800860a <_printf_i+0x14e>
 80085f2:	6823      	ldr	r3, [r4, #0]
 80085f4:	07de      	lsls	r6, r3, #31
 80085f6:	d508      	bpl.n	800860a <_printf_i+0x14e>
 80085f8:	6923      	ldr	r3, [r4, #16]
 80085fa:	6861      	ldr	r1, [r4, #4]
 80085fc:	4299      	cmp	r1, r3
 80085fe:	bfde      	ittt	le
 8008600:	2330      	movle	r3, #48	; 0x30
 8008602:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008606:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800860a:	1b52      	subs	r2, r2, r5
 800860c:	6122      	str	r2, [r4, #16]
 800860e:	464b      	mov	r3, r9
 8008610:	4621      	mov	r1, r4
 8008612:	4640      	mov	r0, r8
 8008614:	f8cd a000 	str.w	sl, [sp]
 8008618:	aa03      	add	r2, sp, #12
 800861a:	f7ff fedf 	bl	80083dc <_printf_common>
 800861e:	3001      	adds	r0, #1
 8008620:	d14c      	bne.n	80086bc <_printf_i+0x200>
 8008622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008626:	b004      	add	sp, #16
 8008628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800862c:	4834      	ldr	r0, [pc, #208]	; (8008700 <_printf_i+0x244>)
 800862e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008632:	6829      	ldr	r1, [r5, #0]
 8008634:	6823      	ldr	r3, [r4, #0]
 8008636:	f851 6b04 	ldr.w	r6, [r1], #4
 800863a:	6029      	str	r1, [r5, #0]
 800863c:	061d      	lsls	r5, r3, #24
 800863e:	d514      	bpl.n	800866a <_printf_i+0x1ae>
 8008640:	07df      	lsls	r7, r3, #31
 8008642:	bf44      	itt	mi
 8008644:	f043 0320 	orrmi.w	r3, r3, #32
 8008648:	6023      	strmi	r3, [r4, #0]
 800864a:	b91e      	cbnz	r6, 8008654 <_printf_i+0x198>
 800864c:	6823      	ldr	r3, [r4, #0]
 800864e:	f023 0320 	bic.w	r3, r3, #32
 8008652:	6023      	str	r3, [r4, #0]
 8008654:	2310      	movs	r3, #16
 8008656:	e7af      	b.n	80085b8 <_printf_i+0xfc>
 8008658:	6823      	ldr	r3, [r4, #0]
 800865a:	f043 0320 	orr.w	r3, r3, #32
 800865e:	6023      	str	r3, [r4, #0]
 8008660:	2378      	movs	r3, #120	; 0x78
 8008662:	4828      	ldr	r0, [pc, #160]	; (8008704 <_printf_i+0x248>)
 8008664:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008668:	e7e3      	b.n	8008632 <_printf_i+0x176>
 800866a:	0659      	lsls	r1, r3, #25
 800866c:	bf48      	it	mi
 800866e:	b2b6      	uxthmi	r6, r6
 8008670:	e7e6      	b.n	8008640 <_printf_i+0x184>
 8008672:	4615      	mov	r5, r2
 8008674:	e7bb      	b.n	80085ee <_printf_i+0x132>
 8008676:	682b      	ldr	r3, [r5, #0]
 8008678:	6826      	ldr	r6, [r4, #0]
 800867a:	1d18      	adds	r0, r3, #4
 800867c:	6961      	ldr	r1, [r4, #20]
 800867e:	6028      	str	r0, [r5, #0]
 8008680:	0635      	lsls	r5, r6, #24
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	d501      	bpl.n	800868a <_printf_i+0x1ce>
 8008686:	6019      	str	r1, [r3, #0]
 8008688:	e002      	b.n	8008690 <_printf_i+0x1d4>
 800868a:	0670      	lsls	r0, r6, #25
 800868c:	d5fb      	bpl.n	8008686 <_printf_i+0x1ca>
 800868e:	8019      	strh	r1, [r3, #0]
 8008690:	2300      	movs	r3, #0
 8008692:	4615      	mov	r5, r2
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	e7ba      	b.n	800860e <_printf_i+0x152>
 8008698:	682b      	ldr	r3, [r5, #0]
 800869a:	2100      	movs	r1, #0
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	4628      	mov	r0, r5
 80086a6:	f000 f82f 	bl	8008708 <memchr>
 80086aa:	b108      	cbz	r0, 80086b0 <_printf_i+0x1f4>
 80086ac:	1b40      	subs	r0, r0, r5
 80086ae:	6060      	str	r0, [r4, #4]
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	6123      	str	r3, [r4, #16]
 80086b4:	2300      	movs	r3, #0
 80086b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086ba:	e7a8      	b.n	800860e <_printf_i+0x152>
 80086bc:	462a      	mov	r2, r5
 80086be:	4649      	mov	r1, r9
 80086c0:	4640      	mov	r0, r8
 80086c2:	6923      	ldr	r3, [r4, #16]
 80086c4:	47d0      	blx	sl
 80086c6:	3001      	adds	r0, #1
 80086c8:	d0ab      	beq.n	8008622 <_printf_i+0x166>
 80086ca:	6823      	ldr	r3, [r4, #0]
 80086cc:	079b      	lsls	r3, r3, #30
 80086ce:	d413      	bmi.n	80086f8 <_printf_i+0x23c>
 80086d0:	68e0      	ldr	r0, [r4, #12]
 80086d2:	9b03      	ldr	r3, [sp, #12]
 80086d4:	4298      	cmp	r0, r3
 80086d6:	bfb8      	it	lt
 80086d8:	4618      	movlt	r0, r3
 80086da:	e7a4      	b.n	8008626 <_printf_i+0x16a>
 80086dc:	2301      	movs	r3, #1
 80086de:	4632      	mov	r2, r6
 80086e0:	4649      	mov	r1, r9
 80086e2:	4640      	mov	r0, r8
 80086e4:	47d0      	blx	sl
 80086e6:	3001      	adds	r0, #1
 80086e8:	d09b      	beq.n	8008622 <_printf_i+0x166>
 80086ea:	3501      	adds	r5, #1
 80086ec:	68e3      	ldr	r3, [r4, #12]
 80086ee:	9903      	ldr	r1, [sp, #12]
 80086f0:	1a5b      	subs	r3, r3, r1
 80086f2:	42ab      	cmp	r3, r5
 80086f4:	dcf2      	bgt.n	80086dc <_printf_i+0x220>
 80086f6:	e7eb      	b.n	80086d0 <_printf_i+0x214>
 80086f8:	2500      	movs	r5, #0
 80086fa:	f104 0619 	add.w	r6, r4, #25
 80086fe:	e7f5      	b.n	80086ec <_printf_i+0x230>
 8008700:	08008a75 	.word	0x08008a75
 8008704:	08008a86 	.word	0x08008a86

08008708 <memchr>:
 8008708:	4603      	mov	r3, r0
 800870a:	b510      	push	{r4, lr}
 800870c:	b2c9      	uxtb	r1, r1
 800870e:	4402      	add	r2, r0
 8008710:	4293      	cmp	r3, r2
 8008712:	4618      	mov	r0, r3
 8008714:	d101      	bne.n	800871a <memchr+0x12>
 8008716:	2000      	movs	r0, #0
 8008718:	e003      	b.n	8008722 <memchr+0x1a>
 800871a:	7804      	ldrb	r4, [r0, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	428c      	cmp	r4, r1
 8008720:	d1f6      	bne.n	8008710 <memchr+0x8>
 8008722:	bd10      	pop	{r4, pc}

08008724 <memcpy>:
 8008724:	440a      	add	r2, r1
 8008726:	4291      	cmp	r1, r2
 8008728:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800872c:	d100      	bne.n	8008730 <memcpy+0xc>
 800872e:	4770      	bx	lr
 8008730:	b510      	push	{r4, lr}
 8008732:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008736:	4291      	cmp	r1, r2
 8008738:	f803 4f01 	strb.w	r4, [r3, #1]!
 800873c:	d1f9      	bne.n	8008732 <memcpy+0xe>
 800873e:	bd10      	pop	{r4, pc}

08008740 <memmove>:
 8008740:	4288      	cmp	r0, r1
 8008742:	b510      	push	{r4, lr}
 8008744:	eb01 0402 	add.w	r4, r1, r2
 8008748:	d902      	bls.n	8008750 <memmove+0x10>
 800874a:	4284      	cmp	r4, r0
 800874c:	4623      	mov	r3, r4
 800874e:	d807      	bhi.n	8008760 <memmove+0x20>
 8008750:	1e43      	subs	r3, r0, #1
 8008752:	42a1      	cmp	r1, r4
 8008754:	d008      	beq.n	8008768 <memmove+0x28>
 8008756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800875a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800875e:	e7f8      	b.n	8008752 <memmove+0x12>
 8008760:	4601      	mov	r1, r0
 8008762:	4402      	add	r2, r0
 8008764:	428a      	cmp	r2, r1
 8008766:	d100      	bne.n	800876a <memmove+0x2a>
 8008768:	bd10      	pop	{r4, pc}
 800876a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800876e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008772:	e7f7      	b.n	8008764 <memmove+0x24>

08008774 <_free_r>:
 8008774:	b538      	push	{r3, r4, r5, lr}
 8008776:	4605      	mov	r5, r0
 8008778:	2900      	cmp	r1, #0
 800877a:	d040      	beq.n	80087fe <_free_r+0x8a>
 800877c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008780:	1f0c      	subs	r4, r1, #4
 8008782:	2b00      	cmp	r3, #0
 8008784:	bfb8      	it	lt
 8008786:	18e4      	addlt	r4, r4, r3
 8008788:	f000 f910 	bl	80089ac <__malloc_lock>
 800878c:	4a1c      	ldr	r2, [pc, #112]	; (8008800 <_free_r+0x8c>)
 800878e:	6813      	ldr	r3, [r2, #0]
 8008790:	b933      	cbnz	r3, 80087a0 <_free_r+0x2c>
 8008792:	6063      	str	r3, [r4, #4]
 8008794:	6014      	str	r4, [r2, #0]
 8008796:	4628      	mov	r0, r5
 8008798:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800879c:	f000 b90c 	b.w	80089b8 <__malloc_unlock>
 80087a0:	42a3      	cmp	r3, r4
 80087a2:	d908      	bls.n	80087b6 <_free_r+0x42>
 80087a4:	6820      	ldr	r0, [r4, #0]
 80087a6:	1821      	adds	r1, r4, r0
 80087a8:	428b      	cmp	r3, r1
 80087aa:	bf01      	itttt	eq
 80087ac:	6819      	ldreq	r1, [r3, #0]
 80087ae:	685b      	ldreq	r3, [r3, #4]
 80087b0:	1809      	addeq	r1, r1, r0
 80087b2:	6021      	streq	r1, [r4, #0]
 80087b4:	e7ed      	b.n	8008792 <_free_r+0x1e>
 80087b6:	461a      	mov	r2, r3
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	b10b      	cbz	r3, 80087c0 <_free_r+0x4c>
 80087bc:	42a3      	cmp	r3, r4
 80087be:	d9fa      	bls.n	80087b6 <_free_r+0x42>
 80087c0:	6811      	ldr	r1, [r2, #0]
 80087c2:	1850      	adds	r0, r2, r1
 80087c4:	42a0      	cmp	r0, r4
 80087c6:	d10b      	bne.n	80087e0 <_free_r+0x6c>
 80087c8:	6820      	ldr	r0, [r4, #0]
 80087ca:	4401      	add	r1, r0
 80087cc:	1850      	adds	r0, r2, r1
 80087ce:	4283      	cmp	r3, r0
 80087d0:	6011      	str	r1, [r2, #0]
 80087d2:	d1e0      	bne.n	8008796 <_free_r+0x22>
 80087d4:	6818      	ldr	r0, [r3, #0]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	4401      	add	r1, r0
 80087da:	6011      	str	r1, [r2, #0]
 80087dc:	6053      	str	r3, [r2, #4]
 80087de:	e7da      	b.n	8008796 <_free_r+0x22>
 80087e0:	d902      	bls.n	80087e8 <_free_r+0x74>
 80087e2:	230c      	movs	r3, #12
 80087e4:	602b      	str	r3, [r5, #0]
 80087e6:	e7d6      	b.n	8008796 <_free_r+0x22>
 80087e8:	6820      	ldr	r0, [r4, #0]
 80087ea:	1821      	adds	r1, r4, r0
 80087ec:	428b      	cmp	r3, r1
 80087ee:	bf01      	itttt	eq
 80087f0:	6819      	ldreq	r1, [r3, #0]
 80087f2:	685b      	ldreq	r3, [r3, #4]
 80087f4:	1809      	addeq	r1, r1, r0
 80087f6:	6021      	streq	r1, [r4, #0]
 80087f8:	6063      	str	r3, [r4, #4]
 80087fa:	6054      	str	r4, [r2, #4]
 80087fc:	e7cb      	b.n	8008796 <_free_r+0x22>
 80087fe:	bd38      	pop	{r3, r4, r5, pc}
 8008800:	20001408 	.word	0x20001408

08008804 <sbrk_aligned>:
 8008804:	b570      	push	{r4, r5, r6, lr}
 8008806:	4e0e      	ldr	r6, [pc, #56]	; (8008840 <sbrk_aligned+0x3c>)
 8008808:	460c      	mov	r4, r1
 800880a:	6831      	ldr	r1, [r6, #0]
 800880c:	4605      	mov	r5, r0
 800880e:	b911      	cbnz	r1, 8008816 <sbrk_aligned+0x12>
 8008810:	f000 f8bc 	bl	800898c <_sbrk_r>
 8008814:	6030      	str	r0, [r6, #0]
 8008816:	4621      	mov	r1, r4
 8008818:	4628      	mov	r0, r5
 800881a:	f000 f8b7 	bl	800898c <_sbrk_r>
 800881e:	1c43      	adds	r3, r0, #1
 8008820:	d00a      	beq.n	8008838 <sbrk_aligned+0x34>
 8008822:	1cc4      	adds	r4, r0, #3
 8008824:	f024 0403 	bic.w	r4, r4, #3
 8008828:	42a0      	cmp	r0, r4
 800882a:	d007      	beq.n	800883c <sbrk_aligned+0x38>
 800882c:	1a21      	subs	r1, r4, r0
 800882e:	4628      	mov	r0, r5
 8008830:	f000 f8ac 	bl	800898c <_sbrk_r>
 8008834:	3001      	adds	r0, #1
 8008836:	d101      	bne.n	800883c <sbrk_aligned+0x38>
 8008838:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800883c:	4620      	mov	r0, r4
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	2000140c 	.word	0x2000140c

08008844 <_malloc_r>:
 8008844:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008848:	1ccd      	adds	r5, r1, #3
 800884a:	f025 0503 	bic.w	r5, r5, #3
 800884e:	3508      	adds	r5, #8
 8008850:	2d0c      	cmp	r5, #12
 8008852:	bf38      	it	cc
 8008854:	250c      	movcc	r5, #12
 8008856:	2d00      	cmp	r5, #0
 8008858:	4607      	mov	r7, r0
 800885a:	db01      	blt.n	8008860 <_malloc_r+0x1c>
 800885c:	42a9      	cmp	r1, r5
 800885e:	d905      	bls.n	800886c <_malloc_r+0x28>
 8008860:	230c      	movs	r3, #12
 8008862:	2600      	movs	r6, #0
 8008864:	603b      	str	r3, [r7, #0]
 8008866:	4630      	mov	r0, r6
 8008868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800886c:	4e2e      	ldr	r6, [pc, #184]	; (8008928 <_malloc_r+0xe4>)
 800886e:	f000 f89d 	bl	80089ac <__malloc_lock>
 8008872:	6833      	ldr	r3, [r6, #0]
 8008874:	461c      	mov	r4, r3
 8008876:	bb34      	cbnz	r4, 80088c6 <_malloc_r+0x82>
 8008878:	4629      	mov	r1, r5
 800887a:	4638      	mov	r0, r7
 800887c:	f7ff ffc2 	bl	8008804 <sbrk_aligned>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	4604      	mov	r4, r0
 8008884:	d14d      	bne.n	8008922 <_malloc_r+0xde>
 8008886:	6834      	ldr	r4, [r6, #0]
 8008888:	4626      	mov	r6, r4
 800888a:	2e00      	cmp	r6, #0
 800888c:	d140      	bne.n	8008910 <_malloc_r+0xcc>
 800888e:	6823      	ldr	r3, [r4, #0]
 8008890:	4631      	mov	r1, r6
 8008892:	4638      	mov	r0, r7
 8008894:	eb04 0803 	add.w	r8, r4, r3
 8008898:	f000 f878 	bl	800898c <_sbrk_r>
 800889c:	4580      	cmp	r8, r0
 800889e:	d13a      	bne.n	8008916 <_malloc_r+0xd2>
 80088a0:	6821      	ldr	r1, [r4, #0]
 80088a2:	3503      	adds	r5, #3
 80088a4:	1a6d      	subs	r5, r5, r1
 80088a6:	f025 0503 	bic.w	r5, r5, #3
 80088aa:	3508      	adds	r5, #8
 80088ac:	2d0c      	cmp	r5, #12
 80088ae:	bf38      	it	cc
 80088b0:	250c      	movcc	r5, #12
 80088b2:	4638      	mov	r0, r7
 80088b4:	4629      	mov	r1, r5
 80088b6:	f7ff ffa5 	bl	8008804 <sbrk_aligned>
 80088ba:	3001      	adds	r0, #1
 80088bc:	d02b      	beq.n	8008916 <_malloc_r+0xd2>
 80088be:	6823      	ldr	r3, [r4, #0]
 80088c0:	442b      	add	r3, r5
 80088c2:	6023      	str	r3, [r4, #0]
 80088c4:	e00e      	b.n	80088e4 <_malloc_r+0xa0>
 80088c6:	6822      	ldr	r2, [r4, #0]
 80088c8:	1b52      	subs	r2, r2, r5
 80088ca:	d41e      	bmi.n	800890a <_malloc_r+0xc6>
 80088cc:	2a0b      	cmp	r2, #11
 80088ce:	d916      	bls.n	80088fe <_malloc_r+0xba>
 80088d0:	1961      	adds	r1, r4, r5
 80088d2:	42a3      	cmp	r3, r4
 80088d4:	6025      	str	r5, [r4, #0]
 80088d6:	bf18      	it	ne
 80088d8:	6059      	strne	r1, [r3, #4]
 80088da:	6863      	ldr	r3, [r4, #4]
 80088dc:	bf08      	it	eq
 80088de:	6031      	streq	r1, [r6, #0]
 80088e0:	5162      	str	r2, [r4, r5]
 80088e2:	604b      	str	r3, [r1, #4]
 80088e4:	4638      	mov	r0, r7
 80088e6:	f104 060b 	add.w	r6, r4, #11
 80088ea:	f000 f865 	bl	80089b8 <__malloc_unlock>
 80088ee:	f026 0607 	bic.w	r6, r6, #7
 80088f2:	1d23      	adds	r3, r4, #4
 80088f4:	1af2      	subs	r2, r6, r3
 80088f6:	d0b6      	beq.n	8008866 <_malloc_r+0x22>
 80088f8:	1b9b      	subs	r3, r3, r6
 80088fa:	50a3      	str	r3, [r4, r2]
 80088fc:	e7b3      	b.n	8008866 <_malloc_r+0x22>
 80088fe:	6862      	ldr	r2, [r4, #4]
 8008900:	42a3      	cmp	r3, r4
 8008902:	bf0c      	ite	eq
 8008904:	6032      	streq	r2, [r6, #0]
 8008906:	605a      	strne	r2, [r3, #4]
 8008908:	e7ec      	b.n	80088e4 <_malloc_r+0xa0>
 800890a:	4623      	mov	r3, r4
 800890c:	6864      	ldr	r4, [r4, #4]
 800890e:	e7b2      	b.n	8008876 <_malloc_r+0x32>
 8008910:	4634      	mov	r4, r6
 8008912:	6876      	ldr	r6, [r6, #4]
 8008914:	e7b9      	b.n	800888a <_malloc_r+0x46>
 8008916:	230c      	movs	r3, #12
 8008918:	4638      	mov	r0, r7
 800891a:	603b      	str	r3, [r7, #0]
 800891c:	f000 f84c 	bl	80089b8 <__malloc_unlock>
 8008920:	e7a1      	b.n	8008866 <_malloc_r+0x22>
 8008922:	6025      	str	r5, [r4, #0]
 8008924:	e7de      	b.n	80088e4 <_malloc_r+0xa0>
 8008926:	bf00      	nop
 8008928:	20001408 	.word	0x20001408

0800892c <_realloc_r>:
 800892c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008930:	4680      	mov	r8, r0
 8008932:	4614      	mov	r4, r2
 8008934:	460e      	mov	r6, r1
 8008936:	b921      	cbnz	r1, 8008942 <_realloc_r+0x16>
 8008938:	4611      	mov	r1, r2
 800893a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800893e:	f7ff bf81 	b.w	8008844 <_malloc_r>
 8008942:	b92a      	cbnz	r2, 8008950 <_realloc_r+0x24>
 8008944:	f7ff ff16 	bl	8008774 <_free_r>
 8008948:	4625      	mov	r5, r4
 800894a:	4628      	mov	r0, r5
 800894c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008950:	f000 f838 	bl	80089c4 <_malloc_usable_size_r>
 8008954:	4284      	cmp	r4, r0
 8008956:	4607      	mov	r7, r0
 8008958:	d802      	bhi.n	8008960 <_realloc_r+0x34>
 800895a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800895e:	d812      	bhi.n	8008986 <_realloc_r+0x5a>
 8008960:	4621      	mov	r1, r4
 8008962:	4640      	mov	r0, r8
 8008964:	f7ff ff6e 	bl	8008844 <_malloc_r>
 8008968:	4605      	mov	r5, r0
 800896a:	2800      	cmp	r0, #0
 800896c:	d0ed      	beq.n	800894a <_realloc_r+0x1e>
 800896e:	42bc      	cmp	r4, r7
 8008970:	4622      	mov	r2, r4
 8008972:	4631      	mov	r1, r6
 8008974:	bf28      	it	cs
 8008976:	463a      	movcs	r2, r7
 8008978:	f7ff fed4 	bl	8008724 <memcpy>
 800897c:	4631      	mov	r1, r6
 800897e:	4640      	mov	r0, r8
 8008980:	f7ff fef8 	bl	8008774 <_free_r>
 8008984:	e7e1      	b.n	800894a <_realloc_r+0x1e>
 8008986:	4635      	mov	r5, r6
 8008988:	e7df      	b.n	800894a <_realloc_r+0x1e>
	...

0800898c <_sbrk_r>:
 800898c:	b538      	push	{r3, r4, r5, lr}
 800898e:	2300      	movs	r3, #0
 8008990:	4d05      	ldr	r5, [pc, #20]	; (80089a8 <_sbrk_r+0x1c>)
 8008992:	4604      	mov	r4, r0
 8008994:	4608      	mov	r0, r1
 8008996:	602b      	str	r3, [r5, #0]
 8008998:	f7f8 fad0 	bl	8000f3c <_sbrk>
 800899c:	1c43      	adds	r3, r0, #1
 800899e:	d102      	bne.n	80089a6 <_sbrk_r+0x1a>
 80089a0:	682b      	ldr	r3, [r5, #0]
 80089a2:	b103      	cbz	r3, 80089a6 <_sbrk_r+0x1a>
 80089a4:	6023      	str	r3, [r4, #0]
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
 80089a8:	20001410 	.word	0x20001410

080089ac <__malloc_lock>:
 80089ac:	4801      	ldr	r0, [pc, #4]	; (80089b4 <__malloc_lock+0x8>)
 80089ae:	f000 b811 	b.w	80089d4 <__retarget_lock_acquire_recursive>
 80089b2:	bf00      	nop
 80089b4:	20001414 	.word	0x20001414

080089b8 <__malloc_unlock>:
 80089b8:	4801      	ldr	r0, [pc, #4]	; (80089c0 <__malloc_unlock+0x8>)
 80089ba:	f000 b80c 	b.w	80089d6 <__retarget_lock_release_recursive>
 80089be:	bf00      	nop
 80089c0:	20001414 	.word	0x20001414

080089c4 <_malloc_usable_size_r>:
 80089c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c8:	1f18      	subs	r0, r3, #4
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	bfbc      	itt	lt
 80089ce:	580b      	ldrlt	r3, [r1, r0]
 80089d0:	18c0      	addlt	r0, r0, r3
 80089d2:	4770      	bx	lr

080089d4 <__retarget_lock_acquire_recursive>:
 80089d4:	4770      	bx	lr

080089d6 <__retarget_lock_release_recursive>:
 80089d6:	4770      	bx	lr

080089d8 <_init>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	bf00      	nop
 80089dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089de:	bc08      	pop	{r3}
 80089e0:	469e      	mov	lr, r3
 80089e2:	4770      	bx	lr

080089e4 <_fini>:
 80089e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089e6:	bf00      	nop
 80089e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80089ea:	bc08      	pop	{r3}
 80089ec:	469e      	mov	lr, r3
 80089ee:	4770      	bx	lr
