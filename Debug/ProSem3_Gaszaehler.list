
ProSem3_Gaszaehler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008144  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008328  08008328  00018328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008390  08008390  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08008390  08008390  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008390  08008390  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008390  08008390  00018390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008394  08008394  00018394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08008398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000121c  20000184  0800851c  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0800851c  000213a0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb8c  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003594  00000000  00000000  0002fd39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b38  00000000  00000000  00033fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d620  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012bf0  00000000  00000000  00052138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009489a  00000000  00000000  00064d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f95c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003104  00000000  00000000  000f9614  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000184 	.word	0x20000184
 8000200:	00000000 	.word	0x00000000
 8000204:	08008310 	.word	0x08008310

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000188 	.word	0x20000188
 8000220:	08008310 	.word	0x08008310

08000224 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000224:	b480      	push	{r7}
 8000226:	b083      	sub	sp, #12
 8000228:	af00      	add	r7, sp, #0
 800022a:	4603      	mov	r3, r0
 800022c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800022e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000232:	2b00      	cmp	r3, #0
 8000234:	db0b      	blt.n	800024e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000236:	79fb      	ldrb	r3, [r7, #7]
 8000238:	f003 021f 	and.w	r2, r3, #31
 800023c:	4906      	ldr	r1, [pc, #24]	; (8000258 <__NVIC_EnableIRQ+0x34>)
 800023e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000242:	095b      	lsrs	r3, r3, #5
 8000244:	2001      	movs	r0, #1
 8000246:	fa00 f202 	lsl.w	r2, r0, r2
 800024a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800024e:	bf00      	nop
 8000250:	370c      	adds	r7, #12
 8000252:	46bd      	mov	sp, r7
 8000254:	bc80      	pop	{r7}
 8000256:	4770      	bx	lr
 8000258:	e000e100 	.word	0xe000e100

0800025c <initTimer>:
#include <shalf1.h>
#include <stdbool.h>

bool timFlag = false;

void initTimer(void){
 800025c:	b580      	push	{r7, lr}
 800025e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000260:	b672      	cpsid	i
}
 8000262:	bf00      	nop
	__disable_irq();
	timerBusClkOn(TIM2);
 8000264:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000268:	f000 fd9c 	bl	8000da4 <timerBusClkOn>
	timerSetPrescaler(TIM2, TIM_PSC);
 800026c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000270:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000274:	f000 fdd8 	bl	8000e28 <timerSetPrescaler>
	timerEnableInterrupt(TIM2);
 8000278:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800027c:	f000 fdf0 	bl	8000e60 <timerEnableInterrupt>
	timerSetOnePulseMode(TIM2, ONE_PULSE_MODE_ON);
 8000280:	2101      	movs	r1, #1
 8000282:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000286:	f000 fdfa 	bl	8000e7e <timerSetOnePulseMode>
	NVIC_EnableIRQ(TIM2_IRQn);
 800028a:	201c      	movs	r0, #28
 800028c:	f7ff ffca 	bl	8000224 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000290:	b662      	cpsie	i
}
 8000292:	bf00      	nop
	__enable_irq();
}
 8000294:	bf00      	nop
 8000296:	bd80      	pop	{r7, pc}

08000298 <delay_ms>:

extern void delay_ms(uint16_t milliseconds){
 8000298:	b580      	push	{r7, lr}
 800029a:	b082      	sub	sp, #8
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	80fb      	strh	r3, [r7, #6]
	timerSetAutoReloadValue(TIM2, milliseconds);
 80002a2:	88fb      	ldrh	r3, [r7, #6]
 80002a4:	4619      	mov	r1, r3
 80002a6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002aa:	f000 fdcb 	bl	8000e44 <timerSetAutoReloadValue>
	timerStart(TIM2);
 80002ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80002b2:	f000 fdff 	bl	8000eb4 <timerStart>
	while(!timFlag){}
 80002b6:	bf00      	nop
 80002b8:	4b06      	ldr	r3, [pc, #24]	; (80002d4 <delay_ms+0x3c>)
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	f083 0301 	eor.w	r3, r3, #1
 80002c0:	b2db      	uxtb	r3, r3
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d1f8      	bne.n	80002b8 <delay_ms+0x20>
	timFlag = false;
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <delay_ms+0x3c>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	701a      	strb	r2, [r3, #0]
}
 80002cc:	bf00      	nop
 80002ce:	3708      	adds	r7, #8
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	200001a0 	.word	0x200001a0

080002d8 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	timFlag = true;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <TIM2_IRQHandler+0x1c>)
 80002de:	2201      	movs	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
	TIM2->SR = 0;
 80002e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002e6:	2200      	movs	r2, #0
 80002e8:	611a      	str	r2, [r3, #16]
}
 80002ea:	bf00      	nop
 80002ec:	46bd      	mov	sp, r7
 80002ee:	bc80      	pop	{r7}
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	200001a0 	.word	0x200001a0

080002f8 <__NVIC_EnableIRQ>:
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000306:	2b00      	cmp	r3, #0
 8000308:	db0b      	blt.n	8000322 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800030a:	79fb      	ldrb	r3, [r7, #7]
 800030c:	f003 021f 	and.w	r2, r3, #31
 8000310:	4906      	ldr	r1, [pc, #24]	; (800032c <__NVIC_EnableIRQ+0x34>)
 8000312:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000316:	095b      	lsrs	r3, r3, #5
 8000318:	2001      	movs	r0, #1
 800031a:	fa00 f202 	lsl.w	r2, r0, r2
 800031e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000322:	bf00      	nop
 8000324:	370c      	adds	r7, #12
 8000326:	46bd      	mov	sp, r7
 8000328:	bc80      	pop	{r7}
 800032a:	4770      	bx	lr
 800032c:	e000e100 	.word	0xe000e100

08000330 <initPins>:
 *      Author: lukas
 */
#include <gpio.h>
#include <shalf1.h>

void initPins(){
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0
	gpioInitPort(GPIOC);
 8000334:	481e      	ldr	r0, [pc, #120]	; (80003b0 <initPins+0x80>)
 8000336:	f000 fbf3 	bl	8000b20 <gpioInitPort>
	gpioSetupPin(GPIOC, PIN4, OUT_2MHZ);
 800033a:	2202      	movs	r2, #2
 800033c:	2104      	movs	r1, #4
 800033e:	481c      	ldr	r0, [pc, #112]	; (80003b0 <initPins+0x80>)
 8000340:	f000 fc3a 	bl	8000bb8 <gpioSetupPin>
	gpioSetupMode(GPIOC, PIN4, GP_PP);
 8000344:	2200      	movs	r2, #0
 8000346:	2104      	movs	r1, #4
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <initPins+0x80>)
 800034a:	f000 fc9a 	bl	8000c82 <gpioSetupMode>
	gpioSetupPin(GPIOC, PIN9, INPUT);
 800034e:	2200      	movs	r2, #0
 8000350:	2109      	movs	r1, #9
 8000352:	4817      	ldr	r0, [pc, #92]	; (80003b0 <initPins+0x80>)
 8000354:	f000 fc30 	bl	8000bb8 <gpioSetupPin>
	gpioSetupInput(GPIOC, PIN9, IN_PUPD);
 8000358:	2202      	movs	r2, #2
 800035a:	2109      	movs	r1, #9
 800035c:	4814      	ldr	r0, [pc, #80]	; (80003b0 <initPins+0x80>)
 800035e:	f000 fc68 	bl	8000c32 <gpioSetupInput>
	gpioSetPullupPulldown(GPIOC, PIN9, true);
 8000362:	2201      	movs	r2, #1
 8000364:	2109      	movs	r1, #9
 8000366:	4812      	ldr	r0, [pc, #72]	; (80003b0 <initPins+0x80>)
 8000368:	f000 fcdc 	bl	8000d24 <gpioSetPullupPulldown>
	extiConfigureEXTI(PORT_C, PIN9);
 800036c:	2109      	movs	r1, #9
 800036e:	2002      	movs	r0, #2
 8000370:	f000 fb22 	bl	80009b8 <extiConfigureEXTI>
	extiEnableIrq(EXTI_P9);
 8000374:	2009      	movs	r0, #9
 8000376:	f000 fb95 	bl	8000aa4 <extiEnableIrq>
	extiSetTriggerEdge(false, EXTI_P9);
 800037a:	2109      	movs	r1, #9
 800037c:	2000      	movs	r0, #0
 800037e:	f000 fba7 	bl	8000ad0 <extiSetTriggerEdge>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000382:	2017      	movs	r0, #23
 8000384:	f7ff ffb8 	bl	80002f8 <__NVIC_EnableIRQ>
	gpioInitPort(GPIOB);
 8000388:	480a      	ldr	r0, [pc, #40]	; (80003b4 <initPins+0x84>)
 800038a:	f000 fbc9 	bl	8000b20 <gpioInitPort>
	gpioSetupPin(GPIOB, PIN12, OUT_2MHZ);
 800038e:	2202      	movs	r2, #2
 8000390:	210c      	movs	r1, #12
 8000392:	4808      	ldr	r0, [pc, #32]	; (80003b4 <initPins+0x84>)
 8000394:	f000 fc10 	bl	8000bb8 <gpioSetupPin>
	gpioSetupMode(GPIOB, PIN12, GP_PP);
 8000398:	2200      	movs	r2, #0
 800039a:	210c      	movs	r1, #12
 800039c:	4805      	ldr	r0, [pc, #20]	; (80003b4 <initPins+0x84>)
 800039e:	f000 fc70 	bl	8000c82 <gpioSetupMode>
	gpioResetPin(GPIOB, PIN12);
 80003a2:	210c      	movs	r1, #12
 80003a4:	4803      	ldr	r0, [pc, #12]	; (80003b4 <initPins+0x84>)
 80003a6:	f000 fca8 	bl	8000cfa <gpioResetPin>
}
 80003aa:	bf00      	nop
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	40011000 	.word	0x40011000
 80003b4:	40010c00 	.word	0x40010c00

080003b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003bc:	f000 ff3c 	bl	8001238 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c0:	f000 f807 	bl	80003d2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003c4:	f000 f862 	bl	800048c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80003c8:	f007 fb00 	bl	80079cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  start();
 80003cc:	f000 fa02 	bl	80007d4 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003d0:	e7fe      	b.n	80003d0 <main+0x18>

080003d2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003d2:	b580      	push	{r7, lr}
 80003d4:	b096      	sub	sp, #88	; 0x58
 80003d6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80003dc:	2228      	movs	r2, #40	; 0x28
 80003de:	2100      	movs	r1, #0
 80003e0:	4618      	mov	r0, r3
 80003e2:	f007 ff8d 	bl	8008300 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003e6:	f107 031c 	add.w	r3, r7, #28
 80003ea:	2200      	movs	r2, #0
 80003ec:	601a      	str	r2, [r3, #0]
 80003ee:	605a      	str	r2, [r3, #4]
 80003f0:	609a      	str	r2, [r3, #8]
 80003f2:	60da      	str	r2, [r3, #12]
 80003f4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80003f6:	1d3b      	adds	r3, r7, #4
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	605a      	str	r2, [r3, #4]
 80003fe:	609a      	str	r2, [r3, #8]
 8000400:	60da      	str	r2, [r3, #12]
 8000402:	611a      	str	r2, [r3, #16]
 8000404:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000406:	2301      	movs	r3, #1
 8000408:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800040a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800040e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000410:	2300      	movs	r3, #0
 8000412:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000414:	2301      	movs	r3, #1
 8000416:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000418:	2302      	movs	r3, #2
 800041a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800041c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000420:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000422:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000426:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000428:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800042c:	4618      	mov	r0, r3
 800042e:	f002 fd23 	bl	8002e78 <HAL_RCC_OscConfig>
 8000432:	4603      	mov	r3, r0
 8000434:	2b00      	cmp	r3, #0
 8000436:	d001      	beq.n	800043c <SystemClock_Config+0x6a>
  {
    Error_Handler();
 8000438:	f000 f84a 	bl	80004d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800043c:	230f      	movs	r3, #15
 800043e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000440:	2302      	movs	r3, #2
 8000442:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000444:	2300      	movs	r3, #0
 8000446:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800044c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800044e:	2300      	movs	r3, #0
 8000450:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000452:	f107 031c 	add.w	r3, r7, #28
 8000456:	2101      	movs	r1, #1
 8000458:	4618      	mov	r0, r3
 800045a:	f002 ff8f 	bl	800337c <HAL_RCC_ClockConfig>
 800045e:	4603      	mov	r3, r0
 8000460:	2b00      	cmp	r3, #0
 8000462:	d001      	beq.n	8000468 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000464:	f000 f834 	bl	80004d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000468:	2310      	movs	r3, #16
 800046a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800046c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000470:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000472:	1d3b      	adds	r3, r7, #4
 8000474:	4618      	mov	r0, r3
 8000476:	f003 f8e7 	bl	8003648 <HAL_RCCEx_PeriphCLKConfig>
 800047a:	4603      	mov	r3, r0
 800047c:	2b00      	cmp	r3, #0
 800047e:	d001      	beq.n	8000484 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000480:	f000 f826 	bl	80004d0 <Error_Handler>
  }
}
 8000484:	bf00      	nop
 8000486:	3758      	adds	r7, #88	; 0x58
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b083      	sub	sp, #12
 8000490:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000492:	4b0e      	ldr	r3, [pc, #56]	; (80004cc <MX_GPIO_Init+0x40>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a0d      	ldr	r2, [pc, #52]	; (80004cc <MX_GPIO_Init+0x40>)
 8000498:	f043 0320 	orr.w	r3, r3, #32
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b0b      	ldr	r3, [pc, #44]	; (80004cc <MX_GPIO_Init+0x40>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0320 	and.w	r3, r3, #32
 80004a6:	607b      	str	r3, [r7, #4]
 80004a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	4b08      	ldr	r3, [pc, #32]	; (80004cc <MX_GPIO_Init+0x40>)
 80004ac:	699b      	ldr	r3, [r3, #24]
 80004ae:	4a07      	ldr	r2, [pc, #28]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b0:	f043 0304 	orr.w	r3, r3, #4
 80004b4:	6193      	str	r3, [r2, #24]
 80004b6:	4b05      	ldr	r3, [pc, #20]	; (80004cc <MX_GPIO_Init+0x40>)
 80004b8:	699b      	ldr	r3, [r3, #24]
 80004ba:	f003 0304 	and.w	r3, r3, #4
 80004be:	603b      	str	r3, [r7, #0]
 80004c0:	683b      	ldr	r3, [r7, #0]

}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	40021000 	.word	0x40021000

080004d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80004d4:	b672      	cpsid	i
}
 80004d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <Error_Handler+0x8>
	...

080004dc <registerRead>:
static uint8_t slaveAdr = 0;
static uint8_t funcCode = 0;
static uint16_t regAdr = 0;
static uint16_t numOfRegs = 0;

extern uint16_t registerRead(uint8_t regAdr){
 80004dc:	b480      	push	{r7}
 80004de:	b083      	sub	sp, #12
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	4603      	mov	r3, r0
 80004e4:	71fb      	strb	r3, [r7, #7]
	if(regAdr < 2){
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b01      	cmp	r3, #1
 80004ea:	d804      	bhi.n	80004f6 <registerRead+0x1a>
		return registers[regAdr];
 80004ec:	79fb      	ldrb	r3, [r7, #7]
 80004ee:	4a05      	ldr	r2, [pc, #20]	; (8000504 <registerRead+0x28>)
 80004f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80004f4:	e001      	b.n	80004fa <registerRead+0x1e>
	}
	else{
		return regOutOfBound;
 80004f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	bc80      	pop	{r7}
 8000502:	4770      	bx	lr
 8000504:	20000000 	.word	0x20000000

08000508 <modbusCRC>:
extern modbusErrCode setSlaveAddress(uint8_t address){
	deviceAddress = address;
	return modbusOK;
}

extern uint16_t modbusCRC(uint8_t *data, uint8_t len){
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
 8000510:	460b      	mov	r3, r1
 8000512:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = ~0x0000;
 8000514:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000518:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	uint8_t b;
	for(i = 0; i < len; i++){
 800051a:	2300      	movs	r3, #0
 800051c:	737b      	strb	r3, [r7, #13]
 800051e:	e022      	b.n	8000566 <modbusCRC+0x5e>
		crc ^= data[i];
 8000520:	7b7b      	ldrb	r3, [r7, #13]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	b29a      	uxth	r2, r3
 800052a:	89fb      	ldrh	r3, [r7, #14]
 800052c:	4053      	eors	r3, r2
 800052e:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 8000530:	2300      	movs	r3, #0
 8000532:	733b      	strb	r3, [r7, #12]
 8000534:	e011      	b.n	800055a <modbusCRC+0x52>
			if((crc & 1) != 0){
 8000536:	89fb      	ldrh	r3, [r7, #14]
 8000538:	f003 0301 	and.w	r3, r3, #1
 800053c:	2b00      	cmp	r3, #0
 800053e:	d006      	beq.n	800054e <modbusCRC+0x46>
				crc = (crc>>1)^0xA001;
 8000540:	89fb      	ldrh	r3, [r7, #14]
 8000542:	085b      	lsrs	r3, r3, #1
 8000544:	b29a      	uxth	r2, r3
 8000546:	4b0d      	ldr	r3, [pc, #52]	; (800057c <modbusCRC+0x74>)
 8000548:	4053      	eors	r3, r2
 800054a:	81fb      	strh	r3, [r7, #14]
 800054c:	e002      	b.n	8000554 <modbusCRC+0x4c>
			}
			else{
				crc >>= 1;
 800054e:	89fb      	ldrh	r3, [r7, #14]
 8000550:	085b      	lsrs	r3, r3, #1
 8000552:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 8000554:	7b3b      	ldrb	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	733b      	strb	r3, [r7, #12]
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	2b07      	cmp	r3, #7
 800055e:	d9ea      	bls.n	8000536 <modbusCRC+0x2e>
	for(i = 0; i < len; i++){
 8000560:	7b7b      	ldrb	r3, [r7, #13]
 8000562:	3301      	adds	r3, #1
 8000564:	737b      	strb	r3, [r7, #13]
 8000566:	7b7a      	ldrb	r2, [r7, #13]
 8000568:	78fb      	ldrb	r3, [r7, #3]
 800056a:	429a      	cmp	r2, r3
 800056c:	d3d8      	bcc.n	8000520 <modbusCRC+0x18>
			}
		}
	}
	return crc;
 800056e:	89fb      	ldrh	r3, [r7, #14]
}
 8000570:	4618      	mov	r0, r3
 8000572:	3714      	adds	r7, #20
 8000574:	46bd      	mov	sp, r7
 8000576:	bc80      	pop	{r7}
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	ffffa001 	.word	0xffffa001

08000580 <modbusResponse>:

extern void modbusResponse(char *data, uint8_t len){
 8000580:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000584:	b087      	sub	sp, #28
 8000586:	af00      	add	r7, sp, #0
 8000588:	6078      	str	r0, [r7, #4]
 800058a:	460b      	mov	r3, r1
 800058c:	70fb      	strb	r3, [r7, #3]
	slaveAdr = 0;
 800058e:	4b6e      	ldr	r3, [pc, #440]	; (8000748 <modbusResponse+0x1c8>)
 8000590:	2200      	movs	r2, #0
 8000592:	701a      	strb	r2, [r3, #0]
	funcCode = 0;
 8000594:	4b6d      	ldr	r3, [pc, #436]	; (800074c <modbusResponse+0x1cc>)
 8000596:	2200      	movs	r2, #0
 8000598:	701a      	strb	r2, [r3, #0]
	regAdr = 0;
 800059a:	4b6d      	ldr	r3, [pc, #436]	; (8000750 <modbusResponse+0x1d0>)
 800059c:	2200      	movs	r2, #0
 800059e:	801a      	strh	r2, [r3, #0]
	numOfRegs = 0;
 80005a0:	4b6c      	ldr	r3, [pc, #432]	; (8000754 <modbusResponse+0x1d4>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	801a      	strh	r2, [r3, #0]
	memcpy(readData, data, 6);
 80005a6:	4b6c      	ldr	r3, [pc, #432]	; (8000758 <modbusResponse+0x1d8>)
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	6810      	ldr	r0, [r2, #0]
 80005ac:	6018      	str	r0, [r3, #0]
 80005ae:	8892      	ldrh	r2, [r2, #4]
 80005b0:	809a      	strh	r2, [r3, #4]
	slaveAdr = readData[0]; //Bit shifting überprüfen! -> passt!
 80005b2:	4b69      	ldr	r3, [pc, #420]	; (8000758 <modbusResponse+0x1d8>)
 80005b4:	781a      	ldrb	r2, [r3, #0]
 80005b6:	4b64      	ldr	r3, [pc, #400]	; (8000748 <modbusResponse+0x1c8>)
 80005b8:	701a      	strb	r2, [r3, #0]
	funcCode = readData[1];
 80005ba:	4b67      	ldr	r3, [pc, #412]	; (8000758 <modbusResponse+0x1d8>)
 80005bc:	785a      	ldrb	r2, [r3, #1]
 80005be:	4b63      	ldr	r3, [pc, #396]	; (800074c <modbusResponse+0x1cc>)
 80005c0:	701a      	strb	r2, [r3, #0]
	regAdr = readData[2] << 8;
 80005c2:	4b65      	ldr	r3, [pc, #404]	; (8000758 <modbusResponse+0x1d8>)
 80005c4:	789b      	ldrb	r3, [r3, #2]
 80005c6:	b29b      	uxth	r3, r3
 80005c8:	021b      	lsls	r3, r3, #8
 80005ca:	b29a      	uxth	r2, r3
 80005cc:	4b60      	ldr	r3, [pc, #384]	; (8000750 <modbusResponse+0x1d0>)
 80005ce:	801a      	strh	r2, [r3, #0]
	regAdr |= readData[3];
 80005d0:	4b61      	ldr	r3, [pc, #388]	; (8000758 <modbusResponse+0x1d8>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
 80005d4:	b29a      	uxth	r2, r3
 80005d6:	4b5e      	ldr	r3, [pc, #376]	; (8000750 <modbusResponse+0x1d0>)
 80005d8:	881b      	ldrh	r3, [r3, #0]
 80005da:	4313      	orrs	r3, r2
 80005dc:	b29a      	uxth	r2, r3
 80005de:	4b5c      	ldr	r3, [pc, #368]	; (8000750 <modbusResponse+0x1d0>)
 80005e0:	801a      	strh	r2, [r3, #0]
	numOfRegs = readData[4] << 8;
 80005e2:	4b5d      	ldr	r3, [pc, #372]	; (8000758 <modbusResponse+0x1d8>)
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	b29b      	uxth	r3, r3
 80005e8:	021b      	lsls	r3, r3, #8
 80005ea:	b29a      	uxth	r2, r3
 80005ec:	4b59      	ldr	r3, [pc, #356]	; (8000754 <modbusResponse+0x1d4>)
 80005ee:	801a      	strh	r2, [r3, #0]
	numOfRegs |= readData[5];
 80005f0:	4b59      	ldr	r3, [pc, #356]	; (8000758 <modbusResponse+0x1d8>)
 80005f2:	795b      	ldrb	r3, [r3, #5]
 80005f4:	b29a      	uxth	r2, r3
 80005f6:	4b57      	ldr	r3, [pc, #348]	; (8000754 <modbusResponse+0x1d4>)
 80005f8:	881b      	ldrh	r3, [r3, #0]
 80005fa:	4313      	orrs	r3, r2
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	4b55      	ldr	r3, [pc, #340]	; (8000754 <modbusResponse+0x1d4>)
 8000600:	801a      	strh	r2, [r3, #0]
	if(slaveAdr != deviceAddress){
 8000602:	4b51      	ldr	r3, [pc, #324]	; (8000748 <modbusResponse+0x1c8>)
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	4b55      	ldr	r3, [pc, #340]	; (800075c <modbusResponse+0x1dc>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	429a      	cmp	r2, r3
 800060c:	f040 8093 	bne.w	8000736 <modbusResponse+0x1b6>
		return;
	}
	switch(funcCode){
 8000610:	4b4e      	ldr	r3, [pc, #312]	; (800074c <modbusResponse+0x1cc>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b03      	cmp	r3, #3
 8000616:	f040 8090 	bne.w	800073a <modbusResponse+0x1ba>
	case 0x03: //read Holdregisters
		if((regAdr == 0x00) || (regAdr == 0x01)){
 800061a:	4b4d      	ldr	r3, [pc, #308]	; (8000750 <modbusResponse+0x1d0>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d004      	beq.n	800062c <modbusResponse+0xac>
 8000622:	4b4b      	ldr	r3, [pc, #300]	; (8000750 <modbusResponse+0x1d0>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	2b01      	cmp	r3, #1
 8000628:	f040 8089 	bne.w	800073e <modbusResponse+0x1be>
 800062c:	466b      	mov	r3, sp
 800062e:	461e      	mov	r6, r3
			uint8_t responseLen = 2*numOfRegs+5;
 8000630:	4b48      	ldr	r3, [pc, #288]	; (8000754 <modbusResponse+0x1d4>)
 8000632:	881b      	ldrh	r3, [r3, #0]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	005b      	lsls	r3, r3, #1
 8000638:	b2db      	uxtb	r3, r3
 800063a:	3305      	adds	r3, #5
 800063c:	757b      	strb	r3, [r7, #21]
			char response[responseLen];
 800063e:	7d79      	ldrb	r1, [r7, #21]
 8000640:	460b      	mov	r3, r1
 8000642:	3b01      	subs	r3, #1
 8000644:	613b      	str	r3, [r7, #16]
 8000646:	b2cb      	uxtb	r3, r1
 8000648:	2200      	movs	r2, #0
 800064a:	4698      	mov	r8, r3
 800064c:	4691      	mov	r9, r2
 800064e:	f04f 0200 	mov.w	r2, #0
 8000652:	f04f 0300 	mov.w	r3, #0
 8000656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800065a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800065e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000662:	b2cb      	uxtb	r3, r1
 8000664:	2200      	movs	r2, #0
 8000666:	461c      	mov	r4, r3
 8000668:	4615      	mov	r5, r2
 800066a:	f04f 0200 	mov.w	r2, #0
 800066e:	f04f 0300 	mov.w	r3, #0
 8000672:	00eb      	lsls	r3, r5, #3
 8000674:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000678:	00e2      	lsls	r2, r4, #3
 800067a:	460b      	mov	r3, r1
 800067c:	3307      	adds	r3, #7
 800067e:	08db      	lsrs	r3, r3, #3
 8000680:	00db      	lsls	r3, r3, #3
 8000682:	ebad 0d03 	sub.w	sp, sp, r3
 8000686:	466b      	mov	r3, sp
 8000688:	3300      	adds	r3, #0
 800068a:	60fb      	str	r3, [r7, #12]
			response[0] = deviceAddress;
 800068c:	4b33      	ldr	r3, [pc, #204]	; (800075c <modbusResponse+0x1dc>)
 800068e:	781a      	ldrb	r2, [r3, #0]
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	701a      	strb	r2, [r3, #0]
			response[1] = 0x03;
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2203      	movs	r2, #3
 8000698:	705a      	strb	r2, [r3, #1]
			response[2] = 2*numOfRegs+5;
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <modbusResponse+0x1d4>)
 800069c:	881b      	ldrh	r3, [r3, #0]
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	b2db      	uxtb	r3, r3
 80006a4:	3305      	adds	r3, #5
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	709a      	strb	r2, [r3, #2]
			uint8_t idx = 3;
 80006ac:	2303      	movs	r3, #3
 80006ae:	75bb      	strb	r3, [r7, #22]
			uint8_t i;
			uint16_t buff;
			for(i=numOfRegs; i > 0; i--){
 80006b0:	4b28      	ldr	r3, [pc, #160]	; (8000754 <modbusResponse+0x1d4>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	75fb      	strb	r3, [r7, #23]
 80006b6:	e01c      	b.n	80006f2 <modbusResponse+0x172>
				buff = registerRead(i-1);
 80006b8:	7dfb      	ldrb	r3, [r7, #23]
 80006ba:	3b01      	subs	r3, #1
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff ff0c 	bl	80004dc <registerRead>
 80006c4:	4603      	mov	r3, r0
 80006c6:	813b      	strh	r3, [r7, #8]
				response[idx++] = (buff >> 8) & 0xFF;
 80006c8:	893b      	ldrh	r3, [r7, #8]
 80006ca:	0a1b      	lsrs	r3, r3, #8
 80006cc:	b299      	uxth	r1, r3
 80006ce:	7dbb      	ldrb	r3, [r7, #22]
 80006d0:	1c5a      	adds	r2, r3, #1
 80006d2:	75ba      	strb	r2, [r7, #22]
 80006d4:	461a      	mov	r2, r3
 80006d6:	b2c9      	uxtb	r1, r1
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	5499      	strb	r1, [r3, r2]
				response[idx++] = buff;
 80006dc:	7dbb      	ldrb	r3, [r7, #22]
 80006de:	1c5a      	adds	r2, r3, #1
 80006e0:	75ba      	strb	r2, [r7, #22]
 80006e2:	461a      	mov	r2, r3
 80006e4:	893b      	ldrh	r3, [r7, #8]
 80006e6:	b2d9      	uxtb	r1, r3
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	5499      	strb	r1, [r3, r2]
			for(i=numOfRegs; i > 0; i--){
 80006ec:	7dfb      	ldrb	r3, [r7, #23]
 80006ee:	3b01      	subs	r3, #1
 80006f0:	75fb      	strb	r3, [r7, #23]
 80006f2:	7dfb      	ldrb	r3, [r7, #23]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d1df      	bne.n	80006b8 <modbusResponse+0x138>
			}
			uint16_t crc = modbusCRC(response, responseLen-2);
 80006f8:	7d7b      	ldrb	r3, [r7, #21]
 80006fa:	3b02      	subs	r3, #2
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	4619      	mov	r1, r3
 8000700:	68f8      	ldr	r0, [r7, #12]
 8000702:	f7ff ff01 	bl	8000508 <modbusCRC>
 8000706:	4603      	mov	r3, r0
 8000708:	817b      	strh	r3, [r7, #10]
			response[responseLen-2] = crc;
 800070a:	7d7b      	ldrb	r3, [r7, #21]
 800070c:	3b02      	subs	r3, #2
 800070e:	897a      	ldrh	r2, [r7, #10]
 8000710:	b2d1      	uxtb	r1, r2
 8000712:	68fa      	ldr	r2, [r7, #12]
 8000714:	54d1      	strb	r1, [r2, r3]
			response[responseLen-1] = crc >> 8;
 8000716:	897b      	ldrh	r3, [r7, #10]
 8000718:	0a1b      	lsrs	r3, r3, #8
 800071a:	b29a      	uxth	r2, r3
 800071c:	7d7b      	ldrb	r3, [r7, #21]
 800071e:	3b01      	subs	r3, #1
 8000720:	b2d1      	uxtb	r1, r2
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	54d1      	strb	r1, [r2, r3]
			USARTSendStringMB(USART1, response, responseLen);
 8000726:	7d7b      	ldrb	r3, [r7, #21]
 8000728:	461a      	mov	r2, r3
 800072a:	68f9      	ldr	r1, [r7, #12]
 800072c:	480c      	ldr	r0, [pc, #48]	; (8000760 <modbusResponse+0x1e0>)
 800072e:	f000 f819 	bl	8000764 <USARTSendStringMB>
 8000732:	46b5      	mov	sp, r6
		}
		break;
 8000734:	e003      	b.n	800073e <modbusResponse+0x1be>
		return;
 8000736:	bf00      	nop
 8000738:	e002      	b.n	8000740 <modbusResponse+0x1c0>
	default:

		break;
 800073a:	bf00      	nop
 800073c:	e000      	b.n	8000740 <modbusResponse+0x1c0>
		break;
 800073e:	bf00      	nop
	}
}
 8000740:	371c      	adds	r7, #28
 8000742:	46bd      	mov	sp, r7
 8000744:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8000748:	200001aa 	.word	0x200001aa
 800074c:	200001ab 	.word	0x200001ab
 8000750:	200001ac 	.word	0x200001ac
 8000754:	200001ae 	.word	0x200001ae
 8000758:	200001a4 	.word	0x200001a4
 800075c:	20000004 	.word	0x20000004
 8000760:	40013800 	.word	0x40013800

08000764 <USARTSendStringMB>:
  * Desc.: send a String over the USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (char*) str: String to be sent
  * @return: none
  */
void USARTSendStringMB(USART_TypeDef* usart, char* str, int len){
 8000764:	b480      	push	{r7}
 8000766:	b085      	sub	sp, #20
 8000768:	af00      	add	r7, sp, #0
 800076a:	60f8      	str	r0, [r7, #12]
 800076c:	60b9      	str	r1, [r7, #8]
 800076e:	607a      	str	r2, [r7, #4]
	while(len != 0){
 8000770:	e017      	b.n	80007a2 <USARTSendStringMB+0x3e>
		USART_WAIT_MB(usart);
 8000772:	bf00      	nop
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <USARTSendStringMB+0x10>
		usart->DR = *str++ & 0x01FF;
 8000780:	68bb      	ldr	r3, [r7, #8]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	60ba      	str	r2, [r7, #8]
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	605a      	str	r2, [r3, #4]
		USART_WAIT_MB(usart);
 800078e:	bf00      	nop
 8000790:	68fb      	ldr	r3, [r7, #12]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000798:	2b00      	cmp	r3, #0
 800079a:	d0f9      	beq.n	8000790 <USARTSendStringMB+0x2c>
		len--;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	3b01      	subs	r3, #1
 80007a0:	607b      	str	r3, [r7, #4]
	while(len != 0){
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e4      	bne.n	8000772 <USARTSendStringMB+0xe>
	}
}
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	3714      	adds	r7, #20
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <setCounter>:

void setCounter(int cntVal){
 80007b4:	b480      	push	{r7}
 80007b6:	b083      	sub	sp, #12
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
	registers[0] = cntVal;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	b29a      	uxth	r2, r3
 80007c0:	4b03      	ldr	r3, [pc, #12]	; (80007d0 <setCounter+0x1c>)
 80007c2:	801a      	strh	r2, [r3, #0]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bc80      	pop	{r7}
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	20000000 	.word	0x20000000

080007d4 <start>:
char foo;

static uint32_t tickCNT = 0;
char ausg[20] = "ausgabe\n";

void start(void){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
	initRS485UART();
 80007d8:	f000 f8b0 	bl	800093c <initRS485UART>
	initTimer();
 80007dc:	f7ff fd3e 	bl	800025c <initTimer>
	initPins();
 80007e0:	f7ff fda6 	bl	8000330 <initPins>
	while(1){
		if(usartRXFlag){
 80007e4:	4b13      	ldr	r3, [pc, #76]	; (8000834 <start+0x60>)
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d0fb      	beq.n	80007e4 <start+0x10>
			//modbusrequest()hier implementieren!
			USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <start+0x64>)
 80007ee:	68db      	ldr	r3, [r3, #12]
 80007f0:	4a11      	ldr	r2, [pc, #68]	; (8000838 <start+0x64>)
 80007f2:	f023 0320 	bic.w	r3, r3, #32
 80007f6:	60d3      	str	r3, [r2, #12]
			//sprintf(ausg, "tick: %" PRIu32 "\n", tickCNT);
			gpioSetPin(GPIOB, PIN12);
 80007f8:	210c      	movs	r1, #12
 80007fa:	4810      	ldr	r0, [pc, #64]	; (800083c <start+0x68>)
 80007fc:	f000 fa69 	bl	8000cd2 <gpioSetPin>
			//USARTSendString(USART1, ausg);
			setCounter(tickCNT);
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <start+0x6c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4618      	mov	r0, r3
 8000806:	f7ff ffd5 	bl	80007b4 <setCounter>
			modbusResponse(usartBuff, sizeof(usartBuff)-1);
 800080a:	2106      	movs	r1, #6
 800080c:	480d      	ldr	r0, [pc, #52]	; (8000844 <start+0x70>)
 800080e:	f7ff feb7 	bl	8000580 <modbusResponse>
			USART1->CR1 |= USART_CR1_RXNEIE;
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <start+0x64>)
 8000814:	68db      	ldr	r3, [r3, #12]
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <start+0x64>)
 8000818:	f043 0320 	orr.w	r3, r3, #32
 800081c:	60d3      	str	r3, [r2, #12]
			gpioResetPin(GPIOB, PIN12);
 800081e:	210c      	movs	r1, #12
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <start+0x68>)
 8000822:	f000 fa6a 	bl	8000cfa <gpioResetPin>
			delay_ms(100);
 8000826:	2064      	movs	r0, #100	; 0x64
 8000828:	f7ff fd36 	bl	8000298 <delay_ms>
			usartRXFlag = false;
 800082c:	4b01      	ldr	r3, [pc, #4]	; (8000834 <start+0x60>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
		if(usartRXFlag){
 8000832:	e7d7      	b.n	80007e4 <start+0x10>
 8000834:	200001bc 	.word	0x200001bc
 8000838:	40013800 	.word	0x40013800
 800083c:	40010c00 	.word	0x40010c00
 8000840:	200001c0 	.word	0x200001c0
 8000844:	200001b0 	.word	0x200001b0

08000848 <USART1_IRQHandler>:


/*-----------------------------------------------------------------------------
+++++++++++++++++++++++++++++++ISR+++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000848:	b480      	push	{r7}
 800084a:	af00      	add	r7, sp, #0
	if(!usartRXFlag){
 800084c:	4b1d      	ldr	r3, [pc, #116]	; (80008c4 <USART1_IRQHandler+0x7c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	f083 0301 	eor.w	r3, r3, #1
 8000854:	b2db      	uxtb	r3, r3
 8000856:	2b00      	cmp	r3, #0
 8000858:	d020      	beq.n	800089c <USART1_IRQHandler+0x54>
		while(!(USART1->SR & USART_SR_RXNE)){}
 800085a:	bf00      	nop
 800085c:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <USART1_IRQHandler+0x80>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f003 0320 	and.w	r3, r3, #32
 8000864:	2b00      	cmp	r3, #0
 8000866:	d0f9      	beq.n	800085c <USART1_IRQHandler+0x14>
		usartBuff[cnt]= USART1->DR & 0x01FF;
 8000868:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <USART1_IRQHandler+0x80>)
 800086a:	685a      	ldr	r2, [r3, #4]
 800086c:	4b17      	ldr	r3, [pc, #92]	; (80008cc <USART1_IRQHandler+0x84>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	b2d1      	uxtb	r1, r2
 8000872:	4a17      	ldr	r2, [pc, #92]	; (80008d0 <USART1_IRQHandler+0x88>)
 8000874:	54d1      	strb	r1, [r2, r3]
		cnt++;
 8000876:	4b15      	ldr	r3, [pc, #84]	; (80008cc <USART1_IRQHandler+0x84>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	3301      	adds	r3, #1
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <USART1_IRQHandler+0x84>)
 800087e:	6013      	str	r3, [r2, #0]
		if((cnt == USART_MSG_LEN-1)){
 8000880:	4b12      	ldr	r3, [pc, #72]	; (80008cc <USART1_IRQHandler+0x84>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	2b06      	cmp	r3, #6
 8000886:	d118      	bne.n	80008ba <USART1_IRQHandler+0x72>
			//USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
			USART1->DR = 0;
 8000888:	4b0f      	ldr	r3, [pc, #60]	; (80008c8 <USART1_IRQHandler+0x80>)
 800088a:	2200      	movs	r2, #0
 800088c:	605a      	str	r2, [r3, #4]
			usartRXFlag = true;
 800088e:	4b0d      	ldr	r3, [pc, #52]	; (80008c4 <USART1_IRQHandler+0x7c>)
 8000890:	2201      	movs	r2, #1
 8000892:	701a      	strb	r2, [r3, #0]
			cnt=0;
 8000894:	4b0d      	ldr	r3, [pc, #52]	; (80008cc <USART1_IRQHandler+0x84>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
	else{
		while(!(USART1->SR & USART_SR_RXNE)){}
		foo= USART1->DR & 0x01FF;
		USART1->DR = 0;
	}
}
 800089a:	e00e      	b.n	80008ba <USART1_IRQHandler+0x72>
		while(!(USART1->SR & USART_SR_RXNE)){}
 800089c:	bf00      	nop
 800089e:	4b0a      	ldr	r3, [pc, #40]	; (80008c8 <USART1_IRQHandler+0x80>)
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	f003 0320 	and.w	r3, r3, #32
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d0f9      	beq.n	800089e <USART1_IRQHandler+0x56>
		foo= USART1->DR & 0x01FF;
 80008aa:	4b07      	ldr	r3, [pc, #28]	; (80008c8 <USART1_IRQHandler+0x80>)
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	4b08      	ldr	r3, [pc, #32]	; (80008d4 <USART1_IRQHandler+0x8c>)
 80008b2:	701a      	strb	r2, [r3, #0]
		USART1->DR = 0;
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <USART1_IRQHandler+0x80>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	605a      	str	r2, [r3, #4]
}
 80008ba:	bf00      	nop
 80008bc:	46bd      	mov	sp, r7
 80008be:	bc80      	pop	{r7}
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	200001bc 	.word	0x200001bc
 80008c8:	40013800 	.word	0x40013800
 80008cc:	200001b8 	.word	0x200001b8
 80008d0:	200001b0 	.word	0x200001b0
 80008d4:	200001bd 	.word	0x200001bd

080008d8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
	tickCNT++;
 80008dc:	4b07      	ldr	r3, [pc, #28]	; (80008fc <EXTI9_5_IRQHandler+0x24>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	3301      	adds	r3, #1
 80008e2:	4a06      	ldr	r2, [pc, #24]	; (80008fc <EXTI9_5_IRQHandler+0x24>)
 80008e4:	6013      	str	r3, [r2, #0]
	EXTI->PR |= EXTI_PR_PR9;
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <EXTI9_5_IRQHandler+0x28>)
 80008e8:	695b      	ldr	r3, [r3, #20]
 80008ea:	4a05      	ldr	r2, [pc, #20]	; (8000900 <EXTI9_5_IRQHandler+0x28>)
 80008ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008f0:	6153      	str	r3, [r2, #20]
}
 80008f2:	bf00      	nop
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bc80      	pop	{r7}
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	200001c0 	.word	0x200001c0
 8000900:	40010400 	.word	0x40010400

08000904 <__NVIC_EnableIRQ>:
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800090e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000912:	2b00      	cmp	r3, #0
 8000914:	db0b      	blt.n	800092e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000916:	79fb      	ldrb	r3, [r7, #7]
 8000918:	f003 021f 	and.w	r2, r3, #31
 800091c:	4906      	ldr	r1, [pc, #24]	; (8000938 <__NVIC_EnableIRQ+0x34>)
 800091e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000922:	095b      	lsrs	r3, r3, #5
 8000924:	2001      	movs	r0, #1
 8000926:	fa00 f202 	lsl.w	r2, r0, r2
 800092a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100

0800093c <initRS485UART>:
#include <shalf1.h>
#include <stdbool.h>
#include "rs485uart.h"

//USART in DMA Modus -> Modbus empfängt 5 Bytes
void initRS485UART(void){
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
	__disable_irq();
	gpioInitPort(GPIOA);
 8000944:	481a      	ldr	r0, [pc, #104]	; (80009b0 <initRS485UART+0x74>)
 8000946:	f000 f8eb 	bl	8000b20 <gpioInitPort>
	afioInit();
 800094a:	f000 fa0f 	bl	8000d6c <afioInit>
	USARTEnable(USART1);
 800094e:	4819      	ldr	r0, [pc, #100]	; (80009b4 <initRS485UART+0x78>)
 8000950:	f000 fac0 	bl	8000ed4 <USARTEnable>
	gpioSetupPin(GPIOA, PIN9, OUT_50MHZ);
 8000954:	2203      	movs	r2, #3
 8000956:	2109      	movs	r1, #9
 8000958:	4815      	ldr	r0, [pc, #84]	; (80009b0 <initRS485UART+0x74>)
 800095a:	f000 f92d 	bl	8000bb8 <gpioSetupPin>
	gpioSetupMode(GPIOA, PIN9, AF_PP);
 800095e:	2202      	movs	r2, #2
 8000960:	2109      	movs	r1, #9
 8000962:	4813      	ldr	r0, [pc, #76]	; (80009b0 <initRS485UART+0x74>)
 8000964:	f000 f98d 	bl	8000c82 <gpioSetupMode>
	gpioSetupPin(GPIOA, PIN10, INPUT);
 8000968:	2200      	movs	r2, #0
 800096a:	210a      	movs	r1, #10
 800096c:	4810      	ldr	r0, [pc, #64]	; (80009b0 <initRS485UART+0x74>)
 800096e:	f000 f923 	bl	8000bb8 <gpioSetupPin>
	gpioSetupInput(GPIOA, PIN10, FLOATING);
 8000972:	2201      	movs	r2, #1
 8000974:	210a      	movs	r1, #10
 8000976:	480e      	ldr	r0, [pc, #56]	; (80009b0 <initRS485UART+0x74>)
 8000978:	f000 f95b 	bl	8000c32 <gpioSetupInput>
	USARTIRQ(USART1, USART_IRQ_RXNEIE, true);
 800097c:	2201      	movs	r2, #1
 800097e:	2103      	movs	r1, #3
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <initRS485UART+0x78>)
 8000982:	f000 fb43 	bl	800100c <USARTIRQ>
	//usartSetDmaRxMode(USART1, DMA_RECEIVE_ON);
	//gpioSetupOutput(GPIOA, PIN3, AF_PP);
	USARTSetBaudrate(USART1, 9600);
 8000986:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 800098a:	480a      	ldr	r0, [pc, #40]	; (80009b4 <initRS485UART+0x78>)
 800098c:	f000 fae6 	bl	8000f5c <USARTSetBaudrate>
	USARTTXOn(USART1, TRANSMITTER_ON);
 8000990:	2101      	movs	r1, #1
 8000992:	4808      	ldr	r0, [pc, #32]	; (80009b4 <initRS485UART+0x78>)
 8000994:	f000 fb1f 	bl	8000fd6 <USARTTXOn>
	USARTRXOn(USART1, RECEIVER_ON);
 8000998:	2101      	movs	r1, #1
 800099a:	4806      	ldr	r0, [pc, #24]	; (80009b4 <initRS485UART+0x78>)
 800099c:	f000 fb00 	bl	8000fa0 <USARTRXOn>
	NVIC_EnableIRQ(USART1_IRQn);
 80009a0:	2025      	movs	r0, #37	; 0x25
 80009a2:	f7ff ffaf 	bl	8000904 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 80009a6:	b662      	cpsie	i
}
 80009a8:	bf00      	nop
	__enable_irq();
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40010800 	.word	0x40010800
 80009b4:	40013800 	.word	0x40013800

080009b8 <extiConfigureEXTI>:
  * Desc.: sets the Bits in AFIO EXTICR Register, to set the Interrupts as Sources. Ther are four EXTICR Registers (4 Pins per EXTICR)
  * @param: (PORT) port: Port
  * @param: (Pin) pin: Pin
  * @return: none
  */
extern void extiConfigureEXTI(PORT port, PIN_NUM pin){
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	460a      	mov	r2, r1
 80009c2:	71fb      	strb	r3, [r7, #7]
 80009c4:	4613      	mov	r3, r2
 80009c6:	71bb      	strb	r3, [r7, #6]
	uint8_t mask = port;
 80009c8:	79fb      	ldrb	r3, [r7, #7]
 80009ca:	737b      	strb	r3, [r7, #13]
	uint8_t shift = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	73bb      	strb	r3, [r7, #14]
	switch(pin){
 80009d4:	79bb      	ldrb	r3, [r7, #6]
 80009d6:	2b0f      	cmp	r3, #15
 80009d8:	d840      	bhi.n	8000a5c <extiConfigureEXTI+0xa4>
 80009da:	a201      	add	r2, pc, #4	; (adr r2, 80009e0 <extiConfigureEXTI+0x28>)
 80009dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009e0:	08000a21 	.word	0x08000a21
 80009e4:	08000a21 	.word	0x08000a21
 80009e8:	08000a21 	.word	0x08000a21
 80009ec:	08000a21 	.word	0x08000a21
 80009f0:	08000a2d 	.word	0x08000a2d
 80009f4:	08000a2d 	.word	0x08000a2d
 80009f8:	08000a2d 	.word	0x08000a2d
 80009fc:	08000a2d 	.word	0x08000a2d
 8000a00:	08000a3d 	.word	0x08000a3d
 8000a04:	08000a3d 	.word	0x08000a3d
 8000a08:	08000a3d 	.word	0x08000a3d
 8000a0c:	08000a3d 	.word	0x08000a3d
 8000a10:	08000a4d 	.word	0x08000a4d
 8000a14:	08000a4d 	.word	0x08000a4d
 8000a18:	08000a4d 	.word	0x08000a4d
 8000a1c:	08000a4d 	.word	0x08000a4d
	case 0:
	case 1:
	case 2:
	case 3:
		shift = pin * 4;
 8000a20:	79bb      	ldrb	r3, [r7, #6]
 8000a22:	009b      	lsls	r3, r3, #2
 8000a24:	73fb      	strb	r3, [r7, #15]
		index = 0;
 8000a26:	2300      	movs	r3, #0
 8000a28:	73bb      	strb	r3, [r7, #14]
		break;
 8000a2a:	e017      	b.n	8000a5c <extiConfigureEXTI+0xa4>
	case 4:
	case 5:
	case 6:
	case 7:
		shift = (pin-4)*4;
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	3b04      	subs	r3, #4
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	73fb      	strb	r3, [r7, #15]
		index = 1;
 8000a36:	2301      	movs	r3, #1
 8000a38:	73bb      	strb	r3, [r7, #14]
		break;
 8000a3a:	e00f      	b.n	8000a5c <extiConfigureEXTI+0xa4>
	case 8:
	case 9:
	case 10:
	case 11:
		shift = (pin-8)*4;
 8000a3c:	79bb      	ldrb	r3, [r7, #6]
 8000a3e:	3b08      	subs	r3, #8
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	009b      	lsls	r3, r3, #2
 8000a44:	73fb      	strb	r3, [r7, #15]
		index = 2;
 8000a46:	2302      	movs	r3, #2
 8000a48:	73bb      	strb	r3, [r7, #14]
		break;
 8000a4a:	e007      	b.n	8000a5c <extiConfigureEXTI+0xa4>
	case 12:
	case 13:
	case 14:
	case 15:
		shift = (pin-12)*4;
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	3b0c      	subs	r3, #12
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	009b      	lsls	r3, r3, #2
 8000a54:	73fb      	strb	r3, [r7, #15]
		index = 3;
 8000a56:	2303      	movs	r3, #3
 8000a58:	73bb      	strb	r3, [r7, #14]
		break;
 8000a5a:	bf00      	nop
	}

	AFIO->EXTICR[index] &= ~0xFFFF;
 8000a5c:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <extiConfigureEXTI+0xe8>)
 8000a5e:	7bbb      	ldrb	r3, [r7, #14]
 8000a60:	3302      	adds	r3, #2
 8000a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a66:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <extiConfigureEXTI+0xe8>)
 8000a68:	7bba      	ldrb	r2, [r7, #14]
 8000a6a:	0c1b      	lsrs	r3, r3, #16
 8000a6c:	041b      	lsls	r3, r3, #16
 8000a6e:	3202      	adds	r2, #2
 8000a70:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	AFIO->EXTICR[index] |= (mask << shift);
 8000a74:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <extiConfigureEXTI+0xe8>)
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	3302      	adds	r3, #2
 8000a7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a7e:	7b79      	ldrb	r1, [r7, #13]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	fa01 f303 	lsl.w	r3, r1, r3
 8000a86:	4618      	mov	r0, r3
 8000a88:	4905      	ldr	r1, [pc, #20]	; (8000aa0 <extiConfigureEXTI+0xe8>)
 8000a8a:	7bbb      	ldrb	r3, [r7, #14]
 8000a8c:	4302      	orrs	r2, r0
 8000a8e:	3302      	adds	r3, #2
 8000a90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	40010000 	.word	0x40010000

08000aa4 <extiEnableIrq>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiEnableIrq(irq_NUM irq){
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |= 1 << irq; //schiebt das Bit an die korrespondierende Stelle des IMR
 8000aae:	4b07      	ldr	r3, [pc, #28]	; (8000acc <extiEnableIrq+0x28>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	79fa      	ldrb	r2, [r7, #7]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	fa01 f202 	lsl.w	r2, r1, r2
 8000aba:	4611      	mov	r1, r2
 8000abc:	4a03      	ldr	r2, [pc, #12]	; (8000acc <extiEnableIrq+0x28>)
 8000abe:	430b      	orrs	r3, r1
 8000ac0:	6013      	str	r3, [r2, #0]
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bc80      	pop	{r7}
 8000aca:	4770      	bx	lr
 8000acc:	40010400 	.word	0x40010400

08000ad0 <extiSetTriggerEdge>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiSetTriggerEdge(bool rising, irq_NUM irq){
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	460a      	mov	r2, r1
 8000ada:	71fb      	strb	r3, [r7, #7]
 8000adc:	4613      	mov	r3, r2
 8000ade:	71bb      	strb	r3, [r7, #6]
	if(rising == true){
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d00a      	beq.n	8000afc <extiSetTriggerEdge+0x2c>
		EXTI->RTSR |= 1 << irq;
 8000ae6:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <extiSetTriggerEdge+0x4c>)
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	79ba      	ldrb	r2, [r7, #6]
 8000aec:	2101      	movs	r1, #1
 8000aee:	fa01 f202 	lsl.w	r2, r1, r2
 8000af2:	4611      	mov	r1, r2
 8000af4:	4a09      	ldr	r2, [pc, #36]	; (8000b1c <extiSetTriggerEdge+0x4c>)
 8000af6:	430b      	orrs	r3, r1
 8000af8:	6093      	str	r3, [r2, #8]
	}
	else{
		EXTI->FTSR |= 1 << irq;
	}
}
 8000afa:	e009      	b.n	8000b10 <extiSetTriggerEdge+0x40>
		EXTI->FTSR |= 1 << irq;
 8000afc:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <extiSetTriggerEdge+0x4c>)
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	79ba      	ldrb	r2, [r7, #6]
 8000b02:	2101      	movs	r1, #1
 8000b04:	fa01 f202 	lsl.w	r2, r1, r2
 8000b08:	4611      	mov	r1, r2
 8000b0a:	4a04      	ldr	r2, [pc, #16]	; (8000b1c <extiSetTriggerEdge+0x4c>)
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	60d3      	str	r3, [r2, #12]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bc80      	pop	{r7}
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	40010400 	.word	0x40010400

08000b20 <gpioInitPort>:
/*
  * Desc.: enables the Clock for the corresponding GPIO Port
  * @param: (GPIO_TypeDef*) port: Port which should be supplied with Clock
  * @return: none
  */
extern void gpioInitPort(GPIO_TypeDef *port){
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
		if (port == GPIOA){
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	4a1d      	ldr	r2, [pc, #116]	; (8000ba0 <gpioInitPort+0x80>)
 8000b2c:	4293      	cmp	r3, r2
 8000b2e:	d106      	bne.n	8000b3e <gpioInitPort+0x1e>
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000b30:	4b1c      	ldr	r3, [pc, #112]	; (8000ba4 <gpioInitPort+0x84>)
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	4a1b      	ldr	r2, [pc, #108]	; (8000ba4 <gpioInitPort+0x84>)
 8000b36:	f043 0304 	orr.w	r3, r3, #4
 8000b3a:	6193      	str	r3, [r2, #24]
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
		}
		else if(port == GPIOE){
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
		}
}
 8000b3c:	e02a      	b.n	8000b94 <gpioInitPort+0x74>
		else if(port == GPIOB){
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4a19      	ldr	r2, [pc, #100]	; (8000ba8 <gpioInitPort+0x88>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d106      	bne.n	8000b54 <gpioInitPort+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <gpioInitPort+0x84>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	4a16      	ldr	r2, [pc, #88]	; (8000ba4 <gpioInitPort+0x84>)
 8000b4c:	f043 0308 	orr.w	r3, r3, #8
 8000b50:	6193      	str	r3, [r2, #24]
}
 8000b52:	e01f      	b.n	8000b94 <gpioInitPort+0x74>
		else if(port == GPIOC){
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a15      	ldr	r2, [pc, #84]	; (8000bac <gpioInitPort+0x8c>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	d106      	bne.n	8000b6a <gpioInitPort+0x4a>
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000b5c:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <gpioInitPort+0x84>)
 8000b5e:	699b      	ldr	r3, [r3, #24]
 8000b60:	4a10      	ldr	r2, [pc, #64]	; (8000ba4 <gpioInitPort+0x84>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6193      	str	r3, [r2, #24]
}
 8000b68:	e014      	b.n	8000b94 <gpioInitPort+0x74>
		else if(port == GPIOD){
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4a10      	ldr	r2, [pc, #64]	; (8000bb0 <gpioInitPort+0x90>)
 8000b6e:	4293      	cmp	r3, r2
 8000b70:	d106      	bne.n	8000b80 <gpioInitPort+0x60>
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000b72:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <gpioInitPort+0x84>)
 8000b74:	699b      	ldr	r3, [r3, #24]
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <gpioInitPort+0x84>)
 8000b78:	f043 0320 	orr.w	r3, r3, #32
 8000b7c:	6193      	str	r3, [r2, #24]
}
 8000b7e:	e009      	b.n	8000b94 <gpioInitPort+0x74>
		else if(port == GPIOE){
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4a0c      	ldr	r2, [pc, #48]	; (8000bb4 <gpioInitPort+0x94>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d105      	bne.n	8000b94 <gpioInitPort+0x74>
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <gpioInitPort+0x84>)
 8000b8a:	699b      	ldr	r3, [r3, #24]
 8000b8c:	4a05      	ldr	r2, [pc, #20]	; (8000ba4 <gpioInitPort+0x84>)
 8000b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b92:	6193      	str	r3, [r2, #24]
}
 8000b94:	bf00      	nop
 8000b96:	370c      	adds	r7, #12
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	40010800 	.word	0x40010800
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40010c00 	.word	0x40010c00
 8000bac:	40011000 	.word	0x40011000
 8000bb0:	40011400 	.word	0x40011400
 8000bb4:	40011800 	.word	0x40011800

08000bb8 <gpioSetupPin>:
									OUT_10MHZ,
									OUT_2MHZ,
									OUT_50MHZ
  * @return: none
  */
extern void gpioSetupPin(GPIO_TypeDef *port, PIN_NUM pin, GPIO_MODE pinmode){
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	70fb      	strb	r3, [r7, #3]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000bc8:	78fb      	ldrb	r3, [r7, #3]
 8000bca:	2b07      	cmp	r3, #7
 8000bcc:	d815      	bhi.n	8000bfa <gpioSetupPin+0x42>
		port -> CRL &= ~(0b1111 << (pin*4));
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	78fa      	ldrb	r2, [r7, #3]
 8000bd4:	0092      	lsls	r2, r2, #2
 8000bd6:	210f      	movs	r1, #15
 8000bd8:	fa01 f202 	lsl.w	r2, r1, r2
 8000bdc:	43d2      	mvns	r2, r2
 8000bde:	401a      	ands	r2, r3
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	601a      	str	r2, [r3, #0]
		port ->CRL |= (pinmode << (pin*4));
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	78b9      	ldrb	r1, [r7, #2]
 8000bea:	78fa      	ldrb	r2, [r7, #3]
 8000bec:	0092      	lsls	r2, r2, #2
 8000bee:	fa01 f202 	lsl.w	r2, r1, r2
 8000bf2:	431a      	orrs	r2, r3
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	601a      	str	r2, [r3, #0]
	}
	else{
		port->CRH &= ~(0b1111 << ((pin-8)*4));
		port->CRH |= (pinmode << ((pin-8)*4));
	}
}
 8000bf8:	e016      	b.n	8000c28 <gpioSetupPin+0x70>
		port->CRH &= ~(0b1111 << ((pin-8)*4));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	78fa      	ldrb	r2, [r7, #3]
 8000c00:	3a08      	subs	r2, #8
 8000c02:	0092      	lsls	r2, r2, #2
 8000c04:	210f      	movs	r1, #15
 8000c06:	fa01 f202 	lsl.w	r2, r1, r2
 8000c0a:	43d2      	mvns	r2, r2
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	605a      	str	r2, [r3, #4]
		port->CRH |= (pinmode << ((pin-8)*4));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	685b      	ldr	r3, [r3, #4]
 8000c16:	78b9      	ldrb	r1, [r7, #2]
 8000c18:	78fa      	ldrb	r2, [r7, #3]
 8000c1a:	3a08      	subs	r2, #8
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c22:	431a      	orrs	r2, r3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	605a      	str	r2, [r3, #4]
}
 8000c28:	bf00      	nop
 8000c2a:	370c      	adds	r7, #12
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bc80      	pop	{r7}
 8000c30:	4770      	bx	lr

08000c32 <gpioSetupInput>:
  * @param: (INPUT_MODE) mode: ANALOG = 0,
								FLOATING,
								IN_PUPD
  * @return: none
  */
extern void gpioSetupInput(GPIO_TypeDef *port, PIN_NUM pin, INPUT_MODE mode){
 8000c32:	b480      	push	{r7}
 8000c34:	b083      	sub	sp, #12
 8000c36:	af00      	add	r7, sp, #0
 8000c38:	6078      	str	r0, [r7, #4]
 8000c3a:	460b      	mov	r3, r1
 8000c3c:	70fb      	strb	r3, [r7, #3]
 8000c3e:	4613      	mov	r3, r2
 8000c40:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	2b07      	cmp	r3, #7
 8000c46:	d80b      	bhi.n	8000c60 <gpioSetupInput+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	78b9      	ldrb	r1, [r7, #2]
 8000c4e:	78fa      	ldrb	r2, [r7, #3]
 8000c50:	0092      	lsls	r2, r2, #2
 8000c52:	3202      	adds	r2, #2
 8000c54:	fa01 f202 	lsl.w	r2, r1, r2
 8000c58:	431a      	orrs	r2, r3
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000c5e:	e00b      	b.n	8000c78 <gpioSetupInput+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	685b      	ldr	r3, [r3, #4]
 8000c64:	78b9      	ldrb	r1, [r7, #2]
 8000c66:	78fa      	ldrb	r2, [r7, #3]
 8000c68:	3a08      	subs	r2, #8
 8000c6a:	0092      	lsls	r2, r2, #2
 8000c6c:	3202      	adds	r2, #2
 8000c6e:	fa01 f202 	lsl.w	r2, r1, r2
 8000c72:	431a      	orrs	r2, r3
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	605a      	str	r2, [r3, #4]
}
 8000c78:	bf00      	nop
 8000c7a:	370c      	adds	r7, #12
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <gpioSetupMode>:
								GP_OD, -> general purpose opendrain
								AF_PP, -> alternate function Push pull
								AF_OD  -> alternate function opendrain
  * @return: none
  */
extern void gpioSetupMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode){
 8000c82:	b480      	push	{r7}
 8000c84:	b083      	sub	sp, #12
 8000c86:	af00      	add	r7, sp, #0
 8000c88:	6078      	str	r0, [r7, #4]
 8000c8a:	460b      	mov	r3, r1
 8000c8c:	70fb      	strb	r3, [r7, #3]
 8000c8e:	4613      	mov	r3, r2
 8000c90:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8000c92:	78fb      	ldrb	r3, [r7, #3]
 8000c94:	2b07      	cmp	r3, #7
 8000c96:	d80b      	bhi.n	8000cb0 <gpioSetupMode+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	78b9      	ldrb	r1, [r7, #2]
 8000c9e:	78fa      	ldrb	r2, [r7, #3]
 8000ca0:	0092      	lsls	r2, r2, #2
 8000ca2:	3202      	adds	r2, #2
 8000ca4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 8000cae:	e00b      	b.n	8000cc8 <gpioSetupMode+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	78b9      	ldrb	r1, [r7, #2]
 8000cb6:	78fa      	ldrb	r2, [r7, #3]
 8000cb8:	3a08      	subs	r2, #8
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	3202      	adds	r2, #2
 8000cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	605a      	str	r2, [r3, #4]
}
 8000cc8:	bf00      	nop
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bc80      	pop	{r7}
 8000cd0:	4770      	bx	lr

08000cd2 <gpioSetPin>:
  * Desc.: sets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8000cd2:	b480      	push	{r7}
 8000cd4:	b083      	sub	sp, #12
 8000cd6:	af00      	add	r7, sp, #0
 8000cd8:	6078      	str	r0, [r7, #4]
 8000cda:	460b      	mov	r3, r1
 8000cdc:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	691b      	ldr	r3, [r3, #16]
 8000ce2:	78fa      	ldrb	r2, [r7, #3]
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cea:	431a      	orrs	r2, r3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	611a      	str	r2, [r3, #16]
}
 8000cf0:	bf00      	nop
 8000cf2:	370c      	adds	r7, #12
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bc80      	pop	{r7}
 8000cf8:	4770      	bx	lr

08000cfa <gpioResetPin>:
  * Desc.: resets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8000cfa:	b480      	push	{r7}
 8000cfc:	b083      	sub	sp, #12
 8000cfe:	af00      	add	r7, sp, #0
 8000d00:	6078      	str	r0, [r7, #4]
 8000d02:	460b      	mov	r3, r1
 8000d04:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	691b      	ldr	r3, [r3, #16]
 8000d0a:	78fa      	ldrb	r2, [r7, #3]
 8000d0c:	3210      	adds	r2, #16
 8000d0e:	2101      	movs	r1, #1
 8000d10:	fa01 f202 	lsl.w	r2, r1, r2
 8000d14:	431a      	orrs	r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
}
 8000d1a:	bf00      	nop
 8000d1c:	370c      	adds	r7, #12
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bc80      	pop	{r7}
 8000d22:	4770      	bx	lr

08000d24 <gpioSetPullupPulldown>:
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @param: (bool)pullup: true -> activate Pullup; false -> activate Pulldown
  * @return: none
  */
extern void gpioSetPullupPulldown(GPIO_TypeDef *port, PIN_NUM pin, bool pullup){
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	460b      	mov	r3, r1
 8000d2e:	70fb      	strb	r3, [r7, #3]
 8000d30:	4613      	mov	r3, r2
 8000d32:	70bb      	strb	r3, [r7, #2]
	if((pullup == true)){
 8000d34:	78bb      	ldrb	r3, [r7, #2]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d009      	beq.n	8000d4e <gpioSetPullupPulldown+0x2a>
		port -> ODR |=  (1<< pin);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	68db      	ldr	r3, [r3, #12]
 8000d3e:	78fa      	ldrb	r2, [r7, #3]
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f202 	lsl.w	r2, r1, r2
 8000d46:	431a      	orrs	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	60da      	str	r2, [r3, #12]
	}
	else{
		port->ODR &= ~(1<<pin);
	}
}
 8000d4c:	e009      	b.n	8000d62 <gpioSetPullupPulldown+0x3e>
		port->ODR &= ~(1<<pin);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	68db      	ldr	r3, [r3, #12]
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	2101      	movs	r1, #1
 8000d56:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5a:	43d2      	mvns	r2, r2
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	60da      	str	r2, [r3, #12]
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr

08000d6c <afioInit>:
/*
  * Desc.: enables the Clock for alternative functions, this Clock must be activated in Order to use alternative pinfunctions!
  * @param: none
  * @return: none
  */
extern void afioInit(){
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8000d70:	4b04      	ldr	r3, [pc, #16]	; (8000d84 <afioInit+0x18>)
 8000d72:	699b      	ldr	r3, [r3, #24]
 8000d74:	4a03      	ldr	r2, [pc, #12]	; (8000d84 <afioInit+0x18>)
 8000d76:	f043 0301 	orr.w	r3, r3, #1
 8000d7a:	6193      	str	r3, [r2, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40021000 	.word	0x40021000

08000d88 <SysTick_Handler>:
/*
 * Desc.: SysTick ISR Handler
 * @param: none
 * @return: none
 */
extern void SysTick_Handler(void){
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
	--tick;
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <SysTick_Handler+0x18>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	3b01      	subs	r3, #1
 8000d92:	4a03      	ldr	r2, [pc, #12]	; (8000da0 <SysTick_Handler+0x18>)
 8000d94:	6013      	str	r3, [r2, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	200001c4 	.word	0x200001c4

08000da4 <timerBusClkOn>:
 /*
  * Desc.: activates Clock for Timer
  * @param: (TIM_TypeDef*)timer: Timer which should be activated
  * @return: none
  */
extern void timerBusClkOn(TIM_TypeDef* timer){
 8000da4:	b480      	push	{r7}
 8000da6:	b083      	sub	sp, #12
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
	 if (TIM1 == timer)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a1a      	ldr	r2, [pc, #104]	; (8000e18 <timerBusClkOn+0x74>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d106      	bne.n	8000dc2 <timerBusClkOn+0x1e>
	    {
	        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 8000db4:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <timerBusClkOn+0x78>)
 8000db6:	699b      	ldr	r3, [r3, #24]
 8000db8:	4a18      	ldr	r2, [pc, #96]	; (8000e1c <timerBusClkOn+0x78>)
 8000dba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dbe:	6193      	str	r3, [r2, #24]
 8000dc0:	e021      	b.n	8000e06 <timerBusClkOn+0x62>
	    }
	    else if (TIM2 == timer)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc8:	d106      	bne.n	8000dd8 <timerBusClkOn+0x34>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000dca:	4b14      	ldr	r3, [pc, #80]	; (8000e1c <timerBusClkOn+0x78>)
 8000dcc:	69db      	ldr	r3, [r3, #28]
 8000dce:	4a13      	ldr	r2, [pc, #76]	; (8000e1c <timerBusClkOn+0x78>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	61d3      	str	r3, [r2, #28]
 8000dd6:	e016      	b.n	8000e06 <timerBusClkOn+0x62>
	    }
	    else if (TIM3 == timer)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	4a11      	ldr	r2, [pc, #68]	; (8000e20 <timerBusClkOn+0x7c>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d106      	bne.n	8000dee <timerBusClkOn+0x4a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000de0:	4b0e      	ldr	r3, [pc, #56]	; (8000e1c <timerBusClkOn+0x78>)
 8000de2:	69db      	ldr	r3, [r3, #28]
 8000de4:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <timerBusClkOn+0x78>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	61d3      	str	r3, [r2, #28]
 8000dec:	e00b      	b.n	8000e06 <timerBusClkOn+0x62>
	    }
	    else if (TIM4 == timer)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a0c      	ldr	r2, [pc, #48]	; (8000e24 <timerBusClkOn+0x80>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d106      	bne.n	8000e04 <timerBusClkOn+0x60>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <timerBusClkOn+0x78>)
 8000df8:	69db      	ldr	r3, [r3, #28]
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <timerBusClkOn+0x78>)
 8000dfc:	f043 0304 	orr.w	r3, r3, #4
 8000e00:	61d3      	str	r3, [r2, #28]
 8000e02:	e000      	b.n	8000e06 <timerBusClkOn+0x62>
	    }
	    else
	    {
	        while(1)
 8000e04:	e7fe      	b.n	8000e04 <timerBusClkOn+0x60>
	        {
	            // Timer not supported
	        }
	    }

	    timer->CR1 = 0;  // Reset all bits of TIMx_CR1 to 0
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	370c      	adds	r7, #12
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bc80      	pop	{r7}
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	40021000 	.word	0x40021000
 8000e20:	40000400 	.word	0x40000400
 8000e24:	40000800 	.word	0x40000800

08000e28 <timerSetPrescaler>:
  * Desc.: sets Prescaler for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) presc: Prescaler Value
  * @return: none
  */
extern void timerSetPrescaler(TIM_TypeDef* timer, uint16_t presc){
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
 8000e30:	460b      	mov	r3, r1
 8000e32:	807b      	strh	r3, [r7, #2]
	timer->PSC = presc;
 8000e34:	887a      	ldrh	r2, [r7, #2]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e3a:	bf00      	nop
 8000e3c:	370c      	adds	r7, #12
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr

08000e44 <timerSetAutoReloadValue>:
  * Desc.: sets AutoreloadValue for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) arrv: Autoreloadvalue
  * @return: none
  */
extern void timerSetAutoReloadValue(TIM_TypeDef* timer, uint16_t arrv){
 8000e44:	b480      	push	{r7}
 8000e46:	b083      	sub	sp, #12
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	807b      	strh	r3, [r7, #2]
	timer->ARR = arrv;
 8000e50:	887a      	ldrh	r2, [r7, #2]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bc80      	pop	{r7}
 8000e5e:	4770      	bx	lr

08000e60 <timerEnableInterrupt>:
/*
  * Desc.: enables Interrupt
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerEnableInterrupt(TIM_TypeDef* timer){
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
	timer->DIER |= TIM_DIER_UIE;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	68db      	ldr	r3, [r3, #12]
 8000e6c:	f043 0201 	orr.w	r2, r3, #1
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	60da      	str	r2, [r3, #12]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr

08000e7e <timerSetOnePulseMode>:
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (OPM_MODE) opmmode: ONE_PULSE_MODE_OFF
								ONE_PULSE_MODE_ON
  * @return: none
  */
extern void timerSetOnePulseMode(TIM_TypeDef* timer, OPM_MODE opmmode){
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70fb      	strb	r3, [r7, #3]
	if(opmmode == 1){
 8000e8a:	78fb      	ldrb	r3, [r7, #3]
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d106      	bne.n	8000e9e <timerSetOnePulseMode+0x20>
		timer->CR1 |= TIM_CR1_OPM ;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	f043 0208 	orr.w	r2, r3, #8
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	601a      	str	r2, [r3, #0]
	}
	else{
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
	}
}
 8000e9c:	e005      	b.n	8000eaa <timerSetOnePulseMode+0x2c>
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f023 0208 	bic.w	r2, r3, #8
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	601a      	str	r2, [r3, #0]
}
 8000eaa:	bf00      	nop
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bc80      	pop	{r7}
 8000eb2:	4770      	bx	lr

08000eb4 <timerStart>:
/*
  * Desc.: starts Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerStart(TIM_TypeDef* timer){
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f043 0201 	orr.w	r2, r3, #1
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	601a      	str	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
	...

08000ed4 <USARTEnable>:
/*
  * Desc.: enables Clock for the corresponding USART and activates the USART in it's Control Register
  * @param: (USART_TypeDef*)usart: USART
  * @return: none
  */
void USARTEnable(USART_TypeDef* usart){
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
	if(usart == USART1){
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4a1b      	ldr	r2, [pc, #108]	; (8000f4c <USARTEnable+0x78>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d10c      	bne.n	8000efe <USARTEnable+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 8000ee4:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <USARTEnable+0x7c>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a19      	ldr	r2, [pc, #100]	; (8000f50 <USARTEnable+0x7c>)
 8000eea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eee:	6193      	str	r3, [r2, #24]
		USART1->CR1 |= USART_CR1_UE;
 8000ef0:	4b16      	ldr	r3, [pc, #88]	; (8000f4c <USARTEnable+0x78>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	4a15      	ldr	r2, [pc, #84]	; (8000f4c <USARTEnable+0x78>)
 8000ef6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000efa:	60d3      	str	r3, [r2, #12]
 8000efc:	e022      	b.n	8000f44 <USARTEnable+0x70>
	}
	else if(usart == USART2){
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a14      	ldr	r2, [pc, #80]	; (8000f54 <USARTEnable+0x80>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d10c      	bne.n	8000f20 <USARTEnable+0x4c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <USARTEnable+0x7c>)
 8000f08:	69db      	ldr	r3, [r3, #28]
 8000f0a:	4a11      	ldr	r2, [pc, #68]	; (8000f50 <USARTEnable+0x7c>)
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	61d3      	str	r3, [r2, #28]
		USART2->CR1 |= USART_CR1_UE;
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <USARTEnable+0x80>)
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	4a0f      	ldr	r2, [pc, #60]	; (8000f54 <USARTEnable+0x80>)
 8000f18:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f1c:	60d3      	str	r3, [r2, #12]
 8000f1e:	e011      	b.n	8000f44 <USARTEnable+0x70>
	}
	else if(usart == USART3){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <USARTEnable+0x84>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d10c      	bne.n	8000f42 <USARTEnable+0x6e>
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <USARTEnable+0x7c>)
 8000f2a:	69db      	ldr	r3, [r3, #28]
 8000f2c:	4a08      	ldr	r2, [pc, #32]	; (8000f50 <USARTEnable+0x7c>)
 8000f2e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f32:	61d3      	str	r3, [r2, #28]
		USART3->CR1 |= USART_CR1_UE;
 8000f34:	4b08      	ldr	r3, [pc, #32]	; (8000f58 <USARTEnable+0x84>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a07      	ldr	r2, [pc, #28]	; (8000f58 <USARTEnable+0x84>)
 8000f3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f3e:	60d3      	str	r3, [r2, #12]
 8000f40:	e000      	b.n	8000f44 <USARTEnable+0x70>
	}
	else{
		return;
 8000f42:	bf00      	nop
	}
}
 8000f44:	370c      	adds	r7, #12
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bc80      	pop	{r7}
 8000f4a:	4770      	bx	lr
 8000f4c:	40013800 	.word	0x40013800
 8000f50:	40021000 	.word	0x40021000
 8000f54:	40004400 	.word	0x40004400
 8000f58:	40004800 	.word	0x40004800

08000f5c <USARTSetBaudrate>:
  * Desc.: sets the Baudrate for the USART (system clock > 36 MHZ!), default: 115200 bps
  * @param: (USART_TypeDef*)usart: USART
  * @param: (uint16_t) brrVal: Baudrate
  * @return: none
  */
void USARTSetBaudrate(USART_TypeDef* usart, uint16_t brrVal){
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	460b      	mov	r3, r1
 8000f66:	807b      	strh	r3, [r7, #2]
	if(brrVal != 0){
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00b      	beq.n	8000f86 <USARTSetBaudrate+0x2a>
		usart -> BRR |= (SystemCoreClock / 2 / brrVal);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <USARTSetBaudrate+0x40>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	0859      	lsrs	r1, r3, #1
 8000f78:	887b      	ldrh	r3, [r7, #2]
 8000f7a:	fbb1 f3f3 	udiv	r3, r1, r3
 8000f7e:	431a      	orrs	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= 0x8B;
	}
}
 8000f84:	e005      	b.n	8000f92 <USARTSetBaudrate+0x36>
		usart->BRR |= 0x8B;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	f043 028b 	orr.w	r2, r3, #139	; 0x8b
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	609a      	str	r2, [r3, #8]
}
 8000f92:	bf00      	nop
 8000f94:	370c      	adds	r7, #12
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bc80      	pop	{r7}
 8000f9a:	4770      	bx	lr
 8000f9c:	20000008 	.word	0x20000008

08000fa0 <USARTRXOn>:
  * Desc.: enables the Receiver of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Receiver shall be activated
  * @return: none
  */
void USARTRXOn(USART_TypeDef* usart, USART_RX on_off){
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	70fb      	strb	r3, [r7, #3]
	if(on_off == RECEIVER_ON){
 8000fac:	78fb      	ldrb	r3, [r7, #3]
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d106      	bne.n	8000fc0 <USARTRXOn+0x20>
		usart->CR1 |= USART_CR1_RE;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	68db      	ldr	r3, [r3, #12]
 8000fb6:	f043 0204 	orr.w	r2, r3, #4
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60da      	str	r2, [r3, #12]
	}
	else{
		usart->CR1 &= USART_CR1_RE_Msk;
	}
}
 8000fbe:	e005      	b.n	8000fcc <USARTRXOn+0x2c>
		usart->CR1 &= USART_CR1_RE_Msk;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	f003 0204 	and.w	r2, r3, #4
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	60da      	str	r2, [r3, #12]
}
 8000fcc:	bf00      	nop
 8000fce:	370c      	adds	r7, #12
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <USARTTXOn>:
  * Desc.: enables the Transmitter of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Transmitter shall be activated
  * @return: none
  */
void USARTTXOn(USART_TypeDef* usart, USART_TX on_off){
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
 8000fde:	460b      	mov	r3, r1
 8000fe0:	70fb      	strb	r3, [r7, #3]
	if(on_off == TRANSMITTER_ON){
 8000fe2:	78fb      	ldrb	r3, [r7, #3]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <USARTTXOn+0x20>
			usart->CR1 |= USART_CR1_TE;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	f043 0208 	orr.w	r2, r3, #8
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= USART_CR1_TE_Msk;
		}
}
 8000ff4:	e005      	b.n	8001002 <USARTTXOn+0x2c>
			usart->CR1 &= USART_CR1_TE_Msk;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	f003 0208 	and.w	r2, r3, #8
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <USARTIRQ>:
    									USART_IRQ_LBDIE,(LIN Break Detection Interrupt)
    									USART_IRQ_EIE(Error Interrupt)
  *  @param: (bool) enable_disable: determines if the interrupt shall be enabled or disabled
  * @return: none
  */
extern void USARTIRQ(USART_TypeDef* usart, USART_IRQ_TYPES irq_type, bool enable_disable){
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	70fb      	strb	r3, [r7, #3]
 8001018:	4613      	mov	r3, r2
 800101a:	70bb      	strb	r3, [r7, #2]
	switch(irq_type){
 800101c:	78fb      	ldrb	r3, [r7, #3]
 800101e:	2b07      	cmp	r3, #7
 8001020:	f200 808b 	bhi.w	800113a <USARTIRQ+0x12e>
 8001024:	a201      	add	r2, pc, #4	; (adr r2, 800102c <USARTIRQ+0x20>)
 8001026:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102a:	bf00      	nop
 800102c:	0800104d 	.word	0x0800104d
 8001030:	0800106f 	.word	0x0800106f
 8001034:	08001091 	.word	0x08001091
 8001038:	080010b3 	.word	0x080010b3
 800103c:	0800113b 	.word	0x0800113b
 8001040:	080010d5 	.word	0x080010d5
 8001044:	080010f7 	.word	0x080010f7
 8001048:	08001119 	.word	0x08001119
	case USART_IRQ_TXEIE:
		if(enable_disable){
 800104c:	78bb      	ldrb	r3, [r7, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d006      	beq.n	8001060 <USARTIRQ+0x54>
			usart->CR1 |= USART_CR1_TXEIE;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
		}
		break;
 800105e:	e06d      	b.n	800113c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	60da      	str	r2, [r3, #12]
		break;
 800106c:	e066      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_CTSIE:
		if(enable_disable){
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d006      	beq.n	8001082 <USARTIRQ+0x76>
			usart->CR3 |= USART_CR3_CTSIE;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	695b      	ldr	r3, [r3, #20]
 8001078:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
		}
		break;
 8001080:	e05c      	b.n	800113c <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	615a      	str	r2, [r3, #20]
		break;
 800108e:	e055      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_TCIE:
		if(enable_disable){
 8001090:	78bb      	ldrb	r3, [r7, #2]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d006      	beq.n	80010a4 <USARTIRQ+0x98>
			usart->CR1 |= USART_CR1_TCIE;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
		}
		break;
 80010a2:	e04b      	b.n	800113c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	68db      	ldr	r3, [r3, #12]
 80010a8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	60da      	str	r2, [r3, #12]
		break;
 80010b0:	e044      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_RXNEIE:
		if(enable_disable){
 80010b2:	78bb      	ldrb	r3, [r7, #2]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d006      	beq.n	80010c6 <USARTIRQ+0xba>
			usart->CR1 |= USART_CR1_RXNEIE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	f043 0220 	orr.w	r2, r3, #32
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
		}
		break;
 80010c4:	e03a      	b.n	800113c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	f023 0220 	bic.w	r2, r3, #32
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	60da      	str	r2, [r3, #12]
		break;
 80010d2:	e033      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_PEIE:
		if(enable_disable){
 80010d4:	78bb      	ldrb	r3, [r7, #2]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <USARTIRQ+0xdc>
			usart->CR1 |= USART_CR1_PEIE;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	68db      	ldr	r3, [r3, #12]
 80010de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
		}
		break;
 80010e6:	e029      	b.n	800113c <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	60da      	str	r2, [r3, #12]
		break;
 80010f4:	e022      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_LBDIE:
		if(enable_disable){
 80010f6:	78bb      	ldrb	r3, [r7, #2]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d006      	beq.n	800110a <USARTIRQ+0xfe>
			usart->CR2 |= USART_CR2_LBDIE;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	691b      	ldr	r3, [r3, #16]
 8001100:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	611a      	str	r2, [r3, #16]
		}
		else{
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
		}
		break;
 8001108:	e018      	b.n	800113c <USARTIRQ+0x130>
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	691b      	ldr	r3, [r3, #16]
 800110e:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	611a      	str	r2, [r3, #16]
		break;
 8001116:	e011      	b.n	800113c <USARTIRQ+0x130>
	case USART_IRQ_EIE:
		if(enable_disable){
 8001118:	78bb      	ldrb	r3, [r7, #2]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d006      	beq.n	800112c <USARTIRQ+0x120>
			usart->CR3 |= USART_CR3_EIE;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	695b      	ldr	r3, [r3, #20]
 8001122:	f043 0201 	orr.w	r2, r3, #1
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_EIE_Msk;
		}
		break;
 800112a:	e007      	b.n	800113c <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_EIE_Msk;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	f023 0201 	bic.w	r2, r3, #1
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	615a      	str	r2, [r3, #20]
		break;
 8001138:	e000      	b.n	800113c <USARTIRQ+0x130>
	default:
		return;
 800113a:	bf00      	nop
	}
}
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr

08001144 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800114a:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <HAL_MspInit+0x40>)
 800114c:	699b      	ldr	r3, [r3, #24]
 800114e:	4a0d      	ldr	r2, [pc, #52]	; (8001184 <HAL_MspInit+0x40>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6193      	str	r3, [r2, #24]
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <HAL_MspInit+0x40>)
 8001158:	699b      	ldr	r3, [r3, #24]
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	607b      	str	r3, [r7, #4]
 8001160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001162:	4b08      	ldr	r3, [pc, #32]	; (8001184 <HAL_MspInit+0x40>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	4a07      	ldr	r2, [pc, #28]	; (8001184 <HAL_MspInit+0x40>)
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61d3      	str	r3, [r2, #28]
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_MspInit+0x40>)
 8001170:	69db      	ldr	r3, [r3, #28]
 8001172:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001176:	603b      	str	r3, [r7, #0]
 8001178:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	40021000 	.word	0x40021000

08001188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800118c:	e7fe      	b.n	800118c <NMI_Handler+0x4>

0800118e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001192:	e7fe      	b.n	8001192 <HardFault_Handler+0x4>

08001194 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001194:	b480      	push	{r7}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001198:	e7fe      	b.n	8001198 <MemManage_Handler+0x4>

0800119a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119e:	e7fe      	b.n	800119e <BusFault_Handler+0x4>

080011a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a4:	e7fe      	b.n	80011a4 <UsageFault_Handler+0x4>

080011a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a6:	b480      	push	{r7}
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bc80      	pop	{r7}
 80011b0:	4770      	bx	lr

080011b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b2:	b480      	push	{r7}
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b6:	bf00      	nop
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bc80      	pop	{r7}
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
	...

080011cc <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80011d2:	f000 fabf 	bl	8001754 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000e94 	.word	0x20000e94

080011e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr

080011ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	; (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	; (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	; (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	; (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001212:	f7ff ffe5 	bl	80011e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001216:	f007 f84f 	bl	80082b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800121a:	f7ff f8cd 	bl	80003b8 <main>
  bx lr
 800121e:	4770      	bx	lr
  ldr r0, =_sdata
 8001220:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001224:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8001228:	08008398 	.word	0x08008398
  ldr r2, =_sbss
 800122c:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8001230:	200013a0 	.word	0x200013a0

08001234 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC1_2_IRQHandler>
	...

08001238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <HAL_Init+0x28>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <HAL_Init+0x28>)
 8001242:	f043 0310 	orr.w	r3, r3, #16
 8001246:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001248:	2003      	movs	r0, #3
 800124a:	f000 f911 	bl	8001470 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800124e:	200f      	movs	r0, #15
 8001250:	f000 f808 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001254:	f7ff ff76 	bl	8001144 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40022000 	.word	0x40022000

08001264 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800126c:	4b12      	ldr	r3, [pc, #72]	; (80012b8 <HAL_InitTick+0x54>)
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	4b12      	ldr	r3, [pc, #72]	; (80012bc <HAL_InitTick+0x58>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4619      	mov	r1, r3
 8001276:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800127a:	fbb3 f3f1 	udiv	r3, r3, r1
 800127e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f929 	bl	80014da <HAL_SYSTICK_Config>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e00e      	b.n	80012b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b0f      	cmp	r3, #15
 8001296:	d80a      	bhi.n	80012ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001298:	2200      	movs	r2, #0
 800129a:	6879      	ldr	r1, [r7, #4]
 800129c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a0:	f000 f8f1 	bl	8001486 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012a4:	4a06      	ldr	r2, [pc, #24]	; (80012c0 <HAL_InitTick+0x5c>)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e000      	b.n	80012b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000008 	.word	0x20000008
 80012bc:	20000010 	.word	0x20000010
 80012c0:	2000000c 	.word	0x2000000c

080012c4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b02      	ldr	r3, [pc, #8]	; (80012d4 <HAL_GetTick+0x10>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bc80      	pop	{r7}
 80012d2:	4770      	bx	lr
 80012d4:	200001c8 	.word	0x200001c8

080012d8 <__NVIC_SetPriorityGrouping>:
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e8:	4b0c      	ldr	r3, [pc, #48]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 80012ea:	68db      	ldr	r3, [r3, #12]
 80012ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ee:	68ba      	ldr	r2, [r7, #8]
 80012f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f4:	4013      	ands	r3, r2
 80012f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800130a:	4a04      	ldr	r2, [pc, #16]	; (800131c <__NVIC_SetPriorityGrouping+0x44>)
 800130c:	68bb      	ldr	r3, [r7, #8]
 800130e:	60d3      	str	r3, [r2, #12]
}
 8001310:	bf00      	nop
 8001312:	3714      	adds	r7, #20
 8001314:	46bd      	mov	sp, r7
 8001316:	bc80      	pop	{r7}
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <__NVIC_GetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001324:	4b04      	ldr	r3, [pc, #16]	; (8001338 <__NVIC_GetPriorityGrouping+0x18>)
 8001326:	68db      	ldr	r3, [r3, #12]
 8001328:	0a1b      	lsrs	r3, r3, #8
 800132a:	f003 0307 	and.w	r3, r3, #7
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	bc80      	pop	{r7}
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <__NVIC_EnableIRQ>:
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	4603      	mov	r3, r0
 8001344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	db0b      	blt.n	8001366 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f003 021f 	and.w	r2, r3, #31
 8001354:	4906      	ldr	r1, [pc, #24]	; (8001370 <__NVIC_EnableIRQ+0x34>)
 8001356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135a:	095b      	lsrs	r3, r3, #5
 800135c:	2001      	movs	r0, #1
 800135e:	fa00 f202 	lsl.w	r2, r0, r2
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001366:	bf00      	nop
 8001368:	370c      	adds	r7, #12
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	e000e100 	.word	0xe000e100

08001374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	6039      	str	r1, [r7, #0]
 800137e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001384:	2b00      	cmp	r3, #0
 8001386:	db0a      	blt.n	800139e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	b2da      	uxtb	r2, r3
 800138c:	490c      	ldr	r1, [pc, #48]	; (80013c0 <__NVIC_SetPriority+0x4c>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	0112      	lsls	r2, r2, #4
 8001394:	b2d2      	uxtb	r2, r2
 8001396:	440b      	add	r3, r1
 8001398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800139c:	e00a      	b.n	80013b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4908      	ldr	r1, [pc, #32]	; (80013c4 <__NVIC_SetPriority+0x50>)
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	f003 030f 	and.w	r3, r3, #15
 80013aa:	3b04      	subs	r3, #4
 80013ac:	0112      	lsls	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	440b      	add	r3, r1
 80013b2:	761a      	strb	r2, [r3, #24]
}
 80013b4:	bf00      	nop
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr
 80013be:	bf00      	nop
 80013c0:	e000e100 	.word	0xe000e100
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b089      	sub	sp, #36	; 0x24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	bf28      	it	cs
 80013e6:	2304      	movcs	r3, #4
 80013e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	3304      	adds	r3, #4
 80013ee:	2b06      	cmp	r3, #6
 80013f0:	d902      	bls.n	80013f8 <NVIC_EncodePriority+0x30>
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3b03      	subs	r3, #3
 80013f6:	e000      	b.n	80013fa <NVIC_EncodePriority+0x32>
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43da      	mvns	r2, r3
 8001408:	68bb      	ldr	r3, [r7, #8]
 800140a:	401a      	ands	r2, r3
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	43d9      	mvns	r1, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	4313      	orrs	r3, r2
         );
}
 8001422:	4618      	mov	r0, r3
 8001424:	3724      	adds	r7, #36	; 0x24
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3b01      	subs	r3, #1
 8001438:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800143c:	d301      	bcc.n	8001442 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800143e:	2301      	movs	r3, #1
 8001440:	e00f      	b.n	8001462 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <SysTick_Config+0x40>)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	3b01      	subs	r3, #1
 8001448:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800144a:	210f      	movs	r1, #15
 800144c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001450:	f7ff ff90 	bl	8001374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001454:	4b05      	ldr	r3, [pc, #20]	; (800146c <SysTick_Config+0x40>)
 8001456:	2200      	movs	r2, #0
 8001458:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800145a:	4b04      	ldr	r3, [pc, #16]	; (800146c <SysTick_Config+0x40>)
 800145c:	2207      	movs	r2, #7
 800145e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	3708      	adds	r7, #8
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	e000e010 	.word	0xe000e010

08001470 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001478:	6878      	ldr	r0, [r7, #4]
 800147a:	f7ff ff2d 	bl	80012d8 <__NVIC_SetPriorityGrouping>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001486:	b580      	push	{r7, lr}
 8001488:	b086      	sub	sp, #24
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	60b9      	str	r1, [r7, #8]
 8001490:	607a      	str	r2, [r7, #4]
 8001492:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001494:	2300      	movs	r3, #0
 8001496:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001498:	f7ff ff42 	bl	8001320 <__NVIC_GetPriorityGrouping>
 800149c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800149e:	687a      	ldr	r2, [r7, #4]
 80014a0:	68b9      	ldr	r1, [r7, #8]
 80014a2:	6978      	ldr	r0, [r7, #20]
 80014a4:	f7ff ff90 	bl	80013c8 <NVIC_EncodePriority>
 80014a8:	4602      	mov	r2, r0
 80014aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ae:	4611      	mov	r1, r2
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff ff5f 	bl	8001374 <__NVIC_SetPriority>
}
 80014b6:	bf00      	nop
 80014b8:	3718      	adds	r7, #24
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	4603      	mov	r3, r0
 80014c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff35 	bl	800133c <__NVIC_EnableIRQ>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffa2 	bl	800142c <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80014f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014f4:	b08b      	sub	sp, #44	; 0x2c
 80014f6:	af06      	add	r7, sp, #24
 80014f8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d101      	bne.n	8001504 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001500:	2301      	movs	r3, #1
 8001502:	e0fd      	b.n	8001700 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d106      	bne.n	800151e <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2200      	movs	r2, #0
 8001514:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001518:	6878      	ldr	r0, [r7, #4]
 800151a:	f006 fc23 	bl	8007d64 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	2203      	movs	r2, #3
 8001522:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4618      	mov	r0, r3
 800152c:	f002 f968 	bl	8003800 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	603b      	str	r3, [r7, #0]
 8001536:	687e      	ldr	r6, [r7, #4]
 8001538:	466d      	mov	r5, sp
 800153a:	f106 0410 	add.w	r4, r6, #16
 800153e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001540:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	602b      	str	r3, [r5, #0]
 8001546:	1d33      	adds	r3, r6, #4
 8001548:	cb0e      	ldmia	r3, {r1, r2, r3}
 800154a:	6838      	ldr	r0, [r7, #0]
 800154c:	f002 f932 	bl	80037b4 <USB_CoreInit>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d005      	beq.n	8001562 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2202      	movs	r2, #2
 800155a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0ce      	b.n	8001700 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2100      	movs	r1, #0
 8001568:	4618      	mov	r0, r3
 800156a:	f002 f963 	bl	8003834 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e04c      	b.n	800160e <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001574:	7bfb      	ldrb	r3, [r7, #15]
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	1c5a      	adds	r2, r3, #1
 800157a:	4613      	mov	r3, r2
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	4413      	add	r3, r2
 8001580:	00db      	lsls	r3, r3, #3
 8001582:	440b      	add	r3, r1
 8001584:	3301      	adds	r3, #1
 8001586:	2201      	movs	r2, #1
 8001588:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	6879      	ldr	r1, [r7, #4]
 800158e:	1c5a      	adds	r2, r3, #1
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	00db      	lsls	r3, r3, #3
 8001598:	440b      	add	r3, r1
 800159a:	7bfa      	ldrb	r2, [r7, #15]
 800159c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	b298      	uxth	r0, r3
 80015a4:	6879      	ldr	r1, [r7, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	00db      	lsls	r3, r3, #3
 80015ae:	440b      	add	r3, r1
 80015b0:	3336      	adds	r3, #54	; 0x36
 80015b2:	4602      	mov	r2, r0
 80015b4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80015b6:	7bfb      	ldrb	r3, [r7, #15]
 80015b8:	6879      	ldr	r1, [r7, #4]
 80015ba:	1c5a      	adds	r2, r3, #1
 80015bc:	4613      	mov	r3, r2
 80015be:	009b      	lsls	r3, r3, #2
 80015c0:	4413      	add	r3, r2
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	440b      	add	r3, r1
 80015c6:	3303      	adds	r3, #3
 80015c8:	2200      	movs	r2, #0
 80015ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80015cc:	7bfa      	ldrb	r2, [r7, #15]
 80015ce:	6879      	ldr	r1, [r7, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	440b      	add	r3, r1
 80015da:	3338      	adds	r3, #56	; 0x38
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80015e0:	7bfa      	ldrb	r2, [r7, #15]
 80015e2:	6879      	ldr	r1, [r7, #4]
 80015e4:	4613      	mov	r3, r2
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	4413      	add	r3, r2
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	440b      	add	r3, r1
 80015ee:	333c      	adds	r3, #60	; 0x3c
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80015f4:	7bfa      	ldrb	r2, [r7, #15]
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	440b      	add	r3, r1
 8001602:	3340      	adds	r3, #64	; 0x40
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001608:	7bfb      	ldrb	r3, [r7, #15]
 800160a:	3301      	adds	r3, #1
 800160c:	73fb      	strb	r3, [r7, #15]
 800160e:	7bfa      	ldrb	r2, [r7, #15]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	429a      	cmp	r2, r3
 8001616:	d3ad      	bcc.n	8001574 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001618:	2300      	movs	r3, #0
 800161a:	73fb      	strb	r3, [r7, #15]
 800161c:	e044      	b.n	80016a8 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800161e:	7bfa      	ldrb	r2, [r7, #15]
 8001620:	6879      	ldr	r1, [r7, #4]
 8001622:	4613      	mov	r3, r2
 8001624:	009b      	lsls	r3, r3, #2
 8001626:	4413      	add	r3, r2
 8001628:	00db      	lsls	r3, r3, #3
 800162a:	440b      	add	r3, r1
 800162c:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001634:	7bfa      	ldrb	r2, [r7, #15]
 8001636:	6879      	ldr	r1, [r7, #4]
 8001638:	4613      	mov	r3, r2
 800163a:	009b      	lsls	r3, r3, #2
 800163c:	4413      	add	r3, r2
 800163e:	00db      	lsls	r3, r3, #3
 8001640:	440b      	add	r3, r1
 8001642:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800164a:	7bfa      	ldrb	r2, [r7, #15]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	00db      	lsls	r3, r3, #3
 8001656:	440b      	add	r3, r1
 8001658:	f203 136b 	addw	r3, r3, #363	; 0x16b
 800165c:	2200      	movs	r2, #0
 800165e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001676:	7bfa      	ldrb	r2, [r7, #15]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	440b      	add	r3, r1
 8001684:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800168c:	7bfa      	ldrb	r2, [r7, #15]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	440b      	add	r3, r1
 800169a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016a2:	7bfb      	ldrb	r3, [r7, #15]
 80016a4:	3301      	adds	r3, #1
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	7bfa      	ldrb	r2, [r7, #15]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d3b5      	bcc.n	800161e <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	687e      	ldr	r6, [r7, #4]
 80016ba:	466d      	mov	r5, sp
 80016bc:	f106 0410 	add.w	r4, r6, #16
 80016c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80016c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80016c4:	6823      	ldr	r3, [r4, #0]
 80016c6:	602b      	str	r3, [r5, #0]
 80016c8:	1d33      	adds	r3, r6, #4
 80016ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f002 f8bd 	bl	800384c <USB_DevInit>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2202      	movs	r2, #2
 80016dc:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80016e0:	2301      	movs	r3, #1
 80016e2:	e00d      	b.n	8001700 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f004 fd6f 	bl	80061dc <USB_DevDisconnect>

  return HAL_OK;
 80016fe:	2300      	movs	r3, #0
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001708 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001716:	2b01      	cmp	r3, #1
 8001718:	d101      	bne.n	800171e <HAL_PCD_Start+0x16>
 800171a:	2302      	movs	r3, #2
 800171c:	e016      	b.n	800174c <HAL_PCD_Start+0x44>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2201      	movs	r2, #1
 8001722:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f002 f852 	bl	80037d4 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001730:	2101      	movs	r1, #1
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f006 fd89 	bl	800824a <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4618      	mov	r0, r3
 800173e:	f004 fd43 	bl	80061c8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800174a:	2300      	movs	r3, #0
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}

08001754 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f004 fd45 	bl	80061f0 <USB_ReadInterrupts>
 8001766:	4603      	mov	r3, r0
 8001768:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800176c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001770:	d102      	bne.n	8001778 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	f000 fb5f 	bl	8001e36 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4618      	mov	r0, r3
 800177e:	f004 fd37 	bl	80061f0 <USB_ReadInterrupts>
 8001782:	4603      	mov	r3, r0
 8001784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001788:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800178c:	d112      	bne.n	80017b4 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001796:	b29a      	uxth	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017a0:	b292      	uxth	r2, r2
 80017a2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f006 fb57 	bl	8007e5a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80017ac:	2100      	movs	r1, #0
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f923 	bl	80019fa <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 fd19 	bl	80061f0 <USB_ReadInterrupts>
 80017be:	4603      	mov	r3, r0
 80017c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80017c8:	d10b      	bne.n	80017e2 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017d2:	b29a      	uxth	r2, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80017dc:	b292      	uxth	r2, r2
 80017de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f004 fd02 	bl	80061f0 <USB_ReadInterrupts>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017f6:	d10b      	bne.n	8001810 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001800:	b29a      	uxth	r2, r3
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800180a:	b292      	uxth	r2, r2
 800180c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f004 fceb 	bl	80061f0 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001824:	d126      	bne.n	8001874 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800182e:	b29a      	uxth	r2, r3
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f022 0204 	bic.w	r2, r2, #4
 8001838:	b292      	uxth	r2, r2
 800183a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001846:	b29a      	uxth	r2, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 0208 	bic.w	r2, r2, #8
 8001850:	b292      	uxth	r2, r2
 8001852:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f006 fb38 	bl	8007ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001864:	b29a      	uxth	r2, r3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800186e:	b292      	uxth	r2, r2
 8001870:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4618      	mov	r0, r3
 800187a:	f004 fcb9 	bl	80061f0 <USB_ReadInterrupts>
 800187e:	4603      	mov	r3, r0
 8001880:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001884:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001888:	f040 8082 	bne.w	8001990 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800188c:	2300      	movs	r3, #0
 800188e:	77fb      	strb	r3, [r7, #31]
 8001890:	e010      	b.n	80018b4 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	7ffb      	ldrb	r3, [r7, #31]
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	441a      	add	r2, r3
 800189e:	7ffb      	ldrb	r3, [r7, #31]
 80018a0:	8812      	ldrh	r2, [r2, #0]
 80018a2:	b292      	uxth	r2, r2
 80018a4:	005b      	lsls	r3, r3, #1
 80018a6:	3320      	adds	r3, #32
 80018a8:	443b      	add	r3, r7
 80018aa:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80018ae:	7ffb      	ldrb	r3, [r7, #31]
 80018b0:	3301      	adds	r3, #1
 80018b2:	77fb      	strb	r3, [r7, #31]
 80018b4:	7ffb      	ldrb	r3, [r7, #31]
 80018b6:	2b07      	cmp	r3, #7
 80018b8:	d9eb      	bls.n	8001892 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018c2:	b29a      	uxth	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f042 0201 	orr.w	r2, r2, #1
 80018cc:	b292      	uxth	r2, r2
 80018ce:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018da:	b29a      	uxth	r2, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f022 0201 	bic.w	r2, r2, #1
 80018e4:	b292      	uxth	r2, r2
 80018e6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80018ea:	bf00      	nop
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f6      	beq.n	80018ec <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001906:	b29a      	uxth	r2, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001910:	b292      	uxth	r2, r2
 8001912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001916:	2300      	movs	r3, #0
 8001918:	77fb      	strb	r3, [r7, #31]
 800191a:	e00f      	b.n	800193c <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 800191c:	7ffb      	ldrb	r3, [r7, #31]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	4611      	mov	r1, r2
 8001924:	7ffa      	ldrb	r2, [r7, #31]
 8001926:	0092      	lsls	r2, r2, #2
 8001928:	440a      	add	r2, r1
 800192a:	005b      	lsls	r3, r3, #1
 800192c:	3320      	adds	r3, #32
 800192e:	443b      	add	r3, r7
 8001930:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001934:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001936:	7ffb      	ldrb	r3, [r7, #31]
 8001938:	3301      	adds	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
 800193c:	7ffb      	ldrb	r3, [r7, #31]
 800193e:	2b07      	cmp	r3, #7
 8001940:	d9ec      	bls.n	800191c <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800194a:	b29a      	uxth	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f042 0208 	orr.w	r2, r2, #8
 8001954:	b292      	uxth	r2, r2
 8001956:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001962:	b29a      	uxth	r2, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800196c:	b292      	uxth	r2, r2
 800196e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800197a:	b29a      	uxth	r2, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f042 0204 	orr.w	r2, r2, #4
 8001984:	b292      	uxth	r2, r2
 8001986:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f006 fa84 	bl	8007e98 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f004 fc2b 	bl	80061f0 <USB_ReadInterrupts>
 800199a:	4603      	mov	r3, r0
 800199c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019a4:	d10e      	bne.n	80019c4 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b8:	b292      	uxth	r2, r2
 80019ba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f006 fa3d 	bl	8007e3e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f004 fc11 	bl	80061f0 <USB_ReadInterrupts>
 80019ce:	4603      	mov	r3, r0
 80019d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019d8:	d10b      	bne.n	80019f2 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80019e2:	b29a      	uxth	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019ec:	b292      	uxth	r2, r2
 80019ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
 8001a02:	460b      	mov	r3, r1
 8001a04:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_SetAddress+0x1a>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e013      	b.n	8001a3c <HAL_PCD_SetAddress+0x42>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	78fa      	ldrb	r2, [r7, #3]
 8001a20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	78fa      	ldrb	r2, [r7, #3]
 8001a2a:	4611      	mov	r1, r2
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f004 fbb8 	bl	80061a2 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3708      	adds	r7, #8
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}

08001a44 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	4608      	mov	r0, r1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	461a      	mov	r2, r3
 8001a52:	4603      	mov	r3, r0
 8001a54:	70fb      	strb	r3, [r7, #3]
 8001a56:	460b      	mov	r3, r1
 8001a58:	803b      	strh	r3, [r7, #0]
 8001a5a:	4613      	mov	r3, r2
 8001a5c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a62:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	da0e      	bge.n	8001a88 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	1c5a      	adds	r2, r3, #1
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	2201      	movs	r2, #1
 8001a84:	705a      	strb	r2, [r3, #1]
 8001a86:	e00e      	b.n	8001aa6 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 0207 	and.w	r2, r3, #7
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	00db      	lsls	r3, r3, #3
 8001a96:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa6:	78fb      	ldrb	r3, [r7, #3]
 8001aa8:	f003 0307 	and.w	r3, r3, #7
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001ab2:	883a      	ldrh	r2, [r7, #0]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	78ba      	ldrb	r2, [r7, #2]
 8001abc:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	785b      	ldrb	r3, [r3, #1]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d004      	beq.n	8001ad0 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ad0:	78bb      	ldrb	r3, [r7, #2]
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d102      	bne.n	8001adc <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_PCD_EP_Open+0xa6>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e00e      	b.n	8001b08 <HAL_PCD_EP_Open+0xc4>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	68f9      	ldr	r1, [r7, #12]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f001 fec7 	bl	800388c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001b06:	7afb      	ldrb	r3, [r7, #11]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	460b      	mov	r3, r1
 8001b1a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	da0e      	bge.n	8001b42 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b24:	78fb      	ldrb	r3, [r7, #3]
 8001b26:	f003 0307 	and.w	r3, r3, #7
 8001b2a:	1c5a      	adds	r2, r3, #1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	705a      	strb	r2, [r3, #1]
 8001b40:	e00e      	b.n	8001b60 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	f003 0207 	and.w	r2, r3, #7
 8001b48:	4613      	mov	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	4413      	add	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b60:	78fb      	ldrb	r3, [r7, #3]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d101      	bne.n	8001b7a <HAL_PCD_EP_Close+0x6a>
 8001b76:	2302      	movs	r3, #2
 8001b78:	e00e      	b.n	8001b98 <HAL_PCD_EP_Close+0x88>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68f9      	ldr	r1, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 f9e9 	bl	8003f60 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2200      	movs	r2, #0
 8001b92:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b086      	sub	sp, #24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	603b      	str	r3, [r7, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	f003 0207 	and.w	r2, r3, #7
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bc2:	68fa      	ldr	r2, [r7, #12]
 8001bc4:	4413      	add	r3, r2
 8001bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001be0:	7afb      	ldrb	r3, [r7, #11]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	b2da      	uxtb	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bec:	7afb      	ldrb	r3, [r7, #11]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d106      	bne.n	8001c04 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	6979      	ldr	r1, [r7, #20]
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f002 fb9b 	bl	8004338 <USB_EPStartXfer>
 8001c02:	e005      	b.n	8001c10 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	6979      	ldr	r1, [r7, #20]
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f002 fb94 	bl	8004338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c1a:	b480      	push	{r7}
 8001c1c:	b083      	sub	sp, #12
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	6078      	str	r0, [r7, #4]
 8001c22:	460b      	mov	r3, r1
 8001c24:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c26:	78fb      	ldrb	r3, [r7, #3]
 8001c28:	f003 0207 	and.w	r2, r3, #7
 8001c2c:	6879      	ldr	r1, [r7, #4]
 8001c2e:	4613      	mov	r3, r2
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4413      	add	r3, r2
 8001c34:	00db      	lsls	r3, r3, #3
 8001c36:	440b      	add	r3, r1
 8001c38:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001c3c:	681b      	ldr	r3, [r3, #0]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	603b      	str	r3, [r7, #0]
 8001c54:	460b      	mov	r3, r1
 8001c56:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c58:	7afb      	ldrb	r3, [r7, #11]
 8001c5a:	f003 0307 	and.w	r3, r3, #7
 8001c5e:	1c5a      	adds	r2, r3, #1
 8001c60:	4613      	mov	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4413      	add	r3, r2
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	68fa      	ldr	r2, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	683a      	ldr	r2, [r7, #0]
 8001c86:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	2201      	movs	r2, #1
 8001c92:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c94:	7afb      	ldrb	r3, [r7, #11]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	b2da      	uxtb	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ca0:	7afb      	ldrb	r3, [r7, #11]
 8001ca2:	f003 0307 	and.w	r3, r3, #7
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6979      	ldr	r1, [r7, #20]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f002 fb41 	bl	8004338 <USB_EPStartXfer>
 8001cb6:	e005      	b.n	8001cc4 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6979      	ldr	r1, [r7, #20]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f002 fb3a 	bl	8004338 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b084      	sub	sp, #16
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cda:	78fb      	ldrb	r3, [r7, #3]
 8001cdc:	f003 0207 	and.w	r2, r3, #7
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d901      	bls.n	8001cec <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e04c      	b.n	8001d86 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	da0e      	bge.n	8001d12 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cf4:	78fb      	ldrb	r3, [r7, #3]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	1c5a      	adds	r2, r3, #1
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	4413      	add	r3, r2
 8001d02:	00db      	lsls	r3, r3, #3
 8001d04:	687a      	ldr	r2, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	705a      	strb	r2, [r3, #1]
 8001d10:	e00c      	b.n	8001d2c <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001d12:	78fa      	ldrb	r2, [r7, #3]
 8001d14:	4613      	mov	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	4413      	add	r3, r2
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d32:	78fb      	ldrb	r3, [r7, #3]
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d101      	bne.n	8001d4c <HAL_PCD_EP_SetStall+0x7e>
 8001d48:	2302      	movs	r3, #2
 8001d4a:	e01c      	b.n	8001d86 <HAL_PCD_EP_SetStall+0xb8>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68f9      	ldr	r1, [r7, #12]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f004 f924 	bl	8005fa8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d108      	bne.n	8001d7c <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d74:	4619      	mov	r1, r3
 8001d76:	4610      	mov	r0, r2
 8001d78:	f004 fa49 	bl	800620e <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d901      	bls.n	8001dac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e040      	b.n	8001e2e <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da0e      	bge.n	8001dd2 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	1c5a      	adds	r2, r3, #1
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2201      	movs	r2, #1
 8001dce:	705a      	strb	r2, [r3, #1]
 8001dd0:	e00e      	b.n	8001df0 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd2:	78fb      	ldrb	r3, [r7, #3]
 8001dd4:	f003 0207 	and.w	r2, r3, #7
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	4413      	add	r3, r2
 8001de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2200      	movs	r2, #0
 8001df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_ClrStall+0x82>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00e      	b.n	8001e2e <HAL_PCD_EP_ClrStall+0xa0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f004 f912 	bl	8006048 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b08e      	sub	sp, #56	; 0x38
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e3e:	e2ec      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e48:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e4a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e56:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	f040 8161 	bne.w	8002122 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e62:	f003 0310 	and.w	r3, r3, #16
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d152      	bne.n	8001f10 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e7a:	81fb      	strh	r3, [r7, #14]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	89fb      	ldrh	r3, [r7, #14]
 8001e82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	3328      	adds	r3, #40	; 0x28
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	6812      	ldr	r2, [r2, #0]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eb6:	881b      	ldrh	r3, [r3, #0]
 8001eb8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec2:	695a      	ldr	r2, [r3, #20]
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	69db      	ldr	r3, [r3, #28]
 8001ec8:	441a      	add	r2, r3
 8001eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ecc:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ece:	2100      	movs	r1, #0
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f005 ff9a 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f000 829b 	beq.w	800241a <PCD_EP_ISR_Handler+0x5e4>
 8001ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee6:	699b      	ldr	r3, [r3, #24]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	f040 8296 	bne.w	800241a <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ef4:	b2db      	uxtb	r3, r3
 8001ef6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001efa:	b2da      	uxtb	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	b292      	uxth	r2, r2
 8001f02:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f0e:	e284      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f16:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d034      	beq.n	8001f94 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	461a      	mov	r2, r3
 8001f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	00db      	lsls	r3, r3, #3
 8001f3c:	4413      	add	r3, r2
 8001f3e:	3306      	adds	r3, #6
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6812      	ldr	r2, [r2, #0]
 8001f46:	4413      	add	r3, r2
 8001f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f4c:	881b      	ldrh	r3, [r3, #0]
 8001f4e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f54:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6818      	ldr	r0, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f62:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f66:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f68:	b29b      	uxth	r3, r3
 8001f6a:	f004 f9a0 	bl	80062ae <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	881b      	ldrh	r3, [r3, #0]
 8001f74:	b29a      	uxth	r2, r3
 8001f76:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	823b      	strh	r3, [r7, #16]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	8a3a      	ldrh	r2, [r7, #16]
 8001f84:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f88:	b292      	uxth	r2, r2
 8001f8a:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f005 ff0f 	bl	8007db0 <HAL_PCD_SetupStageCallback>
 8001f92:	e242      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f94:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f280 823e 	bge.w	800241a <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001faa:	4013      	ands	r3, r2
 8001fac:	83bb      	strh	r3, [r7, #28]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	8bba      	ldrh	r2, [r7, #28]
 8001fb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb8:	b292      	uxth	r2, r2
 8001fba:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	00db      	lsls	r3, r3, #3
 8001fce:	4413      	add	r3, r2
 8001fd0:	3306      	adds	r3, #6
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6812      	ldr	r2, [r2, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe6:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	69db      	ldr	r3, [r3, #28]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d019      	beq.n	8002024 <PCD_EP_ISR_Handler+0x1ee>
 8001ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d015      	beq.n	8002024 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	6959      	ldr	r1, [r3, #20]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8002004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002006:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002008:	b29b      	uxth	r3, r3
 800200a:	f004 f950 	bl	80062ae <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800200e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002010:	695a      	ldr	r2, [r3, #20]
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	69db      	ldr	r3, [r3, #28]
 8002016:	441a      	add	r2, r3
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800201c:	2100      	movs	r1, #0
 800201e:	6878      	ldr	r0, [r7, #4]
 8002020:	f005 fed8 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	b29b      	uxth	r3, r3
 800202c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002030:	2b00      	cmp	r3, #0
 8002032:	f040 81f2 	bne.w	800241a <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002044:	b29b      	uxth	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	4413      	add	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002054:	617b      	str	r3, [r7, #20]
 8002056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d112      	bne.n	8002084 <PCD_EP_ISR_Handler+0x24e>
 800205e:	697b      	ldr	r3, [r7, #20]
 8002060:	881b      	ldrh	r3, [r3, #0]
 8002062:	b29b      	uxth	r3, r3
 8002064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002068:	b29a      	uxth	r2, r3
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	801a      	strh	r2, [r3, #0]
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	881b      	ldrh	r3, [r3, #0]
 8002072:	b29b      	uxth	r3, r3
 8002074:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002078:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800207c:	b29a      	uxth	r2, r3
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	801a      	strh	r2, [r3, #0]
 8002082:	e02f      	b.n	80020e4 <PCD_EP_ISR_Handler+0x2ae>
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	2b3e      	cmp	r3, #62	; 0x3e
 800208a:	d813      	bhi.n	80020b4 <PCD_EP_ISR_Handler+0x27e>
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	085b      	lsrs	r3, r3, #1
 8002092:	633b      	str	r3, [r7, #48]	; 0x30
 8002094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002096:	691b      	ldr	r3, [r3, #16]
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	2b00      	cmp	r3, #0
 800209e:	d002      	beq.n	80020a6 <PCD_EP_ISR_Handler+0x270>
 80020a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a2:	3301      	adds	r3, #1
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	029b      	lsls	r3, r3, #10
 80020ac:	b29a      	uxth	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	801a      	strh	r2, [r3, #0]
 80020b2:	e017      	b.n	80020e4 <PCD_EP_ISR_Handler+0x2ae>
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	095b      	lsrs	r3, r3, #5
 80020ba:	633b      	str	r3, [r7, #48]	; 0x30
 80020bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020be:	691b      	ldr	r3, [r3, #16]
 80020c0:	f003 031f 	and.w	r3, r3, #31
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d102      	bne.n	80020ce <PCD_EP_ISR_Handler+0x298>
 80020c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ca:	3b01      	subs	r3, #1
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 80020ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d0:	b29b      	uxth	r3, r3
 80020d2:	029b      	lsls	r3, r3, #10
 80020d4:	b29b      	uxth	r3, r3
 80020d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020de:	b29a      	uxth	r2, r3
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	881b      	ldrh	r3, [r3, #0]
 80020ea:	b29b      	uxth	r3, r3
 80020ec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020f4:	827b      	strh	r3, [r7, #18]
 80020f6:	8a7b      	ldrh	r3, [r7, #18]
 80020f8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020fc:	827b      	strh	r3, [r7, #18]
 80020fe:	8a7b      	ldrh	r3, [r7, #18]
 8002100:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002104:	827b      	strh	r3, [r7, #18]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	8a7b      	ldrh	r3, [r7, #18]
 800210c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002110:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002114:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002118:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800211c:	b29b      	uxth	r3, r3
 800211e:	8013      	strh	r3, [r2, #0]
 8002120:	e17b      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002134:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002138:	2b00      	cmp	r3, #0
 800213a:	f280 80ea 	bge.w	8002312 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	4413      	add	r3, r2
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	b29a      	uxth	r2, r3
 8002150:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002154:	4013      	ands	r3, r2
 8002156:	853b      	strh	r3, [r7, #40]	; 0x28
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	461a      	mov	r2, r3
 800215e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002168:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800216c:	b292      	uxth	r2, r2
 800216e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002170:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8002174:	4613      	mov	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	4413      	add	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	4413      	add	r3, r2
 8002184:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	7b1b      	ldrb	r3, [r3, #12]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d122      	bne.n	80021d4 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002196:	b29b      	uxth	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	3306      	adds	r3, #6
 80021a4:	005b      	lsls	r3, r3, #1
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	6812      	ldr	r2, [r2, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021b6:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021b8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 8087 	beq.w	80022ce <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6818      	ldr	r0, [r3, #0]
 80021c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c6:	6959      	ldr	r1, [r3, #20]
 80021c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ca:	88da      	ldrh	r2, [r3, #6]
 80021cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021ce:	f004 f86e 	bl	80062ae <USB_ReadPMA>
 80021d2:	e07c      	b.n	80022ce <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	78db      	ldrb	r3, [r3, #3]
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d108      	bne.n	80021ee <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021dc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021de:	461a      	mov	r2, r3
 80021e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f927 	bl	8002436 <HAL_PCD_EP_DB_Receive>
 80021e8:	4603      	mov	r3, r0
 80021ea:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021ec:	e06f      	b.n	80022ce <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	009b      	lsls	r3, r3, #2
 80021fa:	4413      	add	r3, r2
 80021fc:	881b      	ldrh	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002208:	847b      	strh	r3, [r7, #34]	; 0x22
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	461a      	mov	r2, r3
 8002210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	009b      	lsls	r3, r3, #2
 8002216:	441a      	add	r2, r3
 8002218:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800221a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800221e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002222:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002226:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800222a:	b29b      	uxth	r3, r3
 800222c:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	4413      	add	r3, r2
 800223c:	881b      	ldrh	r3, [r3, #0]
 800223e:	b29b      	uxth	r3, r3
 8002240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d021      	beq.n	800228c <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	00db      	lsls	r3, r3, #3
 800225a:	4413      	add	r3, r2
 800225c:	3302      	adds	r3, #2
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6812      	ldr	r2, [r2, #0]
 8002264:	4413      	add	r3, r2
 8002266:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800226a:	881b      	ldrh	r3, [r3, #0]
 800226c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002270:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8002272:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002274:	2b00      	cmp	r3, #0
 8002276:	d02a      	beq.n	80022ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6818      	ldr	r0, [r3, #0]
 800227c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227e:	6959      	ldr	r1, [r3, #20]
 8002280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002282:	891a      	ldrh	r2, [r3, #8]
 8002284:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002286:	f004 f812 	bl	80062ae <USB_ReadPMA>
 800228a:	e020      	b.n	80022ce <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002294:	b29b      	uxth	r3, r3
 8002296:	461a      	mov	r2, r3
 8002298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	00db      	lsls	r3, r3, #3
 800229e:	4413      	add	r3, r2
 80022a0:	3306      	adds	r3, #6
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6812      	ldr	r2, [r2, #0]
 80022a8:	4413      	add	r3, r2
 80022aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022ae:	881b      	ldrh	r3, [r3, #0]
 80022b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022b4:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d008      	beq.n	80022ce <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6818      	ldr	r0, [r3, #0]
 80022c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c2:	6959      	ldr	r1, [r3, #20]
 80022c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c6:	895a      	ldrh	r2, [r3, #10]
 80022c8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022ca:	f003 fff0 	bl	80062ae <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	69da      	ldr	r2, [r3, #28]
 80022d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022d4:	441a      	add	r2, r3
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	695a      	ldr	r2, [r3, #20]
 80022de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022e0:	441a      	add	r2, r3
 80022e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e4:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d004      	beq.n	80022f8 <PCD_EP_ISR_Handler+0x4c2>
 80022ee:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d206      	bcs.n	8002306 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	4619      	mov	r1, r3
 80022fe:	6878      	ldr	r0, [r7, #4]
 8002300:	f005 fd68 	bl	8007dd4 <HAL_PCD_DataOutStageCallback>
 8002304:	e005      	b.n	8002312 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800230c:	4618      	mov	r0, r3
 800230e:	f002 f813 	bl	8004338 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002318:	2b00      	cmp	r3, #0
 800231a:	d07e      	beq.n	800241a <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800231c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002320:	1c5a      	adds	r2, r3, #1
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	00db      	lsls	r3, r3, #3
 800232a:	687a      	ldr	r2, [r7, #4]
 800232c:	4413      	add	r3, r2
 800232e:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	4413      	add	r3, r2
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	b29b      	uxth	r3, r3
 8002342:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002346:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800234a:	843b      	strh	r3, [r7, #32]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	461a      	mov	r2, r3
 8002352:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	441a      	add	r2, r3
 800235a:	8c3b      	ldrh	r3, [r7, #32]
 800235c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b03      	cmp	r3, #3
 800236e:	d00c      	beq.n	800238a <PCD_EP_ISR_Handler+0x554>
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	78db      	ldrb	r3, [r3, #3]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d008      	beq.n	800238a <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800237a:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800237c:	2b02      	cmp	r3, #2
 800237e:	d146      	bne.n	800240e <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002380:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002386:	2b00      	cmp	r3, #0
 8002388:	d141      	bne.n	800240e <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002392:	b29b      	uxth	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	00db      	lsls	r3, r3, #3
 800239c:	4413      	add	r3, r2
 800239e:	3302      	adds	r3, #2
 80023a0:	005b      	lsls	r3, r3, #1
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	6812      	ldr	r2, [r2, #0]
 80023a6:	4413      	add	r3, r2
 80023a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023ac:	881b      	ldrh	r3, [r3, #0]
 80023ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b2:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b6:	699a      	ldr	r2, [r3, #24]
 80023b8:	8bfb      	ldrh	r3, [r7, #30]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d906      	bls.n	80023cc <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	699a      	ldr	r2, [r3, #24]
 80023c2:	8bfb      	ldrh	r3, [r7, #30]
 80023c4:	1ad2      	subs	r2, r2, r3
 80023c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c8:	619a      	str	r2, [r3, #24]
 80023ca:	e002      	b.n	80023d2 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80023cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ce:	2200      	movs	r2, #0
 80023d0:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	699b      	ldr	r3, [r3, #24]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	4619      	mov	r1, r3
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 fd12 	bl	8007e0a <HAL_PCD_DataInStageCallback>
 80023e6:	e018      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	8bfb      	ldrh	r3, [r7, #30]
 80023ee:	441a      	add	r2, r3
 80023f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f2:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	69da      	ldr	r2, [r3, #28]
 80023f8:	8bfb      	ldrh	r3, [r7, #30]
 80023fa:	441a      	add	r2, r3
 80023fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023fe:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002406:	4618      	mov	r0, r3
 8002408:	f001 ff96 	bl	8004338 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 800240c:	e005      	b.n	800241a <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800240e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002410:	461a      	mov	r2, r3
 8002412:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f000 f91b 	bl	8002650 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21b      	sxth	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	f6ff ad0a 	blt.w	8001e40 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3738      	adds	r7, #56	; 0x38
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b088      	sub	sp, #32
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	4613      	mov	r3, r2
 8002442:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d07e      	beq.n	800254c <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002456:	b29b      	uxth	r3, r3
 8002458:	461a      	mov	r2, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	781b      	ldrb	r3, [r3, #0]
 800245e:	00db      	lsls	r3, r3, #3
 8002460:	4413      	add	r3, r2
 8002462:	3302      	adds	r3, #2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	6812      	ldr	r2, [r2, #0]
 800246a:	4413      	add	r3, r2
 800246c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002470:	881b      	ldrh	r3, [r3, #0]
 8002472:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002476:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	699a      	ldr	r2, [r3, #24]
 800247c:	8b7b      	ldrh	r3, [r7, #26]
 800247e:	429a      	cmp	r2, r3
 8002480:	d306      	bcc.n	8002490 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	8b7b      	ldrh	r3, [r7, #26]
 8002488:	1ad2      	subs	r2, r2, r3
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	619a      	str	r2, [r3, #24]
 800248e:	e002      	b.n	8002496 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	2200      	movs	r2, #0
 8002494:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	699b      	ldr	r3, [r3, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d123      	bne.n	80024e6 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	461a      	mov	r2, r3
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4413      	add	r3, r2
 80024ac:	881b      	ldrh	r3, [r3, #0]
 80024ae:	b29b      	uxth	r3, r3
 80024b0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b8:	833b      	strh	r3, [r7, #24]
 80024ba:	8b3b      	ldrh	r3, [r7, #24]
 80024bc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024c0:	833b      	strh	r3, [r7, #24]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	441a      	add	r2, r3
 80024d0:	8b3b      	ldrh	r3, [r7, #24]
 80024d2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024d6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024e2:	b29b      	uxth	r3, r3
 80024e4:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01f      	beq.n	8002530 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	461a      	mov	r2, r3
 80024f6:	68bb      	ldr	r3, [r7, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	881b      	ldrh	r3, [r3, #0]
 8002500:	b29b      	uxth	r3, r3
 8002502:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002506:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800250a:	82fb      	strh	r3, [r7, #22]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	461a      	mov	r2, r3
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	441a      	add	r2, r3
 800251a:	8afb      	ldrh	r3, [r7, #22]
 800251c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002520:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002524:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002528:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800252c:	b29b      	uxth	r3, r3
 800252e:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002530:	8b7b      	ldrh	r3, [r7, #26]
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 8087 	beq.w	8002646 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6818      	ldr	r0, [r3, #0]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	6959      	ldr	r1, [r3, #20]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	891a      	ldrh	r2, [r3, #8]
 8002544:	8b7b      	ldrh	r3, [r7, #26]
 8002546:	f003 feb2 	bl	80062ae <USB_ReadPMA>
 800254a:	e07c      	b.n	8002646 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002554:	b29b      	uxth	r3, r3
 8002556:	461a      	mov	r2, r3
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	00db      	lsls	r3, r3, #3
 800255e:	4413      	add	r3, r2
 8002560:	3306      	adds	r3, #6
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	68fa      	ldr	r2, [r7, #12]
 8002566:	6812      	ldr	r2, [r2, #0]
 8002568:	4413      	add	r3, r2
 800256a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800256e:	881b      	ldrh	r3, [r3, #0]
 8002570:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002574:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	699a      	ldr	r2, [r3, #24]
 800257a:	8b7b      	ldrh	r3, [r7, #26]
 800257c:	429a      	cmp	r2, r3
 800257e:	d306      	bcc.n	800258e <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	699a      	ldr	r2, [r3, #24]
 8002584:	8b7b      	ldrh	r3, [r7, #26]
 8002586:	1ad2      	subs	r2, r2, r3
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	619a      	str	r2, [r3, #24]
 800258c:	e002      	b.n	8002594 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	699b      	ldr	r3, [r3, #24]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d123      	bne.n	80025e4 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	781b      	ldrb	r3, [r3, #0]
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	4413      	add	r3, r2
 80025aa:	881b      	ldrh	r3, [r3, #0]
 80025ac:	b29b      	uxth	r3, r3
 80025ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025b6:	83fb      	strh	r3, [r7, #30]
 80025b8:	8bfb      	ldrh	r3, [r7, #30]
 80025ba:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025be:	83fb      	strh	r3, [r7, #30]
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	461a      	mov	r2, r3
 80025c6:	68bb      	ldr	r3, [r7, #8]
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	441a      	add	r2, r3
 80025ce:	8bfb      	ldrh	r3, [r7, #30]
 80025d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025e4:	88fb      	ldrh	r3, [r7, #6]
 80025e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d11f      	bne.n	800262e <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002604:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002608:	83bb      	strh	r3, [r7, #28]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	461a      	mov	r2, r3
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	441a      	add	r2, r3
 8002618:	8bbb      	ldrh	r3, [r7, #28]
 800261a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800261e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002622:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002626:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800262a:	b29b      	uxth	r3, r3
 800262c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 800262e:	8b7b      	ldrh	r3, [r7, #26]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d008      	beq.n	8002646 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6818      	ldr	r0, [r3, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	6959      	ldr	r1, [r3, #20]
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	895a      	ldrh	r2, [r3, #10]
 8002640:	8b7b      	ldrh	r3, [r7, #26]
 8002642:	f003 fe34 	bl	80062ae <USB_ReadPMA>
    }
  }

  return count;
 8002646:	8b7b      	ldrh	r3, [r7, #26]
}
 8002648:	4618      	mov	r0, r3
 800264a:	3720      	adds	r7, #32
 800264c:	46bd      	mov	sp, r7
 800264e:	bd80      	pop	{r7, pc}

08002650 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b0a2      	sub	sp, #136	; 0x88
 8002654:	af00      	add	r7, sp, #0
 8002656:	60f8      	str	r0, [r7, #12]
 8002658:	60b9      	str	r1, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800265e:	88fb      	ldrh	r3, [r7, #6]
 8002660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 81c7 	beq.w	80029f8 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002672:	b29b      	uxth	r3, r3
 8002674:	461a      	mov	r2, r3
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	00db      	lsls	r3, r3, #3
 800267c:	4413      	add	r3, r2
 800267e:	3302      	adds	r3, #2
 8002680:	005b      	lsls	r3, r3, #1
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	6812      	ldr	r2, [r2, #0]
 8002686:	4413      	add	r3, r2
 8002688:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002692:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800269e:	429a      	cmp	r2, r3
 80026a0:	d907      	bls.n	80026b2 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80026a2:	68bb      	ldr	r3, [r7, #8]
 80026a4:	699a      	ldr	r2, [r3, #24]
 80026a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026aa:	1ad2      	subs	r2, r2, r3
 80026ac:	68bb      	ldr	r3, [r7, #8]
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	e002      	b.n	80026b8 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2200      	movs	r2, #0
 80026b6:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f040 80b9 	bne.w	8002834 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	785b      	ldrb	r3, [r3, #1]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d126      	bne.n	8002718 <HAL_PCD_EP_DB_Transmit+0xc8>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d8:	b29b      	uxth	r3, r3
 80026da:	461a      	mov	r2, r3
 80026dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026de:	4413      	add	r3, r2
 80026e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	011a      	lsls	r2, r3, #4
 80026e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ea:	4413      	add	r3, r2
 80026ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026f0:	627b      	str	r3, [r7, #36]	; 0x24
 80026f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f4:	881b      	ldrh	r3, [r3, #0]
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002700:	801a      	strh	r2, [r3, #0]
 8002702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800270c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002710:	b29a      	uxth	r2, r3
 8002712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002714:	801a      	strh	r2, [r3, #0]
 8002716:	e01a      	b.n	800274e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	785b      	ldrb	r3, [r3, #1]
 800271c:	2b01      	cmp	r3, #1
 800271e:	d116      	bne.n	800274e <HAL_PCD_EP_DB_Transmit+0xfe>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	633b      	str	r3, [r7, #48]	; 0x30
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800272e:	b29b      	uxth	r3, r3
 8002730:	461a      	mov	r2, r3
 8002732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002734:	4413      	add	r3, r2
 8002736:	633b      	str	r3, [r7, #48]	; 0x30
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	781b      	ldrb	r3, [r3, #0]
 800273c:	011a      	lsls	r2, r3, #4
 800273e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002740:	4413      	add	r3, r2
 8002742:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002746:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274a:	2200      	movs	r2, #0
 800274c:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	623b      	str	r3, [r7, #32]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	785b      	ldrb	r3, [r3, #1]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d126      	bne.n	80027aa <HAL_PCD_EP_DB_Transmit+0x15a>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	61bb      	str	r3, [r7, #24]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800276a:	b29b      	uxth	r3, r3
 800276c:	461a      	mov	r2, r3
 800276e:	69bb      	ldr	r3, [r7, #24]
 8002770:	4413      	add	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	011a      	lsls	r2, r3, #4
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	4413      	add	r3, r2
 800277e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002782:	617b      	str	r3, [r7, #20]
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	881b      	ldrh	r3, [r3, #0]
 8002788:	b29b      	uxth	r3, r3
 800278a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800278e:	b29a      	uxth	r2, r3
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	801a      	strh	r2, [r3, #0]
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	881b      	ldrh	r3, [r3, #0]
 8002798:	b29b      	uxth	r3, r3
 800279a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800279e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	697b      	ldr	r3, [r7, #20]
 80027a6:	801a      	strh	r2, [r3, #0]
 80027a8:	e017      	b.n	80027da <HAL_PCD_EP_DB_Transmit+0x18a>
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	785b      	ldrb	r3, [r3, #1]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d113      	bne.n	80027da <HAL_PCD_EP_DB_Transmit+0x18a>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	461a      	mov	r2, r3
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	4413      	add	r3, r2
 80027c2:	623b      	str	r3, [r7, #32]
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	781b      	ldrb	r3, [r3, #0]
 80027c8:	011a      	lsls	r2, r3, #4
 80027ca:	6a3b      	ldr	r3, [r7, #32]
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d2:	61fb      	str	r3, [r7, #28]
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	2200      	movs	r2, #0
 80027d8:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	4619      	mov	r1, r3
 80027e0:	68f8      	ldr	r0, [r7, #12]
 80027e2:	f005 fb12 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027e6:	88fb      	ldrh	r3, [r7, #6]
 80027e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 82d4 	beq.w	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	461a      	mov	r2, r3
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002808:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280c:	827b      	strh	r3, [r7, #18]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461a      	mov	r2, r3
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	441a      	add	r2, r3
 800281c:	8a7b      	ldrh	r3, [r7, #18]
 800281e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002822:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002826:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800282a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800282e:	b29b      	uxth	r3, r3
 8002830:	8013      	strh	r3, [r2, #0]
 8002832:	e2b2      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d021      	beq.n	8002882 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	461a      	mov	r2, r3
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	881b      	ldrh	r3, [r3, #0]
 800284e:	b29b      	uxth	r3, r3
 8002850:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002854:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002858:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	461a      	mov	r2, r3
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	441a      	add	r2, r3
 800286a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800286e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002872:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002876:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800287a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800287e:	b29b      	uxth	r3, r3
 8002880:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002882:	68bb      	ldr	r3, [r7, #8]
 8002884:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002888:	2b01      	cmp	r3, #1
 800288a:	f040 8286 	bne.w	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	695a      	ldr	r2, [r3, #20]
 8002892:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002896:	441a      	add	r2, r3
 8002898:	68bb      	ldr	r3, [r7, #8]
 800289a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	69da      	ldr	r2, [r3, #28]
 80028a0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028a4:	441a      	add	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	6a1a      	ldr	r2, [r3, #32]
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d309      	bcc.n	80028ca <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80028b6:	68bb      	ldr	r3, [r7, #8]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	6a1a      	ldr	r2, [r3, #32]
 80028c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028c2:	1ad2      	subs	r2, r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	621a      	str	r2, [r3, #32]
 80028c8:	e015      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d107      	bne.n	80028e2 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80028d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028d6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	2200      	movs	r2, #0
 80028dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028e0:	e009      	b.n	80028f6 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2200      	movs	r2, #0
 80028f4:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	785b      	ldrb	r3, [r3, #1]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d155      	bne.n	80029aa <HAL_PCD_EP_DB_Transmit+0x35a>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	63bb      	str	r3, [r7, #56]	; 0x38
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800290c:	b29b      	uxth	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002912:	4413      	add	r3, r2
 8002914:	63bb      	str	r3, [r7, #56]	; 0x38
 8002916:	68bb      	ldr	r3, [r7, #8]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	011a      	lsls	r2, r3, #4
 800291c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800291e:	4413      	add	r3, r2
 8002920:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
 8002926:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002928:	2b00      	cmp	r3, #0
 800292a:	d112      	bne.n	8002952 <HAL_PCD_EP_DB_Transmit+0x302>
 800292c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800292e:	881b      	ldrh	r3, [r3, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002936:	b29a      	uxth	r2, r3
 8002938:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293a:	801a      	strh	r2, [r3, #0]
 800293c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	b29b      	uxth	r3, r3
 8002942:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002946:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800294a:	b29a      	uxth	r2, r3
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	801a      	strh	r2, [r3, #0]
 8002950:	e047      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x392>
 8002952:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002954:	2b3e      	cmp	r3, #62	; 0x3e
 8002956:	d811      	bhi.n	800297c <HAL_PCD_EP_DB_Transmit+0x32c>
 8002958:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800295a:	085b      	lsrs	r3, r3, #1
 800295c:	64bb      	str	r3, [r7, #72]	; 0x48
 800295e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d002      	beq.n	800296e <HAL_PCD_EP_DB_Transmit+0x31e>
 8002968:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800296a:	3301      	adds	r3, #1
 800296c:	64bb      	str	r3, [r7, #72]	; 0x48
 800296e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002970:	b29b      	uxth	r3, r3
 8002972:	029b      	lsls	r3, r3, #10
 8002974:	b29a      	uxth	r2, r3
 8002976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002978:	801a      	strh	r2, [r3, #0]
 800297a:	e032      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x392>
 800297c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297e:	095b      	lsrs	r3, r3, #5
 8002980:	64bb      	str	r3, [r7, #72]	; 0x48
 8002982:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002984:	f003 031f 	and.w	r3, r3, #31
 8002988:	2b00      	cmp	r3, #0
 800298a:	d102      	bne.n	8002992 <HAL_PCD_EP_DB_Transmit+0x342>
 800298c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298e:	3b01      	subs	r3, #1
 8002990:	64bb      	str	r3, [r7, #72]	; 0x48
 8002992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002994:	b29b      	uxth	r3, r3
 8002996:	029b      	lsls	r3, r3, #10
 8002998:	b29b      	uxth	r3, r3
 800299a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800299e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029a6:	801a      	strh	r2, [r3, #0]
 80029a8:	e01b      	b.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	785b      	ldrb	r3, [r3, #1]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d117      	bne.n	80029e2 <HAL_PCD_EP_DB_Transmit+0x392>
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	643b      	str	r3, [r7, #64]	; 0x40
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029c6:	4413      	add	r3, r2
 80029c8:	643b      	str	r3, [r7, #64]	; 0x40
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	011a      	lsls	r2, r3, #4
 80029d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029d2:	4413      	add	r3, r2
 80029d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029e0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6818      	ldr	r0, [r3, #0]
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	6959      	ldr	r1, [r3, #20]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	891a      	ldrh	r2, [r3, #8]
 80029ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	f003 fc17 	bl	8006224 <USB_WritePMA>
 80029f6:	e1d0      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	461a      	mov	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	00db      	lsls	r3, r3, #3
 8002a0a:	4413      	add	r3, r2
 8002a0c:	3306      	adds	r3, #6
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	68fa      	ldr	r2, [r7, #12]
 8002a12:	6812      	ldr	r2, [r2, #0]
 8002a14:	4413      	add	r3, r2
 8002a16:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a20:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	699a      	ldr	r2, [r3, #24]
 8002a28:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d307      	bcc.n	8002a40 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	699a      	ldr	r2, [r3, #24]
 8002a34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a38:	1ad2      	subs	r2, r2, r3
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	619a      	str	r2, [r3, #24]
 8002a3e:	e002      	b.n	8002a46 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 80c4 	bne.w	8002bd8 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	785b      	ldrb	r3, [r3, #1]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d126      	bne.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x456>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6c:	4413      	add	r3, r2
 8002a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	011a      	lsls	r2, r3, #4
 8002a76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a78:	4413      	add	r3, r2
 8002a7a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a7e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a8a:	b29a      	uxth	r2, r3
 8002a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8e:	801a      	strh	r2, [r3, #0]
 8002a90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a92:	881b      	ldrh	r3, [r3, #0]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a9a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a9e:	b29a      	uxth	r2, r3
 8002aa0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002aa2:	801a      	strh	r2, [r3, #0]
 8002aa4:	e01a      	b.n	8002adc <HAL_PCD_EP_DB_Transmit+0x48c>
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	785b      	ldrb	r3, [r3, #1]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d116      	bne.n	8002adc <HAL_PCD_EP_DB_Transmit+0x48c>
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	461a      	mov	r2, r3
 8002ac0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac2:	4413      	add	r3, r2
 8002ac4:	677b      	str	r3, [r7, #116]	; 0x74
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	011a      	lsls	r2, r3, #4
 8002acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ace:	4413      	add	r3, r2
 8002ad0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ad4:	673b      	str	r3, [r7, #112]	; 0x70
 8002ad6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad8:	2200      	movs	r2, #0
 8002ada:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d12f      	bne.n	8002b4a <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	461a      	mov	r2, r3
 8002afe:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b02:	4413      	add	r3, r2
 8002b04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	011a      	lsls	r2, r3, #4
 8002b0e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b12:	4413      	add	r3, r2
 8002b14:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2e:	801a      	strh	r2, [r3, #0]
 8002b30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b3c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b40:	b29a      	uxth	r2, r3
 8002b42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b46:	801a      	strh	r2, [r3, #0]
 8002b48:	e017      	b.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	785b      	ldrb	r3, [r3, #1]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d113      	bne.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b5a:	b29b      	uxth	r3, r3
 8002b5c:	461a      	mov	r2, r3
 8002b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b60:	4413      	add	r3, r2
 8002b62:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	011a      	lsls	r2, r3, #4
 8002b6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b6c:	4413      	add	r3, r2
 8002b6e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b72:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b74:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b76:	2200      	movs	r2, #0
 8002b78:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	781b      	ldrb	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	68f8      	ldr	r0, [r7, #12]
 8002b82:	f005 f942 	bl	8007e0a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b86:	88fb      	ldrh	r3, [r7, #6]
 8002b88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	f040 8104 	bne.w	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	881b      	ldrh	r3, [r3, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bac:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	009b      	lsls	r3, r3, #2
 8002bbc:	441a      	add	r2, r3
 8002bbe:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002bc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	8013      	strh	r3, [r2, #0]
 8002bd6:	e0e0      	b.n	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bd8:	88fb      	ldrh	r3, [r7, #6]
 8002bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d121      	bne.n	8002c26 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	461a      	mov	r2, r3
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bfc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	461a      	mov	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	441a      	add	r2, r3
 8002c0e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c1a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c26:	68bb      	ldr	r3, [r7, #8]
 8002c28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 80b4 	bne.w	8002d9a <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	695a      	ldr	r2, [r3, #20]
 8002c36:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	441a      	add	r2, r3
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c48:	441a      	add	r2, r3
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	6a1a      	ldr	r2, [r3, #32]
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d309      	bcc.n	8002c6e <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c66:	1ad2      	subs	r2, r2, r3
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	621a      	str	r2, [r3, #32]
 8002c6c:	e015      	b.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d107      	bne.n	8002c86 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002c76:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c7a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c84:	e009      	b.n	8002c9a <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2200      	movs	r2, #0
 8002c90:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	667b      	str	r3, [r7, #100]	; 0x64
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	785b      	ldrb	r3, [r3, #1]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d155      	bne.n	8002d54 <HAL_PCD_EP_DB_Transmit+0x704>
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cb6:	b29b      	uxth	r3, r3
 8002cb8:	461a      	mov	r2, r3
 8002cba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cbc:	4413      	add	r3, r2
 8002cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	011a      	lsls	r2, r3, #4
 8002cc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc8:	4413      	add	r3, r2
 8002cca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cce:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cd0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d112      	bne.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002cd6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	b29b      	uxth	r3, r3
 8002cdc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ce0:	b29a      	uxth	r2, r3
 8002ce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce4:	801a      	strh	r2, [r3, #0]
 8002ce6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce8:	881b      	ldrh	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cf0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf8:	801a      	strh	r2, [r3, #0]
 8002cfa:	e044      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002cfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfe:	2b3e      	cmp	r3, #62	; 0x3e
 8002d00:	d811      	bhi.n	8002d26 <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d04:	085b      	lsrs	r3, r3, #1
 8002d06:	657b      	str	r3, [r7, #84]	; 0x54
 8002d08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d002      	beq.n	8002d18 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d14:	3301      	adds	r3, #1
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
 8002d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	029b      	lsls	r3, r3, #10
 8002d1e:	b29a      	uxth	r2, r3
 8002d20:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d22:	801a      	strh	r2, [r3, #0]
 8002d24:	e02f      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d28:	095b      	lsrs	r3, r3, #5
 8002d2a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d2e:	f003 031f 	and.w	r3, r3, #31
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d102      	bne.n	8002d3c <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d38:	3b01      	subs	r3, #1
 8002d3a:	657b      	str	r3, [r7, #84]	; 0x54
 8002d3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	029b      	lsls	r3, r3, #10
 8002d42:	b29b      	uxth	r3, r3
 8002d44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d4c:	b29a      	uxth	r2, r3
 8002d4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d50:	801a      	strh	r2, [r3, #0]
 8002d52:	e018      	b.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	785b      	ldrb	r3, [r3, #1]
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d114      	bne.n	8002d86 <HAL_PCD_EP_DB_Transmit+0x736>
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d64:	b29b      	uxth	r3, r3
 8002d66:	461a      	mov	r2, r3
 8002d68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6a:	4413      	add	r3, r2
 8002d6c:	667b      	str	r3, [r7, #100]	; 0x64
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	011a      	lsls	r2, r3, #4
 8002d74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d76:	4413      	add	r3, r2
 8002d78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d7c:	663b      	str	r3, [r7, #96]	; 0x60
 8002d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d80:	b29a      	uxth	r2, r3
 8002d82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d84:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6818      	ldr	r0, [r3, #0]
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	6959      	ldr	r1, [r3, #20]
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	895a      	ldrh	r2, [r3, #10]
 8002d92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d94:	b29b      	uxth	r3, r3
 8002d96:	f003 fa45 	bl	8006224 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	461a      	mov	r2, r3
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	881b      	ldrh	r3, [r3, #0]
 8002daa:	b29b      	uxth	r3, r3
 8002dac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	823b      	strh	r3, [r7, #16]
 8002db6:	8a3b      	ldrh	r3, [r7, #16]
 8002db8:	f083 0310 	eor.w	r3, r3, #16
 8002dbc:	823b      	strh	r3, [r7, #16]
 8002dbe:	8a3b      	ldrh	r3, [r7, #16]
 8002dc0:	f083 0320 	eor.w	r3, r3, #32
 8002dc4:	823b      	strh	r3, [r7, #16]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	441a      	add	r2, r3
 8002dd4:	8a3b      	ldrh	r3, [r7, #16]
 8002dd6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dda:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002dea:	2300      	movs	r3, #0
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3788      	adds	r7, #136	; 0x88
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	607b      	str	r3, [r7, #4]
 8002dfe:	460b      	mov	r3, r1
 8002e00:	817b      	strh	r3, [r7, #10]
 8002e02:	4613      	mov	r3, r2
 8002e04:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002e06:	897b      	ldrh	r3, [r7, #10]
 8002e08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e12:	897b      	ldrh	r3, [r7, #10]
 8002e14:	f003 0307 	and.w	r3, r3, #7
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	4413      	add	r3, r2
 8002e26:	617b      	str	r3, [r7, #20]
 8002e28:	e009      	b.n	8002e3e <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e2a:	897a      	ldrh	r2, [r7, #10]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4413      	add	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4413      	add	r3, r2
 8002e3c:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e3e:	893b      	ldrh	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d107      	bne.n	8002e54 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	2200      	movs	r2, #0
 8002e48:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	80da      	strh	r2, [r3, #6]
 8002e52:	e00b      	b.n	8002e6c <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	2201      	movs	r2, #1
 8002e58:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	b29a      	uxth	r2, r3
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	0c1b      	lsrs	r3, r3, #16
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	697b      	ldr	r3, [r7, #20]
 8002e6a:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	371c      	adds	r7, #28
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	e272      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f000 8087 	beq.w	8002fa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e98:	4b92      	ldr	r3, [pc, #584]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f003 030c 	and.w	r3, r3, #12
 8002ea0:	2b04      	cmp	r3, #4
 8002ea2:	d00c      	beq.n	8002ebe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ea4:	4b8f      	ldr	r3, [pc, #572]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d112      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
 8002eb0:	4b8c      	ldr	r3, [pc, #560]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d10b      	bne.n	8002ed6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ebe:	4b89      	ldr	r3, [pc, #548]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d06c      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d168      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e24c      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ede:	d106      	bne.n	8002eee <HAL_RCC_OscConfig+0x76>
 8002ee0:	4b80      	ldr	r3, [pc, #512]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	4a7f      	ldr	r2, [pc, #508]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ee6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eea:	6013      	str	r3, [r2, #0]
 8002eec:	e02e      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10c      	bne.n	8002f10 <HAL_RCC_OscConfig+0x98>
 8002ef6:	4b7b      	ldr	r3, [pc, #492]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a7a      	ldr	r2, [pc, #488]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	4b78      	ldr	r3, [pc, #480]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a77      	ldr	r2, [pc, #476]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f0c:	6013      	str	r3, [r2, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f18:	d10c      	bne.n	8002f34 <HAL_RCC_OscConfig+0xbc>
 8002f1a:	4b72      	ldr	r3, [pc, #456]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a71      	ldr	r2, [pc, #452]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f24:	6013      	str	r3, [r2, #0]
 8002f26:	4b6f      	ldr	r3, [pc, #444]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a6e      	ldr	r2, [pc, #440]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e00b      	b.n	8002f4c <HAL_RCC_OscConfig+0xd4>
 8002f34:	4b6b      	ldr	r3, [pc, #428]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a6a      	ldr	r2, [pc, #424]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f3e:	6013      	str	r3, [r2, #0]
 8002f40:	4b68      	ldr	r3, [pc, #416]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a67      	ldr	r2, [pc, #412]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d013      	beq.n	8002f7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f54:	f7fe f9b6 	bl	80012c4 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f5c:	f7fe f9b2 	bl	80012c4 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b64      	cmp	r3, #100	; 0x64
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e200      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f6e:	4b5d      	ldr	r3, [pc, #372]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe4>
 8002f7a:	e014      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f7c:	f7fe f9a2 	bl	80012c4 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f84:	f7fe f99e 	bl	80012c4 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b64      	cmp	r3, #100	; 0x64
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e1ec      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f96:	4b53      	ldr	r3, [pc, #332]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x10c>
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d063      	beq.n	800307a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fb2:	4b4c      	ldr	r3, [pc, #304]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d00b      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fbe:	4b49      	ldr	r3, [pc, #292]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f003 030c 	and.w	r3, r3, #12
 8002fc6:	2b08      	cmp	r3, #8
 8002fc8:	d11c      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
 8002fca:	4b46      	ldr	r3, [pc, #280]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d116      	bne.n	8003004 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fd6:	4b43      	ldr	r3, [pc, #268]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d001      	beq.n	8002fee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e1c0      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fee:	4b3d      	ldr	r3, [pc, #244]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	695b      	ldr	r3, [r3, #20]
 8002ffa:	00db      	lsls	r3, r3, #3
 8002ffc:	4939      	ldr	r1, [pc, #228]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	e03a      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800300c:	4b36      	ldr	r3, [pc, #216]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 800300e:	2201      	movs	r2, #1
 8003010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003012:	f7fe f957 	bl	80012c4 <HAL_GetTick>
 8003016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003018:	e008      	b.n	800302c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800301a:	f7fe f953 	bl	80012c4 <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	1ad3      	subs	r3, r2, r3
 8003024:	2b02      	cmp	r3, #2
 8003026:	d901      	bls.n	800302c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	e1a1      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800302c:	4b2d      	ldr	r3, [pc, #180]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0302 	and.w	r3, r3, #2
 8003034:	2b00      	cmp	r3, #0
 8003036:	d0f0      	beq.n	800301a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003038:	4b2a      	ldr	r3, [pc, #168]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	4927      	ldr	r1, [pc, #156]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003048:	4313      	orrs	r3, r2
 800304a:	600b      	str	r3, [r1, #0]
 800304c:	e015      	b.n	800307a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800304e:	4b26      	ldr	r3, [pc, #152]	; (80030e8 <HAL_RCC_OscConfig+0x270>)
 8003050:	2200      	movs	r2, #0
 8003052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003054:	f7fe f936 	bl	80012c4 <HAL_GetTick>
 8003058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800305a:	e008      	b.n	800306e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800305c:	f7fe f932 	bl	80012c4 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	1ad3      	subs	r3, r2, r3
 8003066:	2b02      	cmp	r3, #2
 8003068:	d901      	bls.n	800306e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e180      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0302 	and.w	r3, r3, #2
 8003076:	2b00      	cmp	r3, #0
 8003078:	d1f0      	bne.n	800305c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0308 	and.w	r3, r3, #8
 8003082:	2b00      	cmp	r3, #0
 8003084:	d03a      	beq.n	80030fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d019      	beq.n	80030c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800308e:	4b17      	ldr	r3, [pc, #92]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 8003090:	2201      	movs	r2, #1
 8003092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003094:	f7fe f916 	bl	80012c4 <HAL_GetTick>
 8003098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800309a:	e008      	b.n	80030ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800309c:	f7fe f912 	bl	80012c4 <HAL_GetTick>
 80030a0:	4602      	mov	r2, r0
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d901      	bls.n	80030ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030aa:	2303      	movs	r3, #3
 80030ac:	e160      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030ae:	4b0d      	ldr	r3, [pc, #52]	; (80030e4 <HAL_RCC_OscConfig+0x26c>)
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	f003 0302 	and.w	r3, r3, #2
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0f0      	beq.n	800309c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030ba:	2001      	movs	r0, #1
 80030bc:	f000 faa6 	bl	800360c <RCC_Delay>
 80030c0:	e01c      	b.n	80030fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030c2:	4b0a      	ldr	r3, [pc, #40]	; (80030ec <HAL_RCC_OscConfig+0x274>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c8:	f7fe f8fc 	bl	80012c4 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030ce:	e00f      	b.n	80030f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030d0:	f7fe f8f8 	bl	80012c4 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d908      	bls.n	80030f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e146      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
 80030e2:	bf00      	nop
 80030e4:	40021000 	.word	0x40021000
 80030e8:	42420000 	.word	0x42420000
 80030ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030f0:	4b92      	ldr	r3, [pc, #584]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80030f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d1e9      	bne.n	80030d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0304 	and.w	r3, r3, #4
 8003104:	2b00      	cmp	r3, #0
 8003106:	f000 80a6 	beq.w	8003256 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800310e:	4b8b      	ldr	r3, [pc, #556]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d10d      	bne.n	8003136 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800311a:	4b88      	ldr	r3, [pc, #544]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	4a87      	ldr	r2, [pc, #540]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003124:	61d3      	str	r3, [r2, #28]
 8003126:	4b85      	ldr	r3, [pc, #532]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003128:	69db      	ldr	r3, [r3, #28]
 800312a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800312e:	60bb      	str	r3, [r7, #8]
 8003130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003132:	2301      	movs	r3, #1
 8003134:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003136:	4b82      	ldr	r3, [pc, #520]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800313e:	2b00      	cmp	r3, #0
 8003140:	d118      	bne.n	8003174 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003142:	4b7f      	ldr	r3, [pc, #508]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a7e      	ldr	r2, [pc, #504]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 8003148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800314c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800314e:	f7fe f8b9 	bl	80012c4 <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003154:	e008      	b.n	8003168 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003156:	f7fe f8b5 	bl	80012c4 <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b64      	cmp	r3, #100	; 0x64
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e103      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003168:	4b75      	ldr	r3, [pc, #468]	; (8003340 <HAL_RCC_OscConfig+0x4c8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003170:	2b00      	cmp	r3, #0
 8003172:	d0f0      	beq.n	8003156 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d106      	bne.n	800318a <HAL_RCC_OscConfig+0x312>
 800317c:	4b6f      	ldr	r3, [pc, #444]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800317e:	6a1b      	ldr	r3, [r3, #32]
 8003180:	4a6e      	ldr	r2, [pc, #440]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003182:	f043 0301 	orr.w	r3, r3, #1
 8003186:	6213      	str	r3, [r2, #32]
 8003188:	e02d      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_RCC_OscConfig+0x334>
 8003192:	4b6a      	ldr	r3, [pc, #424]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003194:	6a1b      	ldr	r3, [r3, #32]
 8003196:	4a69      	ldr	r2, [pc, #420]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003198:	f023 0301 	bic.w	r3, r3, #1
 800319c:	6213      	str	r3, [r2, #32]
 800319e:	4b67      	ldr	r3, [pc, #412]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	4a66      	ldr	r2, [pc, #408]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031a4:	f023 0304 	bic.w	r3, r3, #4
 80031a8:	6213      	str	r3, [r2, #32]
 80031aa:	e01c      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	68db      	ldr	r3, [r3, #12]
 80031b0:	2b05      	cmp	r3, #5
 80031b2:	d10c      	bne.n	80031ce <HAL_RCC_OscConfig+0x356>
 80031b4:	4b61      	ldr	r3, [pc, #388]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4a60      	ldr	r2, [pc, #384]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	f043 0304 	orr.w	r3, r3, #4
 80031be:	6213      	str	r3, [r2, #32]
 80031c0:	4b5e      	ldr	r3, [pc, #376]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031c2:	6a1b      	ldr	r3, [r3, #32]
 80031c4:	4a5d      	ldr	r2, [pc, #372]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031c6:	f043 0301 	orr.w	r3, r3, #1
 80031ca:	6213      	str	r3, [r2, #32]
 80031cc:	e00b      	b.n	80031e6 <HAL_RCC_OscConfig+0x36e>
 80031ce:	4b5b      	ldr	r3, [pc, #364]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	4a5a      	ldr	r2, [pc, #360]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	f023 0301 	bic.w	r3, r3, #1
 80031d8:	6213      	str	r3, [r2, #32]
 80031da:	4b58      	ldr	r3, [pc, #352]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	4a57      	ldr	r2, [pc, #348]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80031e0:	f023 0304 	bic.w	r3, r3, #4
 80031e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d015      	beq.n	800321a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ee:	f7fe f869 	bl	80012c4 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031f4:	e00a      	b.n	800320c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031f6:	f7fe f865 	bl	80012c4 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	f241 3288 	movw	r2, #5000	; 0x1388
 8003204:	4293      	cmp	r3, r2
 8003206:	d901      	bls.n	800320c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003208:	2303      	movs	r3, #3
 800320a:	e0b1      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800320c:	4b4b      	ldr	r3, [pc, #300]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800320e:	6a1b      	ldr	r3, [r3, #32]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d0ee      	beq.n	80031f6 <HAL_RCC_OscConfig+0x37e>
 8003218:	e014      	b.n	8003244 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7fe f853 	bl	80012c4 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7fe f84f 	bl	80012c4 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e09b      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003238:	4b40      	ldr	r3, [pc, #256]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d1ee      	bne.n	8003222 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003244:	7dfb      	ldrb	r3, [r7, #23]
 8003246:	2b01      	cmp	r3, #1
 8003248:	d105      	bne.n	8003256 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800324a:	4b3c      	ldr	r3, [pc, #240]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4a3b      	ldr	r2, [pc, #236]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003250:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003254:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b00      	cmp	r3, #0
 800325c:	f000 8087 	beq.w	800336e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003260:	4b36      	ldr	r3, [pc, #216]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f003 030c 	and.w	r3, r3, #12
 8003268:	2b08      	cmp	r3, #8
 800326a:	d061      	beq.n	8003330 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d146      	bne.n	8003302 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003274:	4b33      	ldr	r3, [pc, #204]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 8003276:	2200      	movs	r2, #0
 8003278:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800327a:	f7fe f823 	bl	80012c4 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe f81f 	bl	80012c4 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e06d      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003294:	4b29      	ldr	r3, [pc, #164]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d1f0      	bne.n	8003282 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a8:	d108      	bne.n	80032bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032aa:	4b24      	ldr	r3, [pc, #144]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	4921      	ldr	r1, [pc, #132]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032bc:	4b1f      	ldr	r3, [pc, #124]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a19      	ldr	r1, [r3, #32]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032cc:	430b      	orrs	r3, r1
 80032ce:	491b      	ldr	r1, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032d4:	4b1b      	ldr	r3, [pc, #108]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	2201      	movs	r2, #1
 80032d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032da:	f7fd fff3 	bl	80012c4 <HAL_GetTick>
 80032de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032e0:	e008      	b.n	80032f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032e2:	f7fd ffef 	bl	80012c4 <HAL_GetTick>
 80032e6:	4602      	mov	r2, r0
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	2b02      	cmp	r3, #2
 80032ee:	d901      	bls.n	80032f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e03d      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032f4:	4b11      	ldr	r3, [pc, #68]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d0f0      	beq.n	80032e2 <HAL_RCC_OscConfig+0x46a>
 8003300:	e035      	b.n	800336e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003302:	4b10      	ldr	r3, [pc, #64]	; (8003344 <HAL_RCC_OscConfig+0x4cc>)
 8003304:	2200      	movs	r2, #0
 8003306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003308:	f7fd ffdc 	bl	80012c4 <HAL_GetTick>
 800330c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800330e:	e008      	b.n	8003322 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003310:	f7fd ffd8 	bl	80012c4 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d901      	bls.n	8003322 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	e026      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003322:	4b06      	ldr	r3, [pc, #24]	; (800333c <HAL_RCC_OscConfig+0x4c4>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d1f0      	bne.n	8003310 <HAL_RCC_OscConfig+0x498>
 800332e:	e01e      	b.n	800336e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	69db      	ldr	r3, [r3, #28]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d107      	bne.n	8003348 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e019      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
 800333c:	40021000 	.word	0x40021000
 8003340:	40007000 	.word	0x40007000
 8003344:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_OscConfig+0x500>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6a1b      	ldr	r3, [r3, #32]
 8003358:	429a      	cmp	r2, r3
 800335a:	d106      	bne.n	800336a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003366:	429a      	cmp	r2, r3
 8003368:	d001      	beq.n	800336e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e000      	b.n	8003370 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800336e:	2300      	movs	r3, #0
}
 8003370:	4618      	mov	r0, r3
 8003372:	3718      	adds	r7, #24
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40021000 	.word	0x40021000

0800337c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0d0      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003390:	4b6a      	ldr	r3, [pc, #424]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	429a      	cmp	r2, r3
 800339c:	d910      	bls.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800339e:	4b67      	ldr	r3, [pc, #412]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f023 0207 	bic.w	r2, r3, #7
 80033a6:	4965      	ldr	r1, [pc, #404]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ae:	4b63      	ldr	r3, [pc, #396]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0307 	and.w	r3, r3, #7
 80033b6:	683a      	ldr	r2, [r7, #0]
 80033b8:	429a      	cmp	r2, r3
 80033ba:	d001      	beq.n	80033c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e0b8      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d020      	beq.n	800340e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d8:	4b59      	ldr	r3, [pc, #356]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0308 	and.w	r3, r3, #8
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d005      	beq.n	80033fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033f0:	4b53      	ldr	r3, [pc, #332]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	4a52      	ldr	r2, [pc, #328]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033fc:	4b50      	ldr	r3, [pc, #320]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	494d      	ldr	r1, [pc, #308]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	4313      	orrs	r3, r2
 800340c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b00      	cmp	r3, #0
 8003418:	d040      	beq.n	800349c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b01      	cmp	r3, #1
 8003420:	d107      	bne.n	8003432 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	4b47      	ldr	r3, [pc, #284]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d115      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	e07f      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	2b02      	cmp	r3, #2
 8003438:	d107      	bne.n	800344a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800343a:	4b41      	ldr	r3, [pc, #260]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d109      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e073      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800344a:	4b3d      	ldr	r3, [pc, #244]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d101      	bne.n	800345a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e06b      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800345a:	4b39      	ldr	r3, [pc, #228]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f023 0203 	bic.w	r2, r3, #3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	4936      	ldr	r1, [pc, #216]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	4313      	orrs	r3, r2
 800346a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800346c:	f7fd ff2a 	bl	80012c4 <HAL_GetTick>
 8003470:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003472:	e00a      	b.n	800348a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003474:	f7fd ff26 	bl	80012c4 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003482:	4293      	cmp	r3, r2
 8003484:	d901      	bls.n	800348a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003486:	2303      	movs	r3, #3
 8003488:	e053      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348a:	4b2d      	ldr	r3, [pc, #180]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f003 020c 	and.w	r2, r3, #12
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	429a      	cmp	r2, r3
 800349a:	d1eb      	bne.n	8003474 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800349c:	4b27      	ldr	r3, [pc, #156]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	683a      	ldr	r2, [r7, #0]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d210      	bcs.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034aa:	4b24      	ldr	r3, [pc, #144]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f023 0207 	bic.w	r2, r3, #7
 80034b2:	4922      	ldr	r1, [pc, #136]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034ba:	4b20      	ldr	r3, [pc, #128]	; (800353c <HAL_RCC_ClockConfig+0x1c0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0307 	and.w	r3, r3, #7
 80034c2:	683a      	ldr	r2, [r7, #0]
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d001      	beq.n	80034cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c8:	2301      	movs	r3, #1
 80034ca:	e032      	b.n	8003532 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0304 	and.w	r3, r3, #4
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d008      	beq.n	80034ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d8:	4b19      	ldr	r3, [pc, #100]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	4916      	ldr	r1, [pc, #88]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034f6:	4b12      	ldr	r3, [pc, #72]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	00db      	lsls	r3, r3, #3
 8003504:	490e      	ldr	r1, [pc, #56]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	4313      	orrs	r3, r2
 8003508:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800350a:	f000 f821 	bl	8003550 <HAL_RCC_GetSysClockFreq>
 800350e:	4602      	mov	r2, r0
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	091b      	lsrs	r3, r3, #4
 8003516:	f003 030f 	and.w	r3, r3, #15
 800351a:	490a      	ldr	r1, [pc, #40]	; (8003544 <HAL_RCC_ClockConfig+0x1c8>)
 800351c:	5ccb      	ldrb	r3, [r1, r3]
 800351e:	fa22 f303 	lsr.w	r3, r2, r3
 8003522:	4a09      	ldr	r2, [pc, #36]	; (8003548 <HAL_RCC_ClockConfig+0x1cc>)
 8003524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003526:	4b09      	ldr	r3, [pc, #36]	; (800354c <HAL_RCC_ClockConfig+0x1d0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4618      	mov	r0, r3
 800352c:	f7fd fe9a 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3710      	adds	r7, #16
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40022000 	.word	0x40022000
 8003540:	40021000 	.word	0x40021000
 8003544:	08008380 	.word	0x08008380
 8003548:	20000008 	.word	0x20000008
 800354c:	2000000c 	.word	0x2000000c

08003550 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003550:	b490      	push	{r4, r7}
 8003552:	b08a      	sub	sp, #40	; 0x28
 8003554:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003556:	4b29      	ldr	r3, [pc, #164]	; (80035fc <HAL_RCC_GetSysClockFreq+0xac>)
 8003558:	1d3c      	adds	r4, r7, #4
 800355a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800355c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003560:	f240 2301 	movw	r3, #513	; 0x201
 8003564:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003566:	2300      	movs	r3, #0
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	2300      	movs	r3, #0
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	2300      	movs	r3, #0
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003576:	2300      	movs	r3, #0
 8003578:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800357a:	4b21      	ldr	r3, [pc, #132]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb0>)
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	f003 030c 	and.w	r3, r3, #12
 8003586:	2b04      	cmp	r3, #4
 8003588:	d002      	beq.n	8003590 <HAL_RCC_GetSysClockFreq+0x40>
 800358a:	2b08      	cmp	r3, #8
 800358c:	d003      	beq.n	8003596 <HAL_RCC_GetSysClockFreq+0x46>
 800358e:	e02b      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003590:	4b1c      	ldr	r3, [pc, #112]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003592:	623b      	str	r3, [r7, #32]
      break;
 8003594:	e02b      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	0c9b      	lsrs	r3, r3, #18
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	3328      	adds	r3, #40	; 0x28
 80035a0:	443b      	add	r3, r7
 80035a2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80035a6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d012      	beq.n	80035d8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035b2:	4b13      	ldr	r3, [pc, #76]	; (8003600 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	0c5b      	lsrs	r3, r3, #17
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	3328      	adds	r3, #40	; 0x28
 80035be:	443b      	add	r3, r7
 80035c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80035c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	4a0e      	ldr	r2, [pc, #56]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ca:	fb03 f202 	mul.w	r2, r3, r2
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
 80035d6:	e004      	b.n	80035e2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <HAL_RCC_GetSysClockFreq+0xb8>)
 80035dc:	fb02 f303 	mul.w	r3, r2, r3
 80035e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80035e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035e4:	623b      	str	r3, [r7, #32]
      break;
 80035e6:	e002      	b.n	80035ee <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035e8:	4b06      	ldr	r3, [pc, #24]	; (8003604 <HAL_RCC_GetSysClockFreq+0xb4>)
 80035ea:	623b      	str	r3, [r7, #32]
      break;
 80035ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035ee:	6a3b      	ldr	r3, [r7, #32]
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	3728      	adds	r7, #40	; 0x28
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bc90      	pop	{r4, r7}
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	08008328 	.word	0x08008328
 8003600:	40021000 	.word	0x40021000
 8003604:	007a1200 	.word	0x007a1200
 8003608:	003d0900 	.word	0x003d0900

0800360c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003614:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <RCC_Delay+0x34>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0a      	ldr	r2, [pc, #40]	; (8003644 <RCC_Delay+0x38>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	0a5b      	lsrs	r3, r3, #9
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	fb02 f303 	mul.w	r3, r2, r3
 8003626:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003628:	bf00      	nop
  }
  while (Delay --);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	1e5a      	subs	r2, r3, #1
 800362e:	60fa      	str	r2, [r7, #12]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1f9      	bne.n	8003628 <RCC_Delay+0x1c>
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3714      	adds	r7, #20
 800363a:	46bd      	mov	sp, r7
 800363c:	bc80      	pop	{r7}
 800363e:	4770      	bx	lr
 8003640:	20000008 	.word	0x20000008
 8003644:	10624dd3 	.word	0x10624dd3

08003648 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	613b      	str	r3, [r7, #16]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d07d      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003668:	4b4f      	ldr	r3, [pc, #316]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800366a:	69db      	ldr	r3, [r3, #28]
 800366c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d10d      	bne.n	8003690 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003674:	4b4c      	ldr	r3, [pc, #304]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	4a4b      	ldr	r2, [pc, #300]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800367e:	61d3      	str	r3, [r2, #28]
 8003680:	4b49      	ldr	r3, [pc, #292]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003682:	69db      	ldr	r3, [r3, #28]
 8003684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003688:	60bb      	str	r3, [r7, #8]
 800368a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800368c:	2301      	movs	r3, #1
 800368e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003690:	4b46      	ldr	r3, [pc, #280]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	2b00      	cmp	r3, #0
 800369a:	d118      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800369c:	4b43      	ldr	r3, [pc, #268]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a42      	ldr	r2, [pc, #264]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036a8:	f7fd fe0c 	bl	80012c4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ae:	e008      	b.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b0:	f7fd fe08 	bl	80012c4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b64      	cmp	r3, #100	; 0x64
 80036bc:	d901      	bls.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e06d      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c2:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d0f0      	beq.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036ce:	4b36      	ldr	r3, [pc, #216]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d0:	6a1b      	ldr	r3, [r3, #32]
 80036d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d02e      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d027      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80036ec:	4b2e      	ldr	r3, [pc, #184]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036f6:	4b2e      	ldr	r3, [pc, #184]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036f8:	2201      	movs	r2, #1
 80036fa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036fc:	4b2c      	ldr	r3, [pc, #176]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003702:	4a29      	ldr	r2, [pc, #164]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0301 	and.w	r3, r3, #1
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003712:	f7fd fdd7 	bl	80012c4 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003718:	e00a      	b.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800371a:	f7fd fdd3 	bl	80012c4 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	f241 3288 	movw	r2, #5000	; 0x1388
 8003728:	4293      	cmp	r3, r2
 800372a:	d901      	bls.n	8003730 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e036      	b.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	4b1d      	ldr	r3, [pc, #116]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0ee      	beq.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800373c:	4b1a      	ldr	r3, [pc, #104]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	4917      	ldr	r1, [pc, #92]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374a:	4313      	orrs	r3, r2
 800374c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800374e:	7dfb      	ldrb	r3, [r7, #23]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b14      	ldr	r3, [pc, #80]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003756:	69db      	ldr	r3, [r3, #28]
 8003758:	4a13      	ldr	r2, [pc, #76]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800376c:	4b0e      	ldr	r3, [pc, #56]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	490b      	ldr	r1, [pc, #44]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0310 	and.w	r3, r3, #16
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800378a:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	4904      	ldr	r1, [pc, #16]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40007000 	.word	0x40007000
 80037b0:	42420440 	.word	0x42420440

080037b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80037b4:	b084      	sub	sp, #16
 80037b6:	b480      	push	{r7}
 80037b8:	b083      	sub	sp, #12
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
 80037be:	f107 0014 	add.w	r0, r7, #20
 80037c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bc80      	pop	{r7}
 80037d0:	b004      	add	sp, #16
 80037d2:	4770      	bx	lr

080037d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b085      	sub	sp, #20
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80037e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80037e8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	b29a      	uxth	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3714      	adds	r7, #20
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bc80      	pop	{r7}
 80037fe:	4770      	bx	lr

08003800 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003808:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800380c:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003814:	b29a      	uxth	r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	b29b      	uxth	r3, r3
 800381a:	43db      	mvns	r3, r3
 800381c:	b29b      	uxth	r3, r3
 800381e:	4013      	ands	r3, r2
 8003820:	b29a      	uxth	r2, r3
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	bc80      	pop	{r7}
 8003832:	4770      	bx	lr

08003834 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003834:	b480      	push	{r7}
 8003836:	b083      	sub	sp, #12
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	460b      	mov	r3, r1
 800383e:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800384c:	b084      	sub	sp, #16
 800384e:	b480      	push	{r7}
 8003850:	b083      	sub	sp, #12
 8003852:	af00      	add	r7, sp, #0
 8003854:	6078      	str	r0, [r7, #4]
 8003856:	f107 0014 	add.w	r0, r7, #20
 800385a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2201      	movs	r2, #1
 8003862:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bc80      	pop	{r7}
 8003888:	b004      	add	sp, #16
 800388a:	4770      	bx	lr

0800388c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800388c:	b480      	push	{r7}
 800388e:	b09b      	sub	sp, #108	; 0x6c
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003896:	2300      	movs	r3, #0
 8003898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800389c:	687a      	ldr	r2, [r7, #4]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	4413      	add	r3, r2
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80038ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038b2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	78db      	ldrb	r3, [r3, #3]
 80038ba:	2b03      	cmp	r3, #3
 80038bc:	d81f      	bhi.n	80038fe <USB_ActivateEndpoint+0x72>
 80038be:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <USB_ActivateEndpoint+0x38>)
 80038c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c4:	080038d5 	.word	0x080038d5
 80038c8:	080038f1 	.word	0x080038f1
 80038cc:	08003907 	.word	0x08003907
 80038d0:	080038e3 	.word	0x080038e3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80038d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038d8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80038dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038e0:	e012      	b.n	8003908 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80038e2:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038e6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80038ea:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038ee:	e00b      	b.n	8003908 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80038f0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80038f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80038f8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80038fc:	e004      	b.n	8003908 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003904:	e000      	b.n	8003908 <USB_ActivateEndpoint+0x7c>
      break;
 8003906:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	009b      	lsls	r3, r3, #2
 8003910:	441a      	add	r2, r3
 8003912:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800391a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800391e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003926:	b29b      	uxth	r3, r3
 8003928:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	881b      	ldrh	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800393c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003940:	b29a      	uxth	r2, r3
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	4313      	orrs	r3, r2
 800394a:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800394e:	687a      	ldr	r2, [r7, #4]
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	009b      	lsls	r3, r3, #2
 8003956:	441a      	add	r2, r3
 8003958:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 800395c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800396c:	b29b      	uxth	r3, r3
 800396e:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	7b1b      	ldrb	r3, [r3, #12]
 8003974:	2b00      	cmp	r3, #0
 8003976:	f040 8149 	bne.w	8003c0c <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	785b      	ldrb	r3, [r3, #1]
 800397e:	2b00      	cmp	r3, #0
 8003980:	f000 8084 	beq.w	8003a8c <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	617b      	str	r3, [r7, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800398e:	b29b      	uxth	r3, r3
 8003990:	461a      	mov	r2, r3
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	4413      	add	r3, r2
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	011a      	lsls	r2, r3, #4
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	4413      	add	r3, r2
 80039a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80039a6:	613b      	str	r3, [r7, #16]
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	88db      	ldrh	r3, [r3, #6]
 80039ac:	085b      	lsrs	r3, r3, #1
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	881b      	ldrh	r3, [r3, #0]
 80039c4:	81fb      	strh	r3, [r7, #14]
 80039c6:	89fb      	ldrh	r3, [r7, #14]
 80039c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d01b      	beq.n	8003a08 <USB_ActivateEndpoint+0x17c>
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	781b      	ldrb	r3, [r3, #0]
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4413      	add	r3, r2
 80039da:	881b      	ldrh	r3, [r3, #0]
 80039dc:	b29b      	uxth	r3, r3
 80039de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039e6:	81bb      	strh	r3, [r7, #12]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	009b      	lsls	r3, r3, #2
 80039f0:	441a      	add	r2, r3
 80039f2:	89bb      	ldrh	r3, [r7, #12]
 80039f4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80039f8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80039fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a00:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003a04:	b29b      	uxth	r3, r3
 8003a06:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	78db      	ldrb	r3, [r3, #3]
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d020      	beq.n	8003a52 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4413      	add	r3, r2
 8003a1a:	881b      	ldrh	r3, [r3, #0]
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a26:	813b      	strh	r3, [r7, #8]
 8003a28:	893b      	ldrh	r3, [r7, #8]
 8003a2a:	f083 0320 	eor.w	r3, r3, #32
 8003a2e:	813b      	strh	r3, [r7, #8]
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	441a      	add	r2, r3
 8003a3a:	893b      	ldrh	r3, [r7, #8]
 8003a3c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a40:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	8013      	strh	r3, [r2, #0]
 8003a50:	e27f      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	881b      	ldrh	r3, [r3, #0]
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a68:	817b      	strh	r3, [r7, #10]
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	781b      	ldrb	r3, [r3, #0]
 8003a70:	009b      	lsls	r3, r3, #2
 8003a72:	441a      	add	r2, r3
 8003a74:	897b      	ldrh	r3, [r7, #10]
 8003a76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003a7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003a7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	8013      	strh	r3, [r2, #0]
 8003a8a:	e262      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	461a      	mov	r2, r3
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	4413      	add	r3, r2
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	011a      	lsls	r2, r3, #4
 8003aa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa8:	4413      	add	r3, r2
 8003aaa:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003aae:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	88db      	ldrh	r3, [r3, #6]
 8003ab4:	085b      	lsrs	r3, r3, #1
 8003ab6:	b29b      	uxth	r3, r3
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	b29a      	uxth	r2, r3
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	461a      	mov	r2, r3
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	4413      	add	r3, r2
 8003ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	011a      	lsls	r2, r3, #4
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	4413      	add	r3, r2
 8003ade:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003ae2:	623b      	str	r3, [r7, #32]
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d112      	bne.n	8003b12 <USB_ActivateEndpoint+0x286>
 8003aec:	6a3b      	ldr	r3, [r7, #32]
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	b29b      	uxth	r3, r3
 8003af2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003af6:	b29a      	uxth	r2, r3
 8003af8:	6a3b      	ldr	r3, [r7, #32]
 8003afa:	801a      	strh	r2, [r3, #0]
 8003afc:	6a3b      	ldr	r3, [r7, #32]
 8003afe:	881b      	ldrh	r3, [r3, #0]
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b0a:	b29a      	uxth	r2, r3
 8003b0c:	6a3b      	ldr	r3, [r7, #32]
 8003b0e:	801a      	strh	r2, [r3, #0]
 8003b10:	e02f      	b.n	8003b72 <USB_ActivateEndpoint+0x2e6>
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	691b      	ldr	r3, [r3, #16]
 8003b16:	2b3e      	cmp	r3, #62	; 0x3e
 8003b18:	d813      	bhi.n	8003b42 <USB_ActivateEndpoint+0x2b6>
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	085b      	lsrs	r3, r3, #1
 8003b20:	663b      	str	r3, [r7, #96]	; 0x60
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d002      	beq.n	8003b34 <USB_ActivateEndpoint+0x2a8>
 8003b2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b30:	3301      	adds	r3, #1
 8003b32:	663b      	str	r3, [r7, #96]	; 0x60
 8003b34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	029b      	lsls	r3, r3, #10
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	6a3b      	ldr	r3, [r7, #32]
 8003b3e:	801a      	strh	r2, [r3, #0]
 8003b40:	e017      	b.n	8003b72 <USB_ActivateEndpoint+0x2e6>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	095b      	lsrs	r3, r3, #5
 8003b48:	663b      	str	r3, [r7, #96]	; 0x60
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	f003 031f 	and.w	r3, r3, #31
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d102      	bne.n	8003b5c <USB_ActivateEndpoint+0x2d0>
 8003b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003b5c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	029b      	lsls	r3, r3, #10
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003b68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	6a3b      	ldr	r3, [r7, #32]
 8003b70:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	4413      	add	r3, r2
 8003b7c:	881b      	ldrh	r3, [r3, #0]
 8003b7e:	83fb      	strh	r3, [r7, #30]
 8003b80:	8bfb      	ldrh	r3, [r7, #30]
 8003b82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d01b      	beq.n	8003bc2 <USB_ActivateEndpoint+0x336>
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	009b      	lsls	r3, r3, #2
 8003b92:	4413      	add	r3, r2
 8003b94:	881b      	ldrh	r3, [r3, #0]
 8003b96:	b29b      	uxth	r3, r3
 8003b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ba0:	83bb      	strh	r3, [r7, #28]
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	441a      	add	r2, r3
 8003bac:	8bbb      	ldrh	r3, [r7, #28]
 8003bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bb6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	4413      	add	r3, r2
 8003bcc:	881b      	ldrh	r3, [r3, #0]
 8003bce:	b29b      	uxth	r3, r3
 8003bd0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd8:	837b      	strh	r3, [r7, #26]
 8003bda:	8b7b      	ldrh	r3, [r7, #26]
 8003bdc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003be0:	837b      	strh	r3, [r7, #26]
 8003be2:	8b7b      	ldrh	r3, [r7, #26]
 8003be4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003be8:	837b      	strh	r3, [r7, #26]
 8003bea:	687a      	ldr	r2, [r7, #4]
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	441a      	add	r2, r3
 8003bf4:	8b7b      	ldrh	r3, [r7, #26]
 8003bf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003bfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003bfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	8013      	strh	r3, [r2, #0]
 8003c0a:	e1a2      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	4413      	add	r3, r2
 8003c16:	881b      	ldrh	r3, [r3, #0]
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c22:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	441a      	add	r2, r3
 8003c30:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8003c34:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003c38:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003c3c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8003c40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c52:	b29b      	uxth	r3, r3
 8003c54:	461a      	mov	r2, r3
 8003c56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c58:	4413      	add	r3, r2
 8003c5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	011a      	lsls	r2, r3, #4
 8003c62:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c64:	4413      	add	r3, r2
 8003c66:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003c6a:	657b      	str	r3, [r7, #84]	; 0x54
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	891b      	ldrh	r3, [r3, #8]
 8003c70:	085b      	lsrs	r3, r3, #1
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	b29a      	uxth	r2, r3
 8003c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c7a:	801a      	strh	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003c86:	b29b      	uxth	r3, r3
 8003c88:	461a      	mov	r2, r3
 8003c8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c8c:	4413      	add	r3, r2
 8003c8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	011a      	lsls	r2, r3, #4
 8003c96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c98:	4413      	add	r3, r2
 8003c9a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	895b      	ldrh	r3, [r3, #10]
 8003ca4:	085b      	lsrs	r3, r3, #1
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	005b      	lsls	r3, r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cae:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	785b      	ldrb	r3, [r3, #1]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f040 8091 	bne.w	8003ddc <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	881b      	ldrh	r3, [r3, #0]
 8003cc6:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8003cc8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003cca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d01b      	beq.n	8003d0a <USB_ActivateEndpoint+0x47e>
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	781b      	ldrb	r3, [r3, #0]
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	4413      	add	r3, r2
 8003cdc:	881b      	ldrh	r3, [r3, #0]
 8003cde:	b29b      	uxth	r3, r3
 8003ce0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ce4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ce8:	877b      	strh	r3, [r7, #58]	; 0x3a
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	441a      	add	r2, r3
 8003cf4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8003cf6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003cfa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003cfe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	4413      	add	r3, r2
 8003d14:	881b      	ldrh	r3, [r3, #0]
 8003d16:	873b      	strh	r3, [r7, #56]	; 0x38
 8003d18:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8003d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d01b      	beq.n	8003d5a <USB_ActivateEndpoint+0x4ce>
 8003d22:	687a      	ldr	r2, [r7, #4]
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	4413      	add	r3, r2
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	b29b      	uxth	r3, r3
 8003d30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d38:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	781b      	ldrb	r3, [r3, #0]
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	441a      	add	r2, r3
 8003d44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003d5a:	687a      	ldr	r2, [r7, #4]
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4413      	add	r3, r2
 8003d64:	881b      	ldrh	r3, [r3, #0]
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d70:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d72:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d74:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8003d78:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d7a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d7c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8003d80:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	781b      	ldrb	r3, [r3, #0]
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	441a      	add	r2, r3
 8003d8c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003d8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003d92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003d96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4413      	add	r3, r2
 8003dac:	881b      	ldrh	r3, [r3, #0]
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003db4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003db8:	867b      	strh	r3, [r7, #50]	; 0x32
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	441a      	add	r2, r3
 8003dc4:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8003dc6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003dca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	8013      	strh	r3, [r2, #0]
 8003dda:	e0ba      	b.n	8003f52 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8003ddc:	687a      	ldr	r2, [r7, #4]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4413      	add	r3, r2
 8003de6:	881b      	ldrh	r3, [r3, #0]
 8003de8:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8003dec:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8003df0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d01d      	beq.n	8003e34 <USB_ActivateEndpoint+0x5a8>
 8003df8:	687a      	ldr	r2, [r7, #4]
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	4413      	add	r3, r2
 8003e02:	881b      	ldrh	r3, [r3, #0]
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e0e:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	441a      	add	r2, r3
 8003e1c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003e20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e28:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003e44:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8003e48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d01d      	beq.n	8003e8c <USB_ActivateEndpoint+0x600>
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4413      	add	r3, r2
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	b29b      	uxth	r3, r3
 8003e5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e66:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	781b      	ldrb	r3, [r3, #0]
 8003e70:	009b      	lsls	r3, r3, #2
 8003e72:	441a      	add	r2, r3
 8003e74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8003e78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e84:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	78db      	ldrb	r3, [r3, #3]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d024      	beq.n	8003ede <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	4413      	add	r3, r2
 8003e9e:	881b      	ldrh	r3, [r3, #0]
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eaa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003eb2:	f083 0320 	eor.w	r3, r3, #32
 8003eb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	781b      	ldrb	r3, [r3, #0]
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	441a      	add	r2, r3
 8003ec4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003ec8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ecc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ed0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	8013      	strh	r3, [r2, #0]
 8003edc:	e01d      	b.n	8003f1a <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	4413      	add	r3, r2
 8003ee8:	881b      	ldrh	r3, [r3, #0]
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ef4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003f06:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f0a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f30:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8003f52:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	376c      	adds	r7, #108	; 0x6c
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bc80      	pop	{r7}
 8003f5e:	4770      	bx	lr

08003f60 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b08d      	sub	sp, #52	; 0x34
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	7b1b      	ldrb	r3, [r3, #12]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	f040 808e 	bne.w	8004090 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	785b      	ldrb	r3, [r3, #1]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d044      	beq.n	8004006 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	881b      	ldrh	r3, [r3, #0]
 8003f88:	81bb      	strh	r3, [r7, #12]
 8003f8a:	89bb      	ldrh	r3, [r7, #12]
 8003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d01b      	beq.n	8003fcc <USB_DeactivateEndpoint+0x6c>
 8003f94:	687a      	ldr	r2, [r7, #4]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	009b      	lsls	r3, r3, #2
 8003f9c:	4413      	add	r3, r2
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003faa:	817b      	strh	r3, [r7, #10]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	781b      	ldrb	r3, [r3, #0]
 8003fb2:	009b      	lsls	r3, r3, #2
 8003fb4:	441a      	add	r2, r3
 8003fb6:	897b      	ldrh	r3, [r7, #10]
 8003fb8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003fbc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003fc0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fc4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4413      	add	r3, r2
 8003fd6:	881b      	ldrh	r3, [r3, #0]
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fe2:	813b      	strh	r3, [r7, #8]
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	441a      	add	r2, r3
 8003fee:	893b      	ldrh	r3, [r7, #8]
 8003ff0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ff4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ff8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ffc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004000:	b29b      	uxth	r3, r3
 8004002:	8013      	strh	r3, [r2, #0]
 8004004:	e192      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	881b      	ldrh	r3, [r3, #0]
 8004012:	827b      	strh	r3, [r7, #18]
 8004014:	8a7b      	ldrh	r3, [r7, #18]
 8004016:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d01b      	beq.n	8004056 <USB_DeactivateEndpoint+0xf6>
 800401e:	687a      	ldr	r2, [r7, #4]
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	881b      	ldrh	r3, [r3, #0]
 800402a:	b29b      	uxth	r3, r3
 800402c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004034:	823b      	strh	r3, [r7, #16]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	009b      	lsls	r3, r3, #2
 800403e:	441a      	add	r2, r3
 8004040:	8a3b      	ldrh	r3, [r7, #16]
 8004042:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004046:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800404a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800404e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004052:	b29b      	uxth	r3, r3
 8004054:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	4413      	add	r3, r2
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	b29b      	uxth	r3, r3
 8004064:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004068:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800406c:	81fb      	strh	r3, [r7, #14]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	009b      	lsls	r3, r3, #2
 8004076:	441a      	add	r2, r3
 8004078:	89fb      	ldrh	r3, [r7, #14]
 800407a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800408a:	b29b      	uxth	r3, r3
 800408c:	8013      	strh	r3, [r2, #0]
 800408e:	e14d      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	785b      	ldrb	r3, [r3, #1]
 8004094:	2b00      	cmp	r3, #0
 8004096:	f040 80a5 	bne.w	80041e4 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	4413      	add	r3, r2
 80040a4:	881b      	ldrh	r3, [r3, #0]
 80040a6:	843b      	strh	r3, [r7, #32]
 80040a8:	8c3b      	ldrh	r3, [r7, #32]
 80040aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d01b      	beq.n	80040ea <USB_DeactivateEndpoint+0x18a>
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	4413      	add	r3, r2
 80040bc:	881b      	ldrh	r3, [r3, #0]
 80040be:	b29b      	uxth	r3, r3
 80040c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040c8:	83fb      	strh	r3, [r7, #30]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	009b      	lsls	r3, r3, #2
 80040d2:	441a      	add	r2, r3
 80040d4:	8bfb      	ldrh	r3, [r7, #30]
 80040d6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040da:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	009b      	lsls	r3, r3, #2
 80040f2:	4413      	add	r3, r2
 80040f4:	881b      	ldrh	r3, [r3, #0]
 80040f6:	83bb      	strh	r3, [r7, #28]
 80040f8:	8bbb      	ldrh	r3, [r7, #28]
 80040fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d01b      	beq.n	800413a <USB_DeactivateEndpoint+0x1da>
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	009b      	lsls	r3, r3, #2
 800410a:	4413      	add	r3, r2
 800410c:	881b      	ldrh	r3, [r3, #0]
 800410e:	b29b      	uxth	r3, r3
 8004110:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004114:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004118:	837b      	strh	r3, [r7, #26]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	441a      	add	r2, r3
 8004124:	8b7b      	ldrh	r3, [r7, #26]
 8004126:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800412a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800412e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004132:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004136:	b29b      	uxth	r3, r3
 8004138:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800413a:	687a      	ldr	r2, [r7, #4]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	009b      	lsls	r3, r3, #2
 8004142:	4413      	add	r3, r2
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	b29b      	uxth	r3, r3
 8004148:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800414c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004150:	833b      	strh	r3, [r7, #24]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	441a      	add	r2, r3
 800415c:	8b3b      	ldrh	r3, [r7, #24]
 800415e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004162:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004166:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800416a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800416e:	b29b      	uxth	r3, r3
 8004170:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4413      	add	r3, r2
 800417c:	881b      	ldrh	r3, [r3, #0]
 800417e:	b29b      	uxth	r3, r3
 8004180:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004184:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004188:	82fb      	strh	r3, [r7, #22]
 800418a:	687a      	ldr	r2, [r7, #4]
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	781b      	ldrb	r3, [r3, #0]
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	441a      	add	r2, r3
 8004194:	8afb      	ldrh	r3, [r7, #22]
 8004196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800419a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800419e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	009b      	lsls	r3, r3, #2
 80041b2:	4413      	add	r3, r2
 80041b4:	881b      	ldrh	r3, [r3, #0]
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041c0:	82bb      	strh	r3, [r7, #20]
 80041c2:	687a      	ldr	r2, [r7, #4]
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	441a      	add	r2, r3
 80041cc:	8abb      	ldrh	r3, [r7, #20]
 80041ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041de:	b29b      	uxth	r3, r3
 80041e0:	8013      	strh	r3, [r2, #0]
 80041e2:	e0a3      	b.n	800432c <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	4413      	add	r3, r2
 80041ee:	881b      	ldrh	r3, [r3, #0]
 80041f0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80041f2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d01b      	beq.n	8004234 <USB_DeactivateEndpoint+0x2d4>
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	4413      	add	r3, r2
 8004206:	881b      	ldrh	r3, [r3, #0]
 8004208:	b29b      	uxth	r3, r3
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004212:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	009b      	lsls	r3, r3, #2
 800421c:	441a      	add	r2, r3
 800421e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004220:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004224:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004228:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800422c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004230:	b29b      	uxth	r3, r3
 8004232:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	881b      	ldrh	r3, [r3, #0]
 8004240:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004242:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b00      	cmp	r3, #0
 800424a:	d01b      	beq.n	8004284 <USB_DeactivateEndpoint+0x324>
 800424c:	687a      	ldr	r2, [r7, #4]
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	009b      	lsls	r3, r3, #2
 8004254:	4413      	add	r3, r2
 8004256:	881b      	ldrh	r3, [r3, #0]
 8004258:	b29b      	uxth	r3, r3
 800425a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800425e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004262:	853b      	strh	r3, [r7, #40]	; 0x28
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	441a      	add	r2, r3
 800426e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004270:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004274:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004278:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800427c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004280:	b29b      	uxth	r3, r3
 8004282:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004284:	687a      	ldr	r2, [r7, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	881b      	ldrh	r3, [r3, #0]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004296:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	441a      	add	r2, r3
 80042a6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80042a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	4413      	add	r3, r2
 80042c6:	881b      	ldrh	r3, [r3, #0]
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042d2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	781b      	ldrb	r3, [r3, #0]
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	441a      	add	r2, r3
 80042de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80042ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f0:	b29b      	uxth	r3, r3
 80042f2:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	009b      	lsls	r3, r3, #2
 80042fc:	4413      	add	r3, r2
 80042fe:	881b      	ldrh	r3, [r3, #0]
 8004300:	b29b      	uxth	r3, r3
 8004302:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430a:	847b      	strh	r3, [r7, #34]	; 0x22
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	009b      	lsls	r3, r3, #2
 8004314:	441a      	add	r2, r3
 8004316:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004318:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800431c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004320:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004324:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004328:	b29b      	uxth	r3, r3
 800432a:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800432c:	2300      	movs	r3, #0
}
 800432e:	4618      	mov	r0, r3
 8004330:	3734      	adds	r7, #52	; 0x34
 8004332:	46bd      	mov	sp, r7
 8004334:	bc80      	pop	{r7}
 8004336:	4770      	bx	lr

08004338 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004338:	b580      	push	{r7, lr}
 800433a:	b0cc      	sub	sp, #304	; 0x130
 800433c:	af00      	add	r7, sp, #0
 800433e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004342:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004346:	6018      	str	r0, [r3, #0]
 8004348:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800434c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004350:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004352:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004356:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	785b      	ldrb	r3, [r3, #1]
 800435e:	2b01      	cmp	r3, #1
 8004360:	f041 817d 	bne.w	800565e <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	691b      	ldr	r3, [r3, #16]
 800437c:	429a      	cmp	r2, r3
 800437e:	d908      	bls.n	8004392 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004390:	e007      	b.n	80043a2 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80043a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	7b1b      	ldrb	r3, [r3, #12]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d152      	bne.n	8004458 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80043b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6959      	ldr	r1, [r3, #20]
 80043be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	88da      	ldrh	r2, [r3, #6]
 80043ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80043ce:	b29b      	uxth	r3, r3
 80043d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80043d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80043d8:	6800      	ldr	r0, [r0, #0]
 80043da:	f001 ff23 	bl	8006224 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80043de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043e2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80043e6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80043ea:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80043ee:	6812      	ldr	r2, [r2, #0]
 80043f0:	601a      	str	r2, [r3, #0]
 80043f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80043f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004400:	b29b      	uxth	r3, r3
 8004402:	4619      	mov	r1, r3
 8004404:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004408:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800440c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004410:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004414:	6812      	ldr	r2, [r2, #0]
 8004416:	440a      	add	r2, r1
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800441e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	011a      	lsls	r2, r3, #4
 8004428:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800442c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4413      	add	r3, r2
 8004434:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800443c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004440:	601a      	str	r2, [r3, #0]
 8004442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004446:	b29a      	uxth	r2, r3
 8004448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800444c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	801a      	strh	r2, [r3, #0]
 8004454:	f001 b8b5 	b.w	80055c2 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800445c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	78db      	ldrb	r3, [r3, #3]
 8004464:	2b02      	cmp	r3, #2
 8004466:	f040 84c6 	bne.w	8004df6 <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800446a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800446e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	6a1a      	ldr	r2, [r3, #32]
 8004476:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800447a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	429a      	cmp	r2, r3
 8004484:	f240 8443 	bls.w	8004d0e <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004488:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800448c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004496:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	009b      	lsls	r3, r3, #2
 80044a0:	4413      	add	r3, r2
 80044a2:	881b      	ldrh	r3, [r3, #0]
 80044a4:	b29b      	uxth	r3, r3
 80044a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ae:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80044b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	781b      	ldrb	r3, [r3, #0]
 80044c8:	009b      	lsls	r3, r3, #2
 80044ca:	441a      	add	r2, r3
 80044cc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044d8:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80044dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80044e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6a1a      	ldr	r2, [r3, #32]
 80044f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80044f4:	1ad2      	subs	r2, r2, r3
 80044f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80044fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004502:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004506:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004510:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	009b      	lsls	r3, r3, #2
 800451a:	4413      	add	r3, r2
 800451c:	881b      	ldrh	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004524:	2b00      	cmp	r3, #0
 8004526:	f000 823e 	beq.w	80049a6 <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800452a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800452e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004532:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004536:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800453a:	6812      	ldr	r2, [r2, #0]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004542:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	785b      	ldrb	r3, [r3, #1]
 800454a:	2b00      	cmp	r3, #0
 800454c:	f040 809a 	bne.w	8004684 <USB_EPStartXfer+0x34c>
 8004550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004554:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004558:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800455c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004560:	6812      	ldr	r2, [r2, #0]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004568:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004572:	b29b      	uxth	r3, r3
 8004574:	4619      	mov	r1, r3
 8004576:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800457a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800457e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004582:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004586:	6812      	ldr	r2, [r2, #0]
 8004588:	440a      	add	r2, r1
 800458a:	601a      	str	r2, [r3, #0]
 800458c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004590:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	011a      	lsls	r2, r3, #4
 800459a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800459e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80045aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045ae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d122      	bne.n	8004602 <USB_EPStartXfer+0x2ca>
 80045bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	881b      	ldrh	r3, [r3, #0]
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80045ce:	b29a      	uxth	r2, r3
 80045d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045d4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	801a      	strh	r2, [r3, #0]
 80045dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	881b      	ldrh	r3, [r3, #0]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80045ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80045f8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	e079      	b.n	80046f6 <USB_EPStartXfer+0x3be>
 8004602:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004606:	2b3e      	cmp	r3, #62	; 0x3e
 8004608:	d81b      	bhi.n	8004642 <USB_EPStartXfer+0x30a>
 800460a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800460e:	085b      	lsrs	r3, r3, #1
 8004610:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004614:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <USB_EPStartXfer+0x2f2>
 8004620:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004624:	3301      	adds	r3, #1
 8004626:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800462a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800462e:	b29b      	uxth	r3, r3
 8004630:	029b      	lsls	r3, r3, #10
 8004632:	b29a      	uxth	r2, r3
 8004634:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004638:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	801a      	strh	r2, [r3, #0]
 8004640:	e059      	b.n	80046f6 <USB_EPStartXfer+0x3be>
 8004642:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004646:	095b      	lsrs	r3, r3, #5
 8004648:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800464c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004650:	f003 031f 	and.w	r3, r3, #31
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <USB_EPStartXfer+0x32a>
 8004658:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800465c:	3b01      	subs	r3, #1
 800465e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004662:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004666:	b29b      	uxth	r3, r3
 8004668:	029b      	lsls	r3, r3, #10
 800466a:	b29b      	uxth	r3, r3
 800466c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004674:	b29a      	uxth	r2, r3
 8004676:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800467a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	801a      	strh	r2, [r3, #0]
 8004682:	e038      	b.n	80046f6 <USB_EPStartXfer+0x3be>
 8004684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004688:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	785b      	ldrb	r3, [r3, #1]
 8004690:	2b01      	cmp	r3, #1
 8004692:	d130      	bne.n	80046f6 <USB_EPStartXfer+0x3be>
 8004694:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004698:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	4619      	mov	r1, r3
 80046a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046aa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80046b2:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 80046b6:	6812      	ldr	r2, [r2, #0]
 80046b8:	440a      	add	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	011a      	lsls	r2, r3, #4
 80046ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ce:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4413      	add	r3, r2
 80046d6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80046da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046de:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80046e8:	b29a      	uxth	r2, r3
 80046ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046ee:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80046f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80046fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	895b      	ldrh	r3, [r3, #10]
 8004702:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800470a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	6959      	ldr	r1, [r3, #20]
 8004712:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004716:	b29b      	uxth	r3, r3
 8004718:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800471c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004720:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004724:	6800      	ldr	r0, [r0, #0]
 8004726:	f001 fd7d 	bl	8006224 <USB_WritePMA>
            ep->xfer_buff += len;
 800472a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800472e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	695a      	ldr	r2, [r3, #20]
 8004736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800473a:	441a      	add	r2, r3
 800473c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004748:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800474c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a1a      	ldr	r2, [r3, #32]
 8004754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004758:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d90f      	bls.n	8004784 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004768:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a1a      	ldr	r2, [r3, #32]
 8004770:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004774:	1ad2      	subs	r2, r2, r3
 8004776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800477a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	621a      	str	r2, [r3, #32]
 8004782:	e00e      	b.n	80047a2 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6a1b      	ldr	r3, [r3, #32]
 8004790:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2200      	movs	r2, #0
 80047a0:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80047a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	785b      	ldrb	r3, [r3, #1]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f040 809a 	bne.w	80048e8 <USB_EPStartXfer+0x5b0>
 80047b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047b8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047bc:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047c0:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80047c4:	6812      	ldr	r2, [r2, #0]
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	4619      	mov	r1, r3
 80047da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047de:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80047e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80047e6:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80047ea:	6812      	ldr	r2, [r2, #0]
 80047ec:	440a      	add	r2, r1
 80047ee:	601a      	str	r2, [r3, #0]
 80047f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80047f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	781b      	ldrb	r3, [r3, #0]
 80047fc:	011a      	lsls	r2, r3, #4
 80047fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004802:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4413      	add	r3, r2
 800480a:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800480e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004812:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004816:	601a      	str	r2, [r3, #0]
 8004818:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800481c:	2b00      	cmp	r3, #0
 800481e:	d122      	bne.n	8004866 <USB_EPStartXfer+0x52e>
 8004820:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004824:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	881b      	ldrh	r3, [r3, #0]
 800482c:	b29b      	uxth	r3, r3
 800482e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004832:	b29a      	uxth	r2, r3
 8004834:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004838:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	801a      	strh	r2, [r3, #0]
 8004840:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004844:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	881b      	ldrh	r3, [r3, #0]
 800484c:	b29b      	uxth	r3, r3
 800484e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004852:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004856:	b29a      	uxth	r2, r3
 8004858:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	801a      	strh	r2, [r3, #0]
 8004864:	e083      	b.n	800496e <USB_EPStartXfer+0x636>
 8004866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800486a:	2b3e      	cmp	r3, #62	; 0x3e
 800486c:	d81b      	bhi.n	80048a6 <USB_EPStartXfer+0x56e>
 800486e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004878:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d004      	beq.n	800488e <USB_EPStartXfer+0x556>
 8004884:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004888:	3301      	adds	r3, #1
 800488a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800488e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004892:	b29b      	uxth	r3, r3
 8004894:	029b      	lsls	r3, r3, #10
 8004896:	b29a      	uxth	r2, r3
 8004898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800489c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	801a      	strh	r2, [r3, #0]
 80048a4:	e063      	b.n	800496e <USB_EPStartXfer+0x636>
 80048a6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048aa:	095b      	lsrs	r3, r3, #5
 80048ac:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80048b4:	f003 031f 	and.w	r3, r3, #31
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d104      	bne.n	80048c6 <USB_EPStartXfer+0x58e>
 80048bc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048c0:	3b01      	subs	r3, #1
 80048c2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80048c6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	029b      	lsls	r3, r3, #10
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048d4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048d8:	b29a      	uxth	r2, r3
 80048da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048de:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	801a      	strh	r2, [r3, #0]
 80048e6:	e042      	b.n	800496e <USB_EPStartXfer+0x636>
 80048e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	785b      	ldrb	r3, [r3, #1]
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d13a      	bne.n	800496e <USB_EPStartXfer+0x636>
 80048f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004900:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004904:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004908:	6812      	ldr	r2, [r2, #0]
 800490a:	601a      	str	r2, [r3, #0]
 800490c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004910:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800491a:	b29b      	uxth	r3, r3
 800491c:	4619      	mov	r1, r3
 800491e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004922:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004926:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800492a:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800492e:	6812      	ldr	r2, [r2, #0]
 8004930:	440a      	add	r2, r1
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004938:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	011a      	lsls	r2, r3, #4
 8004942:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004946:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4413      	add	r3, r2
 800494e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004952:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004956:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800495a:	601a      	str	r2, [r3, #0]
 800495c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004960:	b29a      	uxth	r2, r3
 8004962:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004966:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800496e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	891b      	ldrh	r3, [r3, #8]
 800497a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800497e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004982:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6959      	ldr	r1, [r3, #20]
 800498a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800498e:	b29b      	uxth	r3, r3
 8004990:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004994:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004998:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800499c:	6800      	ldr	r0, [r0, #0]
 800499e:	f001 fc41 	bl	8006224 <USB_WritePMA>
 80049a2:	f000 be0e 	b.w	80055c2 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80049a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	785b      	ldrb	r3, [r3, #1]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d16d      	bne.n	8004a92 <USB_EPStartXfer+0x75a>
 80049b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	64bb      	str	r3, [r7, #72]	; 0x48
 80049c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	461a      	mov	r2, r3
 80049d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049d6:	4413      	add	r3, r2
 80049d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80049da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	011a      	lsls	r2, r3, #4
 80049e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049ea:	4413      	add	r3, r2
 80049ec:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80049f0:	647b      	str	r3, [r7, #68]	; 0x44
 80049f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d112      	bne.n	8004a20 <USB_EPStartXfer+0x6e8>
 80049fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049fc:	881b      	ldrh	r3, [r3, #0]
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a04:	b29a      	uxth	r2, r3
 8004a06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a08:	801a      	strh	r2, [r3, #0]
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a0c:	881b      	ldrh	r3, [r3, #0]
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a18:	b29a      	uxth	r2, r3
 8004a1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a1c:	801a      	strh	r2, [r3, #0]
 8004a1e:	e063      	b.n	8004ae8 <USB_EPStartXfer+0x7b0>
 8004a20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a24:	2b3e      	cmp	r3, #62	; 0x3e
 8004a26:	d817      	bhi.n	8004a58 <USB_EPStartXfer+0x720>
 8004a28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a2c:	085b      	lsrs	r3, r3, #1
 8004a2e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d004      	beq.n	8004a48 <USB_EPStartXfer+0x710>
 8004a3e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a42:	3301      	adds	r3, #1
 8004a44:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a48:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	029b      	lsls	r3, r3, #10
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a54:	801a      	strh	r2, [r3, #0]
 8004a56:	e047      	b.n	8004ae8 <USB_EPStartXfer+0x7b0>
 8004a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a5c:	095b      	lsrs	r3, r3, #5
 8004a5e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a66:	f003 031f 	and.w	r3, r3, #31
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d104      	bne.n	8004a78 <USB_EPStartXfer+0x740>
 8004a6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a72:	3b01      	subs	r3, #1
 8004a74:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004a78:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	029b      	lsls	r3, r3, #10
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004a86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a8e:	801a      	strh	r2, [r3, #0]
 8004a90:	e02a      	b.n	8004ae8 <USB_EPStartXfer+0x7b0>
 8004a92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	785b      	ldrb	r3, [r3, #1]
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d122      	bne.n	8004ae8 <USB_EPStartXfer+0x7b0>
 8004aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	653b      	str	r3, [r7, #80]	; 0x50
 8004aae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ab2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004abc:	b29b      	uxth	r3, r3
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ac2:	4413      	add	r3, r2
 8004ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ac6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	011a      	lsls	r2, r3, #4
 8004ad4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004adc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ade:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004ae8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	891b      	ldrh	r3, [r3, #8]
 8004af4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004af8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004afc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6959      	ldr	r1, [r3, #20]
 8004b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004b0e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004b12:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004b16:	6800      	ldr	r0, [r0, #0]
 8004b18:	f001 fb84 	bl	8006224 <USB_WritePMA>
            ep->xfer_buff += len;
 8004b1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b2c:	441a      	add	r2, r3
 8004b2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004b3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d90f      	bls.n	8004b76 <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 8004b56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	6a1a      	ldr	r2, [r3, #32]
 8004b62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b66:	1ad2      	subs	r2, r2, r3
 8004b68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	621a      	str	r2, [r3, #32]
 8004b74:	e00e      	b.n	8004b94 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 8004b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	6a1b      	ldr	r3, [r3, #32]
 8004b82:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004b86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2200      	movs	r2, #0
 8004b92:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b98:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	643b      	str	r3, [r7, #64]	; 0x40
 8004ba0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	785b      	ldrb	r3, [r3, #1]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d16d      	bne.n	8004c8c <USB_EPStartXfer+0x954>
 8004bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bd0:	4413      	add	r3, r2
 8004bd2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004bd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	781b      	ldrb	r3, [r3, #0]
 8004be0:	011a      	lsls	r2, r3, #4
 8004be2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be4:	4413      	add	r3, r2
 8004be6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004bea:	637b      	str	r3, [r7, #52]	; 0x34
 8004bec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d112      	bne.n	8004c1a <USB_EPStartXfer+0x8e2>
 8004bf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bf6:	881b      	ldrh	r3, [r3, #0]
 8004bf8:	b29b      	uxth	r3, r3
 8004bfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c02:	801a      	strh	r2, [r3, #0]
 8004c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c12:	b29a      	uxth	r2, r3
 8004c14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c16:	801a      	strh	r2, [r3, #0]
 8004c18:	e05d      	b.n	8004cd6 <USB_EPStartXfer+0x99e>
 8004c1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c1e:	2b3e      	cmp	r3, #62	; 0x3e
 8004c20:	d817      	bhi.n	8004c52 <USB_EPStartXfer+0x91a>
 8004c22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c26:	085b      	lsrs	r3, r3, #1
 8004c28:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d004      	beq.n	8004c42 <USB_EPStartXfer+0x90a>
 8004c38:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	029b      	lsls	r3, r3, #10
 8004c4a:	b29a      	uxth	r2, r3
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	801a      	strh	r2, [r3, #0]
 8004c50:	e041      	b.n	8004cd6 <USB_EPStartXfer+0x99e>
 8004c52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c56:	095b      	lsrs	r3, r3, #5
 8004c58:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c5c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c60:	f003 031f 	and.w	r3, r3, #31
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d104      	bne.n	8004c72 <USB_EPStartXfer+0x93a>
 8004c68:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c6c:	3b01      	subs	r3, #1
 8004c6e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8004c72:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	029b      	lsls	r3, r3, #10
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004c80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004c84:	b29a      	uxth	r2, r3
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	801a      	strh	r2, [r3, #0]
 8004c8a:	e024      	b.n	8004cd6 <USB_EPStartXfer+0x99e>
 8004c8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	785b      	ldrb	r3, [r3, #1]
 8004c98:	2b01      	cmp	r3, #1
 8004c9a:	d11c      	bne.n	8004cd6 <USB_EPStartXfer+0x99e>
 8004c9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004caa:	b29b      	uxth	r3, r3
 8004cac:	461a      	mov	r2, r3
 8004cae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cb0:	4413      	add	r3, r2
 8004cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8004cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	011a      	lsls	r2, r3, #4
 8004cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cc4:	4413      	add	r3, r2
 8004cc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004cca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ccc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cd0:	b29a      	uxth	r2, r3
 8004cd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	895b      	ldrh	r3, [r3, #10]
 8004ce2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6959      	ldr	r1, [r3, #20]
 8004cf2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004cfc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d00:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d04:	6800      	ldr	r0, [r0, #0]
 8004d06:	f001 fa8d 	bl	8006224 <USB_WritePMA>
 8004d0a:	f000 bc5a 	b.w	80055c2 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8004d0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8004d1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d22:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	881b      	ldrh	r3, [r3, #0]
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8004d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d44:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8004d48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d4c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d50:	681a      	ldr	r2, [r3, #0]
 8004d52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	441a      	add	r2, r3
 8004d62:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004d66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d9a:	4413      	add	r3, r2
 8004d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	781b      	ldrb	r3, [r3, #0]
 8004daa:	011a      	lsls	r2, r3, #4
 8004dac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004dae:	4413      	add	r3, r2
 8004db0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004db4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004db6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004dba:	b29a      	uxth	r2, r3
 8004dbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004dbe:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	891b      	ldrh	r3, [r3, #8]
 8004dcc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	6959      	ldr	r1, [r3, #20]
 8004ddc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004de6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004dea:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004dee:	6800      	ldr	r0, [r0, #0]
 8004df0:	f001 fa18 	bl	8006224 <USB_WritePMA>
 8004df4:	e3e5      	b.n	80055c2 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8004df6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dfa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dfe:	681a      	ldr	r2, [r3, #0]
 8004e00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	781b      	ldrb	r3, [r3, #0]
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	4413      	add	r3, r2
 8004e10:	881b      	ldrh	r3, [r3, #0]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e1c:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8004e20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	441a      	add	r2, r3
 8004e3a:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8004e3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e46:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8004e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6a1a      	ldr	r2, [r3, #32]
 8004e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e62:	1ad2      	subs	r2, r2, r3
 8004e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e74:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	881b      	ldrh	r3, [r3, #0]
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f000 81bc 	beq.w	8005210 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ea6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	785b      	ldrb	r3, [r3, #1]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d16d      	bne.n	8004f92 <USB_EPStartXfer+0xc5a>
 8004eb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ed6:	4413      	add	r3, r2
 8004ed8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	011a      	lsls	r2, r3, #4
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eea:	4413      	add	r3, r2
 8004eec:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004ef0:	677b      	str	r3, [r7, #116]	; 0x74
 8004ef2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d112      	bne.n	8004f20 <USB_EPStartXfer+0xbe8>
 8004efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004efc:	881b      	ldrh	r3, [r3, #0]
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f04:	b29a      	uxth	r2, r3
 8004f06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f08:	801a      	strh	r2, [r3, #0]
 8004f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f0c:	881b      	ldrh	r3, [r3, #0]
 8004f0e:	b29b      	uxth	r3, r3
 8004f10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e060      	b.n	8004fe2 <USB_EPStartXfer+0xcaa>
 8004f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f24:	2b3e      	cmp	r3, #62	; 0x3e
 8004f26:	d817      	bhi.n	8004f58 <USB_EPStartXfer+0xc20>
 8004f28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2c:	085b      	lsrs	r3, r3, #1
 8004f2e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d004      	beq.n	8004f48 <USB_EPStartXfer+0xc10>
 8004f3e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f42:	3301      	adds	r3, #1
 8004f44:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f48:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	029b      	lsls	r3, r3, #10
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f54:	801a      	strh	r2, [r3, #0]
 8004f56:	e044      	b.n	8004fe2 <USB_EPStartXfer+0xcaa>
 8004f58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f5c:	095b      	lsrs	r3, r3, #5
 8004f5e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f66:	f003 031f 	and.w	r3, r3, #31
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d104      	bne.n	8004f78 <USB_EPStartXfer+0xc40>
 8004f6e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f72:	3b01      	subs	r3, #1
 8004f74:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8004f78:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	029b      	lsls	r3, r3, #10
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f8a:	b29a      	uxth	r2, r3
 8004f8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f8e:	801a      	strh	r2, [r3, #0]
 8004f90:	e027      	b.n	8004fe2 <USB_EPStartXfer+0xcaa>
 8004f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	785b      	ldrb	r3, [r3, #1]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d11f      	bne.n	8004fe2 <USB_EPStartXfer+0xcaa>
 8004fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fb8:	4413      	add	r3, r2
 8004fba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004fbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	011a      	lsls	r2, r3, #4
 8004fcc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004fd0:	4413      	add	r3, r2
 8004fd2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004fd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004fe0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8004fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	895b      	ldrh	r3, [r3, #10]
 8004fee:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	6959      	ldr	r1, [r3, #20]
 8004ffe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005002:	b29b      	uxth	r3, r3
 8005004:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005008:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800500c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005010:	6800      	ldr	r0, [r0, #0]
 8005012:	f001 f907 	bl	8006224 <USB_WritePMA>
          ep->xfer_buff += len;
 8005016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800501a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005026:	441a      	add	r2, r3
 8005028:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005034:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005038:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	6a1a      	ldr	r2, [r3, #32]
 8005040:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005044:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	429a      	cmp	r2, r3
 800504e:	d90f      	bls.n	8005070 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005050:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005054:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	6a1a      	ldr	r2, [r3, #32]
 800505c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005060:	1ad2      	subs	r2, r2, r3
 8005062:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005066:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	621a      	str	r2, [r3, #32]
 800506e:	e00e      	b.n	800508e <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005080:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005084:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800508e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8295 	beq.w	80055c2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d16d      	bne.n	8005184 <USB_EPStartXfer+0xe4c>
 80050a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80050b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	461a      	mov	r2, r3
 80050c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050c8:	4413      	add	r3, r2
 80050ca:	66bb      	str	r3, [r7, #104]	; 0x68
 80050cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	011a      	lsls	r2, r3, #4
 80050da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80050dc:	4413      	add	r3, r2
 80050de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80050e2:	667b      	str	r3, [r7, #100]	; 0x64
 80050e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d112      	bne.n	8005112 <USB_EPStartXfer+0xdda>
 80050ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050ee:	881b      	ldrh	r3, [r3, #0]
 80050f0:	b29b      	uxth	r3, r3
 80050f2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050f6:	b29a      	uxth	r2, r3
 80050f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050fa:	801a      	strh	r2, [r3, #0]
 80050fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050fe:	881b      	ldrh	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005106:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800510a:	b29a      	uxth	r2, r3
 800510c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800510e:	801a      	strh	r2, [r3, #0]
 8005110:	e063      	b.n	80051da <USB_EPStartXfer+0xea2>
 8005112:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005116:	2b3e      	cmp	r3, #62	; 0x3e
 8005118:	d817      	bhi.n	800514a <USB_EPStartXfer+0xe12>
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	085b      	lsrs	r3, r3, #1
 8005120:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b00      	cmp	r3, #0
 800512e:	d004      	beq.n	800513a <USB_EPStartXfer+0xe02>
 8005130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005134:	3301      	adds	r3, #1
 8005136:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800513a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29a      	uxth	r2, r3
 8005144:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005146:	801a      	strh	r2, [r3, #0]
 8005148:	e047      	b.n	80051da <USB_EPStartXfer+0xea2>
 800514a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800514e:	095b      	lsrs	r3, r3, #5
 8005150:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005154:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005158:	f003 031f 	and.w	r3, r3, #31
 800515c:	2b00      	cmp	r3, #0
 800515e:	d104      	bne.n	800516a <USB_EPStartXfer+0xe32>
 8005160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005164:	3b01      	subs	r3, #1
 8005166:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800516a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800516e:	b29b      	uxth	r3, r3
 8005170:	029b      	lsls	r3, r3, #10
 8005172:	b29b      	uxth	r3, r3
 8005174:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005178:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800517c:	b29a      	uxth	r2, r3
 800517e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005180:	801a      	strh	r2, [r3, #0]
 8005182:	e02a      	b.n	80051da <USB_EPStartXfer+0xea2>
 8005184:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005188:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d122      	bne.n	80051da <USB_EPStartXfer+0xea2>
 8005194:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005198:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	673b      	str	r3, [r7, #112]	; 0x70
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80051ae:	b29b      	uxth	r3, r3
 80051b0:	461a      	mov	r2, r3
 80051b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051b4:	4413      	add	r3, r2
 80051b6:	673b      	str	r3, [r7, #112]	; 0x70
 80051b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	011a      	lsls	r2, r3, #4
 80051c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051c8:	4413      	add	r3, r2
 80051ca:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80051ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80051d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d4:	b29a      	uxth	r2, r3
 80051d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	891b      	ldrh	r3, [r3, #8]
 80051e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	6959      	ldr	r1, [r3, #20]
 80051f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005200:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005204:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005208:	6800      	ldr	r0, [r0, #0]
 800520a:	f001 f80b 	bl	8006224 <USB_WritePMA>
 800520e:	e1d8      	b.n	80055c2 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	785b      	ldrb	r3, [r3, #1]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d178      	bne.n	8005312 <USB_EPStartXfer+0xfda>
 8005220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005224:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800522e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800523c:	b29b      	uxth	r3, r3
 800523e:	461a      	mov	r2, r3
 8005240:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005244:	4413      	add	r3, r2
 8005246:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800524a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	011a      	lsls	r2, r3, #4
 8005258:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800525c:	4413      	add	r3, r2
 800525e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005262:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800526a:	2b00      	cmp	r3, #0
 800526c:	d116      	bne.n	800529c <USB_EPStartXfer+0xf64>
 800526e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005272:	881b      	ldrh	r3, [r3, #0]
 8005274:	b29b      	uxth	r3, r3
 8005276:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800527a:	b29a      	uxth	r2, r3
 800527c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005280:	801a      	strh	r2, [r3, #0]
 8005282:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005286:	881b      	ldrh	r3, [r3, #0]
 8005288:	b29b      	uxth	r3, r3
 800528a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800528e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005292:	b29a      	uxth	r2, r3
 8005294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005298:	801a      	strh	r2, [r3, #0]
 800529a:	e06b      	b.n	8005374 <USB_EPStartXfer+0x103c>
 800529c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a0:	2b3e      	cmp	r3, #62	; 0x3e
 80052a2:	d818      	bhi.n	80052d6 <USB_EPStartXfer+0xf9e>
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	085b      	lsrs	r3, r3, #1
 80052aa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052b2:	f003 0301 	and.w	r3, r3, #1
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d004      	beq.n	80052c4 <USB_EPStartXfer+0xf8c>
 80052ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052be:	3301      	adds	r3, #1
 80052c0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	029b      	lsls	r3, r3, #10
 80052cc:	b29a      	uxth	r2, r3
 80052ce:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80052d2:	801a      	strh	r2, [r3, #0]
 80052d4:	e04e      	b.n	8005374 <USB_EPStartXfer+0x103c>
 80052d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052e4:	f003 031f 	and.w	r3, r3, #31
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d104      	bne.n	80052f6 <USB_EPStartXfer+0xfbe>
 80052ec:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052f0:	3b01      	subs	r3, #1
 80052f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80052f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	029b      	lsls	r3, r3, #10
 80052fe:	b29b      	uxth	r3, r3
 8005300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005308:	b29a      	uxth	r2, r3
 800530a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800530e:	801a      	strh	r2, [r3, #0]
 8005310:	e030      	b.n	8005374 <USB_EPStartXfer+0x103c>
 8005312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005316:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	785b      	ldrb	r3, [r3, #1]
 800531e:	2b01      	cmp	r3, #1
 8005320:	d128      	bne.n	8005374 <USB_EPStartXfer+0x103c>
 8005322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005326:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005330:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005334:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800533e:	b29b      	uxth	r3, r3
 8005340:	461a      	mov	r2, r3
 8005342:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005346:	4413      	add	r3, r2
 8005348:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800534c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005350:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	011a      	lsls	r2, r3, #4
 800535a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800535e:	4413      	add	r3, r2
 8005360:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005364:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005368:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536c:	b29a      	uxth	r2, r3
 800536e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005372:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	891b      	ldrh	r3, [r3, #8]
 8005380:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005384:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005388:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6959      	ldr	r1, [r3, #20]
 8005390:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005394:	b29b      	uxth	r3, r3
 8005396:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800539a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800539e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80053a2:	6800      	ldr	r0, [r0, #0]
 80053a4:	f000 ff3e 	bl	8006224 <USB_WritePMA>
          ep->xfer_buff += len;
 80053a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	695a      	ldr	r2, [r3, #20]
 80053b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b8:	441a      	add	r2, r3
 80053ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80053c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	691b      	ldr	r3, [r3, #16]
 80053de:	429a      	cmp	r2, r3
 80053e0:	d90f      	bls.n	8005402 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6a1a      	ldr	r2, [r3, #32]
 80053ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	621a      	str	r2, [r3, #32]
 8005400:	e00e      	b.n	8005420 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005406:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005412:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005416:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	2200      	movs	r2, #0
 800541e:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80cc 	beq.w	80055c2 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800542a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800542e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	785b      	ldrb	r3, [r3, #1]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d178      	bne.n	800553a <USB_EPStartXfer+0x1202>
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005456:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005464:	b29b      	uxth	r3, r3
 8005466:	461a      	mov	r2, r3
 8005468:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800546c:	4413      	add	r3, r2
 800546e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005472:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005476:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	011a      	lsls	r2, r3, #4
 8005480:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005484:	4413      	add	r3, r2
 8005486:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800548a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800548e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d116      	bne.n	80054c4 <USB_EPStartXfer+0x118c>
 8005496:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800549a:	881b      	ldrh	r3, [r3, #0]
 800549c:	b29b      	uxth	r3, r3
 800549e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054a8:	801a      	strh	r2, [r3, #0]
 80054aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054ae:	881b      	ldrh	r3, [r3, #0]
 80054b0:	b29b      	uxth	r3, r3
 80054b2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80054b6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054ba:	b29a      	uxth	r2, r3
 80054bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054c0:	801a      	strh	r2, [r3, #0]
 80054c2:	e064      	b.n	800558e <USB_EPStartXfer+0x1256>
 80054c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c8:	2b3e      	cmp	r3, #62	; 0x3e
 80054ca:	d818      	bhi.n	80054fe <USB_EPStartXfer+0x11c6>
 80054cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054d0:	085b      	lsrs	r3, r3, #1
 80054d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <USB_EPStartXfer+0x11b4>
 80054e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054e6:	3301      	adds	r3, #1
 80054e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80054ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	029b      	lsls	r3, r3, #10
 80054f4:	b29a      	uxth	r2, r3
 80054f6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054fa:	801a      	strh	r2, [r3, #0]
 80054fc:	e047      	b.n	800558e <USB_EPStartXfer+0x1256>
 80054fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005502:	095b      	lsrs	r3, r3, #5
 8005504:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800550c:	f003 031f 	and.w	r3, r3, #31
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <USB_EPStartXfer+0x11e6>
 8005514:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005518:	3b01      	subs	r3, #1
 800551a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800551e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005522:	b29b      	uxth	r3, r3
 8005524:	029b      	lsls	r3, r3, #10
 8005526:	b29b      	uxth	r3, r3
 8005528:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800552c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005530:	b29a      	uxth	r2, r3
 8005532:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	e029      	b.n	800558e <USB_EPStartXfer+0x1256>
 800553a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	2b01      	cmp	r3, #1
 8005548:	d121      	bne.n	800558e <USB_EPStartXfer+0x1256>
 800554a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005558:	b29b      	uxth	r3, r3
 800555a:	461a      	mov	r2, r3
 800555c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005560:	4413      	add	r3, r2
 8005562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005566:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800556a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	011a      	lsls	r2, r3, #4
 8005574:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005578:	4413      	add	r3, r2
 800557a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800557e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005586:	b29a      	uxth	r2, r3
 8005588:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800558c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800558e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	895b      	ldrh	r3, [r3, #10]
 800559a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800559e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	6959      	ldr	r1, [r3, #20]
 80055aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80055b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80055bc:	6800      	ldr	r0, [r0, #0]
 80055be:	f000 fe31 	bl	8006224 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80055c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	009b      	lsls	r3, r3, #2
 80055da:	4413      	add	r3, r2
 80055dc:	881b      	ldrh	r3, [r3, #0]
 80055de:	b29b      	uxth	r3, r3
 80055e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e4:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80055e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055f0:	8013      	strh	r3, [r2, #0]
 80055f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80055fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055fe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005602:	8812      	ldrh	r2, [r2, #0]
 8005604:	f082 0210 	eor.w	r2, r2, #16
 8005608:	801a      	strh	r2, [r3, #0]
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005612:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005616:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800561a:	8812      	ldrh	r2, [r2, #0]
 800561c:	f082 0220 	eor.w	r2, r2, #32
 8005620:	801a      	strh	r2, [r3, #0]
 8005622:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005626:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005630:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	441a      	add	r2, r3
 800563c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005640:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005644:	881b      	ldrh	r3, [r3, #0]
 8005646:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800564a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800564e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005652:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005656:	b29b      	uxth	r3, r3
 8005658:	8013      	strh	r3, [r2, #0]
 800565a:	f000 bc9f 	b.w	8005f9c <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800565e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005662:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	7b1b      	ldrb	r3, [r3, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	f040 80ae 	bne.w	80057cc <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	699a      	ldr	r2, [r3, #24]
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	429a      	cmp	r2, r3
 800568a:	d917      	bls.n	80056bc <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800568c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005690:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800569c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	699a      	ldr	r2, [r3, #24]
 80056a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ac:	1ad2      	subs	r2, r2, r3
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	619a      	str	r2, [r3, #24]
 80056ba:	e00e      	b.n	80056da <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80056bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80056cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2200      	movs	r2, #0
 80056d8:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80056da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	461a      	mov	r2, r3
 80056fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80056fe:	4413      	add	r3, r2
 8005700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	011a      	lsls	r2, r3, #4
 8005712:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005716:	4413      	add	r3, r2
 8005718:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800571c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005720:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d116      	bne.n	8005756 <USB_EPStartXfer+0x141e>
 8005728:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800572c:	881b      	ldrh	r3, [r3, #0]
 800572e:	b29b      	uxth	r3, r3
 8005730:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005734:	b29a      	uxth	r2, r3
 8005736:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800573a:	801a      	strh	r2, [r3, #0]
 800573c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005740:	881b      	ldrh	r3, [r3, #0]
 8005742:	b29b      	uxth	r3, r3
 8005744:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005748:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800574c:	b29a      	uxth	r2, r3
 800574e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005752:	801a      	strh	r2, [r3, #0]
 8005754:	e3e8      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575a:	2b3e      	cmp	r3, #62	; 0x3e
 800575c:	d818      	bhi.n	8005790 <USB_EPStartXfer+0x1458>
 800575e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005762:	085b      	lsrs	r3, r3, #1
 8005764:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005768:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800576c:	f003 0301 	and.w	r3, r3, #1
 8005770:	2b00      	cmp	r3, #0
 8005772:	d004      	beq.n	800577e <USB_EPStartXfer+0x1446>
 8005774:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005778:	3301      	adds	r3, #1
 800577a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800577e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005782:	b29b      	uxth	r3, r3
 8005784:	029b      	lsls	r3, r3, #10
 8005786:	b29a      	uxth	r2, r3
 8005788:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800578c:	801a      	strh	r2, [r3, #0]
 800578e:	e3cb      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	f003 031f 	and.w	r3, r3, #31
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d104      	bne.n	80057b0 <USB_EPStartXfer+0x1478>
 80057a6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057aa:	3b01      	subs	r3, #1
 80057ac:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80057b0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057be:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057c2:	b29a      	uxth	r2, r3
 80057c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057c8:	801a      	strh	r2, [r3, #0]
 80057ca:	e3ad      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	78db      	ldrb	r3, [r3, #3]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	f040 8200 	bne.w	8005bde <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80057de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	785b      	ldrb	r3, [r3, #1]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	f040 8091 	bne.w	8005912 <USB_EPStartXfer+0x15da>
 80057f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005802:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005814:	4413      	add	r3, r2
 8005816:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800581a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800581e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	011a      	lsls	r2, r3, #4
 8005828:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800582c:	4413      	add	r3, r2
 800582e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005836:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	691b      	ldr	r3, [r3, #16]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d116      	bne.n	8005874 <USB_EPStartXfer+0x153c>
 8005846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800584a:	881b      	ldrh	r3, [r3, #0]
 800584c:	b29b      	uxth	r3, r3
 800584e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005852:	b29a      	uxth	r2, r3
 8005854:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005858:	801a      	strh	r2, [r3, #0]
 800585a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800585e:	881b      	ldrh	r3, [r3, #0]
 8005860:	b29b      	uxth	r3, r3
 8005862:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005866:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800586a:	b29a      	uxth	r2, r3
 800586c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005870:	801a      	strh	r2, [r3, #0]
 8005872:	e083      	b.n	800597c <USB_EPStartXfer+0x1644>
 8005874:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005878:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	2b3e      	cmp	r3, #62	; 0x3e
 8005882:	d820      	bhi.n	80058c6 <USB_EPStartXfer+0x158e>
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	085b      	lsrs	r3, r3, #1
 8005892:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f003 0301 	and.w	r3, r3, #1
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <USB_EPStartXfer+0x157c>
 80058aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058ae:	3301      	adds	r3, #1
 80058b0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	029b      	lsls	r3, r3, #10
 80058bc:	b29a      	uxth	r2, r3
 80058be:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e05a      	b.n	800597c <USB_EPStartXfer+0x1644>
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	691b      	ldr	r3, [r3, #16]
 80058d2:	095b      	lsrs	r3, r3, #5
 80058d4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	691b      	ldr	r3, [r3, #16]
 80058e4:	f003 031f 	and.w	r3, r3, #31
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d104      	bne.n	80058f6 <USB_EPStartXfer+0x15be>
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058f0:	3b01      	subs	r3, #1
 80058f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80058f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80058fa:	b29b      	uxth	r3, r3
 80058fc:	029b      	lsls	r3, r3, #10
 80058fe:	b29b      	uxth	r3, r3
 8005900:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005904:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005908:	b29a      	uxth	r2, r3
 800590a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800590e:	801a      	strh	r2, [r3, #0]
 8005910:	e034      	b.n	800597c <USB_EPStartXfer+0x1644>
 8005912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	785b      	ldrb	r3, [r3, #1]
 800591e:	2b01      	cmp	r3, #1
 8005920:	d12c      	bne.n	800597c <USB_EPStartXfer+0x1644>
 8005922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005926:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005934:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800593e:	b29b      	uxth	r3, r3
 8005940:	461a      	mov	r2, r3
 8005942:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005946:	4413      	add	r3, r2
 8005948:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800594c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005950:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	781b      	ldrb	r3, [r3, #0]
 8005958:	011a      	lsls	r2, r3, #4
 800595a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800595e:	4413      	add	r3, r2
 8005960:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005964:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	b29a      	uxth	r2, r3
 8005976:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800597a:	801a      	strh	r2, [r3, #0]
 800597c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800598a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800598e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	785b      	ldrb	r3, [r3, #1]
 8005996:	2b00      	cmp	r3, #0
 8005998:	f040 8091 	bne.w	8005abe <USB_EPStartXfer+0x1786>
 800599c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	461a      	mov	r2, r3
 80059bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059c0:	4413      	add	r3, r2
 80059c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80059c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	011a      	lsls	r2, r3, #4
 80059d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80059d8:	4413      	add	r3, r2
 80059da:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059de:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d116      	bne.n	8005a20 <USB_EPStartXfer+0x16e8>
 80059f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059f6:	881b      	ldrh	r3, [r3, #0]
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a04:	801a      	strh	r2, [r3, #0]
 8005a06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a0a:	881b      	ldrh	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a16:	b29a      	uxth	r2, r3
 8005a18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a1c:	801a      	strh	r2, [r3, #0]
 8005a1e:	e07c      	b.n	8005b1a <USB_EPStartXfer+0x17e2>
 8005a20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b3e      	cmp	r3, #62	; 0x3e
 8005a2e:	d820      	bhi.n	8005a72 <USB_EPStartXfer+0x173a>
 8005a30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691b      	ldr	r3, [r3, #16]
 8005a3c:	085b      	lsrs	r3, r3, #1
 8005a3e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	691b      	ldr	r3, [r3, #16]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d004      	beq.n	8005a60 <USB_EPStartXfer+0x1728>
 8005a56:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	b29a      	uxth	r2, r3
 8005a6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a6e:	801a      	strh	r2, [r3, #0]
 8005a70:	e053      	b.n	8005b1a <USB_EPStartXfer+0x17e2>
 8005a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	095b      	lsrs	r3, r3, #5
 8005a80:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 031f 	and.w	r3, r3, #31
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d104      	bne.n	8005aa2 <USB_EPStartXfer+0x176a>
 8005a98:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005a9c:	3b01      	subs	r3, #1
 8005a9e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005aa2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	029b      	lsls	r3, r3, #10
 8005aaa:	b29b      	uxth	r3, r3
 8005aac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ab0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005aba:	801a      	strh	r2, [r3, #0]
 8005abc:	e02d      	b.n	8005b1a <USB_EPStartXfer+0x17e2>
 8005abe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d125      	bne.n	8005b1a <USB_EPStartXfer+0x17e2>
 8005ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005adc:	b29b      	uxth	r3, r3
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005ae4:	4413      	add	r3, r2
 8005ae6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	011a      	lsls	r2, r3, #4
 8005af8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005b02:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	691b      	ldr	r3, [r3, #16]
 8005b12:	b29a      	uxth	r2, r3
 8005b14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b18:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005b1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 81fe 	beq.w	8005f28 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005b2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b34:	681a      	ldr	r2, [r3, #0]
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	881b      	ldrh	r3, [r3, #0]
 8005b48:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b4c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <USB_EPStartXfer+0x182c>
 8005b58:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d10d      	bne.n	8005b80 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b64:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	f040 81db 	bne.w	8005f28 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8005b72:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	f040 81d4 	bne.w	8005f28 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8005b80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4413      	add	r3, r2
 8005b9a:	881b      	ldrh	r3, [r3, #0]
 8005b9c:	b29b      	uxth	r3, r3
 8005b9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ba6:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8005baa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	441a      	add	r2, r3
 8005bc4:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8005bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005bd8:	b29b      	uxth	r3, r3
 8005bda:	8013      	strh	r3, [r2, #0]
 8005bdc:	e1a4      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8005bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	78db      	ldrb	r3, [r3, #3]
 8005bea:	2b01      	cmp	r3, #1
 8005bec:	f040 819a 	bne.w	8005f24 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8005bf0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bf4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	691b      	ldr	r3, [r3, #16]
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	d917      	bls.n	8005c3c <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8005c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	691b      	ldr	r3, [r3, #16]
 8005c18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8005c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	699a      	ldr	r2, [r3, #24]
 8005c28:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2c:	1ad2      	subs	r2, r2, r3
 8005c2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	619a      	str	r2, [r3, #24]
 8005c3a:	e00e      	b.n	8005c5a <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8005c3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	699b      	ldr	r3, [r3, #24]
 8005c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8005c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	2200      	movs	r2, #0
 8005c58:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005c5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	785b      	ldrb	r3, [r3, #1]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d178      	bne.n	8005d5c <USB_EPStartXfer+0x1a24>
 8005c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c86:	b29b      	uxth	r3, r3
 8005c88:	461a      	mov	r2, r3
 8005c8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005c8e:	4413      	add	r3, r2
 8005c90:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	011a      	lsls	r2, r3, #4
 8005ca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8005ca6:	4413      	add	r3, r2
 8005ca8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cac:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005cb0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d116      	bne.n	8005ce6 <USB_EPStartXfer+0x19ae>
 8005cb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cbc:	881b      	ldrh	r3, [r3, #0]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005cc4:	b29a      	uxth	r2, r3
 8005cc6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cca:	801a      	strh	r2, [r3, #0]
 8005ccc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005cd0:	881b      	ldrh	r3, [r3, #0]
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005cd8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005ce2:	801a      	strh	r2, [r3, #0]
 8005ce4:	e06b      	b.n	8005dbe <USB_EPStartXfer+0x1a86>
 8005ce6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cea:	2b3e      	cmp	r3, #62	; 0x3e
 8005cec:	d818      	bhi.n	8005d20 <USB_EPStartXfer+0x19e8>
 8005cee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005cf8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cfc:	f003 0301 	and.w	r3, r3, #1
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d004      	beq.n	8005d0e <USB_EPStartXfer+0x19d6>
 8005d04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d08:	3301      	adds	r3, #1
 8005d0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d12:	b29b      	uxth	r3, r3
 8005d14:	029b      	lsls	r3, r3, #10
 8005d16:	b29a      	uxth	r2, r3
 8005d18:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d1c:	801a      	strh	r2, [r3, #0]
 8005d1e:	e04e      	b.n	8005dbe <USB_EPStartXfer+0x1a86>
 8005d20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d2e:	f003 031f 	and.w	r3, r3, #31
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d104      	bne.n	8005d40 <USB_EPStartXfer+0x1a08>
 8005d36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8005d40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d44:	b29b      	uxth	r3, r3
 8005d46:	029b      	lsls	r3, r3, #10
 8005d48:	b29b      	uxth	r3, r3
 8005d4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d58:	801a      	strh	r2, [r3, #0]
 8005d5a:	e030      	b.n	8005dbe <USB_EPStartXfer+0x1a86>
 8005d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	785b      	ldrb	r3, [r3, #1]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d128      	bne.n	8005dbe <USB_EPStartXfer+0x1a86>
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	461a      	mov	r2, r3
 8005d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d90:	4413      	add	r3, r2
 8005d92:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005d96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	011a      	lsls	r2, r3, #4
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da8:	4413      	add	r3, r2
 8005daa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dae:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005db2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db6:	b29a      	uxth	r2, r3
 8005db8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005dbc:	801a      	strh	r2, [r3, #0]
 8005dbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dc2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005dcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	785b      	ldrb	r3, [r3, #1]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d178      	bne.n	8005ece <USB_EPStartXfer+0x1b96>
 8005ddc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005de0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e00:	4413      	add	r3, r2
 8005e02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005e06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	011a      	lsls	r2, r3, #4
 8005e14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e18:	4413      	add	r3, r2
 8005e1a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005e22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d116      	bne.n	8005e58 <USB_EPStartXfer+0x1b20>
 8005e2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e2e:	881b      	ldrh	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3c:	801a      	strh	r2, [r3, #0]
 8005e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e42:	881b      	ldrh	r3, [r3, #0]
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e4a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4e:	b29a      	uxth	r2, r3
 8005e50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e54:	801a      	strh	r2, [r3, #0]
 8005e56:	e067      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005e58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5c:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5e:	d818      	bhi.n	8005e92 <USB_EPStartXfer+0x1b5a>
 8005e60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e64:	085b      	lsrs	r3, r3, #1
 8005e66:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e6a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6e:	f003 0301 	and.w	r3, r3, #1
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d004      	beq.n	8005e80 <USB_EPStartXfer+0x1b48>
 8005e76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e7a:	3301      	adds	r3, #1
 8005e7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e80:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005e84:	b29b      	uxth	r3, r3
 8005e86:	029b      	lsls	r3, r3, #10
 8005e88:	b29a      	uxth	r2, r3
 8005e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e8e:	801a      	strh	r2, [r3, #0]
 8005e90:	e04a      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005e92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e96:	095b      	lsrs	r3, r3, #5
 8005e98:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005e9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ea0:	f003 031f 	and.w	r3, r3, #31
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d104      	bne.n	8005eb2 <USB_EPStartXfer+0x1b7a>
 8005ea8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eac:	3b01      	subs	r3, #1
 8005eae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005eb2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005eb6:	b29b      	uxth	r3, r3
 8005eb8:	029b      	lsls	r3, r3, #10
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ec0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eca:	801a      	strh	r2, [r3, #0]
 8005ecc:	e02c      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	785b      	ldrb	r3, [r3, #1]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d124      	bne.n	8005f28 <USB_EPStartXfer+0x1bf0>
 8005ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ee2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	461a      	mov	r2, r3
 8005ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ef4:	4413      	add	r3, r2
 8005ef6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005efa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	011a      	lsls	r2, r3, #4
 8005f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0c:	4413      	add	r3, r2
 8005f0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005f12:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f1a:	b29a      	uxth	r2, r3
 8005f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f20:	801a      	strh	r2, [r3, #0]
 8005f22:	e001      	b.n	8005f28 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e03a      	b.n	8005f9e <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f36:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	881b      	ldrh	r3, [r3, #0]
 8005f44:	b29b      	uxth	r3, r3
 8005f46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f52:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f56:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005f5a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f5e:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f62:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005f66:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8005f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	781b      	ldrb	r3, [r3, #0]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	441a      	add	r2, r3
 8005f84:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005f88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}

08005fa8 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005fa8:	b480      	push	{r7}
 8005faa:	b085      	sub	sp, #20
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
 8005fb0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d020      	beq.n	8005ffc <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8005fba:	687a      	ldr	r2, [r7, #4]
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	781b      	ldrb	r3, [r3, #0]
 8005fc0:	009b      	lsls	r3, r3, #2
 8005fc2:	4413      	add	r3, r2
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	b29b      	uxth	r3, r3
 8005fc8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fcc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fd0:	81bb      	strh	r3, [r7, #12]
 8005fd2:	89bb      	ldrh	r3, [r7, #12]
 8005fd4:	f083 0310 	eor.w	r3, r3, #16
 8005fd8:	81bb      	strh	r3, [r7, #12]
 8005fda:	687a      	ldr	r2, [r7, #4]
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	009b      	lsls	r3, r3, #2
 8005fe2:	441a      	add	r2, r3
 8005fe4:	89bb      	ldrh	r3, [r7, #12]
 8005fe6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005fea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005fee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	8013      	strh	r3, [r2, #0]
 8005ffa:	e01f      	b.n	800603c <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	881b      	ldrh	r3, [r3, #0]
 8006008:	b29b      	uxth	r3, r3
 800600a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800600e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006012:	81fb      	strh	r3, [r7, #14]
 8006014:	89fb      	ldrh	r3, [r7, #14]
 8006016:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800601a:	81fb      	strh	r3, [r7, #14]
 800601c:	687a      	ldr	r2, [r7, #4]
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	441a      	add	r2, r3
 8006026:	89fb      	ldrh	r3, [r7, #14]
 8006028:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800602c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006030:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006038:	b29b      	uxth	r3, r3
 800603a:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800603c:	2300      	movs	r3, #0
}
 800603e:	4618      	mov	r0, r3
 8006040:	3714      	adds	r7, #20
 8006042:	46bd      	mov	sp, r7
 8006044:	bc80      	pop	{r7}
 8006046:	4770      	bx	lr

08006048 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006048:	b480      	push	{r7}
 800604a:	b087      	sub	sp, #28
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	7b1b      	ldrb	r3, [r3, #12]
 8006056:	2b00      	cmp	r3, #0
 8006058:	f040 809d 	bne.w	8006196 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	785b      	ldrb	r3, [r3, #1]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d04c      	beq.n	80060fe <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	781b      	ldrb	r3, [r3, #0]
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4413      	add	r3, r2
 800606e:	881b      	ldrh	r3, [r3, #0]
 8006070:	823b      	strh	r3, [r7, #16]
 8006072:	8a3b      	ldrh	r3, [r7, #16]
 8006074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006078:	2b00      	cmp	r3, #0
 800607a:	d01b      	beq.n	80060b4 <USB_EPClearStall+0x6c>
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	881b      	ldrh	r3, [r3, #0]
 8006088:	b29b      	uxth	r3, r3
 800608a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800608e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006092:	81fb      	strh	r3, [r7, #14]
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	781b      	ldrb	r3, [r3, #0]
 800609a:	009b      	lsls	r3, r3, #2
 800609c:	441a      	add	r2, r3
 800609e:	89fb      	ldrh	r3, [r7, #14]
 80060a0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060a4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060ac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060b0:	b29b      	uxth	r3, r3
 80060b2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	78db      	ldrb	r3, [r3, #3]
 80060b8:	2b01      	cmp	r3, #1
 80060ba:	d06c      	beq.n	8006196 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	781b      	ldrb	r3, [r3, #0]
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4413      	add	r3, r2
 80060c6:	881b      	ldrh	r3, [r3, #0]
 80060c8:	b29b      	uxth	r3, r3
 80060ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d2:	81bb      	strh	r3, [r7, #12]
 80060d4:	89bb      	ldrh	r3, [r7, #12]
 80060d6:	f083 0320 	eor.w	r3, r3, #32
 80060da:	81bb      	strh	r3, [r7, #12]
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	441a      	add	r2, r3
 80060e6:	89bb      	ldrh	r3, [r7, #12]
 80060e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	b29b      	uxth	r3, r3
 80060fa:	8013      	strh	r3, [r2, #0]
 80060fc:	e04b      	b.n	8006196 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	781b      	ldrb	r3, [r3, #0]
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	881b      	ldrh	r3, [r3, #0]
 800610a:	82fb      	strh	r3, [r7, #22]
 800610c:	8afb      	ldrh	r3, [r7, #22]
 800610e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01b      	beq.n	800614e <USB_EPClearStall+0x106>
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	82bb      	strh	r3, [r7, #20]
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	781b      	ldrb	r3, [r3, #0]
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	441a      	add	r2, r3
 8006138:	8abb      	ldrh	r3, [r7, #20]
 800613a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800613e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006142:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006146:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614a:	b29b      	uxth	r3, r3
 800614c:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	781b      	ldrb	r3, [r3, #0]
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	881b      	ldrh	r3, [r3, #0]
 800615a:	b29b      	uxth	r3, r3
 800615c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006160:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006164:	827b      	strh	r3, [r7, #18]
 8006166:	8a7b      	ldrh	r3, [r7, #18]
 8006168:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800616c:	827b      	strh	r3, [r7, #18]
 800616e:	8a7b      	ldrh	r3, [r7, #18]
 8006170:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006174:	827b      	strh	r3, [r7, #18]
 8006176:	687a      	ldr	r2, [r7, #4]
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	009b      	lsls	r3, r3, #2
 800617e:	441a      	add	r2, r3
 8006180:	8a7b      	ldrh	r3, [r7, #18]
 8006182:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006186:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800618a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800618e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006192:	b29b      	uxth	r3, r3
 8006194:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	371c      	adds	r7, #28
 800619c:	46bd      	mov	sp, r7
 800619e:	bc80      	pop	{r7}
 80061a0:	4770      	bx	lr

080061a2 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 80061ae:	78fb      	ldrb	r3, [r7, #3]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d103      	bne.n	80061bc <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2280      	movs	r2, #128	; 0x80
 80061b8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	370c      	adds	r7, #12
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bc80      	pop	{r7}
 80061c6:	4770      	bx	lr

080061c8 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	370c      	adds	r7, #12
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bc80      	pop	{r7}
 80061da:	4770      	bx	lr

080061dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	370c      	adds	r7, #12
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr

080061f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b085      	sub	sp, #20
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061fe:	b29b      	uxth	r3, r3
 8006200:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006202:	68fb      	ldr	r3, [r7, #12]
}
 8006204:	4618      	mov	r0, r3
 8006206:	3714      	adds	r7, #20
 8006208:	46bd      	mov	sp, r7
 800620a:	bc80      	pop	{r7}
 800620c:	4770      	bx	lr

0800620e <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 800620e:	b480      	push	{r7}
 8006210:	b083      	sub	sp, #12
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006218:	2300      	movs	r3, #0
}
 800621a:	4618      	mov	r0, r3
 800621c:	370c      	adds	r7, #12
 800621e:	46bd      	mov	sp, r7
 8006220:	bc80      	pop	{r7}
 8006222:	4770      	bx	lr

08006224 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006224:	b480      	push	{r7}
 8006226:	b08d      	sub	sp, #52	; 0x34
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	4611      	mov	r1, r2
 8006230:	461a      	mov	r2, r3
 8006232:	460b      	mov	r3, r1
 8006234:	80fb      	strh	r3, [r7, #6]
 8006236:	4613      	mov	r3, r2
 8006238:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800623a:	88bb      	ldrh	r3, [r7, #4]
 800623c:	3301      	adds	r3, #1
 800623e:	085b      	lsrs	r3, r3, #1
 8006240:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800624a:	88fb      	ldrh	r3, [r7, #6]
 800624c:	005a      	lsls	r2, r3, #1
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006256:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006258:	6a3b      	ldr	r3, [r7, #32]
 800625a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800625c:	e01e      	b.n	800629c <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	3301      	adds	r3, #1
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800626a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	b29b      	uxth	r3, r3
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4313      	orrs	r3, r2
 800627a:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	b29a      	uxth	r2, r3
 8006280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006282:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006286:	3302      	adds	r3, #2
 8006288:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800628c:	3302      	adds	r3, #2
 800628e:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006292:	3301      	adds	r3, #1
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006298:	3b01      	subs	r3, #1
 800629a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800629c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1dd      	bne.n	800625e <USB_WritePMA+0x3a>
  }
}
 80062a2:	bf00      	nop
 80062a4:	bf00      	nop
 80062a6:	3734      	adds	r7, #52	; 0x34
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b08b      	sub	sp, #44	; 0x2c
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	4611      	mov	r1, r2
 80062ba:	461a      	mov	r2, r3
 80062bc:	460b      	mov	r3, r1
 80062be:	80fb      	strh	r3, [r7, #6]
 80062c0:	4613      	mov	r3, r2
 80062c2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80062c4:	88bb      	ldrh	r3, [r7, #4]
 80062c6:	085b      	lsrs	r3, r3, #1
 80062c8:	b29b      	uxth	r3, r3
 80062ca:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80062d0:	68bb      	ldr	r3, [r7, #8]
 80062d2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80062d4:	88fb      	ldrh	r3, [r7, #6]
 80062d6:	005a      	lsls	r2, r3, #1
 80062d8:	697b      	ldr	r3, [r7, #20]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80062e0:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	627b      	str	r3, [r7, #36]	; 0x24
 80062e6:	e01b      	b.n	8006320 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80062e8:	6a3b      	ldr	r3, [r7, #32]
 80062ea:	881b      	ldrh	r3, [r3, #0]
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80062f0:	6a3b      	ldr	r3, [r7, #32]
 80062f2:	3302      	adds	r3, #2
 80062f4:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80062fe:	69fb      	ldr	r3, [r7, #28]
 8006300:	3301      	adds	r3, #1
 8006302:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	0a1b      	lsrs	r3, r3, #8
 8006308:	b2da      	uxtb	r2, r3
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800630e:	69fb      	ldr	r3, [r7, #28]
 8006310:	3301      	adds	r3, #1
 8006312:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	3302      	adds	r3, #2
 8006318:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800631a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631c:	3b01      	subs	r3, #1
 800631e:	627b      	str	r3, [r7, #36]	; 0x24
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1e0      	bne.n	80062e8 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006326:	88bb      	ldrh	r3, [r7, #4]
 8006328:	f003 0301 	and.w	r3, r3, #1
 800632c:	b29b      	uxth	r3, r3
 800632e:	2b00      	cmp	r3, #0
 8006330:	d007      	beq.n	8006342 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006332:	6a3b      	ldr	r3, [r7, #32]
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	b29b      	uxth	r3, r3
 8006338:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800633a:	693b      	ldr	r3, [r7, #16]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	701a      	strb	r2, [r3, #0]
  }
}
 8006342:	bf00      	nop
 8006344:	372c      	adds	r7, #44	; 0x2c
 8006346:	46bd      	mov	sp, r7
 8006348:	bc80      	pop	{r7}
 800634a:	4770      	bx	lr

0800634c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	460b      	mov	r3, r1
 8006356:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	7c1b      	ldrb	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d115      	bne.n	8006390 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006364:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006368:	2202      	movs	r2, #2
 800636a:	2181      	movs	r1, #129	; 0x81
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f001 fe30 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2201      	movs	r2, #1
 8006376:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800637c:	2202      	movs	r2, #2
 800637e:	2101      	movs	r1, #1
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f001 fe26 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2201      	movs	r2, #1
 800638a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800638e:	e012      	b.n	80063b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006390:	2340      	movs	r3, #64	; 0x40
 8006392:	2202      	movs	r2, #2
 8006394:	2181      	movs	r1, #129	; 0x81
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f001 fe1b 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2201      	movs	r2, #1
 80063a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80063a2:	2340      	movs	r3, #64	; 0x40
 80063a4:	2202      	movs	r2, #2
 80063a6:	2101      	movs	r1, #1
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f001 fe12 	bl	8007fd2 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2201      	movs	r2, #1
 80063b2:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80063b6:	2308      	movs	r3, #8
 80063b8:	2203      	movs	r2, #3
 80063ba:	2182      	movs	r1, #130	; 0x82
 80063bc:	6878      	ldr	r0, [r7, #4]
 80063be:	f001 fe08 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2201      	movs	r2, #1
 80063c6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80063c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80063cc:	f001 ff28 	bl	8008220 <USBD_static_malloc>
 80063d0:	4602      	mov	r2, r0
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d102      	bne.n	80063e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
 80063e6:	e026      	b.n	8006436 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2200      	movs	r2, #0
 8006406:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	7c1b      	ldrb	r3, [r3, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d109      	bne.n	8006426 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006418:	f44f 7300 	mov.w	r3, #512	; 0x200
 800641c:	2101      	movs	r1, #1
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f001 fec8 	bl	80081b4 <USBD_LL_PrepareReceive>
 8006424:	e007      	b.n	8006436 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800642c:	2340      	movs	r3, #64	; 0x40
 800642e:	2101      	movs	r1, #1
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f001 febf 	bl	80081b4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8006436:	7bfb      	ldrb	r3, [r7, #15]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3710      	adds	r7, #16
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800644c:	2300      	movs	r3, #0
 800644e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006450:	2181      	movs	r1, #129	; 0x81
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f001 fde3 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800645e:	2101      	movs	r1, #1
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f001 fddc 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800646e:	2182      	movs	r1, #130	; 0x82
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 fdd4 	bl	800801e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00e      	beq.n	80064a4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006496:	4618      	mov	r0, r3
 8006498:	f001 fece 	bl	8008238 <USBD_static_free>
    pdev->pClassData = NULL;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80064ae:	b580      	push	{r7, lr}
 80064b0:	b086      	sub	sp, #24
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80064be:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80064c8:	2300      	movs	r3, #0
 80064ca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d039      	beq.n	800654c <USBD_CDC_Setup+0x9e>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d17f      	bne.n	80065dc <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	88db      	ldrh	r3, [r3, #6]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d029      	beq.n	8006538 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	b25b      	sxtb	r3, r3
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	da11      	bge.n	8006512 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	683a      	ldr	r2, [r7, #0]
 80064f8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80064fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80064fc:	683a      	ldr	r2, [r7, #0]
 80064fe:	88d2      	ldrh	r2, [r2, #6]
 8006500:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006502:	6939      	ldr	r1, [r7, #16]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	88db      	ldrh	r3, [r3, #6]
 8006508:	461a      	mov	r2, r3
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f001 f9d9 	bl	80078c2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8006510:	e06b      	b.n	80065ea <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	785a      	ldrb	r2, [r3, #1]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	88db      	ldrh	r3, [r3, #6]
 8006520:	b2da      	uxtb	r2, r3
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8006528:	6939      	ldr	r1, [r7, #16]
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	88db      	ldrh	r3, [r3, #6]
 800652e:	461a      	mov	r2, r3
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f001 f9f4 	bl	800791e <USBD_CtlPrepareRx>
      break;
 8006536:	e058      	b.n	80065ea <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	683a      	ldr	r2, [r7, #0]
 8006542:	7850      	ldrb	r0, [r2, #1]
 8006544:	2200      	movs	r2, #0
 8006546:	6839      	ldr	r1, [r7, #0]
 8006548:	4798      	blx	r3
      break;
 800654a:	e04e      	b.n	80065ea <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	785b      	ldrb	r3, [r3, #1]
 8006550:	2b0b      	cmp	r3, #11
 8006552:	d02e      	beq.n	80065b2 <USBD_CDC_Setup+0x104>
 8006554:	2b0b      	cmp	r3, #11
 8006556:	dc38      	bgt.n	80065ca <USBD_CDC_Setup+0x11c>
 8006558:	2b00      	cmp	r3, #0
 800655a:	d002      	beq.n	8006562 <USBD_CDC_Setup+0xb4>
 800655c:	2b0a      	cmp	r3, #10
 800655e:	d014      	beq.n	800658a <USBD_CDC_Setup+0xdc>
 8006560:	e033      	b.n	80065ca <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006568:	2b03      	cmp	r3, #3
 800656a:	d107      	bne.n	800657c <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 800656c:	f107 030c 	add.w	r3, r7, #12
 8006570:	2202      	movs	r2, #2
 8006572:	4619      	mov	r1, r3
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f9a4 	bl	80078c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800657a:	e02e      	b.n	80065da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 800657c:	6839      	ldr	r1, [r7, #0]
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f001 f935 	bl	80077ee <USBD_CtlError>
            ret = USBD_FAIL;
 8006584:	2302      	movs	r3, #2
 8006586:	75fb      	strb	r3, [r7, #23]
          break;
 8006588:	e027      	b.n	80065da <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006590:	2b03      	cmp	r3, #3
 8006592:	d107      	bne.n	80065a4 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006594:	f107 030f 	add.w	r3, r7, #15
 8006598:	2201      	movs	r2, #1
 800659a:	4619      	mov	r1, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f990 	bl	80078c2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80065a2:	e01a      	b.n	80065da <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 80065a4:	6839      	ldr	r1, [r7, #0]
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f001 f921 	bl	80077ee <USBD_CtlError>
            ret = USBD_FAIL;
 80065ac:	2302      	movs	r3, #2
 80065ae:	75fb      	strb	r3, [r7, #23]
          break;
 80065b0:	e013      	b.n	80065da <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b8:	2b03      	cmp	r3, #3
 80065ba:	d00d      	beq.n	80065d8 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80065bc:	6839      	ldr	r1, [r7, #0]
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f001 f915 	bl	80077ee <USBD_CtlError>
            ret = USBD_FAIL;
 80065c4:	2302      	movs	r3, #2
 80065c6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80065c8:	e006      	b.n	80065d8 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80065ca:	6839      	ldr	r1, [r7, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 f90e 	bl	80077ee <USBD_CtlError>
          ret = USBD_FAIL;
 80065d2:	2302      	movs	r3, #2
 80065d4:	75fb      	strb	r3, [r7, #23]
          break;
 80065d6:	e000      	b.n	80065da <USBD_CDC_Setup+0x12c>
          break;
 80065d8:	bf00      	nop
      }
      break;
 80065da:	e006      	b.n	80065ea <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80065dc:	6839      	ldr	r1, [r7, #0]
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f001 f905 	bl	80077ee <USBD_CtlError>
      ret = USBD_FAIL;
 80065e4:	2302      	movs	r3, #2
 80065e6:	75fb      	strb	r3, [r7, #23]
      break;
 80065e8:	bf00      	nop
  }

  return ret;
 80065ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3718      	adds	r7, #24
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}

080065f4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80065f4:	b580      	push	{r7, lr}
 80065f6:	b084      	sub	sp, #16
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	6078      	str	r0, [r7, #4]
 80065fc:	460b      	mov	r3, r1
 80065fe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006606:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800660e:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006616:	2b00      	cmp	r3, #0
 8006618:	d03a      	beq.n	8006690 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800661a:	78fa      	ldrb	r2, [r7, #3]
 800661c:	6879      	ldr	r1, [r7, #4]
 800661e:	4613      	mov	r3, r2
 8006620:	009b      	lsls	r3, r3, #2
 8006622:	4413      	add	r3, r2
 8006624:	009b      	lsls	r3, r3, #2
 8006626:	440b      	add	r3, r1
 8006628:	331c      	adds	r3, #28
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d029      	beq.n	8006684 <USBD_CDC_DataIn+0x90>
 8006630:	78fa      	ldrb	r2, [r7, #3]
 8006632:	6879      	ldr	r1, [r7, #4]
 8006634:	4613      	mov	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4413      	add	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	331c      	adds	r3, #28
 8006640:	681a      	ldr	r2, [r3, #0]
 8006642:	78f9      	ldrb	r1, [r7, #3]
 8006644:	68b8      	ldr	r0, [r7, #8]
 8006646:	460b      	mov	r3, r1
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	440b      	add	r3, r1
 800664c:	00db      	lsls	r3, r3, #3
 800664e:	4403      	add	r3, r0
 8006650:	3338      	adds	r3, #56	; 0x38
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	fbb2 f1f3 	udiv	r1, r2, r3
 8006658:	fb01 f303 	mul.w	r3, r1, r3
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d110      	bne.n	8006684 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006662:	78fa      	ldrb	r2, [r7, #3]
 8006664:	6879      	ldr	r1, [r7, #4]
 8006666:	4613      	mov	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	4413      	add	r3, r2
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	440b      	add	r3, r1
 8006670:	331c      	adds	r3, #28
 8006672:	2200      	movs	r2, #0
 8006674:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006676:	78f9      	ldrb	r1, [r7, #3]
 8006678:	2300      	movs	r3, #0
 800667a:	2200      	movs	r2, #0
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f001 fd76 	bl	800816e <USBD_LL_Transmit>
 8006682:	e003      	b.n	800668c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2200      	movs	r2, #0
 8006688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800668c:	2300      	movs	r3, #0
 800668e:	e000      	b.n	8006692 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006690:	2302      	movs	r3, #2
  }
}
 8006692:	4618      	mov	r0, r3
 8006694:	3710      	adds	r7, #16
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800669a:	b580      	push	{r7, lr}
 800669c:	b084      	sub	sp, #16
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
 80066a2:	460b      	mov	r3, r1
 80066a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80066ae:	78fb      	ldrb	r3, [r7, #3]
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f001 fda1 	bl	80081fa <USBD_LL_GetRxDataSize>
 80066b8:	4602      	mov	r2, r0
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00d      	beq.n	80066e6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	68fa      	ldr	r2, [r7, #12]
 80066d4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80066de:	4611      	mov	r1, r2
 80066e0:	4798      	blx	r3

    return USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	e000      	b.n	80066e8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80066e6:	2302      	movs	r3, #2
  }
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066fe:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x46>
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006710:	2bff      	cmp	r3, #255	; 0xff
 8006712:	d010      	beq.n	8006736 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	68fa      	ldr	r2, [r7, #12]
 800671e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006722:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006724:	68fa      	ldr	r2, [r7, #12]
 8006726:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800672a:	b292      	uxth	r2, r2
 800672c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	22ff      	movs	r2, #255	; 0xff
 8006732:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006736:	2300      	movs	r3, #0
}
 8006738:	4618      	mov	r0, r3
 800673a:	3710      	adds	r7, #16
 800673c:	46bd      	mov	sp, r7
 800673e:	bd80      	pop	{r7, pc}

08006740 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2243      	movs	r2, #67	; 0x43
 800674c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800674e:	4b03      	ldr	r3, [pc, #12]	; (800675c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006750:	4618      	mov	r0, r3
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	bc80      	pop	{r7}
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	2000009c 	.word	0x2000009c

08006760 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006760:	b480      	push	{r7}
 8006762:	b083      	sub	sp, #12
 8006764:	af00      	add	r7, sp, #0
 8006766:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2243      	movs	r2, #67	; 0x43
 800676c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800676e:	4b03      	ldr	r3, [pc, #12]	; (800677c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006770:	4618      	mov	r0, r3
 8006772:	370c      	adds	r7, #12
 8006774:	46bd      	mov	sp, r7
 8006776:	bc80      	pop	{r7}
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	20000058 	.word	0x20000058

08006780 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006780:	b480      	push	{r7}
 8006782:	b083      	sub	sp, #12
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2243      	movs	r2, #67	; 0x43
 800678c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006790:	4618      	mov	r0, r3
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	bc80      	pop	{r7}
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	200000e0 	.word	0x200000e0

080067a0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b083      	sub	sp, #12
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	220a      	movs	r2, #10
 80067ac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 80067ae:	4b03      	ldr	r3, [pc, #12]	; (80067bc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	370c      	adds	r7, #12
 80067b4:	46bd      	mov	sp, r7
 80067b6:	bc80      	pop	{r7}
 80067b8:	4770      	bx	lr
 80067ba:	bf00      	nop
 80067bc:	20000014 	.word	0x20000014

080067c0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80067ca:	2302      	movs	r3, #2
 80067cc:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d005      	beq.n	80067e0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	683a      	ldr	r2, [r7, #0]
 80067d8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80067dc:	2300      	movs	r3, #0
 80067de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3714      	adds	r7, #20
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bc80      	pop	{r7}
 80067ea:	4770      	bx	lr

080067ec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	60b9      	str	r1, [r7, #8]
 80067f6:	4613      	mov	r3, r2
 80067f8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006800:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	68ba      	ldr	r2, [r7, #8]
 8006806:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800680a:	88fa      	ldrh	r2, [r7, #6]
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	371c      	adds	r7, #28
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr

0800681e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 800681e:	b480      	push	{r7}
 8006820:	b085      	sub	sp, #20
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
 8006826:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800682e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006838:	2300      	movs	r3, #0
}
 800683a:	4618      	mov	r0, r3
 800683c:	3714      	adds	r7, #20
 800683e:	46bd      	mov	sp, r7
 8006840:	bc80      	pop	{r7}
 8006842:	4770      	bx	lr

08006844 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006852:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d017      	beq.n	800688e <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	7c1b      	ldrb	r3, [r3, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d109      	bne.n	800687a <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800686c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006870:	2101      	movs	r1, #1
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f001 fc9e 	bl	80081b4 <USBD_LL_PrepareReceive>
 8006878:	e007      	b.n	800688a <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006880:	2340      	movs	r3, #64	; 0x40
 8006882:	2101      	movs	r1, #1
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fc95 	bl	80081b4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800688a:	2300      	movs	r3, #0
 800688c:	e000      	b.n	8006890 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800688e:	2302      	movs	r3, #2
  }
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d101      	bne.n	80068b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80068ac:	2302      	movs	r3, #2
 80068ae:	e01a      	b.n	80068e6 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d003      	beq.n	80068c2 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2200      	movs	r2, #0
 80068be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	68ba      	ldr	r2, [r7, #8]
 80068cc:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	79fa      	ldrb	r2, [r7, #7]
 80068dc:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f001 fb02 	bl	8007ee8 <USBD_LL_Init>

  return USBD_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	3710      	adds	r7, #16
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}

080068ee <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80068ee:	b480      	push	{r7}
 80068f0:	b085      	sub	sp, #20
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d006      	beq.n	8006910 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800690a:	2300      	movs	r3, #0
 800690c:	73fb      	strb	r3, [r7, #15]
 800690e:	e001      	b.n	8006914 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006910:	2302      	movs	r3, #2
 8006912:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006914:	7bfb      	ldrb	r3, [r7, #15]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3714      	adds	r7, #20
 800691a:	46bd      	mov	sp, r7
 800691c:	bc80      	pop	{r7}
 800691e:	4770      	bx	lr

08006920 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b082      	sub	sp, #8
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fb37 	bl	8007f9c <USBD_LL_Start>

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006938:	b480      	push	{r7}
 800693a:	b083      	sub	sp, #12
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	370c      	adds	r7, #12
 8006946:	46bd      	mov	sp, r7
 8006948:	bc80      	pop	{r7}
 800694a:	4770      	bx	lr

0800694c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b084      	sub	sp, #16
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	460b      	mov	r3, r1
 8006956:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006958:	2302      	movs	r3, #2
 800695a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006962:	2b00      	cmp	r3, #0
 8006964:	d00c      	beq.n	8006980 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	4611      	mov	r1, r2
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800697c:	2300      	movs	r3, #0
 800697e:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006980:	7bfb      	ldrb	r3, [r7, #15]
}
 8006982:	4618      	mov	r0, r3
 8006984:	3710      	adds	r7, #16
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}

0800698a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b082      	sub	sp, #8
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	460b      	mov	r3, r1
 8006994:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	78fa      	ldrb	r2, [r7, #3]
 80069a0:	4611      	mov	r1, r2
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	4798      	blx	r3

  return USBD_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3708      	adds	r7, #8
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}

080069b0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 80069c0:	6839      	ldr	r1, [r7, #0]
 80069c2:	4618      	mov	r0, r3
 80069c4:	f000 fed7 	bl	8007776 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80069e4:	f003 031f 	and.w	r3, r3, #31
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d016      	beq.n	8006a1a <USBD_LL_SetupStage+0x6a>
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	d81c      	bhi.n	8006a2a <USBD_LL_SetupStage+0x7a>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <USBD_LL_SetupStage+0x4a>
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d008      	beq.n	8006a0a <USBD_LL_SetupStage+0x5a>
 80069f8:	e017      	b.n	8006a2a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a00:	4619      	mov	r1, r3
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f000 f9ca 	bl	8006d9c <USBD_StdDevReq>
      break;
 8006a08:	e01a      	b.n	8006a40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a10:	4619      	mov	r1, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fa2c 	bl	8006e70 <USBD_StdItfReq>
      break;
 8006a18:	e012      	b.n	8006a40 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fa6c 	bl	8006f00 <USBD_StdEPReq>
      break;
 8006a28:	e00a      	b.n	8006a40 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006a30:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f001 fb0f 	bl	800805c <USBD_LL_StallEP>
      break;
 8006a3e:	bf00      	nop
  }

  return USBD_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3708      	adds	r7, #8
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}

08006a4a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006a4a:	b580      	push	{r7, lr}
 8006a4c:	b086      	sub	sp, #24
 8006a4e:	af00      	add	r7, sp, #0
 8006a50:	60f8      	str	r0, [r7, #12]
 8006a52:	460b      	mov	r3, r1
 8006a54:	607a      	str	r2, [r7, #4]
 8006a56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d14b      	bne.n	8006af6 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006a64:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006a6c:	2b03      	cmp	r3, #3
 8006a6e:	d134      	bne.n	8006ada <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	68da      	ldr	r2, [r3, #12]
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	691b      	ldr	r3, [r3, #16]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d919      	bls.n	8006ab0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006a7c:	697b      	ldr	r3, [r7, #20]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	1ad2      	subs	r2, r2, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	68da      	ldr	r2, [r3, #12]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d203      	bcs.n	8006a9e <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006a9a:	b29b      	uxth	r3, r3
 8006a9c:	e002      	b.n	8006aa4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006aa2:	b29b      	uxth	r3, r3
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 ff56 	bl	800795a <USBD_CtlContinueRx>
 8006aae:	e038      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d00a      	beq.n	8006ad2 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ac2:	2b03      	cmp	r3, #3
 8006ac4:	d105      	bne.n	8006ad2 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006acc:	691b      	ldr	r3, [r3, #16]
 8006ace:	68f8      	ldr	r0, [r7, #12]
 8006ad0:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f000 ff53 	bl	800797e <USBD_CtlSendStatus>
 8006ad8:	e023      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006ae0:	2b05      	cmp	r3, #5
 8006ae2:	d11e      	bne.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006aec:	2100      	movs	r1, #0
 8006aee:	68f8      	ldr	r0, [r7, #12]
 8006af0:	f001 fab4 	bl	800805c <USBD_LL_StallEP>
 8006af4:	e015      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00d      	beq.n	8006b1e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006b08:	2b03      	cmp	r3, #3
 8006b0a:	d108      	bne.n	8006b1e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	7afa      	ldrb	r2, [r7, #11]
 8006b16:	4611      	mov	r1, r2
 8006b18:	68f8      	ldr	r0, [r7, #12]
 8006b1a:	4798      	blx	r3
 8006b1c:	e001      	b.n	8006b22 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	e000      	b.n	8006b24 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	460b      	mov	r3, r1
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006b3a:	7afb      	ldrb	r3, [r7, #11]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d17f      	bne.n	8006c40 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	3314      	adds	r3, #20
 8006b44:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006b4c:	2b02      	cmp	r3, #2
 8006b4e:	d15c      	bne.n	8006c0a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	68da      	ldr	r2, [r3, #12]
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	691b      	ldr	r3, [r3, #16]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d915      	bls.n	8006b88 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006b5c:	697b      	ldr	r3, [r7, #20]
 8006b5e:	68da      	ldr	r2, [r3, #12]
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	1ad2      	subs	r2, r2, r3
 8006b66:	697b      	ldr	r3, [r7, #20]
 8006b68:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	461a      	mov	r2, r3
 8006b72:	6879      	ldr	r1, [r7, #4]
 8006b74:	68f8      	ldr	r0, [r7, #12]
 8006b76:	f000 fec0 	bl	80078fa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	2100      	movs	r1, #0
 8006b80:	68f8      	ldr	r0, [r7, #12]
 8006b82:	f001 fb17 	bl	80081b4 <USBD_LL_PrepareReceive>
 8006b86:	e04e      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006b88:	697b      	ldr	r3, [r7, #20]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	6912      	ldr	r2, [r2, #16]
 8006b90:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b94:	fb01 f202 	mul.w	r2, r1, r2
 8006b98:	1a9b      	subs	r3, r3, r2
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d11c      	bne.n	8006bd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	689a      	ldr	r2, [r3, #8]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d316      	bcc.n	8006bd8 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006baa:	697b      	ldr	r3, [r7, #20]
 8006bac:	689a      	ldr	r2, [r3, #8]
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d20f      	bcs.n	8006bd8 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006bb8:	2200      	movs	r2, #0
 8006bba:	2100      	movs	r1, #0
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fe9c 	bl	80078fa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006bca:	2300      	movs	r3, #0
 8006bcc:	2200      	movs	r2, #0
 8006bce:	2100      	movs	r1, #0
 8006bd0:	68f8      	ldr	r0, [r7, #12]
 8006bd2:	f001 faef 	bl	80081b4 <USBD_LL_PrepareReceive>
 8006bd6:	e026      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bde:	68db      	ldr	r3, [r3, #12]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00a      	beq.n	8006bfa <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006bea:	2b03      	cmp	r3, #3
 8006bec:	d105      	bne.n	8006bfa <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bf4:	68db      	ldr	r3, [r3, #12]
 8006bf6:	68f8      	ldr	r0, [r7, #12]
 8006bf8:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006bfa:	2180      	movs	r1, #128	; 0x80
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f001 fa2d 	bl	800805c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006c02:	68f8      	ldr	r0, [r7, #12]
 8006c04:	f000 fece 	bl	80079a4 <USBD_CtlReceiveStatus>
 8006c08:	e00d      	b.n	8006c26 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c10:	2b04      	cmp	r3, #4
 8006c12:	d004      	beq.n	8006c1e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d103      	bne.n	8006c26 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	68f8      	ldr	r0, [r7, #12]
 8006c22:	f001 fa1b 	bl	800805c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d11d      	bne.n	8006c6c <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f7ff fe81 	bl	8006938 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006c3e:	e015      	b.n	8006c6c <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c46:	695b      	ldr	r3, [r3, #20]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d00d      	beq.n	8006c68 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006c52:	2b03      	cmp	r3, #3
 8006c54:	d108      	bne.n	8006c68 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006c5c:	695b      	ldr	r3, [r3, #20]
 8006c5e:	7afa      	ldrb	r2, [r7, #11]
 8006c60:	4611      	mov	r1, r2
 8006c62:	68f8      	ldr	r0, [r7, #12]
 8006c64:	4798      	blx	r3
 8006c66:	e001      	b.n	8006c6c <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006c68:	2302      	movs	r3, #2
 8006c6a:	e000      	b.n	8006c6e <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3718      	adds	r7, #24
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006c76:	b580      	push	{r7, lr}
 8006c78:	b082      	sub	sp, #8
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c7e:	2340      	movs	r3, #64	; 0x40
 8006c80:	2200      	movs	r2, #0
 8006c82:	2100      	movs	r1, #0
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f001 f9a4 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2240      	movs	r2, #64	; 0x40
 8006c96:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006c9a:	2340      	movs	r3, #64	; 0x40
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	2180      	movs	r1, #128	; 0x80
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f001 f996 	bl	8007fd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2201      	movs	r2, #1
 8006caa:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2240      	movs	r2, #64	; 0x40
 8006cb0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	2200      	movs	r2, #0
 8006ccc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d009      	beq.n	8006cee <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	6852      	ldr	r2, [r2, #4]
 8006ce6:	b2d2      	uxtb	r2, r2
 8006ce8:	4611      	mov	r1, r2
 8006cea:	6878      	ldr	r0, [r7, #4]
 8006cec:	4798      	blx	r3
  }

  return USBD_OK;
 8006cee:	2300      	movs	r3, #0
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	3708      	adds	r7, #8
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}

08006cf8 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b083      	sub	sp, #12
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	460b      	mov	r3, r1
 8006d02:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	78fa      	ldrb	r2, [r7, #3]
 8006d08:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b083      	sub	sp, #12
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2204      	movs	r2, #4
 8006d2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006d32:	2300      	movs	r3, #0
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	bc80      	pop	{r7}
 8006d3c:	4770      	bx	lr

08006d3e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b083      	sub	sp, #12
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	2b04      	cmp	r3, #4
 8006d4e:	d105      	bne.n	8006d5c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	370c      	adds	r7, #12
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bc80      	pop	{r7}
 8006d66:	4770      	bx	lr

08006d68 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d76:	2b03      	cmp	r3, #3
 8006d78:	d10b      	bne.n	8006d92 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d80:	69db      	ldr	r3, [r3, #28]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d005      	beq.n	8006d92 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d8c:	69db      	ldr	r3, [r3, #28]
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006d92:	2300      	movs	r3, #0
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b084      	sub	sp, #16
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
 8006da4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006da6:	2300      	movs	r3, #0
 8006da8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006db2:	2b40      	cmp	r3, #64	; 0x40
 8006db4:	d005      	beq.n	8006dc2 <USBD_StdDevReq+0x26>
 8006db6:	2b40      	cmp	r3, #64	; 0x40
 8006db8:	d84f      	bhi.n	8006e5a <USBD_StdDevReq+0xbe>
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d009      	beq.n	8006dd2 <USBD_StdDevReq+0x36>
 8006dbe:	2b20      	cmp	r3, #32
 8006dc0:	d14b      	bne.n	8006e5a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	6839      	ldr	r1, [r7, #0]
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	4798      	blx	r3
      break;
 8006dd0:	e048      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	785b      	ldrb	r3, [r3, #1]
 8006dd6:	2b09      	cmp	r3, #9
 8006dd8:	d839      	bhi.n	8006e4e <USBD_StdDevReq+0xb2>
 8006dda:	a201      	add	r2, pc, #4	; (adr r2, 8006de0 <USBD_StdDevReq+0x44>)
 8006ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de0:	08006e31 	.word	0x08006e31
 8006de4:	08006e45 	.word	0x08006e45
 8006de8:	08006e4f 	.word	0x08006e4f
 8006dec:	08006e3b 	.word	0x08006e3b
 8006df0:	08006e4f 	.word	0x08006e4f
 8006df4:	08006e13 	.word	0x08006e13
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e4f 	.word	0x08006e4f
 8006e00:	08006e27 	.word	0x08006e27
 8006e04:	08006e1d 	.word	0x08006e1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e08:	6839      	ldr	r1, [r7, #0]
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f000 f9dc 	bl	80071c8 <USBD_GetDescriptor>
          break;
 8006e10:	e022      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fb3f 	bl	8007498 <USBD_SetAddress>
          break;
 8006e1a:	e01d      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8006e1c:	6839      	ldr	r1, [r7, #0]
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fb7e 	bl	8007520 <USBD_SetConfig>
          break;
 8006e24:	e018      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e26:	6839      	ldr	r1, [r7, #0]
 8006e28:	6878      	ldr	r0, [r7, #4]
 8006e2a:	f000 fc07 	bl	800763c <USBD_GetConfig>
          break;
 8006e2e:	e013      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fc37 	bl	80076a6 <USBD_GetStatus>
          break;
 8006e38:	e00e      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006e3a:	6839      	ldr	r1, [r7, #0]
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 fc65 	bl	800770c <USBD_SetFeature>
          break;
 8006e42:	e009      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006e44:	6839      	ldr	r1, [r7, #0]
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	f000 fc74 	bl	8007734 <USBD_ClrFeature>
          break;
 8006e4c:	e004      	b.n	8006e58 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8006e4e:	6839      	ldr	r1, [r7, #0]
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f000 fccc 	bl	80077ee <USBD_CtlError>
          break;
 8006e56:	bf00      	nop
      }
      break;
 8006e58:	e004      	b.n	8006e64 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8006e5a:	6839      	ldr	r1, [r7, #0]
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fcc6 	bl	80077ee <USBD_CtlError>
      break;
 8006e62:	bf00      	nop
  }

  return ret;
 8006e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e66:	4618      	mov	r0, r3
 8006e68:	3710      	adds	r7, #16
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	bd80      	pop	{r7, pc}
 8006e6e:	bf00      	nop

08006e70 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e86:	2b40      	cmp	r3, #64	; 0x40
 8006e88:	d005      	beq.n	8006e96 <USBD_StdItfReq+0x26>
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d82e      	bhi.n	8006eec <USBD_StdItfReq+0x7c>
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <USBD_StdItfReq+0x26>
 8006e92:	2b20      	cmp	r3, #32
 8006e94:	d12a      	bne.n	8006eec <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	2b02      	cmp	r3, #2
 8006ea0:	d81d      	bhi.n	8006ede <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ea2:	683b      	ldr	r3, [r7, #0]
 8006ea4:	889b      	ldrh	r3, [r3, #4]
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d813      	bhi.n	8006ed4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d110      	bne.n	8006ee8 <USBD_StdItfReq+0x78>
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fd56 	bl	800797e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ed2:	e009      	b.n	8006ee8 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fc89 	bl	80077ee <USBD_CtlError>
          break;
 8006edc:	e004      	b.n	8006ee8 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fc84 	bl	80077ee <USBD_CtlError>
          break;
 8006ee6:	e000      	b.n	8006eea <USBD_StdItfReq+0x7a>
          break;
 8006ee8:	bf00      	nop
      }
      break;
 8006eea:	e004      	b.n	8006ef6 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fc7d 	bl	80077ee <USBD_CtlError>
      break;
 8006ef4:	bf00      	nop
  }

  return USBD_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f1c:	2b40      	cmp	r3, #64	; 0x40
 8006f1e:	d007      	beq.n	8006f30 <USBD_StdEPReq+0x30>
 8006f20:	2b40      	cmp	r3, #64	; 0x40
 8006f22:	f200 8146 	bhi.w	80071b2 <USBD_StdEPReq+0x2b2>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <USBD_StdEPReq+0x40>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	f040 8141 	bne.w	80071b2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	6839      	ldr	r1, [r7, #0]
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	4798      	blx	r3
      break;
 8006f3e:	e13d      	b.n	80071bc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	781b      	ldrb	r3, [r3, #0]
 8006f44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006f48:	2b20      	cmp	r3, #32
 8006f4a:	d10a      	bne.n	8006f62 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	6839      	ldr	r1, [r7, #0]
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	4798      	blx	r3
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	73fb      	strb	r3, [r7, #15]

        return ret;
 8006f5e:	7bfb      	ldrb	r3, [r7, #15]
 8006f60:	e12d      	b.n	80071be <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	785b      	ldrb	r3, [r3, #1]
 8006f66:	2b03      	cmp	r3, #3
 8006f68:	d007      	beq.n	8006f7a <USBD_StdEPReq+0x7a>
 8006f6a:	2b03      	cmp	r3, #3
 8006f6c:	f300 811b 	bgt.w	80071a6 <USBD_StdEPReq+0x2a6>
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d072      	beq.n	800705a <USBD_StdEPReq+0x15a>
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d03a      	beq.n	8006fee <USBD_StdEPReq+0xee>
 8006f78:	e115      	b.n	80071a6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f80:	2b02      	cmp	r3, #2
 8006f82:	d002      	beq.n	8006f8a <USBD_StdEPReq+0x8a>
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d015      	beq.n	8006fb4 <USBD_StdEPReq+0xb4>
 8006f88:	e02b      	b.n	8006fe2 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006f8a:	7bbb      	ldrb	r3, [r7, #14]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d00c      	beq.n	8006faa <USBD_StdEPReq+0xaa>
 8006f90:	7bbb      	ldrb	r3, [r7, #14]
 8006f92:	2b80      	cmp	r3, #128	; 0x80
 8006f94:	d009      	beq.n	8006faa <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	4619      	mov	r1, r3
 8006f9a:	6878      	ldr	r0, [r7, #4]
 8006f9c:	f001 f85e 	bl	800805c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8006fa0:	2180      	movs	r1, #128	; 0x80
 8006fa2:	6878      	ldr	r0, [r7, #4]
 8006fa4:	f001 f85a 	bl	800805c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fa8:	e020      	b.n	8006fec <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8006faa:	6839      	ldr	r1, [r7, #0]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 fc1e 	bl	80077ee <USBD_CtlError>
              break;
 8006fb2:	e01b      	b.n	8006fec <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	885b      	ldrh	r3, [r3, #2]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d10e      	bne.n	8006fda <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8006fbc:	7bbb      	ldrb	r3, [r7, #14]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <USBD_StdEPReq+0xda>
 8006fc2:	7bbb      	ldrb	r3, [r7, #14]
 8006fc4:	2b80      	cmp	r3, #128	; 0x80
 8006fc6:	d008      	beq.n	8006fda <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	88db      	ldrh	r3, [r3, #6]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d104      	bne.n	8006fda <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f001 f841 	bl	800805c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f000 fccf 	bl	800797e <USBD_CtlSendStatus>

              break;
 8006fe0:	e004      	b.n	8006fec <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fc02 	bl	80077ee <USBD_CtlError>
              break;
 8006fea:	bf00      	nop
          }
          break;
 8006fec:	e0e0      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ff4:	2b02      	cmp	r3, #2
 8006ff6:	d002      	beq.n	8006ffe <USBD_StdEPReq+0xfe>
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d015      	beq.n	8007028 <USBD_StdEPReq+0x128>
 8006ffc:	e026      	b.n	800704c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ffe:	7bbb      	ldrb	r3, [r7, #14]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d00c      	beq.n	800701e <USBD_StdEPReq+0x11e>
 8007004:	7bbb      	ldrb	r3, [r7, #14]
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d009      	beq.n	800701e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800700a:	7bbb      	ldrb	r3, [r7, #14]
 800700c:	4619      	mov	r1, r3
 800700e:	6878      	ldr	r0, [r7, #4]
 8007010:	f001 f824 	bl	800805c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007014:	2180      	movs	r1, #128	; 0x80
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f001 f820 	bl	800805c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800701c:	e01c      	b.n	8007058 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800701e:	6839      	ldr	r1, [r7, #0]
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	f000 fbe4 	bl	80077ee <USBD_CtlError>
              break;
 8007026:	e017      	b.n	8007058 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	885b      	ldrh	r3, [r3, #2]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d112      	bne.n	8007056 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007036:	2b00      	cmp	r3, #0
 8007038:	d004      	beq.n	8007044 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800703a:	7bbb      	ldrb	r3, [r7, #14]
 800703c:	4619      	mov	r1, r3
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f001 f82b 	bl	800809a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 fc9a 	bl	800797e <USBD_CtlSendStatus>
              }
              break;
 800704a:	e004      	b.n	8007056 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800704c:	6839      	ldr	r1, [r7, #0]
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f000 fbcd 	bl	80077ee <USBD_CtlError>
              break;
 8007054:	e000      	b.n	8007058 <USBD_StdEPReq+0x158>
              break;
 8007056:	bf00      	nop
          }
          break;
 8007058:	e0aa      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007060:	2b02      	cmp	r3, #2
 8007062:	d002      	beq.n	800706a <USBD_StdEPReq+0x16a>
 8007064:	2b03      	cmp	r3, #3
 8007066:	d032      	beq.n	80070ce <USBD_StdEPReq+0x1ce>
 8007068:	e097      	b.n	800719a <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800706a:	7bbb      	ldrb	r3, [r7, #14]
 800706c:	2b00      	cmp	r3, #0
 800706e:	d007      	beq.n	8007080 <USBD_StdEPReq+0x180>
 8007070:	7bbb      	ldrb	r3, [r7, #14]
 8007072:	2b80      	cmp	r3, #128	; 0x80
 8007074:	d004      	beq.n	8007080 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007076:	6839      	ldr	r1, [r7, #0]
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fbb8 	bl	80077ee <USBD_CtlError>
                break;
 800707e:	e091      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007080:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007084:	2b00      	cmp	r3, #0
 8007086:	da0b      	bge.n	80070a0 <USBD_StdEPReq+0x1a0>
 8007088:	7bbb      	ldrb	r3, [r7, #14]
 800708a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800708e:	4613      	mov	r3, r2
 8007090:	009b      	lsls	r3, r3, #2
 8007092:	4413      	add	r3, r2
 8007094:	009b      	lsls	r3, r3, #2
 8007096:	3310      	adds	r3, #16
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	4413      	add	r3, r2
 800709c:	3304      	adds	r3, #4
 800709e:	e00b      	b.n	80070b8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80070a0:	7bbb      	ldrb	r3, [r7, #14]
 80070a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070a6:	4613      	mov	r3, r2
 80070a8:	009b      	lsls	r3, r3, #2
 80070aa:	4413      	add	r3, r2
 80070ac:	009b      	lsls	r3, r3, #2
 80070ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	4413      	add	r3, r2
 80070b6:	3304      	adds	r3, #4
 80070b8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	2200      	movs	r2, #0
 80070be:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	2202      	movs	r2, #2
 80070c4:	4619      	mov	r1, r3
 80070c6:	6878      	ldr	r0, [r7, #4]
 80070c8:	f000 fbfb 	bl	80078c2 <USBD_CtlSendData>
              break;
 80070cc:	e06a      	b.n	80071a4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80070ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	da11      	bge.n	80070fa <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80070d6:	7bbb      	ldrb	r3, [r7, #14]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	6879      	ldr	r1, [r7, #4]
 80070de:	4613      	mov	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	4413      	add	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	440b      	add	r3, r1
 80070e8:	3318      	adds	r3, #24
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d117      	bne.n	8007120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f000 fb7b 	bl	80077ee <USBD_CtlError>
                  break;
 80070f8:	e054      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d104      	bne.n	8007120 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007116:	6839      	ldr	r1, [r7, #0]
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fb68 	bl	80077ee <USBD_CtlError>
                  break;
 800711e:	e041      	b.n	80071a4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007120:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007124:	2b00      	cmp	r3, #0
 8007126:	da0b      	bge.n	8007140 <USBD_StdEPReq+0x240>
 8007128:	7bbb      	ldrb	r3, [r7, #14]
 800712a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800712e:	4613      	mov	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	4413      	add	r3, r2
 8007134:	009b      	lsls	r3, r3, #2
 8007136:	3310      	adds	r3, #16
 8007138:	687a      	ldr	r2, [r7, #4]
 800713a:	4413      	add	r3, r2
 800713c:	3304      	adds	r3, #4
 800713e:	e00b      	b.n	8007158 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007140:	7bbb      	ldrb	r3, [r7, #14]
 8007142:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007146:	4613      	mov	r3, r2
 8007148:	009b      	lsls	r3, r3, #2
 800714a:	4413      	add	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	4413      	add	r3, r2
 8007156:	3304      	adds	r3, #4
 8007158:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800715a:	7bbb      	ldrb	r3, [r7, #14]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <USBD_StdEPReq+0x266>
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	2b80      	cmp	r3, #128	; 0x80
 8007164:	d103      	bne.n	800716e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2200      	movs	r2, #0
 800716a:	601a      	str	r2, [r3, #0]
 800716c:	e00e      	b.n	800718c <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	4619      	mov	r1, r3
 8007172:	6878      	ldr	r0, [r7, #4]
 8007174:	f000 ffb0 	bl	80080d8 <USBD_LL_IsStallEP>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d003      	beq.n	8007186 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	2201      	movs	r2, #1
 8007182:	601a      	str	r2, [r3, #0]
 8007184:	e002      	b.n	800718c <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 800718c:	68bb      	ldr	r3, [r7, #8]
 800718e:	2202      	movs	r2, #2
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fb95 	bl	80078c2 <USBD_CtlSendData>
              break;
 8007198:	e004      	b.n	80071a4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 800719a:	6839      	ldr	r1, [r7, #0]
 800719c:	6878      	ldr	r0, [r7, #4]
 800719e:	f000 fb26 	bl	80077ee <USBD_CtlError>
              break;
 80071a2:	bf00      	nop
          }
          break;
 80071a4:	e004      	b.n	80071b0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 fb20 	bl	80077ee <USBD_CtlError>
          break;
 80071ae:	bf00      	nop
      }
      break;
 80071b0:	e004      	b.n	80071bc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80071b2:	6839      	ldr	r1, [r7, #0]
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 fb1a 	bl	80077ee <USBD_CtlError>
      break;
 80071ba:	bf00      	nop
  }

  return ret;
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3710      	adds	r7, #16
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80071c8:	b580      	push	{r7, lr}
 80071ca:	b084      	sub	sp, #16
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80071d2:	2300      	movs	r3, #0
 80071d4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	885b      	ldrh	r3, [r3, #2]
 80071e2:	0a1b      	lsrs	r3, r3, #8
 80071e4:	b29b      	uxth	r3, r3
 80071e6:	3b01      	subs	r3, #1
 80071e8:	2b06      	cmp	r3, #6
 80071ea:	f200 8128 	bhi.w	800743e <USBD_GetDescriptor+0x276>
 80071ee:	a201      	add	r2, pc, #4	; (adr r2, 80071f4 <USBD_GetDescriptor+0x2c>)
 80071f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071f4:	08007211 	.word	0x08007211
 80071f8:	08007229 	.word	0x08007229
 80071fc:	08007269 	.word	0x08007269
 8007200:	0800743f 	.word	0x0800743f
 8007204:	0800743f 	.word	0x0800743f
 8007208:	080073df 	.word	0x080073df
 800720c:	0800740b 	.word	0x0800740b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	7c12      	ldrb	r2, [r2, #16]
 800721c:	f107 0108 	add.w	r1, r7, #8
 8007220:	4610      	mov	r0, r2
 8007222:	4798      	blx	r3
 8007224:	60f8      	str	r0, [r7, #12]
      break;
 8007226:	e112      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	7c1b      	ldrb	r3, [r3, #16]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d10d      	bne.n	800724c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007238:	f107 0208 	add.w	r2, r7, #8
 800723c:	4610      	mov	r0, r2
 800723e:	4798      	blx	r3
 8007240:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	3301      	adds	r3, #1
 8007246:	2202      	movs	r2, #2
 8007248:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800724a:	e100      	b.n	800744e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007254:	f107 0208 	add.w	r2, r7, #8
 8007258:	4610      	mov	r0, r2
 800725a:	4798      	blx	r3
 800725c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	3301      	adds	r3, #1
 8007262:	2202      	movs	r2, #2
 8007264:	701a      	strb	r2, [r3, #0]
      break;
 8007266:	e0f2      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	885b      	ldrh	r3, [r3, #2]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	2b05      	cmp	r3, #5
 8007270:	f200 80ac 	bhi.w	80073cc <USBD_GetDescriptor+0x204>
 8007274:	a201      	add	r2, pc, #4	; (adr r2, 800727c <USBD_GetDescriptor+0xb4>)
 8007276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727a:	bf00      	nop
 800727c:	08007295 	.word	0x08007295
 8007280:	080072c9 	.word	0x080072c9
 8007284:	080072fd 	.word	0x080072fd
 8007288:	08007331 	.word	0x08007331
 800728c:	08007365 	.word	0x08007365
 8007290:	08007399 	.word	0x08007399
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d00b      	beq.n	80072b8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072a6:	685b      	ldr	r3, [r3, #4]
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	7c12      	ldrb	r2, [r2, #16]
 80072ac:	f107 0108 	add.w	r1, r7, #8
 80072b0:	4610      	mov	r0, r2
 80072b2:	4798      	blx	r3
 80072b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072b6:	e091      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072b8:	6839      	ldr	r1, [r7, #0]
 80072ba:	6878      	ldr	r0, [r7, #4]
 80072bc:	f000 fa97 	bl	80077ee <USBD_CtlError>
            err++;
 80072c0:	7afb      	ldrb	r3, [r7, #11]
 80072c2:	3301      	adds	r3, #1
 80072c4:	72fb      	strb	r3, [r7, #11]
          break;
 80072c6:	e089      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072ce:	689b      	ldr	r3, [r3, #8]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d00b      	beq.n	80072ec <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	687a      	ldr	r2, [r7, #4]
 80072de:	7c12      	ldrb	r2, [r2, #16]
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	4610      	mov	r0, r2
 80072e6:	4798      	blx	r3
 80072e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80072ea:	e077      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80072ec:	6839      	ldr	r1, [r7, #0]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 fa7d 	bl	80077ee <USBD_CtlError>
            err++;
 80072f4:	7afb      	ldrb	r3, [r7, #11]
 80072f6:	3301      	adds	r3, #1
 80072f8:	72fb      	strb	r3, [r7, #11]
          break;
 80072fa:	e06f      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d00b      	beq.n	8007320 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	7c12      	ldrb	r2, [r2, #16]
 8007314:	f107 0108 	add.w	r1, r7, #8
 8007318:	4610      	mov	r0, r2
 800731a:	4798      	blx	r3
 800731c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800731e:	e05d      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 fa63 	bl	80077ee <USBD_CtlError>
            err++;
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	3301      	adds	r3, #1
 800732c:	72fb      	strb	r3, [r7, #11]
          break;
 800732e:	e055      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007336:	691b      	ldr	r3, [r3, #16]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007342:	691b      	ldr	r3, [r3, #16]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	7c12      	ldrb	r2, [r2, #16]
 8007348:	f107 0108 	add.w	r1, r7, #8
 800734c:	4610      	mov	r0, r2
 800734e:	4798      	blx	r3
 8007350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007352:	e043      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007354:	6839      	ldr	r1, [r7, #0]
 8007356:	6878      	ldr	r0, [r7, #4]
 8007358:	f000 fa49 	bl	80077ee <USBD_CtlError>
            err++;
 800735c:	7afb      	ldrb	r3, [r7, #11]
 800735e:	3301      	adds	r3, #1
 8007360:	72fb      	strb	r3, [r7, #11]
          break;
 8007362:	e03b      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d00b      	beq.n	8007388 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007376:	695b      	ldr	r3, [r3, #20]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	7c12      	ldrb	r2, [r2, #16]
 800737c:	f107 0108 	add.w	r1, r7, #8
 8007380:	4610      	mov	r0, r2
 8007382:	4798      	blx	r3
 8007384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007386:	e029      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 fa2f 	bl	80077ee <USBD_CtlError>
            err++;
 8007390:	7afb      	ldrb	r3, [r7, #11]
 8007392:	3301      	adds	r3, #1
 8007394:	72fb      	strb	r3, [r7, #11]
          break;
 8007396:	e021      	b.n	80073dc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d00b      	beq.n	80073bc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80073aa:	699b      	ldr	r3, [r3, #24]
 80073ac:	687a      	ldr	r2, [r7, #4]
 80073ae:	7c12      	ldrb	r2, [r2, #16]
 80073b0:	f107 0108 	add.w	r1, r7, #8
 80073b4:	4610      	mov	r0, r2
 80073b6:	4798      	blx	r3
 80073b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ba:	e00f      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 fa15 	bl	80077ee <USBD_CtlError>
            err++;
 80073c4:	7afb      	ldrb	r3, [r7, #11]
 80073c6:	3301      	adds	r3, #1
 80073c8:	72fb      	strb	r3, [r7, #11]
          break;
 80073ca:	e007      	b.n	80073dc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa0d 	bl	80077ee <USBD_CtlError>
          err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80073da:	e038      	b.n	800744e <USBD_GetDescriptor+0x286>
 80073dc:	e037      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	7c1b      	ldrb	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ee:	f107 0208 	add.w	r2, r7, #8
 80073f2:	4610      	mov	r0, r2
 80073f4:	4798      	blx	r3
 80073f6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80073f8:	e029      	b.n	800744e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80073fa:	6839      	ldr	r1, [r7, #0]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f000 f9f6 	bl	80077ee <USBD_CtlError>
        err++;
 8007402:	7afb      	ldrb	r3, [r7, #11]
 8007404:	3301      	adds	r3, #1
 8007406:	72fb      	strb	r3, [r7, #11]
      break;
 8007408:	e021      	b.n	800744e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	7c1b      	ldrb	r3, [r3, #16]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10d      	bne.n	800742e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800741a:	f107 0208 	add.w	r2, r7, #8
 800741e:	4610      	mov	r0, r2
 8007420:	4798      	blx	r3
 8007422:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	3301      	adds	r3, #1
 8007428:	2207      	movs	r2, #7
 800742a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800742c:	e00f      	b.n	800744e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800742e:	6839      	ldr	r1, [r7, #0]
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9dc 	bl	80077ee <USBD_CtlError>
        err++;
 8007436:	7afb      	ldrb	r3, [r7, #11]
 8007438:	3301      	adds	r3, #1
 800743a:	72fb      	strb	r3, [r7, #11]
      break;
 800743c:	e007      	b.n	800744e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f9d4 	bl	80077ee <USBD_CtlError>
      err++;
 8007446:	7afb      	ldrb	r3, [r7, #11]
 8007448:	3301      	adds	r3, #1
 800744a:	72fb      	strb	r3, [r7, #11]
      break;
 800744c:	bf00      	nop
  }

  if (err != 0U)
 800744e:	7afb      	ldrb	r3, [r7, #11]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d11c      	bne.n	800748e <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007454:	893b      	ldrh	r3, [r7, #8]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d011      	beq.n	800747e <USBD_GetDescriptor+0x2b6>
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	88db      	ldrh	r3, [r3, #6]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d00d      	beq.n	800747e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	88da      	ldrh	r2, [r3, #6]
 8007466:	893b      	ldrh	r3, [r7, #8]
 8007468:	4293      	cmp	r3, r2
 800746a:	bf28      	it	cs
 800746c:	4613      	movcs	r3, r2
 800746e:	b29b      	uxth	r3, r3
 8007470:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007472:	893b      	ldrh	r3, [r7, #8]
 8007474:	461a      	mov	r2, r3
 8007476:	68f9      	ldr	r1, [r7, #12]
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 fa22 	bl	80078c2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	88db      	ldrh	r3, [r3, #6]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d104      	bne.n	8007490 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa79 	bl	800797e <USBD_CtlSendStatus>
 800748c:	e000      	b.n	8007490 <USBD_GetDescriptor+0x2c8>
    return;
 800748e:	bf00      	nop
    }
  }
}
 8007490:	3710      	adds	r7, #16
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop

08007498 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b084      	sub	sp, #16
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	889b      	ldrh	r3, [r3, #4]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d130      	bne.n	800750c <USBD_SetAddress+0x74>
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	88db      	ldrh	r3, [r3, #6]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d12c      	bne.n	800750c <USBD_SetAddress+0x74>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	885b      	ldrh	r3, [r3, #2]
 80074b6:	2b7f      	cmp	r3, #127	; 0x7f
 80074b8:	d828      	bhi.n	800750c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	885b      	ldrh	r3, [r3, #2]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074cc:	2b03      	cmp	r3, #3
 80074ce:	d104      	bne.n	80074da <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80074d0:	6839      	ldr	r1, [r7, #0]
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 f98b 	bl	80077ee <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074d8:	e01d      	b.n	8007516 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7bfa      	ldrb	r2, [r7, #15]
 80074de:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 80074e2:	7bfb      	ldrb	r3, [r7, #15]
 80074e4:	4619      	mov	r1, r3
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fe22 	bl	8008130 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fa46 	bl	800797e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80074f2:	7bfb      	ldrb	r3, [r7, #15]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d004      	beq.n	8007502 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2202      	movs	r2, #2
 80074fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007500:	e009      	b.n	8007516 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800750a:	e004      	b.n	8007516 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 f96d 	bl	80077ee <USBD_CtlError>
  }
}
 8007514:	bf00      	nop
 8007516:	bf00      	nop
 8007518:	3710      	adds	r7, #16
 800751a:	46bd      	mov	sp, r7
 800751c:	bd80      	pop	{r7, pc}
	...

08007520 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	885b      	ldrh	r3, [r3, #2]
 800752e:	b2da      	uxtb	r2, r3
 8007530:	4b41      	ldr	r3, [pc, #260]	; (8007638 <USBD_SetConfig+0x118>)
 8007532:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007534:	4b40      	ldr	r3, [pc, #256]	; (8007638 <USBD_SetConfig+0x118>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b01      	cmp	r3, #1
 800753a:	d904      	bls.n	8007546 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800753c:	6839      	ldr	r1, [r7, #0]
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f000 f955 	bl	80077ee <USBD_CtlError>
 8007544:	e075      	b.n	8007632 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800754c:	2b02      	cmp	r3, #2
 800754e:	d002      	beq.n	8007556 <USBD_SetConfig+0x36>
 8007550:	2b03      	cmp	r3, #3
 8007552:	d023      	beq.n	800759c <USBD_SetConfig+0x7c>
 8007554:	e062      	b.n	800761c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007556:	4b38      	ldr	r3, [pc, #224]	; (8007638 <USBD_SetConfig+0x118>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d01a      	beq.n	8007594 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800755e:	4b36      	ldr	r3, [pc, #216]	; (8007638 <USBD_SetConfig+0x118>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	461a      	mov	r2, r3
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2203      	movs	r2, #3
 800756c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007570:	4b31      	ldr	r3, [pc, #196]	; (8007638 <USBD_SetConfig+0x118>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	4619      	mov	r1, r3
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f7ff f9e8 	bl	800694c <USBD_SetClassConfig>
 800757c:	4603      	mov	r3, r0
 800757e:	2b02      	cmp	r3, #2
 8007580:	d104      	bne.n	800758c <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007582:	6839      	ldr	r1, [r7, #0]
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 f932 	bl	80077ee <USBD_CtlError>
            return;
 800758a:	e052      	b.n	8007632 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f9f6 	bl	800797e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007592:	e04e      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007594:	6878      	ldr	r0, [r7, #4]
 8007596:	f000 f9f2 	bl	800797e <USBD_CtlSendStatus>
        break;
 800759a:	e04a      	b.n	8007632 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 800759c:	4b26      	ldr	r3, [pc, #152]	; (8007638 <USBD_SetConfig+0x118>)
 800759e:	781b      	ldrb	r3, [r3, #0]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d112      	bne.n	80075ca <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2202      	movs	r2, #2
 80075a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80075ac:	4b22      	ldr	r3, [pc, #136]	; (8007638 <USBD_SetConfig+0x118>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	461a      	mov	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80075b6:	4b20      	ldr	r3, [pc, #128]	; (8007638 <USBD_SetConfig+0x118>)
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	4619      	mov	r1, r3
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7ff f9e4 	bl	800698a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 f9db 	bl	800797e <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80075c8:	e033      	b.n	8007632 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80075ca:	4b1b      	ldr	r3, [pc, #108]	; (8007638 <USBD_SetConfig+0x118>)
 80075cc:	781b      	ldrb	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	429a      	cmp	r2, r3
 80075d6:	d01d      	beq.n	8007614 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	685b      	ldr	r3, [r3, #4]
 80075dc:	b2db      	uxtb	r3, r3
 80075de:	4619      	mov	r1, r3
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f7ff f9d2 	bl	800698a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 80075e6:	4b14      	ldr	r3, [pc, #80]	; (8007638 <USBD_SetConfig+0x118>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80075f0:	4b11      	ldr	r3, [pc, #68]	; (8007638 <USBD_SetConfig+0x118>)
 80075f2:	781b      	ldrb	r3, [r3, #0]
 80075f4:	4619      	mov	r1, r3
 80075f6:	6878      	ldr	r0, [r7, #4]
 80075f8:	f7ff f9a8 	bl	800694c <USBD_SetClassConfig>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b02      	cmp	r3, #2
 8007600:	d104      	bne.n	800760c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f8f2 	bl	80077ee <USBD_CtlError>
            return;
 800760a:	e012      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800760c:	6878      	ldr	r0, [r7, #4]
 800760e:	f000 f9b6 	bl	800797e <USBD_CtlSendStatus>
        break;
 8007612:	e00e      	b.n	8007632 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f9b2 	bl	800797e <USBD_CtlSendStatus>
        break;
 800761a:	e00a      	b.n	8007632 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	6878      	ldr	r0, [r7, #4]
 8007620:	f000 f8e5 	bl	80077ee <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007624:	4b04      	ldr	r3, [pc, #16]	; (8007638 <USBD_SetConfig+0x118>)
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	4619      	mov	r1, r3
 800762a:	6878      	ldr	r0, [r7, #4]
 800762c:	f7ff f9ad 	bl	800698a <USBD_ClrClassConfig>
        break;
 8007630:	bf00      	nop
    }
  }
}
 8007632:	3708      	adds	r7, #8
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	200001cc 	.word	0x200001cc

0800763c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
 8007644:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	88db      	ldrh	r3, [r3, #6]
 800764a:	2b01      	cmp	r3, #1
 800764c:	d004      	beq.n	8007658 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f8cc 	bl	80077ee <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007656:	e022      	b.n	800769e <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800765e:	2b02      	cmp	r3, #2
 8007660:	dc02      	bgt.n	8007668 <USBD_GetConfig+0x2c>
 8007662:	2b00      	cmp	r3, #0
 8007664:	dc03      	bgt.n	800766e <USBD_GetConfig+0x32>
 8007666:	e015      	b.n	8007694 <USBD_GetConfig+0x58>
 8007668:	2b03      	cmp	r3, #3
 800766a:	d00b      	beq.n	8007684 <USBD_GetConfig+0x48>
 800766c:	e012      	b.n	8007694 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2200      	movs	r2, #0
 8007672:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	3308      	adds	r3, #8
 8007678:	2201      	movs	r2, #1
 800767a:	4619      	mov	r1, r3
 800767c:	6878      	ldr	r0, [r7, #4]
 800767e:	f000 f920 	bl	80078c2 <USBD_CtlSendData>
        break;
 8007682:	e00c      	b.n	800769e <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	3304      	adds	r3, #4
 8007688:	2201      	movs	r2, #1
 800768a:	4619      	mov	r1, r3
 800768c:	6878      	ldr	r0, [r7, #4]
 800768e:	f000 f918 	bl	80078c2 <USBD_CtlSendData>
        break;
 8007692:	e004      	b.n	800769e <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007694:	6839      	ldr	r1, [r7, #0]
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 f8a9 	bl	80077ee <USBD_CtlError>
        break;
 800769c:	bf00      	nop
}
 800769e:	bf00      	nop
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076b6:	3b01      	subs	r3, #1
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d81e      	bhi.n	80076fa <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	88db      	ldrh	r3, [r3, #6]
 80076c0:	2b02      	cmp	r3, #2
 80076c2:	d004      	beq.n	80076ce <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80076c4:	6839      	ldr	r1, [r7, #0]
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f891 	bl	80077ee <USBD_CtlError>
        break;
 80076cc:	e01a      	b.n	8007704 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d005      	beq.n	80076ea <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	68db      	ldr	r3, [r3, #12]
 80076e2:	f043 0202 	orr.w	r2, r3, #2
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	330c      	adds	r3, #12
 80076ee:	2202      	movs	r2, #2
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8e5 	bl	80078c2 <USBD_CtlSendData>
      break;
 80076f8:	e004      	b.n	8007704 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 80076fa:	6839      	ldr	r1, [r7, #0]
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f876 	bl	80077ee <USBD_CtlError>
      break;
 8007702:	bf00      	nop
  }
}
 8007704:	bf00      	nop
 8007706:	3708      	adds	r7, #8
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b082      	sub	sp, #8
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	885b      	ldrh	r3, [r3, #2]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d106      	bne.n	800772c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2201      	movs	r2, #1
 8007722:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f929 	bl	800797e <USBD_CtlSendStatus>
  }
}
 800772c:	bf00      	nop
 800772e:	3708      	adds	r7, #8
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}

08007734 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b082      	sub	sp, #8
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007744:	3b01      	subs	r3, #1
 8007746:	2b02      	cmp	r3, #2
 8007748:	d80b      	bhi.n	8007762 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10c      	bne.n	800776c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	f000 f90f 	bl	800797e <USBD_CtlSendStatus>
      }
      break;
 8007760:	e004      	b.n	800776c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007762:	6839      	ldr	r1, [r7, #0]
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 f842 	bl	80077ee <USBD_CtlError>
      break;
 800776a:	e000      	b.n	800776e <USBD_ClrFeature+0x3a>
      break;
 800776c:	bf00      	nop
  }
}
 800776e:	bf00      	nop
 8007770:	3708      	adds	r7, #8
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007776:	b480      	push	{r7}
 8007778:	b083      	sub	sp, #12
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781a      	ldrb	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	785a      	ldrb	r2, [r3, #1]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	3302      	adds	r3, #2
 8007794:	781b      	ldrb	r3, [r3, #0]
 8007796:	b29a      	uxth	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	3303      	adds	r3, #3
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	b29b      	uxth	r3, r3
 80077a0:	021b      	lsls	r3, r3, #8
 80077a2:	b29b      	uxth	r3, r3
 80077a4:	4413      	add	r3, r2
 80077a6:	b29a      	uxth	r2, r3
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80077ac:	683b      	ldr	r3, [r7, #0]
 80077ae:	3304      	adds	r3, #4
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	3305      	adds	r3, #5
 80077b8:	781b      	ldrb	r3, [r3, #0]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	021b      	lsls	r3, r3, #8
 80077be:	b29b      	uxth	r3, r3
 80077c0:	4413      	add	r3, r2
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	3306      	adds	r3, #6
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29a      	uxth	r2, r3
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	3307      	adds	r3, #7
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	021b      	lsls	r3, r3, #8
 80077da:	b29b      	uxth	r3, r3
 80077dc:	4413      	add	r3, r2
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	80da      	strh	r2, [r3, #6]

}
 80077e4:	bf00      	nop
 80077e6:	370c      	adds	r7, #12
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bc80      	pop	{r7}
 80077ec:	4770      	bx	lr

080077ee <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 80077ee:	b580      	push	{r7, lr}
 80077f0:	b082      	sub	sp, #8
 80077f2:	af00      	add	r7, sp, #0
 80077f4:	6078      	str	r0, [r7, #4]
 80077f6:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 80077f8:	2180      	movs	r1, #128	; 0x80
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fc2e 	bl	800805c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007800:	2100      	movs	r1, #0
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 fc2a 	bl	800805c <USBD_LL_StallEP>
}
 8007808:	bf00      	nop
 800780a:	3708      	adds	r7, #8
 800780c:	46bd      	mov	sp, r7
 800780e:	bd80      	pop	{r7, pc}

08007810 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b086      	sub	sp, #24
 8007814:	af00      	add	r7, sp, #0
 8007816:	60f8      	str	r0, [r7, #12]
 8007818:	60b9      	str	r1, [r7, #8]
 800781a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800781c:	2300      	movs	r3, #0
 800781e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d032      	beq.n	800788c <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007826:	68f8      	ldr	r0, [r7, #12]
 8007828:	f000 f834 	bl	8007894 <USBD_GetLen>
 800782c:	4603      	mov	r3, r0
 800782e:	3301      	adds	r3, #1
 8007830:	b29b      	uxth	r3, r3
 8007832:	005b      	lsls	r3, r3, #1
 8007834:	b29a      	uxth	r2, r3
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800783a:	7dfb      	ldrb	r3, [r7, #23]
 800783c:	1c5a      	adds	r2, r3, #1
 800783e:	75fa      	strb	r2, [r7, #23]
 8007840:	461a      	mov	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4413      	add	r3, r2
 8007846:	687a      	ldr	r2, [r7, #4]
 8007848:	7812      	ldrb	r2, [r2, #0]
 800784a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800784c:	7dfb      	ldrb	r3, [r7, #23]
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	75fa      	strb	r2, [r7, #23]
 8007852:	461a      	mov	r2, r3
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	4413      	add	r3, r2
 8007858:	2203      	movs	r2, #3
 800785a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800785c:	e012      	b.n	8007884 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	1c5a      	adds	r2, r3, #1
 8007862:	60fa      	str	r2, [r7, #12]
 8007864:	7dfa      	ldrb	r2, [r7, #23]
 8007866:	1c51      	adds	r1, r2, #1
 8007868:	75f9      	strb	r1, [r7, #23]
 800786a:	4611      	mov	r1, r2
 800786c:	68ba      	ldr	r2, [r7, #8]
 800786e:	440a      	add	r2, r1
 8007870:	781b      	ldrb	r3, [r3, #0]
 8007872:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007874:	7dfb      	ldrb	r3, [r7, #23]
 8007876:	1c5a      	adds	r2, r3, #1
 8007878:	75fa      	strb	r2, [r7, #23]
 800787a:	461a      	mov	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	4413      	add	r3, r2
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e8      	bne.n	800785e <USBD_GetString+0x4e>
    }
  }
}
 800788c:	bf00      	nop
 800788e:	3718      	adds	r7, #24
 8007890:	46bd      	mov	sp, r7
 8007892:	bd80      	pop	{r7, pc}

08007894 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007894:	b480      	push	{r7}
 8007896:	b085      	sub	sp, #20
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800789c:	2300      	movs	r3, #0
 800789e:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80078a0:	e005      	b.n	80078ae <USBD_GetLen+0x1a>
  {
    len++;
 80078a2:	7bfb      	ldrb	r3, [r7, #15]
 80078a4:	3301      	adds	r3, #1
 80078a6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	3301      	adds	r3, #1
 80078ac:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d1f5      	bne.n	80078a2 <USBD_GetLen+0xe>
  }

  return len;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3714      	adds	r7, #20
 80078bc:	46bd      	mov	sp, r7
 80078be:	bc80      	pop	{r7}
 80078c0:	4770      	bx	lr

080078c2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80078c2:	b580      	push	{r7, lr}
 80078c4:	b084      	sub	sp, #16
 80078c6:	af00      	add	r7, sp, #0
 80078c8:	60f8      	str	r0, [r7, #12]
 80078ca:	60b9      	str	r1, [r7, #8]
 80078cc:	4613      	mov	r3, r2
 80078ce:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2202      	movs	r2, #2
 80078d4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80078d8:	88fa      	ldrh	r2, [r7, #6]
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80078de:	88fa      	ldrh	r2, [r7, #6]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80078e4:	88fb      	ldrh	r3, [r7, #6]
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 fc3f 	bl	800816e <USBD_LL_Transmit>

  return USBD_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3710      	adds	r7, #16
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}

080078fa <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 80078fa:	b580      	push	{r7, lr}
 80078fc:	b084      	sub	sp, #16
 80078fe:	af00      	add	r7, sp, #0
 8007900:	60f8      	str	r0, [r7, #12]
 8007902:	60b9      	str	r1, [r7, #8]
 8007904:	4613      	mov	r3, r2
 8007906:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007908:	88fb      	ldrh	r3, [r7, #6]
 800790a:	68ba      	ldr	r2, [r7, #8]
 800790c:	2100      	movs	r1, #0
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f000 fc2d 	bl	800816e <USBD_LL_Transmit>

  return USBD_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}

0800791e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	60f8      	str	r0, [r7, #12]
 8007926:	60b9      	str	r1, [r7, #8]
 8007928:	4613      	mov	r3, r2
 800792a:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2203      	movs	r2, #3
 8007930:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007934:	88fa      	ldrh	r2, [r7, #6]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 800793c:	88fa      	ldrh	r2, [r7, #6]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007944:	88fb      	ldrh	r3, [r7, #6]
 8007946:	68ba      	ldr	r2, [r7, #8]
 8007948:	2100      	movs	r1, #0
 800794a:	68f8      	ldr	r0, [r7, #12]
 800794c:	f000 fc32 	bl	80081b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3710      	adds	r7, #16
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b084      	sub	sp, #16
 800795e:	af00      	add	r7, sp, #0
 8007960:	60f8      	str	r0, [r7, #12]
 8007962:	60b9      	str	r1, [r7, #8]
 8007964:	4613      	mov	r3, r2
 8007966:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007968:	88fb      	ldrh	r3, [r7, #6]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	2100      	movs	r1, #0
 800796e:	68f8      	ldr	r0, [r7, #12]
 8007970:	f000 fc20 	bl	80081b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007974:	2300      	movs	r3, #0
}
 8007976:	4618      	mov	r0, r3
 8007978:	3710      	adds	r7, #16
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}

0800797e <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800797e:	b580      	push	{r7, lr}
 8007980:	b082      	sub	sp, #8
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	2204      	movs	r2, #4
 800798a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800798e:	2300      	movs	r3, #0
 8007990:	2200      	movs	r2, #0
 8007992:	2100      	movs	r1, #0
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fbea 	bl	800816e <USBD_LL_Transmit>

  return USBD_OK;
 800799a:	2300      	movs	r3, #0
}
 800799c:	4618      	mov	r0, r3
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2205      	movs	r2, #5
 80079b0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80079b4:	2300      	movs	r3, #0
 80079b6:	2200      	movs	r2, #0
 80079b8:	2100      	movs	r1, #0
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f000 fbfa 	bl	80081b4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
	...

080079cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80079d0:	2200      	movs	r2, #0
 80079d2:	4912      	ldr	r1, [pc, #72]	; (8007a1c <MX_USB_DEVICE_Init+0x50>)
 80079d4:	4812      	ldr	r0, [pc, #72]	; (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079d6:	f7fe ff5f 	bl	8006898 <USBD_Init>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80079e0:	f7f8 fd76 	bl	80004d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80079e4:	490f      	ldr	r1, [pc, #60]	; (8007a24 <MX_USB_DEVICE_Init+0x58>)
 80079e6:	480e      	ldr	r0, [pc, #56]	; (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079e8:	f7fe ff81 	bl	80068ee <USBD_RegisterClass>
 80079ec:	4603      	mov	r3, r0
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d001      	beq.n	80079f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80079f2:	f7f8 fd6d 	bl	80004d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80079f6:	490c      	ldr	r1, [pc, #48]	; (8007a28 <MX_USB_DEVICE_Init+0x5c>)
 80079f8:	4809      	ldr	r0, [pc, #36]	; (8007a20 <MX_USB_DEVICE_Init+0x54>)
 80079fa:	f7fe fee1 	bl	80067c0 <USBD_CDC_RegisterInterface>
 80079fe:	4603      	mov	r3, r0
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d001      	beq.n	8007a08 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007a04:	f7f8 fd64 	bl	80004d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007a08:	4805      	ldr	r0, [pc, #20]	; (8007a20 <MX_USB_DEVICE_Init+0x54>)
 8007a0a:	f7fe ff89 	bl	8006920 <USBD_Start>
 8007a0e:	4603      	mov	r3, r0
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d001      	beq.n	8007a18 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007a14:	f7f8 fd5c 	bl	80004d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007a18:	bf00      	nop
 8007a1a:	bd80      	pop	{r7, pc}
 8007a1c:	20000134 	.word	0x20000134
 8007a20:	200001d0 	.word	0x200001d0
 8007a24:	20000020 	.word	0x20000020
 8007a28:	20000124 	.word	0x20000124

08007a2c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007a30:	2200      	movs	r2, #0
 8007a32:	4905      	ldr	r1, [pc, #20]	; (8007a48 <CDC_Init_FS+0x1c>)
 8007a34:	4805      	ldr	r0, [pc, #20]	; (8007a4c <CDC_Init_FS+0x20>)
 8007a36:	f7fe fed9 	bl	80067ec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007a3a:	4905      	ldr	r1, [pc, #20]	; (8007a50 <CDC_Init_FS+0x24>)
 8007a3c:	4803      	ldr	r0, [pc, #12]	; (8007a4c <CDC_Init_FS+0x20>)
 8007a3e:	f7fe feee 	bl	800681e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007a42:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000894 	.word	0x20000894
 8007a4c:	200001d0 	.word	0x200001d0
 8007a50:	20000494 	.word	0x20000494

08007a54 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007a58:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bc80      	pop	{r7}
 8007a60:	4770      	bx	lr
	...

08007a64 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	4603      	mov	r3, r0
 8007a6c:	6039      	str	r1, [r7, #0]
 8007a6e:	71fb      	strb	r3, [r7, #7]
 8007a70:	4613      	mov	r3, r2
 8007a72:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007a74:	79fb      	ldrb	r3, [r7, #7]
 8007a76:	2b23      	cmp	r3, #35	; 0x23
 8007a78:	d84a      	bhi.n	8007b10 <CDC_Control_FS+0xac>
 8007a7a:	a201      	add	r2, pc, #4	; (adr r2, 8007a80 <CDC_Control_FS+0x1c>)
 8007a7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a80:	08007b11 	.word	0x08007b11
 8007a84:	08007b11 	.word	0x08007b11
 8007a88:	08007b11 	.word	0x08007b11
 8007a8c:	08007b11 	.word	0x08007b11
 8007a90:	08007b11 	.word	0x08007b11
 8007a94:	08007b11 	.word	0x08007b11
 8007a98:	08007b11 	.word	0x08007b11
 8007a9c:	08007b11 	.word	0x08007b11
 8007aa0:	08007b11 	.word	0x08007b11
 8007aa4:	08007b11 	.word	0x08007b11
 8007aa8:	08007b11 	.word	0x08007b11
 8007aac:	08007b11 	.word	0x08007b11
 8007ab0:	08007b11 	.word	0x08007b11
 8007ab4:	08007b11 	.word	0x08007b11
 8007ab8:	08007b11 	.word	0x08007b11
 8007abc:	08007b11 	.word	0x08007b11
 8007ac0:	08007b11 	.word	0x08007b11
 8007ac4:	08007b11 	.word	0x08007b11
 8007ac8:	08007b11 	.word	0x08007b11
 8007acc:	08007b11 	.word	0x08007b11
 8007ad0:	08007b11 	.word	0x08007b11
 8007ad4:	08007b11 	.word	0x08007b11
 8007ad8:	08007b11 	.word	0x08007b11
 8007adc:	08007b11 	.word	0x08007b11
 8007ae0:	08007b11 	.word	0x08007b11
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b11 	.word	0x08007b11
 8007aec:	08007b11 	.word	0x08007b11
 8007af0:	08007b11 	.word	0x08007b11
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b11 	.word	0x08007b11
 8007afc:	08007b11 	.word	0x08007b11
 8007b00:	08007b11 	.word	0x08007b11
 8007b04:	08007b11 	.word	0x08007b11
 8007b08:	08007b11 	.word	0x08007b11
 8007b0c:	08007b11 	.word	0x08007b11
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007b10:	bf00      	nop
  }

  return (USBD_OK);
 8007b12:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bc80      	pop	{r7}
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop

08007b20 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	4805      	ldr	r0, [pc, #20]	; (8007b44 <CDC_Receive_FS+0x24>)
 8007b2e:	f7fe fe76 	bl	800681e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007b32:	4804      	ldr	r0, [pc, #16]	; (8007b44 <CDC_Receive_FS+0x24>)
 8007b34:	f7fe fe86 	bl	8006844 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007b38:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}
 8007b42:	bf00      	nop
 8007b44:	200001d0 	.word	0x200001d0

08007b48 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007b54:	683b      	ldr	r3, [r7, #0]
 8007b56:	2212      	movs	r2, #18
 8007b58:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007b5a:	4b03      	ldr	r3, [pc, #12]	; (8007b68 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	bc80      	pop	{r7}
 8007b64:	4770      	bx	lr
 8007b66:	bf00      	nop
 8007b68:	20000150 	.word	0x20000150

08007b6c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	4603      	mov	r3, r0
 8007b74:	6039      	str	r1, [r7, #0]
 8007b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007b78:	683b      	ldr	r3, [r7, #0]
 8007b7a:	2204      	movs	r2, #4
 8007b7c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007b7e:	4b03      	ldr	r3, [pc, #12]	; (8007b8c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	370c      	adds	r7, #12
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bc80      	pop	{r7}
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	20000164 	.word	0x20000164

08007b90 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b082      	sub	sp, #8
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	4603      	mov	r3, r0
 8007b98:	6039      	str	r1, [r7, #0]
 8007b9a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007b9c:	79fb      	ldrb	r3, [r7, #7]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d105      	bne.n	8007bae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007ba2:	683a      	ldr	r2, [r7, #0]
 8007ba4:	4907      	ldr	r1, [pc, #28]	; (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ba6:	4808      	ldr	r0, [pc, #32]	; (8007bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ba8:	f7ff fe32 	bl	8007810 <USBD_GetString>
 8007bac:	e004      	b.n	8007bb8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007bae:	683a      	ldr	r2, [r7, #0]
 8007bb0:	4904      	ldr	r1, [pc, #16]	; (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007bb2:	4805      	ldr	r0, [pc, #20]	; (8007bc8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007bb4:	f7ff fe2c 	bl	8007810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007bb8:	4b02      	ldr	r3, [pc, #8]	; (8007bc4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}
 8007bc2:	bf00      	nop
 8007bc4:	20000c94 	.word	0x20000c94
 8007bc8:	08008338 	.word	0x08008338

08007bcc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b082      	sub	sp, #8
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	6039      	str	r1, [r7, #0]
 8007bd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	4904      	ldr	r1, [pc, #16]	; (8007bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007bdc:	4804      	ldr	r0, [pc, #16]	; (8007bf0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007bde:	f7ff fe17 	bl	8007810 <USBD_GetString>
  return USBD_StrDesc;
 8007be2:	4b02      	ldr	r3, [pc, #8]	; (8007bec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3708      	adds	r7, #8
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}
 8007bec:	20000c94 	.word	0x20000c94
 8007bf0:	08008350 	.word	0x08008350

08007bf4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b082      	sub	sp, #8
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	6039      	str	r1, [r7, #0]
 8007bfe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	221a      	movs	r2, #26
 8007c04:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007c06:	f000 f843 	bl	8007c90 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007c0a:	4b02      	ldr	r3, [pc, #8]	; (8007c14 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}
 8007c14:	20000168 	.word	0x20000168

08007c18 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c18:	b580      	push	{r7, lr}
 8007c1a:	b082      	sub	sp, #8
 8007c1c:	af00      	add	r7, sp, #0
 8007c1e:	4603      	mov	r3, r0
 8007c20:	6039      	str	r1, [r7, #0]
 8007c22:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007c24:	79fb      	ldrb	r3, [r7, #7]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d105      	bne.n	8007c36 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c2a:	683a      	ldr	r2, [r7, #0]
 8007c2c:	4907      	ldr	r1, [pc, #28]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c2e:	4808      	ldr	r0, [pc, #32]	; (8007c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c30:	f7ff fdee 	bl	8007810 <USBD_GetString>
 8007c34:	e004      	b.n	8007c40 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007c36:	683a      	ldr	r2, [r7, #0]
 8007c38:	4904      	ldr	r1, [pc, #16]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007c3a:	4805      	ldr	r0, [pc, #20]	; (8007c50 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007c3c:	f7ff fde8 	bl	8007810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c40:	4b02      	ldr	r3, [pc, #8]	; (8007c4c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007c42:	4618      	mov	r0, r3
 8007c44:	3708      	adds	r7, #8
 8007c46:	46bd      	mov	sp, r7
 8007c48:	bd80      	pop	{r7, pc}
 8007c4a:	bf00      	nop
 8007c4c:	20000c94 	.word	0x20000c94
 8007c50:	08008364 	.word	0x08008364

08007c54 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b082      	sub	sp, #8
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	6039      	str	r1, [r7, #0]
 8007c5e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007c60:	79fb      	ldrb	r3, [r7, #7]
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d105      	bne.n	8007c72 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	4907      	ldr	r1, [pc, #28]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c6a:	4808      	ldr	r0, [pc, #32]	; (8007c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c6c:	f7ff fdd0 	bl	8007810 <USBD_GetString>
 8007c70:	e004      	b.n	8007c7c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	4904      	ldr	r1, [pc, #16]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007c76:	4805      	ldr	r0, [pc, #20]	; (8007c8c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007c78:	f7ff fdca 	bl	8007810 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007c7c:	4b02      	ldr	r3, [pc, #8]	; (8007c88 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	3708      	adds	r7, #8
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
 8007c86:	bf00      	nop
 8007c88:	20000c94 	.word	0x20000c94
 8007c8c:	08008370 	.word	0x08008370

08007c90 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007c90:	b580      	push	{r7, lr}
 8007c92:	b084      	sub	sp, #16
 8007c94:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007c96:	4b0f      	ldr	r3, [pc, #60]	; (8007cd4 <Get_SerialNum+0x44>)
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007c9c:	4b0e      	ldr	r3, [pc, #56]	; (8007cd8 <Get_SerialNum+0x48>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007ca2:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <Get_SerialNum+0x4c>)
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007ca8:	68fa      	ldr	r2, [r7, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	4413      	add	r3, r2
 8007cae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d009      	beq.n	8007cca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007cb6:	2208      	movs	r2, #8
 8007cb8:	4909      	ldr	r1, [pc, #36]	; (8007ce0 <Get_SerialNum+0x50>)
 8007cba:	68f8      	ldr	r0, [r7, #12]
 8007cbc:	f000 f814 	bl	8007ce8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	4908      	ldr	r1, [pc, #32]	; (8007ce4 <Get_SerialNum+0x54>)
 8007cc4:	68b8      	ldr	r0, [r7, #8]
 8007cc6:	f000 f80f 	bl	8007ce8 <IntToUnicode>
  }
}
 8007cca:	bf00      	nop
 8007ccc:	3710      	adds	r7, #16
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}
 8007cd2:	bf00      	nop
 8007cd4:	1ffff7e8 	.word	0x1ffff7e8
 8007cd8:	1ffff7ec 	.word	0x1ffff7ec
 8007cdc:	1ffff7f0 	.word	0x1ffff7f0
 8007ce0:	2000016a 	.word	0x2000016a
 8007ce4:	2000017a 	.word	0x2000017a

08007ce8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b087      	sub	sp, #28
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	4613      	mov	r3, r2
 8007cf4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	75fb      	strb	r3, [r7, #23]
 8007cfe:	e027      	b.n	8007d50 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	0f1b      	lsrs	r3, r3, #28
 8007d04:	2b09      	cmp	r3, #9
 8007d06:	d80b      	bhi.n	8007d20 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	0f1b      	lsrs	r3, r3, #28
 8007d0c:	b2da      	uxtb	r2, r3
 8007d0e:	7dfb      	ldrb	r3, [r7, #23]
 8007d10:	005b      	lsls	r3, r3, #1
 8007d12:	4619      	mov	r1, r3
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	440b      	add	r3, r1
 8007d18:	3230      	adds	r2, #48	; 0x30
 8007d1a:	b2d2      	uxtb	r2, r2
 8007d1c:	701a      	strb	r2, [r3, #0]
 8007d1e:	e00a      	b.n	8007d36 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	0f1b      	lsrs	r3, r3, #28
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	7dfb      	ldrb	r3, [r7, #23]
 8007d28:	005b      	lsls	r3, r3, #1
 8007d2a:	4619      	mov	r1, r3
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	440b      	add	r3, r1
 8007d30:	3237      	adds	r2, #55	; 0x37
 8007d32:	b2d2      	uxtb	r2, r2
 8007d34:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	011b      	lsls	r3, r3, #4
 8007d3a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007d3c:	7dfb      	ldrb	r3, [r7, #23]
 8007d3e:	005b      	lsls	r3, r3, #1
 8007d40:	3301      	adds	r3, #1
 8007d42:	68ba      	ldr	r2, [r7, #8]
 8007d44:	4413      	add	r3, r2
 8007d46:	2200      	movs	r2, #0
 8007d48:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007d4a:	7dfb      	ldrb	r3, [r7, #23]
 8007d4c:	3301      	adds	r3, #1
 8007d4e:	75fb      	strb	r3, [r7, #23]
 8007d50:	7dfa      	ldrb	r2, [r7, #23]
 8007d52:	79fb      	ldrb	r3, [r7, #7]
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d3d3      	bcc.n	8007d00 <IntToUnicode+0x18>
  }
}
 8007d58:	bf00      	nop
 8007d5a:	bf00      	nop
 8007d5c:	371c      	adds	r7, #28
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bc80      	pop	{r7}
 8007d62:	4770      	bx	lr

08007d64 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a0d      	ldr	r2, [pc, #52]	; (8007da8 <HAL_PCD_MspInit+0x44>)
 8007d72:	4293      	cmp	r3, r2
 8007d74:	d113      	bne.n	8007d9e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d76:	4b0d      	ldr	r3, [pc, #52]	; (8007dac <HAL_PCD_MspInit+0x48>)
 8007d78:	69db      	ldr	r3, [r3, #28]
 8007d7a:	4a0c      	ldr	r2, [pc, #48]	; (8007dac <HAL_PCD_MspInit+0x48>)
 8007d7c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d80:	61d3      	str	r3, [r2, #28]
 8007d82:	4b0a      	ldr	r3, [pc, #40]	; (8007dac <HAL_PCD_MspInit+0x48>)
 8007d84:	69db      	ldr	r3, [r3, #28]
 8007d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d8a:	60fb      	str	r3, [r7, #12]
 8007d8c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8007d8e:	2200      	movs	r2, #0
 8007d90:	2100      	movs	r1, #0
 8007d92:	2014      	movs	r0, #20
 8007d94:	f7f9 fb77 	bl	8001486 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8007d98:	2014      	movs	r0, #20
 8007d9a:	f7f9 fb90 	bl	80014be <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d9e:	bf00      	nop
 8007da0:	3710      	adds	r7, #16
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	40005c00 	.word	0x40005c00
 8007dac:	40021000 	.word	0x40021000

08007db0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b082      	sub	sp, #8
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	4610      	mov	r0, r2
 8007dc8:	f7fe fdf2 	bl	80069b0 <USBD_LL_SetupStage>
}
 8007dcc:	bf00      	nop
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b082      	sub	sp, #8
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
 8007ddc:	460b      	mov	r3, r1
 8007dde:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007de6:	78fa      	ldrb	r2, [r7, #3]
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	440b      	add	r3, r1
 8007df4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	78fb      	ldrb	r3, [r7, #3]
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	f7fe fe24 	bl	8006a4a <USBD_LL_DataOutStage>
}
 8007e02:	bf00      	nop
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}

08007e0a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e0a:	b580      	push	{r7, lr}
 8007e0c:	b082      	sub	sp, #8
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8007e1c:	78fa      	ldrb	r2, [r7, #3]
 8007e1e:	6879      	ldr	r1, [r7, #4]
 8007e20:	4613      	mov	r3, r2
 8007e22:	009b      	lsls	r3, r3, #2
 8007e24:	4413      	add	r3, r2
 8007e26:	00db      	lsls	r3, r3, #3
 8007e28:	440b      	add	r3, r1
 8007e2a:	333c      	adds	r3, #60	; 0x3c
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	78fb      	ldrb	r3, [r7, #3]
 8007e30:	4619      	mov	r1, r3
 8007e32:	f7fe fe7b 	bl	8006b2c <USBD_LL_DataInStage>
}
 8007e36:	bf00      	nop
 8007e38:	3708      	adds	r7, #8
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b082      	sub	sp, #8
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fe ff8b 	bl	8006d68 <USBD_LL_SOF>
}
 8007e52:	bf00      	nop
 8007e54:	3708      	adds	r7, #8
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}

08007e5a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e5a:	b580      	push	{r7, lr}
 8007e5c:	b084      	sub	sp, #16
 8007e5e:	af00      	add	r7, sp, #0
 8007e60:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007e62:	2301      	movs	r3, #1
 8007e64:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	689b      	ldr	r3, [r3, #8]
 8007e6a:	2b02      	cmp	r3, #2
 8007e6c:	d001      	beq.n	8007e72 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007e6e:	f7f8 fb2f 	bl	80004d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e78:	7bfa      	ldrb	r2, [r7, #15]
 8007e7a:	4611      	mov	r1, r2
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7fe ff3b 	bl	8006cf8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007e88:	4618      	mov	r0, r3
 8007e8a:	f7fe fef4 	bl	8006c76 <USBD_LL_Reset>
}
 8007e8e:	bf00      	nop
 8007e90:	3710      	adds	r7, #16
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}
	...

08007e98 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b082      	sub	sp, #8
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7fe ff35 	bl	8006d16 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	699b      	ldr	r3, [r3, #24]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d005      	beq.n	8007ec0 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007eb4:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <HAL_PCD_SuspendCallback+0x30>)
 8007eb6:	691b      	ldr	r3, [r3, #16]
 8007eb8:	4a03      	ldr	r2, [pc, #12]	; (8007ec8 <HAL_PCD_SuspendCallback+0x30>)
 8007eba:	f043 0306 	orr.w	r3, r3, #6
 8007ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007ec0:	bf00      	nop
 8007ec2:	3708      	adds	r7, #8
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	bd80      	pop	{r7, pc}
 8007ec8:	e000ed00 	.word	0xe000ed00

08007ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8007eda:	4618      	mov	r0, r3
 8007edc:	f7fe ff2f 	bl	8006d3e <USBD_LL_Resume>
}
 8007ee0:	bf00      	nop
 8007ee2:	3708      	adds	r7, #8
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b082      	sub	sp, #8
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8007ef0:	4a28      	ldr	r2, [pc, #160]	; (8007f94 <USBD_LL_Init+0xac>)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a26      	ldr	r2, [pc, #152]	; (8007f94 <USBD_LL_Init+0xac>)
 8007efc:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8007f00:	4b24      	ldr	r3, [pc, #144]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f02:	4a25      	ldr	r2, [pc, #148]	; (8007f98 <USBD_LL_Init+0xb0>)
 8007f04:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007f06:	4b23      	ldr	r3, [pc, #140]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f08:	2208      	movs	r2, #8
 8007f0a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007f0c:	4b21      	ldr	r3, [pc, #132]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f0e:	2202      	movs	r2, #2
 8007f10:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007f12:	4b20      	ldr	r3, [pc, #128]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f14:	2200      	movs	r2, #0
 8007f16:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007f18:	4b1e      	ldr	r3, [pc, #120]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007f1e:	4b1d      	ldr	r3, [pc, #116]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f20:	2200      	movs	r2, #0
 8007f22:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007f24:	481b      	ldr	r0, [pc, #108]	; (8007f94 <USBD_LL_Init+0xac>)
 8007f26:	f7f9 fae4 	bl	80014f2 <HAL_PCD_Init>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d001      	beq.n	8007f34 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8007f30:	f7f8 face 	bl	80004d0 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f3a:	2318      	movs	r3, #24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2100      	movs	r1, #0
 8007f40:	f7fa ff58 	bl	8002df4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f4a:	2358      	movs	r3, #88	; 0x58
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	2180      	movs	r1, #128	; 0x80
 8007f50:	f7fa ff50 	bl	8002df4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f5a:	23c0      	movs	r3, #192	; 0xc0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	2181      	movs	r1, #129	; 0x81
 8007f60:	f7fa ff48 	bl	8002df4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f6a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8007f6e:	2200      	movs	r2, #0
 8007f70:	2101      	movs	r1, #1
 8007f72:	f7fa ff3f 	bl	8002df4 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007f80:	2200      	movs	r2, #0
 8007f82:	2182      	movs	r1, #130	; 0x82
 8007f84:	f7fa ff36 	bl	8002df4 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8007f88:	2300      	movs	r3, #0
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3708      	adds	r7, #8
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000e94 	.word	0x20000e94
 8007f98:	40005c00 	.word	0x40005c00

08007f9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b084      	sub	sp, #16
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7f9 fba8 	bl	8001708 <HAL_PCD_Start>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f000 f94e 	bl	8008260 <USBD_Get_USB_Status>
 8007fc4:	4603      	mov	r3, r0
 8007fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fca:	4618      	mov	r0, r3
 8007fcc:	3710      	adds	r7, #16
 8007fce:	46bd      	mov	sp, r7
 8007fd0:	bd80      	pop	{r7, pc}

08007fd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007fd2:	b580      	push	{r7, lr}
 8007fd4:	b084      	sub	sp, #16
 8007fd6:	af00      	add	r7, sp, #0
 8007fd8:	6078      	str	r0, [r7, #4]
 8007fda:	4608      	mov	r0, r1
 8007fdc:	4611      	mov	r1, r2
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	70fb      	strb	r3, [r7, #3]
 8007fe4:	460b      	mov	r3, r1
 8007fe6:	70bb      	strb	r3, [r7, #2]
 8007fe8:	4613      	mov	r3, r2
 8007fea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fec:	2300      	movs	r3, #0
 8007fee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8007ffa:	78bb      	ldrb	r3, [r7, #2]
 8007ffc:	883a      	ldrh	r2, [r7, #0]
 8007ffe:	78f9      	ldrb	r1, [r7, #3]
 8008000:	f7f9 fd20 	bl	8001a44 <HAL_PCD_EP_Open>
 8008004:	4603      	mov	r3, r0
 8008006:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008008:	7bfb      	ldrb	r3, [r7, #15]
 800800a:	4618      	mov	r0, r3
 800800c:	f000 f928 	bl	8008260 <USBD_Get_USB_Status>
 8008010:	4603      	mov	r3, r0
 8008012:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008014:	7bbb      	ldrb	r3, [r7, #14]
}
 8008016:	4618      	mov	r0, r3
 8008018:	3710      	adds	r7, #16
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}

0800801e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800801e:	b580      	push	{r7, lr}
 8008020:	b084      	sub	sp, #16
 8008022:	af00      	add	r7, sp, #0
 8008024:	6078      	str	r0, [r7, #4]
 8008026:	460b      	mov	r3, r1
 8008028:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800802a:	2300      	movs	r3, #0
 800802c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008038:	78fa      	ldrb	r2, [r7, #3]
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f7f9 fd67 	bl	8001b10 <HAL_PCD_EP_Close>
 8008042:	4603      	mov	r3, r0
 8008044:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	4618      	mov	r0, r3
 800804a:	f000 f909 	bl	8008260 <USBD_Get_USB_Status>
 800804e:	4603      	mov	r3, r0
 8008050:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008052:	7bbb      	ldrb	r3, [r7, #14]
}
 8008054:	4618      	mov	r0, r3
 8008056:	3710      	adds	r7, #16
 8008058:	46bd      	mov	sp, r7
 800805a:	bd80      	pop	{r7, pc}

0800805c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	460b      	mov	r3, r1
 8008066:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008068:	2300      	movs	r3, #0
 800806a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800806c:	2300      	movs	r3, #0
 800806e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008076:	78fa      	ldrb	r2, [r7, #3]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7f9 fe27 	bl	8001cce <HAL_PCD_EP_SetStall>
 8008080:	4603      	mov	r3, r0
 8008082:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	4618      	mov	r0, r3
 8008088:	f000 f8ea 	bl	8008260 <USBD_Get_USB_Status>
 800808c:	4603      	mov	r3, r0
 800808e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008090:	7bbb      	ldrb	r3, [r7, #14]
}
 8008092:	4618      	mov	r0, r3
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80080a6:	2300      	movs	r3, #0
 80080a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080b4:	78fa      	ldrb	r2, [r7, #3]
 80080b6:	4611      	mov	r1, r2
 80080b8:	4618      	mov	r0, r3
 80080ba:	f7f9 fe68 	bl	8001d8e <HAL_PCD_EP_ClrStall>
 80080be:	4603      	mov	r3, r0
 80080c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80080c2:	7bfb      	ldrb	r3, [r7, #15]
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 f8cb 	bl	8008260 <USBD_Get_USB_Status>
 80080ca:	4603      	mov	r3, r0
 80080cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80080ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3710      	adds	r7, #16
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80080d8:	b480      	push	{r7}
 80080da:	b085      	sub	sp, #20
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
 80080e0:	460b      	mov	r3, r1
 80080e2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80080ea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80080ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	da0c      	bge.n	800810e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80080f4:	78fb      	ldrb	r3, [r7, #3]
 80080f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80080fa:	68f9      	ldr	r1, [r7, #12]
 80080fc:	1c5a      	adds	r2, r3, #1
 80080fe:	4613      	mov	r3, r2
 8008100:	009b      	lsls	r3, r3, #2
 8008102:	4413      	add	r3, r2
 8008104:	00db      	lsls	r3, r3, #3
 8008106:	440b      	add	r3, r1
 8008108:	3302      	adds	r3, #2
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	e00b      	b.n	8008126 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800810e:	78fb      	ldrb	r3, [r7, #3]
 8008110:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008114:	68f9      	ldr	r1, [r7, #12]
 8008116:	4613      	mov	r3, r2
 8008118:	009b      	lsls	r3, r3, #2
 800811a:	4413      	add	r3, r2
 800811c:	00db      	lsls	r3, r3, #3
 800811e:	440b      	add	r3, r1
 8008120:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008124:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	bc80      	pop	{r7}
 800812e:	4770      	bx	lr

08008130 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b084      	sub	sp, #16
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
 8008138:	460b      	mov	r3, r1
 800813a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800813c:	2300      	movs	r3, #0
 800813e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008140:	2300      	movs	r3, #0
 8008142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800814a:	78fa      	ldrb	r2, [r7, #3]
 800814c:	4611      	mov	r1, r2
 800814e:	4618      	mov	r0, r3
 8008150:	f7f9 fc53 	bl	80019fa <HAL_PCD_SetAddress>
 8008154:	4603      	mov	r3, r0
 8008156:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008158:	7bfb      	ldrb	r3, [r7, #15]
 800815a:	4618      	mov	r0, r3
 800815c:	f000 f880 	bl	8008260 <USBD_Get_USB_Status>
 8008160:	4603      	mov	r3, r0
 8008162:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008164:	7bbb      	ldrb	r3, [r7, #14]
}
 8008166:	4618      	mov	r0, r3
 8008168:	3710      	adds	r7, #16
 800816a:	46bd      	mov	sp, r7
 800816c:	bd80      	pop	{r7, pc}

0800816e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800816e:	b580      	push	{r7, lr}
 8008170:	b086      	sub	sp, #24
 8008172:	af00      	add	r7, sp, #0
 8008174:	60f8      	str	r0, [r7, #12]
 8008176:	607a      	str	r2, [r7, #4]
 8008178:	461a      	mov	r2, r3
 800817a:	460b      	mov	r3, r1
 800817c:	72fb      	strb	r3, [r7, #11]
 800817e:	4613      	mov	r3, r2
 8008180:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008182:	2300      	movs	r3, #0
 8008184:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008190:	893b      	ldrh	r3, [r7, #8]
 8008192:	7af9      	ldrb	r1, [r7, #11]
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	f7f9 fd57 	bl	8001c48 <HAL_PCD_EP_Transmit>
 800819a:	4603      	mov	r3, r0
 800819c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800819e:	7dfb      	ldrb	r3, [r7, #23]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f000 f85d 	bl	8008260 <USBD_Get_USB_Status>
 80081a6:	4603      	mov	r3, r0
 80081a8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081aa:	7dbb      	ldrb	r3, [r7, #22]
}
 80081ac:	4618      	mov	r0, r3
 80081ae:	3718      	adds	r7, #24
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b086      	sub	sp, #24
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	60f8      	str	r0, [r7, #12]
 80081bc:	607a      	str	r2, [r7, #4]
 80081be:	461a      	mov	r2, r3
 80081c0:	460b      	mov	r3, r1
 80081c2:	72fb      	strb	r3, [r7, #11]
 80081c4:	4613      	mov	r3, r2
 80081c6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081cc:	2300      	movs	r3, #0
 80081ce:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80081d6:	893b      	ldrh	r3, [r7, #8]
 80081d8:	7af9      	ldrb	r1, [r7, #11]
 80081da:	687a      	ldr	r2, [r7, #4]
 80081dc:	f7f9 fce0 	bl	8001ba0 <HAL_PCD_EP_Receive>
 80081e0:	4603      	mov	r3, r0
 80081e2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081e4:	7dfb      	ldrb	r3, [r7, #23]
 80081e6:	4618      	mov	r0, r3
 80081e8:	f000 f83a 	bl	8008260 <USBD_Get_USB_Status>
 80081ec:	4603      	mov	r3, r0
 80081ee:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80081f0:	7dbb      	ldrb	r3, [r7, #22]
}
 80081f2:	4618      	mov	r0, r3
 80081f4:	3718      	adds	r7, #24
 80081f6:	46bd      	mov	sp, r7
 80081f8:	bd80      	pop	{r7, pc}

080081fa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80081fa:	b580      	push	{r7, lr}
 80081fc:	b082      	sub	sp, #8
 80081fe:	af00      	add	r7, sp, #0
 8008200:	6078      	str	r0, [r7, #4]
 8008202:	460b      	mov	r3, r1
 8008204:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800820c:	78fa      	ldrb	r2, [r7, #3]
 800820e:	4611      	mov	r1, r2
 8008210:	4618      	mov	r0, r3
 8008212:	f7f9 fd02 	bl	8001c1a <HAL_PCD_EP_GetRxCount>
 8008216:	4603      	mov	r3, r0
}
 8008218:	4618      	mov	r0, r3
 800821a:	3708      	adds	r7, #8
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008228:	4b02      	ldr	r3, [pc, #8]	; (8008234 <USBD_static_malloc+0x14>)
}
 800822a:	4618      	mov	r0, r3
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	bc80      	pop	{r7}
 8008232:	4770      	bx	lr
 8008234:	20001180 	.word	0x20001180

08008238 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]

}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	bc80      	pop	{r7}
 8008248:	4770      	bx	lr

0800824a <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800824a:	b480      	push	{r7}
 800824c:	b083      	sub	sp, #12
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	460b      	mov	r3, r1
 8008254:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008256:	bf00      	nop
 8008258:	370c      	adds	r7, #12
 800825a:	46bd      	mov	sp, r7
 800825c:	bc80      	pop	{r7}
 800825e:	4770      	bx	lr

08008260 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	4603      	mov	r3, r0
 8008268:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800826a:	2300      	movs	r3, #0
 800826c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800826e:	79fb      	ldrb	r3, [r7, #7]
 8008270:	2b03      	cmp	r3, #3
 8008272:	d817      	bhi.n	80082a4 <USBD_Get_USB_Status+0x44>
 8008274:	a201      	add	r2, pc, #4	; (adr r2, 800827c <USBD_Get_USB_Status+0x1c>)
 8008276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800827a:	bf00      	nop
 800827c:	0800828d 	.word	0x0800828d
 8008280:	08008293 	.word	0x08008293
 8008284:	08008299 	.word	0x08008299
 8008288:	0800829f 	.word	0x0800829f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	73fb      	strb	r3, [r7, #15]
    break;
 8008290:	e00b      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008292:	2302      	movs	r3, #2
 8008294:	73fb      	strb	r3, [r7, #15]
    break;
 8008296:	e008      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008298:	2301      	movs	r3, #1
 800829a:	73fb      	strb	r3, [r7, #15]
    break;
 800829c:	e005      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800829e:	2302      	movs	r3, #2
 80082a0:	73fb      	strb	r3, [r7, #15]
    break;
 80082a2:	e002      	b.n	80082aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80082a4:	2302      	movs	r3, #2
 80082a6:	73fb      	strb	r3, [r7, #15]
    break;
 80082a8:	bf00      	nop
  }
  return usb_status;
 80082aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	bc80      	pop	{r7}
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop

080082b8 <__libc_init_array>:
 80082b8:	b570      	push	{r4, r5, r6, lr}
 80082ba:	2600      	movs	r6, #0
 80082bc:	4d0c      	ldr	r5, [pc, #48]	; (80082f0 <__libc_init_array+0x38>)
 80082be:	4c0d      	ldr	r4, [pc, #52]	; (80082f4 <__libc_init_array+0x3c>)
 80082c0:	1b64      	subs	r4, r4, r5
 80082c2:	10a4      	asrs	r4, r4, #2
 80082c4:	42a6      	cmp	r6, r4
 80082c6:	d109      	bne.n	80082dc <__libc_init_array+0x24>
 80082c8:	f000 f822 	bl	8008310 <_init>
 80082cc:	2600      	movs	r6, #0
 80082ce:	4d0a      	ldr	r5, [pc, #40]	; (80082f8 <__libc_init_array+0x40>)
 80082d0:	4c0a      	ldr	r4, [pc, #40]	; (80082fc <__libc_init_array+0x44>)
 80082d2:	1b64      	subs	r4, r4, r5
 80082d4:	10a4      	asrs	r4, r4, #2
 80082d6:	42a6      	cmp	r6, r4
 80082d8:	d105      	bne.n	80082e6 <__libc_init_array+0x2e>
 80082da:	bd70      	pop	{r4, r5, r6, pc}
 80082dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80082e0:	4798      	blx	r3
 80082e2:	3601      	adds	r6, #1
 80082e4:	e7ee      	b.n	80082c4 <__libc_init_array+0xc>
 80082e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ea:	4798      	blx	r3
 80082ec:	3601      	adds	r6, #1
 80082ee:	e7f2      	b.n	80082d6 <__libc_init_array+0x1e>
 80082f0:	08008390 	.word	0x08008390
 80082f4:	08008390 	.word	0x08008390
 80082f8:	08008390 	.word	0x08008390
 80082fc:	08008394 	.word	0x08008394

08008300 <memset>:
 8008300:	4603      	mov	r3, r0
 8008302:	4402      	add	r2, r0
 8008304:	4293      	cmp	r3, r2
 8008306:	d100      	bne.n	800830a <memset+0xa>
 8008308:	4770      	bx	lr
 800830a:	f803 1b01 	strb.w	r1, [r3], #1
 800830e:	e7f9      	b.n	8008304 <memset+0x4>

08008310 <_init>:
 8008310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008312:	bf00      	nop
 8008314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008316:	bc08      	pop	{r3}
 8008318:	469e      	mov	lr, r3
 800831a:	4770      	bx	lr

0800831c <_fini>:
 800831c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800831e:	bf00      	nop
 8008320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008322:	bc08      	pop	{r3}
 8008324:	469e      	mov	lr, r3
 8008326:	4770      	bx	lr
