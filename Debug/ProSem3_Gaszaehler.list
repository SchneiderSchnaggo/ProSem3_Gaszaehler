
ProSem3_Gaszaehler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000086c4  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080088a8  080088a8  000188a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008910  08008910  000201b0  2**0
                  CONTENTS
  4 .ARM          00000000  08008910  08008910  000201b0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008910  08008910  000201b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008910  08008910  00018910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008914  08008914  00018914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b0  20000000  08008918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  200001b0  08008ac8  000201b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200013dc  08008ac8  000213dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000105cd  00000000  00000000  000201d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038af  00000000  00000000  000307a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00034058  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b80  00000000  00000000  00034dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001db8a  00000000  00000000  00035950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013dfc  00000000  00000000  000534da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094be4  00000000  00000000  000672d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fbeba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003230  00000000  00000000  000fbf0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200001b0 	.word	0x200001b0
 8000200:	00000000 	.word	0x00000000
 8000204:	08008890 	.word	0x08008890

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200001b4 	.word	0x200001b4
 8000220:	08008890 	.word	0x08008890

08000224 <writeTicks>:

uint16_t counterH = 0;
uint16_t counterL = 0;
uint16_t data2BKP[2] = {0, 0};

extern void writeTicks(uint32_t counter, BKPReg startReg){
 8000224:	b580      	push	{r7, lr}
 8000226:	b082      	sub	sp, #8
 8000228:	af00      	add	r7, sp, #0
 800022a:	6078      	str	r0, [r7, #4]
 800022c:	460b      	mov	r3, r1
 800022e:	70fb      	strb	r3, [r7, #3]
	counterH = (counter>>16) & 0xFFFF;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	0c1b      	lsrs	r3, r3, #16
 8000234:	b29a      	uxth	r2, r3
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <writeTicks+0x40>)
 8000238:	801a      	strh	r2, [r3, #0]
	counterL = counter & 0xFFFF;
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	b29a      	uxth	r2, r3
 800023e:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <writeTicks+0x44>)
 8000240:	801a      	strh	r2, [r3, #0]
	data2BKP[0] = counterH;
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <writeTicks+0x40>)
 8000244:	881a      	ldrh	r2, [r3, #0]
 8000246:	4b09      	ldr	r3, [pc, #36]	; (800026c <writeTicks+0x48>)
 8000248:	801a      	strh	r2, [r3, #0]
	data2BKP[1] = counterL;
 800024a:	4b07      	ldr	r3, [pc, #28]	; (8000268 <writeTicks+0x44>)
 800024c:	881a      	ldrh	r2, [r3, #0]
 800024e:	4b07      	ldr	r3, [pc, #28]	; (800026c <writeTicks+0x48>)
 8000250:	805a      	strh	r2, [r3, #2]
	backupWriteArray(data2BKP, BKP1, sizeof(data2BKP)/sizeof(uint16_t));
 8000252:	2202      	movs	r2, #2
 8000254:	2104      	movs	r1, #4
 8000256:	4805      	ldr	r0, [pc, #20]	; (800026c <writeTicks+0x48>)
 8000258:	f000 fcee 	bl	8000c38 <backupWriteArray>
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	200001cc 	.word	0x200001cc
 8000268:	200001ce 	.word	0x200001ce
 800026c:	200001d0 	.word	0x200001d0

08000270 <getTicks>:

extern void getTicks(uint16_t* data, BKPReg startReg, uint8_t numOfBytes){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
 800027c:	4613      	mov	r3, r2
 800027e:	70bb      	strb	r3, [r7, #2]
	backupReadArray(data, startReg, numOfBytes);
 8000280:	78ba      	ldrb	r2, [r7, #2]
 8000282:	78fb      	ldrb	r3, [r7, #3]
 8000284:	4619      	mov	r1, r3
 8000286:	6878      	ldr	r0, [r7, #4]
 8000288:	f000 fd40 	bl	8000d0c <backupReadArray>
}
 800028c:	bf00      	nop
 800028e:	3708      	adds	r7, #8
 8000290:	46bd      	mov	sp, r7
 8000292:	bd80      	pop	{r7, pc}

08000294 <getNumOfTicks>:

extern uint32_t getNumOfTicks(BKPReg startReg){
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	4603      	mov	r3, r0
 800029c:	71fb      	strb	r3, [r7, #7]
	uint16_t buff[2] = {0, 0};
 800029e:	2300      	movs	r3, #0
 80002a0:	813b      	strh	r3, [r7, #8]
 80002a2:	2300      	movs	r3, #0
 80002a4:	817b      	strh	r3, [r7, #10]
	getTicks(buff, startReg, 2);
 80002a6:	79f9      	ldrb	r1, [r7, #7]
 80002a8:	f107 0308 	add.w	r3, r7, #8
 80002ac:	2202      	movs	r2, #2
 80002ae:	4618      	mov	r0, r3
 80002b0:	f7ff ffde 	bl	8000270 <getTicks>
	uint32_t retVal = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	60fb      	str	r3, [r7, #12]
	retVal = buff[0] << 16;
 80002b8:	893b      	ldrh	r3, [r7, #8]
 80002ba:	041b      	lsls	r3, r3, #16
 80002bc:	60fb      	str	r3, [r7, #12]
	retVal |= buff[1];
 80002be:	897b      	ldrh	r3, [r7, #10]
 80002c0:	461a      	mov	r2, r3
 80002c2:	68fb      	ldr	r3, [r7, #12]
 80002c4:	4313      	orrs	r3, r2
 80002c6:	60fb      	str	r3, [r7, #12]
	return retVal;
 80002c8:	68fb      	ldr	r3, [r7, #12]
}
 80002ca:	4618      	mov	r0, r3
 80002cc:	3710      	adds	r7, #16
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bd80      	pop	{r7, pc}
	...

080002d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	4603      	mov	r3, r0
 80002dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	db0b      	blt.n	80002fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002e6:	79fb      	ldrb	r3, [r7, #7]
 80002e8:	f003 021f 	and.w	r2, r3, #31
 80002ec:	4906      	ldr	r1, [pc, #24]	; (8000308 <__NVIC_EnableIRQ+0x34>)
 80002ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002f2:	095b      	lsrs	r3, r3, #5
 80002f4:	2001      	movs	r0, #1
 80002f6:	fa00 f202 	lsl.w	r2, r0, r2
 80002fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	bc80      	pop	{r7}
 8000306:	4770      	bx	lr
 8000308:	e000e100 	.word	0xe000e100

0800030c <initTimer>:
#include <shalf1.h>
#include <stdbool.h>

bool timFlag = false;

void initTimer(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000310:	b672      	cpsid	i
}
 8000312:	bf00      	nop
	__disable_irq();
	timerBusClkOn(TIM2);
 8000314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000318:	f000 ffa8 	bl	800126c <timerBusClkOn>
	timerSetPrescaler(TIM2, TIM_PSC);
 800031c:	f64b 3180 	movw	r1, #48000	; 0xbb80
 8000320:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000324:	f000 ffe4 	bl	80012f0 <timerSetPrescaler>
	timerEnableInterrupt(TIM2);
 8000328:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800032c:	f000 fffc 	bl	8001328 <timerEnableInterrupt>
	timerSetOnePulseMode(TIM2, ONE_PULSE_MODE_ON);
 8000330:	2101      	movs	r1, #1
 8000332:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000336:	f001 f806 	bl	8001346 <timerSetOnePulseMode>
	NVIC_EnableIRQ(TIM2_IRQn);
 800033a:	201c      	movs	r0, #28
 800033c:	f7ff ffca 	bl	80002d4 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000340:	b662      	cpsie	i
}
 8000342:	bf00      	nop
	__enable_irq();
}
 8000344:	bf00      	nop
 8000346:	bd80      	pop	{r7, pc}

08000348 <delay_ms>:

extern void delay_ms(uint16_t milliseconds){
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	80fb      	strh	r3, [r7, #6]
	timerSetAutoReloadValue(TIM2, milliseconds);
 8000352:	88fb      	ldrh	r3, [r7, #6]
 8000354:	4619      	mov	r1, r3
 8000356:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800035a:	f000 ffd7 	bl	800130c <timerSetAutoReloadValue>
	timerStart(TIM2);
 800035e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000362:	f001 f80b 	bl	800137c <timerStart>
	while(!timFlag){}
 8000366:	bf00      	nop
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <delay_ms+0x3c>)
 800036a:	781b      	ldrb	r3, [r3, #0]
 800036c:	f083 0301 	eor.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	2b00      	cmp	r3, #0
 8000374:	d1f8      	bne.n	8000368 <delay_ms+0x20>
	timFlag = false;
 8000376:	4b03      	ldr	r3, [pc, #12]	; (8000384 <delay_ms+0x3c>)
 8000378:	2200      	movs	r2, #0
 800037a:	701a      	strb	r2, [r3, #0]
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}
 8000384:	200001d4 	.word	0x200001d4

08000388 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
	timFlag = true;
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <TIM2_IRQHandler+0x1c>)
 800038e:	2201      	movs	r2, #1
 8000390:	701a      	strb	r2, [r3, #0]
	TIM2->SR = 0;
 8000392:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000396:	2200      	movs	r2, #0
 8000398:	611a      	str	r2, [r3, #16]
}
 800039a:	bf00      	nop
 800039c:	46bd      	mov	sp, r7
 800039e:	bc80      	pop	{r7}
 80003a0:	4770      	bx	lr
 80003a2:	bf00      	nop
 80003a4:	200001d4 	.word	0x200001d4

080003a8 <__NVIC_EnableIRQ>:
{
 80003a8:	b480      	push	{r7}
 80003aa:	b083      	sub	sp, #12
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	4603      	mov	r3, r0
 80003b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	db0b      	blt.n	80003d2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003ba:	79fb      	ldrb	r3, [r7, #7]
 80003bc:	f003 021f 	and.w	r2, r3, #31
 80003c0:	4906      	ldr	r1, [pc, #24]	; (80003dc <__NVIC_EnableIRQ+0x34>)
 80003c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003c6:	095b      	lsrs	r3, r3, #5
 80003c8:	2001      	movs	r0, #1
 80003ca:	fa00 f202 	lsl.w	r2, r0, r2
 80003ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80003d2:	bf00      	nop
 80003d4:	370c      	adds	r7, #12
 80003d6:	46bd      	mov	sp, r7
 80003d8:	bc80      	pop	{r7}
 80003da:	4770      	bx	lr
 80003dc:	e000e100 	.word	0xe000e100

080003e0 <initPins>:
 *      Author: lukas
 */
#include <gpio.h>
#include <shalf1.h>

void initPins(){
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	gpioInitPort(GPIOC);
 80003e4:	481e      	ldr	r0, [pc, #120]	; (8000460 <initPins+0x80>)
 80003e6:	f000 fdcb 	bl	8000f80 <gpioInitPort>
	gpioSetupPin(GPIOC, PIN4, OUT_2MHZ);
 80003ea:	2202      	movs	r2, #2
 80003ec:	2104      	movs	r1, #4
 80003ee:	481c      	ldr	r0, [pc, #112]	; (8000460 <initPins+0x80>)
 80003f0:	f000 fe12 	bl	8001018 <gpioSetupPin>
	gpioSetupMode(GPIOC, PIN4, GP_PP);
 80003f4:	2200      	movs	r2, #0
 80003f6:	2104      	movs	r1, #4
 80003f8:	4819      	ldr	r0, [pc, #100]	; (8000460 <initPins+0x80>)
 80003fa:	f000 fe72 	bl	80010e2 <gpioSetupMode>
	gpioSetupPin(GPIOC, PIN9, INPUT);
 80003fe:	2200      	movs	r2, #0
 8000400:	2109      	movs	r1, #9
 8000402:	4817      	ldr	r0, [pc, #92]	; (8000460 <initPins+0x80>)
 8000404:	f000 fe08 	bl	8001018 <gpioSetupPin>
	gpioSetupInput(GPIOC, PIN9, IN_PUPD);
 8000408:	2202      	movs	r2, #2
 800040a:	2109      	movs	r1, #9
 800040c:	4814      	ldr	r0, [pc, #80]	; (8000460 <initPins+0x80>)
 800040e:	f000 fe40 	bl	8001092 <gpioSetupInput>
	gpioSetPullupPulldown(GPIOC, PIN9, true);
 8000412:	2201      	movs	r2, #1
 8000414:	2109      	movs	r1, #9
 8000416:	4812      	ldr	r0, [pc, #72]	; (8000460 <initPins+0x80>)
 8000418:	f000 feb4 	bl	8001184 <gpioSetPullupPulldown>
	extiConfigureEXTI(PORT_C, PIN9);
 800041c:	2109      	movs	r1, #9
 800041e:	2002      	movs	r0, #2
 8000420:	f000 fcfa 	bl	8000e18 <extiConfigureEXTI>
	extiEnableIrq(EXTI_P9);
 8000424:	2009      	movs	r0, #9
 8000426:	f000 fd6d 	bl	8000f04 <extiEnableIrq>
	extiSetTriggerEdge(false, EXTI_P9);
 800042a:	2109      	movs	r1, #9
 800042c:	2000      	movs	r0, #0
 800042e:	f000 fd7f 	bl	8000f30 <extiSetTriggerEdge>
	NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000432:	2017      	movs	r0, #23
 8000434:	f7ff ffb8 	bl	80003a8 <__NVIC_EnableIRQ>
	gpioInitPort(GPIOB);
 8000438:	480a      	ldr	r0, [pc, #40]	; (8000464 <initPins+0x84>)
 800043a:	f000 fda1 	bl	8000f80 <gpioInitPort>
	gpioSetupPin(GPIOB, PIN12, OUT_2MHZ);
 800043e:	2202      	movs	r2, #2
 8000440:	210c      	movs	r1, #12
 8000442:	4808      	ldr	r0, [pc, #32]	; (8000464 <initPins+0x84>)
 8000444:	f000 fde8 	bl	8001018 <gpioSetupPin>
	gpioSetupMode(GPIOB, PIN12, GP_PP);
 8000448:	2200      	movs	r2, #0
 800044a:	210c      	movs	r1, #12
 800044c:	4805      	ldr	r0, [pc, #20]	; (8000464 <initPins+0x84>)
 800044e:	f000 fe48 	bl	80010e2 <gpioSetupMode>
	gpioResetPin(GPIOB, PIN12);
 8000452:	210c      	movs	r1, #12
 8000454:	4803      	ldr	r0, [pc, #12]	; (8000464 <initPins+0x84>)
 8000456:	f000 fe80 	bl	800115a <gpioResetPin>
}
 800045a:	bf00      	nop
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	40011000 	.word	0x40011000
 8000464:	40010c00 	.word	0x40010c00

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f001 f948 	bl	8001700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f807 	bl	8000482 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f862 	bl	800053c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000478:	f007 fd3c 	bl	8007ef4 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  start();
 800047c:	f000 faa4 	bl	80009c8 <start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000480:	e7fe      	b.n	8000480 <main+0x18>

08000482 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000482:	b580      	push	{r7, lr}
 8000484:	b096      	sub	sp, #88	; 0x58
 8000486:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800048c:	2228      	movs	r2, #40	; 0x28
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f008 f9f5 	bl	8008880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000496:	f107 031c 	add.w	r3, r7, #28
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
 800049e:	605a      	str	r2, [r3, #4]
 80004a0:	609a      	str	r2, [r3, #8]
 80004a2:	60da      	str	r2, [r3, #12]
 80004a4:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004a6:	1d3b      	adds	r3, r7, #4
 80004a8:	2200      	movs	r2, #0
 80004aa:	601a      	str	r2, [r3, #0]
 80004ac:	605a      	str	r2, [r3, #4]
 80004ae:	609a      	str	r2, [r3, #8]
 80004b0:	60da      	str	r2, [r3, #12]
 80004b2:	611a      	str	r2, [r3, #16]
 80004b4:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80004b6:	2301      	movs	r3, #1
 80004b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80004ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80004c0:	2300      	movs	r3, #0
 80004c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004c4:	2301      	movs	r3, #1
 80004c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80004c8:	2302      	movs	r3, #2
 80004ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80004cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80004d0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80004d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80004d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004dc:	4618      	mov	r0, r3
 80004de:	f002 ff2f 	bl	8003340 <HAL_RCC_OscConfig>
 80004e2:	4603      	mov	r3, r0
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d001      	beq.n	80004ec <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80004e8:	f000 f84a 	bl	8000580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ec:	230f      	movs	r3, #15
 80004ee:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004f0:	2302      	movs	r3, #2
 80004f2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f4:	2300      	movs	r3, #0
 80004f6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004fe:	2300      	movs	r3, #0
 8000500:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000502:	f107 031c 	add.w	r3, r7, #28
 8000506:	2101      	movs	r1, #1
 8000508:	4618      	mov	r0, r3
 800050a:	f003 f99b 	bl	8003844 <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000514:	f000 f834 	bl	8000580 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000518:	2310      	movs	r3, #16
 800051a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800051c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000520:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000522:	1d3b      	adds	r3, r7, #4
 8000524:	4618      	mov	r0, r3
 8000526:	f003 faf3 	bl	8003b10 <HAL_RCCEx_PeriphCLKConfig>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d001      	beq.n	8000534 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000530:	f000 f826 	bl	8000580 <Error_Handler>
  }
}
 8000534:	bf00      	nop
 8000536:	3758      	adds	r7, #88	; 0x58
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000542:	4b0e      	ldr	r3, [pc, #56]	; (800057c <MX_GPIO_Init+0x40>)
 8000544:	699b      	ldr	r3, [r3, #24]
 8000546:	4a0d      	ldr	r2, [pc, #52]	; (800057c <MX_GPIO_Init+0x40>)
 8000548:	f043 0320 	orr.w	r3, r3, #32
 800054c:	6193      	str	r3, [r2, #24]
 800054e:	4b0b      	ldr	r3, [pc, #44]	; (800057c <MX_GPIO_Init+0x40>)
 8000550:	699b      	ldr	r3, [r3, #24]
 8000552:	f003 0320 	and.w	r3, r3, #32
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800055a:	4b08      	ldr	r3, [pc, #32]	; (800057c <MX_GPIO_Init+0x40>)
 800055c:	699b      	ldr	r3, [r3, #24]
 800055e:	4a07      	ldr	r2, [pc, #28]	; (800057c <MX_GPIO_Init+0x40>)
 8000560:	f043 0304 	orr.w	r3, r3, #4
 8000564:	6193      	str	r3, [r2, #24]
 8000566:	4b05      	ldr	r3, [pc, #20]	; (800057c <MX_GPIO_Init+0x40>)
 8000568:	699b      	ldr	r3, [r3, #24]
 800056a:	f003 0304 	and.w	r3, r3, #4
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

}
 8000572:	bf00      	nop
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	bc80      	pop	{r7}
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000584:	b672      	cpsid	i
}
 8000586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000588:	e7fe      	b.n	8000588 <Error_Handler+0x8>
	...

0800058c <registerRead>:
static uint8_t slaveAdr = 0;
static uint8_t funcCode = 0;
static uint16_t regAdr = 0;
static uint16_t payload = 0;

extern uint16_t registerRead(uint8_t regAdr){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	if(regAdr < 2){
 8000596:	79fb      	ldrb	r3, [r7, #7]
 8000598:	2b01      	cmp	r3, #1
 800059a:	d804      	bhi.n	80005a6 <registerRead+0x1a>
		return registers[regAdr];
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <registerRead+0x28>)
 80005a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005a4:	e001      	b.n	80005aa <registerRead+0x1e>
	}
	else{
		return regOutOfBound;
 80005a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
	}
}
 80005aa:	4618      	mov	r0, r3
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr
 80005b4:	20000000 	.word	0x20000000

080005b8 <registerWrite>:

extern modbusErrCode registerWrite(uint8_t regAdr, uint16_t regData){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	460a      	mov	r2, r1
 80005c2:	71fb      	strb	r3, [r7, #7]
 80005c4:	4613      	mov	r3, r2
 80005c6:	80bb      	strh	r3, [r7, #4]
	if(regAdr < 2){
 80005c8:	79fb      	ldrb	r3, [r7, #7]
 80005ca:	2b01      	cmp	r3, #1
 80005cc:	d806      	bhi.n	80005dc <registerWrite+0x24>
			registers[regAdr] = regData;
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	4906      	ldr	r1, [pc, #24]	; (80005ec <registerWrite+0x34>)
 80005d2:	88ba      	ldrh	r2, [r7, #4]
 80005d4:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
			return modbusOK;
 80005d8:	2300      	movs	r3, #0
 80005da:	e001      	b.n	80005e0 <registerWrite+0x28>
	}
	else{
		return regOutOfBound;
 80005dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	}
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	370c      	adds	r7, #12
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bc80      	pop	{r7}
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000000 	.word	0x20000000

080005f0 <modbusCRC>:
extern modbusErrCode setSlaveAddress(uint8_t address){
	deviceAddress = address;
	return modbusOK;
}

extern uint16_t modbusCRC(uint8_t *data, uint8_t len){
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
 80005f8:	460b      	mov	r3, r1
 80005fa:	70fb      	strb	r3, [r7, #3]
	uint16_t crc = ~0x0000;
 80005fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000600:	81fb      	strh	r3, [r7, #14]
	uint8_t i;
	uint8_t b;
	for(i = 0; i < len; i++){
 8000602:	2300      	movs	r3, #0
 8000604:	737b      	strb	r3, [r7, #13]
 8000606:	e022      	b.n	800064e <modbusCRC+0x5e>
		crc ^= data[i];
 8000608:	7b7b      	ldrb	r3, [r7, #13]
 800060a:	687a      	ldr	r2, [r7, #4]
 800060c:	4413      	add	r3, r2
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	b29a      	uxth	r2, r3
 8000612:	89fb      	ldrh	r3, [r7, #14]
 8000614:	4053      	eors	r3, r2
 8000616:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 8000618:	2300      	movs	r3, #0
 800061a:	733b      	strb	r3, [r7, #12]
 800061c:	e011      	b.n	8000642 <modbusCRC+0x52>
			if((crc & 1) != 0){
 800061e:	89fb      	ldrh	r3, [r7, #14]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d006      	beq.n	8000636 <modbusCRC+0x46>
				crc = (crc>>1)^0xA001;
 8000628:	89fb      	ldrh	r3, [r7, #14]
 800062a:	085b      	lsrs	r3, r3, #1
 800062c:	b29a      	uxth	r2, r3
 800062e:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <modbusCRC+0x74>)
 8000630:	4053      	eors	r3, r2
 8000632:	81fb      	strh	r3, [r7, #14]
 8000634:	e002      	b.n	800063c <modbusCRC+0x4c>
			}
			else{
				crc >>= 1;
 8000636:	89fb      	ldrh	r3, [r7, #14]
 8000638:	085b      	lsrs	r3, r3, #1
 800063a:	81fb      	strh	r3, [r7, #14]
		for(b = 0; b < 8; b++){
 800063c:	7b3b      	ldrb	r3, [r7, #12]
 800063e:	3301      	adds	r3, #1
 8000640:	733b      	strb	r3, [r7, #12]
 8000642:	7b3b      	ldrb	r3, [r7, #12]
 8000644:	2b07      	cmp	r3, #7
 8000646:	d9ea      	bls.n	800061e <modbusCRC+0x2e>
	for(i = 0; i < len; i++){
 8000648:	7b7b      	ldrb	r3, [r7, #13]
 800064a:	3301      	adds	r3, #1
 800064c:	737b      	strb	r3, [r7, #13]
 800064e:	7b7a      	ldrb	r2, [r7, #13]
 8000650:	78fb      	ldrb	r3, [r7, #3]
 8000652:	429a      	cmp	r2, r3
 8000654:	d3d8      	bcc.n	8000608 <modbusCRC+0x18>
			}
		}
	}
	return crc;
 8000656:	89fb      	ldrh	r3, [r7, #14]
}
 8000658:	4618      	mov	r0, r3
 800065a:	3714      	adds	r7, #20
 800065c:	46bd      	mov	sp, r7
 800065e:	bc80      	pop	{r7}
 8000660:	4770      	bx	lr
 8000662:	bf00      	nop
 8000664:	ffffa001 	.word	0xffffa001

08000668 <modbusResponse>:

extern void modbusResponse(char *data, uint8_t len){
 8000668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800066c:	b08f      	sub	sp, #60	; 0x3c
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	460b      	mov	r3, r1
 8000674:	72fb      	strb	r3, [r7, #11]
	slaveAdr = 0;
 8000676:	4ba1      	ldr	r3, [pc, #644]	; (80008fc <modbusResponse+0x294>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	funcCode = 0;
 800067c:	4ba0      	ldr	r3, [pc, #640]	; (8000900 <modbusResponse+0x298>)
 800067e:	2200      	movs	r2, #0
 8000680:	701a      	strb	r2, [r3, #0]
	regAdr = 0;
 8000682:	4ba0      	ldr	r3, [pc, #640]	; (8000904 <modbusResponse+0x29c>)
 8000684:	2200      	movs	r2, #0
 8000686:	801a      	strh	r2, [r3, #0]
	payload = 0;
 8000688:	4b9f      	ldr	r3, [pc, #636]	; (8000908 <modbusResponse+0x2a0>)
 800068a:	2200      	movs	r2, #0
 800068c:	801a      	strh	r2, [r3, #0]
	memcpy(readData, data, 6);
 800068e:	4b9f      	ldr	r3, [pc, #636]	; (800090c <modbusResponse+0x2a4>)
 8000690:	68fa      	ldr	r2, [r7, #12]
 8000692:	6810      	ldr	r0, [r2, #0]
 8000694:	6018      	str	r0, [r3, #0]
 8000696:	8892      	ldrh	r2, [r2, #4]
 8000698:	809a      	strh	r2, [r3, #4]
	slaveAdr = readData[0]; //Bit shifting überprüfen! -> passt!
 800069a:	4b9c      	ldr	r3, [pc, #624]	; (800090c <modbusResponse+0x2a4>)
 800069c:	781a      	ldrb	r2, [r3, #0]
 800069e:	4b97      	ldr	r3, [pc, #604]	; (80008fc <modbusResponse+0x294>)
 80006a0:	701a      	strb	r2, [r3, #0]
	funcCode = readData[1];
 80006a2:	4b9a      	ldr	r3, [pc, #616]	; (800090c <modbusResponse+0x2a4>)
 80006a4:	785a      	ldrb	r2, [r3, #1]
 80006a6:	4b96      	ldr	r3, [pc, #600]	; (8000900 <modbusResponse+0x298>)
 80006a8:	701a      	strb	r2, [r3, #0]
	regAdr = readData[2] << 8;
 80006aa:	4b98      	ldr	r3, [pc, #608]	; (800090c <modbusResponse+0x2a4>)
 80006ac:	789b      	ldrb	r3, [r3, #2]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	021b      	lsls	r3, r3, #8
 80006b2:	b29a      	uxth	r2, r3
 80006b4:	4b93      	ldr	r3, [pc, #588]	; (8000904 <modbusResponse+0x29c>)
 80006b6:	801a      	strh	r2, [r3, #0]
	regAdr |= readData[3];
 80006b8:	4b94      	ldr	r3, [pc, #592]	; (800090c <modbusResponse+0x2a4>)
 80006ba:	78db      	ldrb	r3, [r3, #3]
 80006bc:	b29a      	uxth	r2, r3
 80006be:	4b91      	ldr	r3, [pc, #580]	; (8000904 <modbusResponse+0x29c>)
 80006c0:	881b      	ldrh	r3, [r3, #0]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b29a      	uxth	r2, r3
 80006c6:	4b8f      	ldr	r3, [pc, #572]	; (8000904 <modbusResponse+0x29c>)
 80006c8:	801a      	strh	r2, [r3, #0]
	payload = readData[4] << 8;
 80006ca:	4b90      	ldr	r3, [pc, #576]	; (800090c <modbusResponse+0x2a4>)
 80006cc:	791b      	ldrb	r3, [r3, #4]
 80006ce:	b29b      	uxth	r3, r3
 80006d0:	021b      	lsls	r3, r3, #8
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	4b8c      	ldr	r3, [pc, #560]	; (8000908 <modbusResponse+0x2a0>)
 80006d6:	801a      	strh	r2, [r3, #0]
	payload |= readData[5];
 80006d8:	4b8c      	ldr	r3, [pc, #560]	; (800090c <modbusResponse+0x2a4>)
 80006da:	795b      	ldrb	r3, [r3, #5]
 80006dc:	b29a      	uxth	r2, r3
 80006de:	4b8a      	ldr	r3, [pc, #552]	; (8000908 <modbusResponse+0x2a0>)
 80006e0:	881b      	ldrh	r3, [r3, #0]
 80006e2:	4313      	orrs	r3, r2
 80006e4:	b29a      	uxth	r2, r3
 80006e6:	4b88      	ldr	r3, [pc, #544]	; (8000908 <modbusResponse+0x2a0>)
 80006e8:	801a      	strh	r2, [r3, #0]
	if(slaveAdr != deviceAddress){
 80006ea:	4b84      	ldr	r3, [pc, #528]	; (80008fc <modbusResponse+0x294>)
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	4b88      	ldr	r3, [pc, #544]	; (8000910 <modbusResponse+0x2a8>)
 80006f0:	781b      	ldrb	r3, [r3, #0]
 80006f2:	429a      	cmp	r2, r3
 80006f4:	f040 815c 	bne.w	80009b0 <modbusResponse+0x348>
		return;
	}
	switch(funcCode){
 80006f8:	4b81      	ldr	r3, [pc, #516]	; (8000900 <modbusResponse+0x298>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b03      	cmp	r3, #3
 80006fe:	d003      	beq.n	8000708 <modbusResponse+0xa0>
 8000700:	2b06      	cmp	r3, #6
 8000702:	f000 80a5 	beq.w	8000850 <modbusResponse+0x1e8>
			USARTSendStringMB(USART1, response, responseLen+1);
		}
		break;
	default:

		break;
 8000706:	e158      	b.n	80009ba <modbusResponse+0x352>
		if((regAdr == 0x00) || (regAdr == 0x01)){
 8000708:	4b7e      	ldr	r3, [pc, #504]	; (8000904 <modbusResponse+0x29c>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d004      	beq.n	800071a <modbusResponse+0xb2>
 8000710:	4b7c      	ldr	r3, [pc, #496]	; (8000904 <modbusResponse+0x29c>)
 8000712:	881b      	ldrh	r3, [r3, #0]
 8000714:	2b01      	cmp	r3, #1
 8000716:	f040 814d 	bne.w	80009b4 <modbusResponse+0x34c>
 800071a:	466b      	mov	r3, sp
 800071c:	461c      	mov	r4, r3
			uint8_t responseLen = 2*payload+5;
 800071e:	4b7a      	ldr	r3, [pc, #488]	; (8000908 <modbusResponse+0x2a0>)
 8000720:	881b      	ldrh	r3, [r3, #0]
 8000722:	b2db      	uxtb	r3, r3
 8000724:	005b      	lsls	r3, r3, #1
 8000726:	b2db      	uxtb	r3, r3
 8000728:	3305      	adds	r3, #5
 800072a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			char response[responseLen];
 800072e:	f897 1023 	ldrb.w	r1, [r7, #35]	; 0x23
 8000732:	460b      	mov	r3, r1
 8000734:	3b01      	subs	r3, #1
 8000736:	61fb      	str	r3, [r7, #28]
 8000738:	b2cb      	uxtb	r3, r1
 800073a:	2200      	movs	r2, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	607a      	str	r2, [r7, #4]
 8000740:	f04f 0200 	mov.w	r2, #0
 8000744:	f04f 0300 	mov.w	r3, #0
 8000748:	e9d7 5600 	ldrd	r5, r6, [r7]
 800074c:	4630      	mov	r0, r6
 800074e:	00c3      	lsls	r3, r0, #3
 8000750:	4628      	mov	r0, r5
 8000752:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000756:	4628      	mov	r0, r5
 8000758:	00c2      	lsls	r2, r0, #3
 800075a:	b2cb      	uxtb	r3, r1
 800075c:	2200      	movs	r2, #0
 800075e:	469a      	mov	sl, r3
 8000760:	4693      	mov	fp, r2
 8000762:	f04f 0200 	mov.w	r2, #0
 8000766:	f04f 0300 	mov.w	r3, #0
 800076a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800076e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8000772:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8000776:	460b      	mov	r3, r1
 8000778:	3307      	adds	r3, #7
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	00db      	lsls	r3, r3, #3
 800077e:	ebad 0d03 	sub.w	sp, sp, r3
 8000782:	466b      	mov	r3, sp
 8000784:	3300      	adds	r3, #0
 8000786:	61bb      	str	r3, [r7, #24]
			response[0] = deviceAddress;
 8000788:	4b61      	ldr	r3, [pc, #388]	; (8000910 <modbusResponse+0x2a8>)
 800078a:	781a      	ldrb	r2, [r3, #0]
 800078c:	69bb      	ldr	r3, [r7, #24]
 800078e:	701a      	strb	r2, [r3, #0]
			response[1] = 0x03;
 8000790:	69bb      	ldr	r3, [r7, #24]
 8000792:	2203      	movs	r2, #3
 8000794:	705a      	strb	r2, [r3, #1]
			response[2] = 2*payload+5;
 8000796:	4b5c      	ldr	r3, [pc, #368]	; (8000908 <modbusResponse+0x2a0>)
 8000798:	881b      	ldrh	r3, [r3, #0]
 800079a:	b2db      	uxtb	r3, r3
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	3305      	adds	r3, #5
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	69bb      	ldr	r3, [r7, #24]
 80007a6:	709a      	strb	r2, [r3, #2]
			uint8_t idx = 3;
 80007a8:	2303      	movs	r3, #3
 80007aa:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			for(i=payload; i > 0; i--){
 80007ae:	4b56      	ldr	r3, [pc, #344]	; (8000908 <modbusResponse+0x2a0>)
 80007b0:	881b      	ldrh	r3, [r3, #0]
 80007b2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80007b6:	e023      	b.n	8000800 <modbusResponse+0x198>
				buff = registerRead(i-1);
 80007b8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007bc:	3b01      	subs	r3, #1
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	4618      	mov	r0, r3
 80007c2:	f7ff fee3 	bl	800058c <registerRead>
 80007c6:	4603      	mov	r3, r0
 80007c8:	82bb      	strh	r3, [r7, #20]
				response[idx++] = (buff >> 8) & 0xFF;
 80007ca:	8abb      	ldrh	r3, [r7, #20]
 80007cc:	0a1b      	lsrs	r3, r3, #8
 80007ce:	b299      	uxth	r1, r3
 80007d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007d4:	1c5a      	adds	r2, r3, #1
 80007d6:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 80007da:	461a      	mov	r2, r3
 80007dc:	b2c9      	uxtb	r1, r1
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	5499      	strb	r1, [r3, r2]
				response[idx++] = buff;
 80007e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80007e6:	1c5a      	adds	r2, r3, #1
 80007e8:	f887 2034 	strb.w	r2, [r7, #52]	; 0x34
 80007ec:	461a      	mov	r2, r3
 80007ee:	8abb      	ldrh	r3, [r7, #20]
 80007f0:	b2d9      	uxtb	r1, r3
 80007f2:	69bb      	ldr	r3, [r7, #24]
 80007f4:	5499      	strb	r1, [r3, r2]
			for(i=payload; i > 0; i--){
 80007f6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80007fa:	3b01      	subs	r3, #1
 80007fc:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8000800:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000804:	2b00      	cmp	r3, #0
 8000806:	d1d7      	bne.n	80007b8 <modbusResponse+0x150>
			uint16_t crc = modbusCRC(response, responseLen-2);
 8000808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800080c:	3b02      	subs	r3, #2
 800080e:	b2db      	uxtb	r3, r3
 8000810:	4619      	mov	r1, r3
 8000812:	69b8      	ldr	r0, [r7, #24]
 8000814:	f7ff feec 	bl	80005f0 <modbusCRC>
 8000818:	4603      	mov	r3, r0
 800081a:	82fb      	strh	r3, [r7, #22]
			response[responseLen-2] = crc;
 800081c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000820:	3b02      	subs	r3, #2
 8000822:	8afa      	ldrh	r2, [r7, #22]
 8000824:	b2d1      	uxtb	r1, r2
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	54d1      	strb	r1, [r2, r3]
			response[responseLen-1] = crc >> 8;
 800082a:	8afb      	ldrh	r3, [r7, #22]
 800082c:	0a1b      	lsrs	r3, r3, #8
 800082e:	b29a      	uxth	r2, r3
 8000830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000834:	3b01      	subs	r3, #1
 8000836:	b2d1      	uxtb	r1, r2
 8000838:	69ba      	ldr	r2, [r7, #24]
 800083a:	54d1      	strb	r1, [r2, r3]
			USARTSendStringMB(USART1, response, responseLen+1);
 800083c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000840:	3301      	adds	r3, #1
 8000842:	461a      	mov	r2, r3
 8000844:	69b9      	ldr	r1, [r7, #24]
 8000846:	4833      	ldr	r0, [pc, #204]	; (8000914 <modbusResponse+0x2ac>)
 8000848:	f000 f9ce 	bl	8000be8 <USARTSendStringMB>
 800084c:	46a5      	mov	sp, r4
		break;
 800084e:	e0b1      	b.n	80009b4 <modbusResponse+0x34c>
		if((regAdr == 0x00) || (regAdr == 0x01)){
 8000850:	4b2c      	ldr	r3, [pc, #176]	; (8000904 <modbusResponse+0x29c>)
 8000852:	881b      	ldrh	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d004      	beq.n	8000862 <modbusResponse+0x1fa>
 8000858:	4b2a      	ldr	r3, [pc, #168]	; (8000904 <modbusResponse+0x29c>)
 800085a:	881b      	ldrh	r3, [r3, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	f040 80ab 	bne.w	80009b8 <modbusResponse+0x350>
 8000862:	466b      	mov	r3, sp
 8000864:	461e      	mov	r6, r3
			registerWrite(regAdr, payload);
 8000866:	4b27      	ldr	r3, [pc, #156]	; (8000904 <modbusResponse+0x29c>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	4a26      	ldr	r2, [pc, #152]	; (8000908 <modbusResponse+0x2a0>)
 800086e:	8812      	ldrh	r2, [r2, #0]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fea0 	bl	80005b8 <registerWrite>
			uint8_t responseLen = 2*1+5;
 8000878:	2307      	movs	r3, #7
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			char response[responseLen];
 800087e:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8000882:	460b      	mov	r3, r1
 8000884:	3b01      	subs	r3, #1
 8000886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000888:	b2cb      	uxtb	r3, r1
 800088a:	2200      	movs	r2, #0
 800088c:	4698      	mov	r8, r3
 800088e:	4691      	mov	r9, r2
 8000890:	f04f 0200 	mov.w	r2, #0
 8000894:	f04f 0300 	mov.w	r3, #0
 8000898:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800089c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008a0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008a4:	b2cb      	uxtb	r3, r1
 80008a6:	2200      	movs	r2, #0
 80008a8:	461c      	mov	r4, r3
 80008aa:	4615      	mov	r5, r2
 80008ac:	f04f 0200 	mov.w	r2, #0
 80008b0:	f04f 0300 	mov.w	r3, #0
 80008b4:	00eb      	lsls	r3, r5, #3
 80008b6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80008ba:	00e2      	lsls	r2, r4, #3
 80008bc:	460b      	mov	r3, r1
 80008be:	3307      	adds	r3, #7
 80008c0:	08db      	lsrs	r3, r3, #3
 80008c2:	00db      	lsls	r3, r3, #3
 80008c4:	ebad 0d03 	sub.w	sp, sp, r3
 80008c8:	466b      	mov	r3, sp
 80008ca:	3300      	adds	r3, #0
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
			response[0] = deviceAddress;
 80008ce:	4b10      	ldr	r3, [pc, #64]	; (8000910 <modbusResponse+0x2a8>)
 80008d0:	781a      	ldrb	r2, [r3, #0]
 80008d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d4:	701a      	strb	r2, [r3, #0]
			response[1] = 0x06;
 80008d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008d8:	2206      	movs	r2, #6
 80008da:	705a      	strb	r2, [r3, #1]
			response[2] = 2*payload+5;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <modbusResponse+0x2a0>)
 80008de:	881b      	ldrh	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	005b      	lsls	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	3305      	adds	r3, #5
 80008e8:	b2da      	uxtb	r2, r3
 80008ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ec:	709a      	strb	r2, [r3, #2]
			uint8_t idx = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			for(i=1; i > 0; i--){
 80008f4:	2301      	movs	r3, #1
 80008f6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80008fa:	e031      	b.n	8000960 <modbusResponse+0x2f8>
 80008fc:	200001de 	.word	0x200001de
 8000900:	200001df 	.word	0x200001df
 8000904:	200001e0 	.word	0x200001e0
 8000908:	200001e2 	.word	0x200001e2
 800090c:	200001d8 	.word	0x200001d8
 8000910:	20000004 	.word	0x20000004
 8000914:	40013800 	.word	0x40013800
				buff = registerRead(i-1);
 8000918:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800091c:	3b01      	subs	r3, #1
 800091e:	b2db      	uxtb	r3, r3
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe33 	bl	800058c <registerRead>
 8000926:	4603      	mov	r3, r0
 8000928:	84bb      	strh	r3, [r7, #36]	; 0x24
				response[idx++] = (buff >> 8) & 0xFF;
 800092a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800092c:	0a1b      	lsrs	r3, r3, #8
 800092e:	b299      	uxth	r1, r3
 8000930:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000934:	1c5a      	adds	r2, r3, #1
 8000936:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800093a:	461a      	mov	r2, r3
 800093c:	b2c9      	uxtb	r1, r1
 800093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000940:	5499      	strb	r1, [r3, r2]
				response[idx++] = buff;
 8000942:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000946:	1c5a      	adds	r2, r3, #1
 8000948:	f887 2036 	strb.w	r2, [r7, #54]	; 0x36
 800094c:	461a      	mov	r2, r3
 800094e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000950:	b2d9      	uxtb	r1, r3
 8000952:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000954:	5499      	strb	r1, [r3, r2]
			for(i=1; i > 0; i--){
 8000956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800095a:	3b01      	subs	r3, #1
 800095c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8000960:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000964:	2b00      	cmp	r3, #0
 8000966:	d1d7      	bne.n	8000918 <modbusResponse+0x2b0>
			uint16_t crc = modbusCRC(response, responseLen-2);
 8000968:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800096c:	3b02      	subs	r3, #2
 800096e:	b2db      	uxtb	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000974:	f7ff fe3c 	bl	80005f0 <modbusCRC>
 8000978:	4603      	mov	r3, r0
 800097a:	84fb      	strh	r3, [r7, #38]	; 0x26
			response[responseLen-2] = crc;
 800097c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000980:	3b02      	subs	r3, #2
 8000982:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8000984:	b2d1      	uxtb	r1, r2
 8000986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000988:	54d1      	strb	r1, [r2, r3]
			response[responseLen-1] = crc >> 8;
 800098a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800098c:	0a1b      	lsrs	r3, r3, #8
 800098e:	b29a      	uxth	r2, r3
 8000990:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000994:	3b01      	subs	r3, #1
 8000996:	b2d1      	uxtb	r1, r2
 8000998:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800099a:	54d1      	strb	r1, [r2, r3]
			USARTSendStringMB(USART1, response, responseLen+1);
 800099c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009a0:	3301      	adds	r3, #1
 80009a2:	461a      	mov	r2, r3
 80009a4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80009a6:	4807      	ldr	r0, [pc, #28]	; (80009c4 <modbusResponse+0x35c>)
 80009a8:	f000 f91e 	bl	8000be8 <USARTSendStringMB>
 80009ac:	46b5      	mov	sp, r6
		break;
 80009ae:	e003      	b.n	80009b8 <modbusResponse+0x350>
		return;
 80009b0:	bf00      	nop
 80009b2:	e002      	b.n	80009ba <modbusResponse+0x352>
		break;
 80009b4:	bf00      	nop
 80009b6:	e000      	b.n	80009ba <modbusResponse+0x352>
		break;
 80009b8:	bf00      	nop
	}
}
 80009ba:	373c      	adds	r7, #60	; 0x3c
 80009bc:	46bd      	mov	sp, r7
 80009be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80009c2:	bf00      	nop
 80009c4:	40013800 	.word	0x40013800

080009c8 <start>:
char foo;
uint16_t tickBuff[] = {0, 0};

static uint32_t tickCNT = 0;

void start(void){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
	tickCNT = getNumOfTicks(BKP1);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff fc61 	bl	8000294 <getNumOfTicks>
 80009d2:	4603      	mov	r3, r0
 80009d4:	4a1d      	ldr	r2, [pc, #116]	; (8000a4c <start+0x84>)
 80009d6:	6013      	str	r3, [r2, #0]
	initRS485UART();
 80009d8:	f000 f8c8 	bl	8000b6c <initRS485UART>
	initTimer();
 80009dc:	f7ff fc96 	bl	800030c <initTimer>
	initPins();
 80009e0:	f7ff fcfe 	bl	80003e0 <initPins>
	while(1){
		if(usartRXFlag){
 80009e4:	4b1a      	ldr	r3, [pc, #104]	; (8000a50 <start+0x88>)
 80009e6:	781b      	ldrb	r3, [r3, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d0fb      	beq.n	80009e4 <start+0x1c>
			USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
 80009ec:	4b19      	ldr	r3, [pc, #100]	; (8000a54 <start+0x8c>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a18      	ldr	r2, [pc, #96]	; (8000a54 <start+0x8c>)
 80009f2:	f023 0320 	bic.w	r3, r3, #32
 80009f6:	60d3      	str	r3, [r2, #12]
			gpioSetPin(GPIOB, PIN12);
 80009f8:	210c      	movs	r1, #12
 80009fa:	4817      	ldr	r0, [pc, #92]	; (8000a58 <start+0x90>)
 80009fc:	f000 fb99 	bl	8001132 <gpioSetPin>
			getTicks(tickBuff, BKP1, sizeof(tickBuff)/sizeof(uint16_t));
 8000a00:	2202      	movs	r2, #2
 8000a02:	2104      	movs	r1, #4
 8000a04:	4815      	ldr	r0, [pc, #84]	; (8000a5c <start+0x94>)
 8000a06:	f7ff fc33 	bl	8000270 <getTicks>
			registerWrite(0, tickBuff[1]); //Puffer drehen
 8000a0a:	4b14      	ldr	r3, [pc, #80]	; (8000a5c <start+0x94>)
 8000a0c:	885b      	ldrh	r3, [r3, #2]
 8000a0e:	4619      	mov	r1, r3
 8000a10:	2000      	movs	r0, #0
 8000a12:	f7ff fdd1 	bl	80005b8 <registerWrite>
			registerWrite(1, tickBuff[0]);
 8000a16:	4b11      	ldr	r3, [pc, #68]	; (8000a5c <start+0x94>)
 8000a18:	881b      	ldrh	r3, [r3, #0]
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fdcb 	bl	80005b8 <registerWrite>
			modbusResponse(usartBuff, sizeof(usartBuff)-1);
 8000a22:	2108      	movs	r1, #8
 8000a24:	480e      	ldr	r0, [pc, #56]	; (8000a60 <start+0x98>)
 8000a26:	f7ff fe1f 	bl	8000668 <modbusResponse>
			USART1->CR1 |= USART_CR1_RXNEIE;
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <start+0x8c>)
 8000a2c:	68db      	ldr	r3, [r3, #12]
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <start+0x8c>)
 8000a30:	f043 0320 	orr.w	r3, r3, #32
 8000a34:	60d3      	str	r3, [r2, #12]
			gpioResetPin(GPIOB, PIN12);
 8000a36:	210c      	movs	r1, #12
 8000a38:	4807      	ldr	r0, [pc, #28]	; (8000a58 <start+0x90>)
 8000a3a:	f000 fb8e 	bl	800115a <gpioResetPin>
			delay_ms(100);
 8000a3e:	2064      	movs	r0, #100	; 0x64
 8000a40:	f7ff fc82 	bl	8000348 <delay_ms>
			usartRXFlag = false;
 8000a44:	4b02      	ldr	r3, [pc, #8]	; (8000a50 <start+0x88>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	701a      	strb	r2, [r3, #0]
		if(usartRXFlag){
 8000a4a:	e7cb      	b.n	80009e4 <start+0x1c>
 8000a4c:	200001fc 	.word	0x200001fc
 8000a50:	200001f4 	.word	0x200001f4
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40010c00 	.word	0x40010c00
 8000a5c:	200001f8 	.word	0x200001f8
 8000a60:	200001e4 	.word	0x200001e4

08000a64 <USART1_IRQHandler>:
}

/*-----------------------------------------------------------------------------
+++++++++++++++++++++++++++++++ISR+++++++++++++++++++++++++++++++++++++++++++++
-----------------------------------------------------------------------------*/
void USART1_IRQHandler(void){
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
	if(!usartRXFlag){
 8000a68:	4b1d      	ldr	r3, [pc, #116]	; (8000ae0 <USART1_IRQHandler+0x7c>)
 8000a6a:	781b      	ldrb	r3, [r3, #0]
 8000a6c:	f083 0301 	eor.w	r3, r3, #1
 8000a70:	b2db      	uxtb	r3, r3
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d020      	beq.n	8000ab8 <USART1_IRQHandler+0x54>
		while(!(USART1->SR & USART_SR_RXNE)){}
 8000a76:	bf00      	nop
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f003 0320 	and.w	r3, r3, #32
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d0f9      	beq.n	8000a78 <USART1_IRQHandler+0x14>
		usartBuff[cnt]= USART1->DR & 0x01FF;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000a86:	685a      	ldr	r2, [r3, #4]
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <USART1_IRQHandler+0x84>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b2d1      	uxtb	r1, r2
 8000a8e:	4a17      	ldr	r2, [pc, #92]	; (8000aec <USART1_IRQHandler+0x88>)
 8000a90:	54d1      	strb	r1, [r2, r3]
		cnt++;
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <USART1_IRQHandler+0x84>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3301      	adds	r3, #1
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <USART1_IRQHandler+0x84>)
 8000a9a:	6013      	str	r3, [r2, #0]
		if((cnt == USART_MSG_LEN-1)){
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <USART1_IRQHandler+0x84>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	2b08      	cmp	r3, #8
 8000aa2:	d118      	bne.n	8000ad6 <USART1_IRQHandler+0x72>
			//USART1->CR1 &= ~USART_CR1_RXNEIE_Msk;
			USART1->DR = 0;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	605a      	str	r2, [r3, #4]
			usartRXFlag = true;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <USART1_IRQHandler+0x7c>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
			cnt=0;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	; (8000ae8 <USART1_IRQHandler+0x84>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
	else{
		while(!(USART1->SR & USART_SR_RXNE)){}
		foo= USART1->DR & 0x01FF;
		USART1->DR = 0;
	}
}
 8000ab6:	e00e      	b.n	8000ad6 <USART1_IRQHandler+0x72>
		while(!(USART1->SR & USART_SR_RXNE)){}
 8000ab8:	bf00      	nop
 8000aba:	4b0a      	ldr	r3, [pc, #40]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f003 0320 	and.w	r3, r3, #32
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d0f9      	beq.n	8000aba <USART1_IRQHandler+0x56>
		foo= USART1->DR & 0x01FF;
 8000ac6:	4b07      	ldr	r3, [pc, #28]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000ac8:	685b      	ldr	r3, [r3, #4]
 8000aca:	b2da      	uxtb	r2, r3
 8000acc:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <USART1_IRQHandler+0x8c>)
 8000ace:	701a      	strb	r2, [r3, #0]
		USART1->DR = 0;
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <USART1_IRQHandler+0x80>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	605a      	str	r2, [r3, #4]
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	200001f4 	.word	0x200001f4
 8000ae4:	40013800 	.word	0x40013800
 8000ae8:	200001f0 	.word	0x200001f0
 8000aec:	200001e4 	.word	0x200001e4
 8000af0:	200001f5 	.word	0x200001f5

08000af4 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	tickCNT++;
 8000af8:	4b0b      	ldr	r3, [pc, #44]	; (8000b28 <EXTI9_5_IRQHandler+0x34>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	4a0a      	ldr	r2, [pc, #40]	; (8000b28 <EXTI9_5_IRQHandler+0x34>)
 8000b00:	6013      	str	r3, [r2, #0]
	writeTicks(tickCNT, BKP1);
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <EXTI9_5_IRQHandler+0x34>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	2104      	movs	r1, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fb8b 	bl	8000224 <writeTicks>
	gpioTogglePin(GPIOC, PIN4); //optional for debugging
 8000b0e:	2104      	movs	r1, #4
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <EXTI9_5_IRQHandler+0x38>)
 8000b12:	f000 fb72 	bl	80011fa <gpioTogglePin>
	EXTI->PR |= EXTI_PR_PR9;
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <EXTI9_5_IRQHandler+0x3c>)
 8000b18:	695b      	ldr	r3, [r3, #20]
 8000b1a:	4a05      	ldr	r2, [pc, #20]	; (8000b30 <EXTI9_5_IRQHandler+0x3c>)
 8000b1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b20:	6153      	str	r3, [r2, #20]
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200001fc 	.word	0x200001fc
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	40010400 	.word	0x40010400

08000b34 <__NVIC_EnableIRQ>:
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	db0b      	blt.n	8000b5e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b46:	79fb      	ldrb	r3, [r7, #7]
 8000b48:	f003 021f 	and.w	r2, r3, #31
 8000b4c:	4906      	ldr	r1, [pc, #24]	; (8000b68 <__NVIC_EnableIRQ+0x34>)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	095b      	lsrs	r3, r3, #5
 8000b54:	2001      	movs	r0, #1
 8000b56:	fa00 f202 	lsl.w	r2, r0, r2
 8000b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bc80      	pop	{r7}
 8000b66:	4770      	bx	lr
 8000b68:	e000e100 	.word	0xe000e100

08000b6c <initRS485UART>:

#define USART_TX_EMPTY(usart)  ((usart)->SR & USART_SR_TXE)
#define USART_WAIT_MB(usart)      do { while(!USART_TX_EMPTY(usart)); } while(0)

//USART in DMA Modus -> Modbus empfängt 5 Bytes
void initRS485UART(void){
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b70:	b672      	cpsid	i
}
 8000b72:	bf00      	nop
	__disable_irq();
	gpioInitPort(GPIOA);
 8000b74:	481a      	ldr	r0, [pc, #104]	; (8000be0 <initRS485UART+0x74>)
 8000b76:	f000 fa03 	bl	8000f80 <gpioInitPort>
	afioInit();
 8000b7a:	f000 fb5b 	bl	8001234 <afioInit>
	USARTEnable(USART1);
 8000b7e:	4819      	ldr	r0, [pc, #100]	; (8000be4 <initRS485UART+0x78>)
 8000b80:	f000 fc0c 	bl	800139c <USARTEnable>
	gpioSetupPin(GPIOA, PIN9, OUT_50MHZ);
 8000b84:	2203      	movs	r2, #3
 8000b86:	2109      	movs	r1, #9
 8000b88:	4815      	ldr	r0, [pc, #84]	; (8000be0 <initRS485UART+0x74>)
 8000b8a:	f000 fa45 	bl	8001018 <gpioSetupPin>
	gpioSetupMode(GPIOA, PIN9, AF_PP);
 8000b8e:	2202      	movs	r2, #2
 8000b90:	2109      	movs	r1, #9
 8000b92:	4813      	ldr	r0, [pc, #76]	; (8000be0 <initRS485UART+0x74>)
 8000b94:	f000 faa5 	bl	80010e2 <gpioSetupMode>
	gpioSetupPin(GPIOA, PIN10, INPUT);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	210a      	movs	r1, #10
 8000b9c:	4810      	ldr	r0, [pc, #64]	; (8000be0 <initRS485UART+0x74>)
 8000b9e:	f000 fa3b 	bl	8001018 <gpioSetupPin>
	gpioSetupInput(GPIOA, PIN10, FLOATING);
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	210a      	movs	r1, #10
 8000ba6:	480e      	ldr	r0, [pc, #56]	; (8000be0 <initRS485UART+0x74>)
 8000ba8:	f000 fa73 	bl	8001092 <gpioSetupInput>
	USARTIRQ(USART1, USART_IRQ_RXNEIE, true);
 8000bac:	2201      	movs	r2, #1
 8000bae:	2103      	movs	r1, #3
 8000bb0:	480c      	ldr	r0, [pc, #48]	; (8000be4 <initRS485UART+0x78>)
 8000bb2:	f000 fc8f 	bl	80014d4 <USARTIRQ>
	//usartSetDmaRxMode(USART1, DMA_RECEIVE_ON);
	//gpioSetupOutput(GPIOA, PIN3, AF_PP);
	USARTSetBaudrate(USART1, 9600);
 8000bb6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8000bba:	480a      	ldr	r0, [pc, #40]	; (8000be4 <initRS485UART+0x78>)
 8000bbc:	f000 fc32 	bl	8001424 <USARTSetBaudrate>
	USARTTXOn(USART1, TRANSMITTER_ON);
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4808      	ldr	r0, [pc, #32]	; (8000be4 <initRS485UART+0x78>)
 8000bc4:	f000 fc6b 	bl	800149e <USARTTXOn>
	USARTRXOn(USART1, RECEIVER_ON);
 8000bc8:	2101      	movs	r1, #1
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <initRS485UART+0x78>)
 8000bcc:	f000 fc4c 	bl	8001468 <USARTRXOn>
	NVIC_EnableIRQ(USART1_IRQn);
 8000bd0:	2025      	movs	r0, #37	; 0x25
 8000bd2:	f7ff ffaf 	bl	8000b34 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd6:	b662      	cpsie	i
}
 8000bd8:	bf00      	nop
	__enable_irq();
}
 8000bda:	bf00      	nop
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40013800 	.word	0x40013800

08000be8 <USARTSendStringMB>:
  * Desc.: send a String over the USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (char*) str: String to be sent
  * @return: none
  */
void USARTSendStringMB(USART_TypeDef* usart, char* str, int len){
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	60f8      	str	r0, [r7, #12]
 8000bf0:	60b9      	str	r1, [r7, #8]
 8000bf2:	607a      	str	r2, [r7, #4]
	while(len != 0){
 8000bf4:	e017      	b.n	8000c26 <USARTSendStringMB+0x3e>
		USART_WAIT_MB(usart);
 8000bf6:	bf00      	nop
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d0f9      	beq.n	8000bf8 <USARTSendStringMB+0x10>
		usart->DR = *str++ & 0x01FF;
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	1c5a      	adds	r2, r3, #1
 8000c08:	60ba      	str	r2, [r7, #8]
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	605a      	str	r2, [r3, #4]
		USART_WAIT_MB(usart);
 8000c12:	bf00      	nop
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d0f9      	beq.n	8000c14 <USARTSendStringMB+0x2c>
		len--;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	607b      	str	r3, [r7, #4]
	while(len != 0){
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1e4      	bne.n	8000bf6 <USARTSendStringMB+0xe>
	}
}
 8000c2c:	bf00      	nop
 8000c2e:	bf00      	nop
 8000c30:	3714      	adds	r7, #20
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <backupWriteArray>:
  * @param: (uint16_t*) data: bytes to be written
  * @param: (uint8_t) indexOfBKPStartRegister: index of the first register
  * @param: (uint8_t) numOfBytes: number of bytes / registers
  * @return: (BKP_ERR_CODE) error code
  */
extern BKP_ERR_CODE backupWriteArray(uint16_t* data, BKPReg BKPRegister, uint8_t numOfBytes){
 8000c38:	b590      	push	{r4, r7, lr}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
 8000c44:	4613      	mov	r3, r2
 8000c46:	70bb      	strb	r3, [r7, #2]
	if((getIDX(BKPRegister) >= 0) && (getIDX(BKPRegister) + numOfBytes <= 42)){
 8000c48:	78fb      	ldrb	r3, [r7, #3]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f000 f8c8 	bl	8000de0 <getIDX>
 8000c50:	78fb      	ldrb	r3, [r7, #3]
 8000c52:	4618      	mov	r0, r3
 8000c54:	f000 f8c4 	bl	8000de0 <getIDX>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	78bb      	ldrb	r3, [r7, #2]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2b2a      	cmp	r3, #42	; 0x2a
 8000c62:	dc46      	bgt.n	8000cf2 <backupWriteArray+0xba>
		ENABLE_BKP();
 8000c64:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <backupWriteArray+0xc8>)
 8000c66:	69db      	ldr	r3, [r3, #28]
 8000c68:	4a25      	ldr	r2, [pc, #148]	; (8000d00 <backupWriteArray+0xc8>)
 8000c6a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000c6e:	61d3      	str	r3, [r2, #28]
 8000c70:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <backupWriteArray+0xcc>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a23      	ldr	r2, [pc, #140]	; (8000d04 <backupWriteArray+0xcc>)
 8000c76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c7a:	6013      	str	r3, [r2, #0]
		uint8_t i;
		uint32_t *regAdr = 0;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
		for(i = getIDX(BKPRegister); i < getIDX(BKPRegister)+numOfBytes; i++){
 8000c80:	78fb      	ldrb	r3, [r7, #3]
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f8ac 	bl	8000de0 <getIDX>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	73fb      	strb	r3, [r7, #15]
 8000c8c:	e018      	b.n	8000cc0 <backupWriteArray+0x88>
			regAdr = (uint32_t*)((BKP_BASE_ADR) + (uint32_t)(BKPRegLookup[getIDX(BKPRegister)+i]));
 8000c8e:	78fb      	ldrb	r3, [r7, #3]
 8000c90:	4618      	mov	r0, r3
 8000c92:	f000 f8a5 	bl	8000de0 <getIDX>
 8000c96:	4603      	mov	r3, r0
 8000c98:	461a      	mov	r2, r3
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	4a1a      	ldr	r2, [pc, #104]	; (8000d08 <backupWriteArray+0xd0>)
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000ca6:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8000caa:	60bb      	str	r3, [r7, #8]
			*regAdr = *data++;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	1c9a      	adds	r2, r3, #2
 8000cb0:	607a      	str	r2, [r7, #4]
 8000cb2:	881b      	ldrh	r3, [r3, #0]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	68bb      	ldr	r3, [r7, #8]
 8000cb8:	601a      	str	r2, [r3, #0]
		for(i = getIDX(BKPRegister); i < getIDX(BKPRegister)+numOfBytes; i++){
 8000cba:	7bfb      	ldrb	r3, [r7, #15]
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	73fb      	strb	r3, [r7, #15]
 8000cc0:	7bfc      	ldrb	r4, [r7, #15]
 8000cc2:	78fb      	ldrb	r3, [r7, #3]
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f000 f88b 	bl	8000de0 <getIDX>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	461a      	mov	r2, r3
 8000cce:	78bb      	ldrb	r3, [r7, #2]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	429c      	cmp	r4, r3
 8000cd4:	dbdb      	blt.n	8000c8e <backupWriteArray+0x56>
		}
		DISABLE_BKP();
 8000cd6:	4b0a      	ldr	r3, [pc, #40]	; (8000d00 <backupWriteArray+0xc8>)
 8000cd8:	69db      	ldr	r3, [r3, #28]
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <backupWriteArray+0xc8>)
 8000cdc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000ce0:	61d3      	str	r3, [r2, #28]
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <backupWriteArray+0xcc>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <backupWriteArray+0xcc>)
 8000ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cec:	6013      	str	r3, [r2, #0]
		return BKP_OK;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	e001      	b.n	8000cf6 <backupWriteArray+0xbe>
	}
	else{
		return BKP_DATA_OUT_OF_BOUND;
 8000cf2:	f06f 0301 	mvn.w	r3, #1
	}
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3714      	adds	r7, #20
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd90      	pop	{r4, r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000
 8000d04:	40007000 	.word	0x40007000
 8000d08:	20000008 	.word	0x20000008

08000d0c <backupReadArray>:
  * @param: (uint16_t*) data: read buffer
  * @param: (uint8_t) indexOfBKPStartRegister: index of the first register
  * @param: (uint8_t) numOfBytes: number of bytes / registers
  * @return: (BKP_ERR_CODE) error code
  */
extern BKP_ERR_CODE backupReadArray(uint16_t* data, BKPReg BKPRegister, uint8_t numOfBytes){
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	70fb      	strb	r3, [r7, #3]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	70bb      	strb	r3, [r7, #2]
	if((getIDX(BKPRegister) >= 0) && (getIDX(BKPRegister) + numOfBytes <= 42)){
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f000 f85e 	bl	8000de0 <getIDX>
 8000d24:	78fb      	ldrb	r3, [r7, #3]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f000 f85a 	bl	8000de0 <getIDX>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	78bb      	ldrb	r3, [r7, #2]
 8000d32:	4413      	add	r3, r2
 8000d34:	2b2a      	cmp	r3, #42	; 0x2a
 8000d36:	dc46      	bgt.n	8000dc6 <backupReadArray+0xba>
		ENABLE_BKP();
 8000d38:	4b26      	ldr	r3, [pc, #152]	; (8000dd4 <backupReadArray+0xc8>)
 8000d3a:	69db      	ldr	r3, [r3, #28]
 8000d3c:	4a25      	ldr	r2, [pc, #148]	; (8000dd4 <backupReadArray+0xc8>)
 8000d3e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d42:	61d3      	str	r3, [r2, #28]
 8000d44:	4b24      	ldr	r3, [pc, #144]	; (8000dd8 <backupReadArray+0xcc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a23      	ldr	r2, [pc, #140]	; (8000dd8 <backupReadArray+0xcc>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]
		uint8_t i;
		uint32_t *regAdr = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	60bb      	str	r3, [r7, #8]
		for(i = getIDX(BKPRegister); i < getIDX(BKPRegister)+numOfBytes; i++){
 8000d54:	78fb      	ldrb	r3, [r7, #3]
 8000d56:	4618      	mov	r0, r3
 8000d58:	f000 f842 	bl	8000de0 <getIDX>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	73fb      	strb	r3, [r7, #15]
 8000d60:	e018      	b.n	8000d94 <backupReadArray+0x88>
			regAdr = (uint32_t*)((BKP_BASE_ADR) + (uint32_t)(BKPRegLookup[getIDX(BKPRegister)+i]));
 8000d62:	78fb      	ldrb	r3, [r7, #3]
 8000d64:	4618      	mov	r0, r3
 8000d66:	f000 f83b 	bl	8000de0 <getIDX>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	7bfb      	ldrb	r3, [r7, #15]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <backupReadArray+0xd0>)
 8000d74:	5cd3      	ldrb	r3, [r2, r3]
 8000d76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000d7a:	f503 43d8 	add.w	r3, r3, #27648	; 0x6c00
 8000d7e:	60bb      	str	r3, [r7, #8]
			*data++ = *regAdr;
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	6819      	ldr	r1, [r3, #0]
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	1c9a      	adds	r2, r3, #2
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	b28a      	uxth	r2, r1
 8000d8c:	801a      	strh	r2, [r3, #0]
		for(i = getIDX(BKPRegister); i < getIDX(BKPRegister)+numOfBytes; i++){
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	3301      	adds	r3, #1
 8000d92:	73fb      	strb	r3, [r7, #15]
 8000d94:	7bfc      	ldrb	r4, [r7, #15]
 8000d96:	78fb      	ldrb	r3, [r7, #3]
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f000 f821 	bl	8000de0 <getIDX>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	78bb      	ldrb	r3, [r7, #2]
 8000da4:	4413      	add	r3, r2
 8000da6:	429c      	cmp	r4, r3
 8000da8:	dbdb      	blt.n	8000d62 <backupReadArray+0x56>
		}
		DISABLE_BKP();
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <backupReadArray+0xc8>)
 8000dac:	69db      	ldr	r3, [r3, #28]
 8000dae:	4a09      	ldr	r2, [pc, #36]	; (8000dd4 <backupReadArray+0xc8>)
 8000db0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000db4:	61d3      	str	r3, [r2, #28]
 8000db6:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <backupReadArray+0xcc>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a07      	ldr	r2, [pc, #28]	; (8000dd8 <backupReadArray+0xcc>)
 8000dbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dc0:	6013      	str	r3, [r2, #0]
		return BKP_OK;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e001      	b.n	8000dca <backupReadArray+0xbe>
	}
	else{
		return BKP_DATA_OUT_OF_BOUND;
 8000dc6:	f06f 0301 	mvn.w	r3, #1
	}
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	3714      	adds	r7, #20
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd90      	pop	{r4, r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	40007000 	.word	0x40007000
 8000ddc:	20000008 	.word	0x20000008

08000de0 <getIDX>:

static uint8_t getIDX(BKPReg BKPRegister){
 8000de0:	b480      	push	{r7}
 8000de2:	b085      	sub	sp, #20
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	4603      	mov	r3, r0
 8000de8:	71fb      	strb	r3, [r7, #7]
	int i = 0;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60fb      	str	r3, [r7, #12]
	while((BKPRegister != BKPRegLookup[i])){
 8000dee:	e002      	b.n	8000df6 <getIDX+0x16>
		i++;
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	3301      	adds	r3, #1
 8000df4:	60fb      	str	r3, [r7, #12]
	while((BKPRegister != BKPRegLookup[i])){
 8000df6:	4a07      	ldr	r2, [pc, #28]	; (8000e14 <getIDX+0x34>)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	79fa      	ldrb	r2, [r7, #7]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	d1f5      	bne.n	8000df0 <getIDX+0x10>
	}
	return i;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	b2db      	uxtb	r3, r3
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	20000008 	.word	0x20000008

08000e18 <extiConfigureEXTI>:
  * Desc.: sets the Bits in AFIO EXTICR Register, to set the Interrupts as Sources. Ther are four EXTICR Registers (4 Pins per EXTICR)
  * @param: (PORT) port: Port
  * @param: (Pin) pin: Pin
  * @return: none
  */
extern void extiConfigureEXTI(PORT port, PIN_NUM pin){
 8000e18:	b480      	push	{r7}
 8000e1a:	b085      	sub	sp, #20
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	460a      	mov	r2, r1
 8000e22:	71fb      	strb	r3, [r7, #7]
 8000e24:	4613      	mov	r3, r2
 8000e26:	71bb      	strb	r3, [r7, #6]
	uint8_t mask = port;
 8000e28:	79fb      	ldrb	r3, [r7, #7]
 8000e2a:	737b      	strb	r3, [r7, #13]
	uint8_t shift = 0;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	73fb      	strb	r3, [r7, #15]
	uint8_t index = 0;
 8000e30:	2300      	movs	r3, #0
 8000e32:	73bb      	strb	r3, [r7, #14]
	switch(pin){
 8000e34:	79bb      	ldrb	r3, [r7, #6]
 8000e36:	2b0f      	cmp	r3, #15
 8000e38:	d840      	bhi.n	8000ebc <extiConfigureEXTI+0xa4>
 8000e3a:	a201      	add	r2, pc, #4	; (adr r2, 8000e40 <extiConfigureEXTI+0x28>)
 8000e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e40:	08000e81 	.word	0x08000e81
 8000e44:	08000e81 	.word	0x08000e81
 8000e48:	08000e81 	.word	0x08000e81
 8000e4c:	08000e81 	.word	0x08000e81
 8000e50:	08000e8d 	.word	0x08000e8d
 8000e54:	08000e8d 	.word	0x08000e8d
 8000e58:	08000e8d 	.word	0x08000e8d
 8000e5c:	08000e8d 	.word	0x08000e8d
 8000e60:	08000e9d 	.word	0x08000e9d
 8000e64:	08000e9d 	.word	0x08000e9d
 8000e68:	08000e9d 	.word	0x08000e9d
 8000e6c:	08000e9d 	.word	0x08000e9d
 8000e70:	08000ead 	.word	0x08000ead
 8000e74:	08000ead 	.word	0x08000ead
 8000e78:	08000ead 	.word	0x08000ead
 8000e7c:	08000ead 	.word	0x08000ead
	case 0:
	case 1:
	case 2:
	case 3:
		shift = pin * 4;
 8000e80:	79bb      	ldrb	r3, [r7, #6]
 8000e82:	009b      	lsls	r3, r3, #2
 8000e84:	73fb      	strb	r3, [r7, #15]
		index = 0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	73bb      	strb	r3, [r7, #14]
		break;
 8000e8a:	e017      	b.n	8000ebc <extiConfigureEXTI+0xa4>
	case 4:
	case 5:
	case 6:
	case 7:
		shift = (pin-4)*4;
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	3b04      	subs	r3, #4
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	73fb      	strb	r3, [r7, #15]
		index = 1;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73bb      	strb	r3, [r7, #14]
		break;
 8000e9a:	e00f      	b.n	8000ebc <extiConfigureEXTI+0xa4>
	case 8:
	case 9:
	case 10:
	case 11:
		shift = (pin-8)*4;
 8000e9c:	79bb      	ldrb	r3, [r7, #6]
 8000e9e:	3b08      	subs	r3, #8
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	73fb      	strb	r3, [r7, #15]
		index = 2;
 8000ea6:	2302      	movs	r3, #2
 8000ea8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eaa:	e007      	b.n	8000ebc <extiConfigureEXTI+0xa4>
	case 12:
	case 13:
	case 14:
	case 15:
		shift = (pin-12)*4;
 8000eac:	79bb      	ldrb	r3, [r7, #6]
 8000eae:	3b0c      	subs	r3, #12
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	73fb      	strb	r3, [r7, #15]
		index = 3;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	73bb      	strb	r3, [r7, #14]
		break;
 8000eba:	bf00      	nop
	}

	AFIO->EXTICR[index] &= ~0xFFFF;
 8000ebc:	4a10      	ldr	r2, [pc, #64]	; (8000f00 <extiConfigureEXTI+0xe8>)
 8000ebe:	7bbb      	ldrb	r3, [r7, #14]
 8000ec0:	3302      	adds	r3, #2
 8000ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ec6:	490e      	ldr	r1, [pc, #56]	; (8000f00 <extiConfigureEXTI+0xe8>)
 8000ec8:	7bba      	ldrb	r2, [r7, #14]
 8000eca:	0c1b      	lsrs	r3, r3, #16
 8000ecc:	041b      	lsls	r3, r3, #16
 8000ece:	3202      	adds	r2, #2
 8000ed0:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	AFIO->EXTICR[index] |= (mask << shift);
 8000ed4:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <extiConfigureEXTI+0xe8>)
 8000ed6:	7bbb      	ldrb	r3, [r7, #14]
 8000ed8:	3302      	adds	r3, #2
 8000eda:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ede:	7b79      	ldrb	r1, [r7, #13]
 8000ee0:	7bfb      	ldrb	r3, [r7, #15]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	4905      	ldr	r1, [pc, #20]	; (8000f00 <extiConfigureEXTI+0xe8>)
 8000eea:	7bbb      	ldrb	r3, [r7, #14]
 8000eec:	4302      	orrs	r2, r0
 8000eee:	3302      	adds	r3, #2
 8000ef0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40010000 	.word	0x40010000

08000f04 <extiEnableIrq>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiEnableIrq(irq_NUM irq){
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	71fb      	strb	r3, [r7, #7]
	EXTI->IMR |= 1 << irq; //schiebt das Bit an die korrespondierende Stelle des IMR
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <extiEnableIrq+0x28>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	79fa      	ldrb	r2, [r7, #7]
 8000f14:	2101      	movs	r1, #1
 8000f16:	fa01 f202 	lsl.w	r2, r1, r2
 8000f1a:	4611      	mov	r1, r2
 8000f1c:	4a03      	ldr	r2, [pc, #12]	; (8000f2c <extiEnableIrq+0x28>)
 8000f1e:	430b      	orrs	r3, r1
 8000f20:	6013      	str	r3, [r2, #0]
}
 8000f22:	bf00      	nop
 8000f24:	370c      	adds	r7, #12
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bc80      	pop	{r7}
 8000f2a:	4770      	bx	lr
 8000f2c:	40010400 	.word	0x40010400

08000f30 <extiSetTriggerEdge>:
							EXTI_RTCALARM,
							EXTI_USBWAKEUP,
							EXTI_ETHERNETWAKEUP,
 * @return: none
 */
extern void extiSetTriggerEdge(bool rising, irq_NUM irq){
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	460a      	mov	r2, r1
 8000f3a:	71fb      	strb	r3, [r7, #7]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	71bb      	strb	r3, [r7, #6]
	if(rising == true){
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d00a      	beq.n	8000f5c <extiSetTriggerEdge+0x2c>
		EXTI->RTSR |= 1 << irq;
 8000f46:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <extiSetTriggerEdge+0x4c>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	79ba      	ldrb	r2, [r7, #6]
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f202 	lsl.w	r2, r1, r2
 8000f52:	4611      	mov	r1, r2
 8000f54:	4a09      	ldr	r2, [pc, #36]	; (8000f7c <extiSetTriggerEdge+0x4c>)
 8000f56:	430b      	orrs	r3, r1
 8000f58:	6093      	str	r3, [r2, #8]
	}
	else{
		EXTI->FTSR |= 1 << irq;
	}
}
 8000f5a:	e009      	b.n	8000f70 <extiSetTriggerEdge+0x40>
		EXTI->FTSR |= 1 << irq;
 8000f5c:	4b07      	ldr	r3, [pc, #28]	; (8000f7c <extiSetTriggerEdge+0x4c>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	79ba      	ldrb	r2, [r7, #6]
 8000f62:	2101      	movs	r1, #1
 8000f64:	fa01 f202 	lsl.w	r2, r1, r2
 8000f68:	4611      	mov	r1, r2
 8000f6a:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <extiSetTriggerEdge+0x4c>)
 8000f6c:	430b      	orrs	r3, r1
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	370c      	adds	r7, #12
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bc80      	pop	{r7}
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	40010400 	.word	0x40010400

08000f80 <gpioInitPort>:
/*
  * Desc.: enables the Clock for the corresponding GPIO Port
  * @param: (GPIO_TypeDef*) port: Port which should be supplied with Clock
  * @return: none
  */
extern void gpioInitPort(GPIO_TypeDef *port){
 8000f80:	b480      	push	{r7}
 8000f82:	b083      	sub	sp, #12
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
		if (port == GPIOA){
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	4a1d      	ldr	r2, [pc, #116]	; (8001000 <gpioInitPort+0x80>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d106      	bne.n	8000f9e <gpioInitPort+0x1e>
			RCC->APB2ENR |= RCC_APB2ENR_IOPAEN;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <gpioInitPort+0x84>)
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	4a1b      	ldr	r2, [pc, #108]	; (8001004 <gpioInitPort+0x84>)
 8000f96:	f043 0304 	orr.w	r3, r3, #4
 8000f9a:	6193      	str	r3, [r2, #24]
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
		}
		else if(port == GPIOE){
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
		}
}
 8000f9c:	e02a      	b.n	8000ff4 <gpioInitPort+0x74>
		else if(port == GPIOB){
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a19      	ldr	r2, [pc, #100]	; (8001008 <gpioInitPort+0x88>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d106      	bne.n	8000fb4 <gpioInitPort+0x34>
			RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <gpioInitPort+0x84>)
 8000fa8:	699b      	ldr	r3, [r3, #24]
 8000faa:	4a16      	ldr	r2, [pc, #88]	; (8001004 <gpioInitPort+0x84>)
 8000fac:	f043 0308 	orr.w	r3, r3, #8
 8000fb0:	6193      	str	r3, [r2, #24]
}
 8000fb2:	e01f      	b.n	8000ff4 <gpioInitPort+0x74>
		else if(port == GPIOC){
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a15      	ldr	r2, [pc, #84]	; (800100c <gpioInitPort+0x8c>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d106      	bne.n	8000fca <gpioInitPort+0x4a>
			RCC->APB2ENR |= RCC_APB2ENR_IOPCEN;
 8000fbc:	4b11      	ldr	r3, [pc, #68]	; (8001004 <gpioInitPort+0x84>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <gpioInitPort+0x84>)
 8000fc2:	f043 0310 	orr.w	r3, r3, #16
 8000fc6:	6193      	str	r3, [r2, #24]
}
 8000fc8:	e014      	b.n	8000ff4 <gpioInitPort+0x74>
		else if(port == GPIOD){
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4a10      	ldr	r2, [pc, #64]	; (8001010 <gpioInitPort+0x90>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d106      	bne.n	8000fe0 <gpioInitPort+0x60>
			RCC->APB2ENR |= RCC_APB2ENR_IOPDEN;
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	; (8001004 <gpioInitPort+0x84>)
 8000fd4:	699b      	ldr	r3, [r3, #24]
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <gpioInitPort+0x84>)
 8000fd8:	f043 0320 	orr.w	r3, r3, #32
 8000fdc:	6193      	str	r3, [r2, #24]
}
 8000fde:	e009      	b.n	8000ff4 <gpioInitPort+0x74>
		else if(port == GPIOE){
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	4a0c      	ldr	r2, [pc, #48]	; (8001014 <gpioInitPort+0x94>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d105      	bne.n	8000ff4 <gpioInitPort+0x74>
			RCC->APB2ENR |= RCC_APB2ENR_IOPEEN;
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <gpioInitPort+0x84>)
 8000fea:	699b      	ldr	r3, [r3, #24]
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <gpioInitPort+0x84>)
 8000fee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ff2:	6193      	str	r3, [r2, #24]
}
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40010800 	.word	0x40010800
 8001004:	40021000 	.word	0x40021000
 8001008:	40010c00 	.word	0x40010c00
 800100c:	40011000 	.word	0x40011000
 8001010:	40011400 	.word	0x40011400
 8001014:	40011800 	.word	0x40011800

08001018 <gpioSetupPin>:
									OUT_10MHZ,
									OUT_2MHZ,
									OUT_50MHZ
  * @return: none
  */
extern void gpioSetupPin(GPIO_TypeDef *port, PIN_NUM pin, GPIO_MODE pinmode){
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	70fb      	strb	r3, [r7, #3]
 8001024:	4613      	mov	r3, r2
 8001026:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	2b07      	cmp	r3, #7
 800102c:	d815      	bhi.n	800105a <gpioSetupPin+0x42>
		port -> CRL &= ~(0b1111 << (pin*4));
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	78fa      	ldrb	r2, [r7, #3]
 8001034:	0092      	lsls	r2, r2, #2
 8001036:	210f      	movs	r1, #15
 8001038:	fa01 f202 	lsl.w	r2, r1, r2
 800103c:	43d2      	mvns	r2, r2
 800103e:	401a      	ands	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	601a      	str	r2, [r3, #0]
		port ->CRL |= (pinmode << (pin*4));
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	78b9      	ldrb	r1, [r7, #2]
 800104a:	78fa      	ldrb	r2, [r7, #3]
 800104c:	0092      	lsls	r2, r2, #2
 800104e:	fa01 f202 	lsl.w	r2, r1, r2
 8001052:	431a      	orrs	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	601a      	str	r2, [r3, #0]
	}
	else{
		port->CRH &= ~(0b1111 << ((pin-8)*4));
		port->CRH |= (pinmode << ((pin-8)*4));
	}
}
 8001058:	e016      	b.n	8001088 <gpioSetupPin+0x70>
		port->CRH &= ~(0b1111 << ((pin-8)*4));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	685b      	ldr	r3, [r3, #4]
 800105e:	78fa      	ldrb	r2, [r7, #3]
 8001060:	3a08      	subs	r2, #8
 8001062:	0092      	lsls	r2, r2, #2
 8001064:	210f      	movs	r1, #15
 8001066:	fa01 f202 	lsl.w	r2, r1, r2
 800106a:	43d2      	mvns	r2, r2
 800106c:	401a      	ands	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	605a      	str	r2, [r3, #4]
		port->CRH |= (pinmode << ((pin-8)*4));
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	78b9      	ldrb	r1, [r7, #2]
 8001078:	78fa      	ldrb	r2, [r7, #3]
 800107a:	3a08      	subs	r2, #8
 800107c:	0092      	lsls	r2, r2, #2
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	431a      	orrs	r2, r3
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	605a      	str	r2, [r3, #4]
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	bc80      	pop	{r7}
 8001090:	4770      	bx	lr

08001092 <gpioSetupInput>:
  * @param: (INPUT_MODE) mode: ANALOG = 0,
								FLOATING,
								IN_PUPD
  * @return: none
  */
extern void gpioSetupInput(GPIO_TypeDef *port, PIN_NUM pin, INPUT_MODE mode){
 8001092:	b480      	push	{r7}
 8001094:	b083      	sub	sp, #12
 8001096:	af00      	add	r7, sp, #0
 8001098:	6078      	str	r0, [r7, #4]
 800109a:	460b      	mov	r3, r1
 800109c:	70fb      	strb	r3, [r7, #3]
 800109e:	4613      	mov	r3, r2
 80010a0:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 80010a2:	78fb      	ldrb	r3, [r7, #3]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d80b      	bhi.n	80010c0 <gpioSetupInput+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	78b9      	ldrb	r1, [r7, #2]
 80010ae:	78fa      	ldrb	r2, [r7, #3]
 80010b0:	0092      	lsls	r2, r2, #2
 80010b2:	3202      	adds	r2, #2
 80010b4:	fa01 f202 	lsl.w	r2, r1, r2
 80010b8:	431a      	orrs	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 80010be:	e00b      	b.n	80010d8 <gpioSetupInput+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	78b9      	ldrb	r1, [r7, #2]
 80010c6:	78fa      	ldrb	r2, [r7, #3]
 80010c8:	3a08      	subs	r2, #8
 80010ca:	0092      	lsls	r2, r2, #2
 80010cc:	3202      	adds	r2, #2
 80010ce:	fa01 f202 	lsl.w	r2, r1, r2
 80010d2:	431a      	orrs	r2, r3
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	605a      	str	r2, [r3, #4]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <gpioSetupMode>:
								GP_OD, -> general purpose opendrain
								AF_PP, -> alternate function Push pull
								AF_OD  -> alternate function opendrain
  * @return: none
  */
extern void gpioSetupMode(GPIO_TypeDef *port, PIN_NUM pin, PIN_MODE mode){
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	460b      	mov	r3, r1
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	4613      	mov	r3, r2
 80010f0:	70bb      	strb	r3, [r7, #2]
	if(pin < 8){
 80010f2:	78fb      	ldrb	r3, [r7, #3]
 80010f4:	2b07      	cmp	r3, #7
 80010f6:	d80b      	bhi.n	8001110 <gpioSetupMode+0x2e>
			port ->CRL |= (mode << ((pin*4)+2));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	78b9      	ldrb	r1, [r7, #2]
 80010fe:	78fa      	ldrb	r2, [r7, #3]
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	3202      	adds	r2, #2
 8001104:	fa01 f202 	lsl.w	r2, r1, r2
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	601a      	str	r2, [r3, #0]
		}
		else{
			port->CRH |= (mode << (((pin-8)*4)+2));
		}
}
 800110e:	e00b      	b.n	8001128 <gpioSetupMode+0x46>
			port->CRH |= (mode << (((pin-8)*4)+2));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	78b9      	ldrb	r1, [r7, #2]
 8001116:	78fa      	ldrb	r2, [r7, #3]
 8001118:	3a08      	subs	r2, #8
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	3202      	adds	r2, #2
 800111e:	fa01 f202 	lsl.w	r2, r1, r2
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	605a      	str	r2, [r3, #4]
}
 8001128:	bf00      	nop
 800112a:	370c      	adds	r7, #12
 800112c:	46bd      	mov	sp, r7
 800112e:	bc80      	pop	{r7}
 8001130:	4770      	bx	lr

08001132 <gpioSetPin>:
  * Desc.: sets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioSetPin(GPIO_TypeDef *port, PIN_NUM pin){
 8001132:	b480      	push	{r7}
 8001134:	b083      	sub	sp, #12
 8001136:	af00      	add	r7, sp, #0
 8001138:	6078      	str	r0, [r7, #4]
 800113a:	460b      	mov	r3, r1
 800113c:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= 1 << pin;
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	691b      	ldr	r3, [r3, #16]
 8001142:	78fa      	ldrb	r2, [r7, #3]
 8001144:	2101      	movs	r1, #1
 8001146:	fa01 f202 	lsl.w	r2, r1, r2
 800114a:	431a      	orrs	r2, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	611a      	str	r2, [r3, #16]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	bc80      	pop	{r7}
 8001158:	4770      	bx	lr

0800115a <gpioResetPin>:
  * Desc.: resets the corresponding Bit in the ODR Register, via BSRR (atomic)
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioResetPin(GPIO_TypeDef *port, PIN_NUM pin){
 800115a:	b480      	push	{r7}
 800115c:	b083      	sub	sp, #12
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
 8001162:	460b      	mov	r3, r1
 8001164:	70fb      	strb	r3, [r7, #3]
	port->BSRR |= (1<<(pin+16));
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	691b      	ldr	r3, [r3, #16]
 800116a:	78fa      	ldrb	r2, [r7, #3]
 800116c:	3210      	adds	r2, #16
 800116e:	2101      	movs	r1, #1
 8001170:	fa01 f202 	lsl.w	r2, r1, r2
 8001174:	431a      	orrs	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	611a      	str	r2, [r3, #16]
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr

08001184 <gpioSetPullupPulldown>:
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @param: (bool)pullup: true -> activate Pullup; false -> activate Pulldown
  * @return: none
  */
extern void gpioSetPullupPulldown(GPIO_TypeDef *port, PIN_NUM pin, bool pullup){
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	460b      	mov	r3, r1
 800118e:	70fb      	strb	r3, [r7, #3]
 8001190:	4613      	mov	r3, r2
 8001192:	70bb      	strb	r3, [r7, #2]
	if((pullup == true)){
 8001194:	78bb      	ldrb	r3, [r7, #2]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d009      	beq.n	80011ae <gpioSetPullupPulldown+0x2a>
		port -> ODR |=  (1<< pin);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	68db      	ldr	r3, [r3, #12]
 800119e:	78fa      	ldrb	r2, [r7, #3]
 80011a0:	2101      	movs	r1, #1
 80011a2:	fa01 f202 	lsl.w	r2, r1, r2
 80011a6:	431a      	orrs	r2, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	60da      	str	r2, [r3, #12]
	}
	else{
		port->ODR &= ~(1<<pin);
	}
}
 80011ac:	e009      	b.n	80011c2 <gpioSetPullupPulldown+0x3e>
		port->ODR &= ~(1<<pin);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	68db      	ldr	r3, [r3, #12]
 80011b2:	78fa      	ldrb	r2, [r7, #3]
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	43d2      	mvns	r2, r2
 80011bc:	401a      	ands	r2, r3
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60da      	str	r2, [r3, #12]
}
 80011c2:	bf00      	nop
 80011c4:	370c      	adds	r7, #12
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <gpioGetPinVal>:
  * Desc.: returns the current value of a Pin stored in the IDR Register
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: (bool) state of Pin
  */
extern bool gpioGetPinVal(GPIO_TypeDef *port, PIN_NUM pin){
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
 80011d4:	460b      	mov	r3, r1
 80011d6:	70fb      	strb	r3, [r7, #3]
	return (port->IDR & (1<<pin));
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	78fa      	ldrb	r2, [r7, #3]
 80011de:	2101      	movs	r1, #1
 80011e0:	fa01 f202 	lsl.w	r2, r1, r2
 80011e4:	4013      	ands	r3, r2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	bf14      	ite	ne
 80011ea:	2301      	movne	r3, #1
 80011ec:	2300      	moveq	r3, #0
 80011ee:	b2db      	uxtb	r3, r3
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bc80      	pop	{r7}
 80011f8:	4770      	bx	lr

080011fa <gpioTogglePin>:
  * Desc.: Toogles Pin
  * @param: (GPIO_TypeDef*) port: Port
  * @param: (PIN_NUM) pin: Pin
  * @return: none
  */
extern void gpioTogglePin(GPIO_TypeDef *port, PIN_NUM pin){
 80011fa:	b580      	push	{r7, lr}
 80011fc:	b082      	sub	sp, #8
 80011fe:	af00      	add	r7, sp, #0
 8001200:	6078      	str	r0, [r7, #4]
 8001202:	460b      	mov	r3, r1
 8001204:	70fb      	strb	r3, [r7, #3]
	if (gpioGetPinVal(port, pin))
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	4619      	mov	r1, r3
 800120a:	6878      	ldr	r0, [r7, #4]
 800120c:	f7ff ffde 	bl	80011cc <gpioGetPinVal>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d005      	beq.n	8001222 <gpioTogglePin+0x28>
		{
			gpioResetPin(port, pin);
 8001216:	78fb      	ldrb	r3, [r7, #3]
 8001218:	4619      	mov	r1, r3
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f7ff ff9d 	bl	800115a <gpioResetPin>
		}
		else
		{
			gpioSetPin(port, pin);
		}
}
 8001220:	e004      	b.n	800122c <gpioTogglePin+0x32>
			gpioSetPin(port, pin);
 8001222:	78fb      	ldrb	r3, [r7, #3]
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f7ff ff83 	bl	8001132 <gpioSetPin>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <afioInit>:
/*
  * Desc.: enables the Clock for alternative functions, this Clock must be activated in Order to use alternative pinfunctions!
  * @param: none
  * @return: none
  */
extern void afioInit(){
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= RCC_APB2ENR_AFIOEN;
 8001238:	4b04      	ldr	r3, [pc, #16]	; (800124c <afioInit+0x18>)
 800123a:	699b      	ldr	r3, [r3, #24]
 800123c:	4a03      	ldr	r2, [pc, #12]	; (800124c <afioInit+0x18>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6193      	str	r3, [r2, #24]
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000

08001250 <SysTick_Handler>:
/*
 * Desc.: SysTick ISR Handler
 * @param: none
 * @return: none
 */
extern void SysTick_Handler(void){
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
	--tick;
 8001254:	4b04      	ldr	r3, [pc, #16]	; (8001268 <SysTick_Handler+0x18>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	3b01      	subs	r3, #1
 800125a:	4a03      	ldr	r2, [pc, #12]	; (8001268 <SysTick_Handler+0x18>)
 800125c:	6013      	str	r3, [r2, #0]
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr
 8001266:	bf00      	nop
 8001268:	20000200 	.word	0x20000200

0800126c <timerBusClkOn>:
 /*
  * Desc.: activates Clock for Timer
  * @param: (TIM_TypeDef*)timer: Timer which should be activated
  * @return: none
  */
extern void timerBusClkOn(TIM_TypeDef* timer){
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
	 if (TIM1 == timer)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	4a1a      	ldr	r2, [pc, #104]	; (80012e0 <timerBusClkOn+0x74>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d106      	bne.n	800128a <timerBusClkOn+0x1e>
	    {
	        RCC->APB2ENR |= RCC_APB2ENR_TIM1EN;
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <timerBusClkOn+0x78>)
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <timerBusClkOn+0x78>)
 8001282:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001286:	6193      	str	r3, [r2, #24]
 8001288:	e021      	b.n	80012ce <timerBusClkOn+0x62>
	    }
	    else if (TIM2 == timer)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001290:	d106      	bne.n	80012a0 <timerBusClkOn+0x34>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <timerBusClkOn+0x78>)
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	4a13      	ldr	r2, [pc, #76]	; (80012e4 <timerBusClkOn+0x78>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	61d3      	str	r3, [r2, #28]
 800129e:	e016      	b.n	80012ce <timerBusClkOn+0x62>
	    }
	    else if (TIM3 == timer)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a11      	ldr	r2, [pc, #68]	; (80012e8 <timerBusClkOn+0x7c>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d106      	bne.n	80012b6 <timerBusClkOn+0x4a>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 80012a8:	4b0e      	ldr	r3, [pc, #56]	; (80012e4 <timerBusClkOn+0x78>)
 80012aa:	69db      	ldr	r3, [r3, #28]
 80012ac:	4a0d      	ldr	r2, [pc, #52]	; (80012e4 <timerBusClkOn+0x78>)
 80012ae:	f043 0302 	orr.w	r3, r3, #2
 80012b2:	61d3      	str	r3, [r2, #28]
 80012b4:	e00b      	b.n	80012ce <timerBusClkOn+0x62>
	    }
	    else if (TIM4 == timer)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a0c      	ldr	r2, [pc, #48]	; (80012ec <timerBusClkOn+0x80>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d106      	bne.n	80012cc <timerBusClkOn+0x60>
	    {
	        RCC->APB1ENR |= RCC_APB1ENR_TIM4EN;
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <timerBusClkOn+0x78>)
 80012c0:	69db      	ldr	r3, [r3, #28]
 80012c2:	4a08      	ldr	r2, [pc, #32]	; (80012e4 <timerBusClkOn+0x78>)
 80012c4:	f043 0304 	orr.w	r3, r3, #4
 80012c8:	61d3      	str	r3, [r2, #28]
 80012ca:	e000      	b.n	80012ce <timerBusClkOn+0x62>
	    }
	    else
	    {
	        while(1)
 80012cc:	e7fe      	b.n	80012cc <timerBusClkOn+0x60>
	        {
	            // Timer not supported
	        }
	    }

	    timer->CR1 = 0;  // Reset all bits of TIMx_CR1 to 0
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
}
 80012d4:	bf00      	nop
 80012d6:	370c      	adds	r7, #12
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40012c00 	.word	0x40012c00
 80012e4:	40021000 	.word	0x40021000
 80012e8:	40000400 	.word	0x40000400
 80012ec:	40000800 	.word	0x40000800

080012f0 <timerSetPrescaler>:
  * Desc.: sets Prescaler for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) presc: Prescaler Value
  * @return: none
  */
extern void timerSetPrescaler(TIM_TypeDef* timer, uint16_t presc){
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]
	timer->PSC = presc;
 80012fc:	887a      	ldrh	r2, [r7, #2]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <timerSetAutoReloadValue>:
  * Desc.: sets AutoreloadValue for Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (uint16_t) arrv: Autoreloadvalue
  * @return: none
  */
extern void timerSetAutoReloadValue(TIM_TypeDef* timer, uint16_t arrv){
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	460b      	mov	r3, r1
 8001316:	807b      	strh	r3, [r7, #2]
	timer->ARR = arrv;
 8001318:	887a      	ldrh	r2, [r7, #2]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800131e:	bf00      	nop
 8001320:	370c      	adds	r7, #12
 8001322:	46bd      	mov	sp, r7
 8001324:	bc80      	pop	{r7}
 8001326:	4770      	bx	lr

08001328 <timerEnableInterrupt>:
/*
  * Desc.: enables Interrupt
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerEnableInterrupt(TIM_TypeDef* timer){
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	timer->DIER |= TIM_DIER_UIE;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	f043 0201 	orr.w	r2, r3, #1
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	60da      	str	r2, [r3, #12]
}
 800133c:	bf00      	nop
 800133e:	370c      	adds	r7, #12
 8001340:	46bd      	mov	sp, r7
 8001342:	bc80      	pop	{r7}
 8001344:	4770      	bx	lr

08001346 <timerSetOnePulseMode>:
  * @param: (TIM_TypeDef*)timer: Timer
  * @param: (OPM_MODE) opmmode: ONE_PULSE_MODE_OFF
								ONE_PULSE_MODE_ON
  * @return: none
  */
extern void timerSetOnePulseMode(TIM_TypeDef* timer, OPM_MODE opmmode){
 8001346:	b480      	push	{r7}
 8001348:	b083      	sub	sp, #12
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
 800134e:	460b      	mov	r3, r1
 8001350:	70fb      	strb	r3, [r7, #3]
	if(opmmode == 1){
 8001352:	78fb      	ldrb	r3, [r7, #3]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d106      	bne.n	8001366 <timerSetOnePulseMode+0x20>
		timer->CR1 |= TIM_CR1_OPM ;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f043 0208 	orr.w	r2, r3, #8
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	601a      	str	r2, [r3, #0]
	}
	else{
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
	}
}
 8001364:	e005      	b.n	8001372 <timerSetOnePulseMode+0x2c>
		timer->CR1 &= ~ TIM_CR1_OPM_Msk;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 0208 	bic.w	r2, r3, #8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	601a      	str	r2, [r3, #0]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <timerStart>:
/*
  * Desc.: starts Timer
  * @param: (TIM_TypeDef*)timer: Timer
  * @return: none
  */
extern void timerStart(TIM_TypeDef* timer){
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	timer->CR1 |= TIM_CR1_CEN;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f043 0201 	orr.w	r2, r3, #1
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
	...

0800139c <USARTEnable>:
/*
  * Desc.: enables Clock for the corresponding USART and activates the USART in it's Control Register
  * @param: (USART_TypeDef*)usart: USART
  * @return: none
  */
void USARTEnable(USART_TypeDef* usart){
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	if(usart == USART1){
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <USARTEnable+0x78>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d10c      	bne.n	80013c6 <USARTEnable+0x2a>
		RCC->APB2ENR |= RCC_APB2ENR_USART1EN;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <USARTEnable+0x7c>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a19      	ldr	r2, [pc, #100]	; (8001418 <USARTEnable+0x7c>)
 80013b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013b6:	6193      	str	r3, [r2, #24]
		USART1->CR1 |= USART_CR1_UE;
 80013b8:	4b16      	ldr	r3, [pc, #88]	; (8001414 <USARTEnable+0x78>)
 80013ba:	68db      	ldr	r3, [r3, #12]
 80013bc:	4a15      	ldr	r2, [pc, #84]	; (8001414 <USARTEnable+0x78>)
 80013be:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013c2:	60d3      	str	r3, [r2, #12]
 80013c4:	e022      	b.n	800140c <USARTEnable+0x70>
	}
	else if(usart == USART2){
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a14      	ldr	r2, [pc, #80]	; (800141c <USARTEnable+0x80>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d10c      	bne.n	80013e8 <USARTEnable+0x4c>
		RCC->APB1ENR |= RCC_APB1ENR_USART2EN;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <USARTEnable+0x7c>)
 80013d0:	69db      	ldr	r3, [r3, #28]
 80013d2:	4a11      	ldr	r2, [pc, #68]	; (8001418 <USARTEnable+0x7c>)
 80013d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013d8:	61d3      	str	r3, [r2, #28]
		USART2->CR1 |= USART_CR1_UE;
 80013da:	4b10      	ldr	r3, [pc, #64]	; (800141c <USARTEnable+0x80>)
 80013dc:	68db      	ldr	r3, [r3, #12]
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <USARTEnable+0x80>)
 80013e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80013e4:	60d3      	str	r3, [r2, #12]
 80013e6:	e011      	b.n	800140c <USARTEnable+0x70>
	}
	else if(usart == USART3){
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	4a0d      	ldr	r2, [pc, #52]	; (8001420 <USARTEnable+0x84>)
 80013ec:	4293      	cmp	r3, r2
 80013ee:	d10c      	bne.n	800140a <USARTEnable+0x6e>
		RCC->APB1ENR |= RCC_APB1ENR_USART3EN;
 80013f0:	4b09      	ldr	r3, [pc, #36]	; (8001418 <USARTEnable+0x7c>)
 80013f2:	69db      	ldr	r3, [r3, #28]
 80013f4:	4a08      	ldr	r2, [pc, #32]	; (8001418 <USARTEnable+0x7c>)
 80013f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013fa:	61d3      	str	r3, [r2, #28]
		USART3->CR1 |= USART_CR1_UE;
 80013fc:	4b08      	ldr	r3, [pc, #32]	; (8001420 <USARTEnable+0x84>)
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	4a07      	ldr	r2, [pc, #28]	; (8001420 <USARTEnable+0x84>)
 8001402:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001406:	60d3      	str	r3, [r2, #12]
 8001408:	e000      	b.n	800140c <USARTEnable+0x70>
	}
	else{
		return;
 800140a:	bf00      	nop
	}
}
 800140c:	370c      	adds	r7, #12
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr
 8001414:	40013800 	.word	0x40013800
 8001418:	40021000 	.word	0x40021000
 800141c:	40004400 	.word	0x40004400
 8001420:	40004800 	.word	0x40004800

08001424 <USARTSetBaudrate>:
  * Desc.: sets the Baudrate for the USART (system clock > 36 MHZ!), default: 115200 bps
  * @param: (USART_TypeDef*)usart: USART
  * @param: (uint16_t) brrVal: Baudrate
  * @return: none
  */
void USARTSetBaudrate(USART_TypeDef* usart, uint16_t brrVal){
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
	if(brrVal != 0){
 8001430:	887b      	ldrh	r3, [r7, #2]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d00b      	beq.n	800144e <USARTSetBaudrate+0x2a>
		usart -> BRR |= (SystemCoreClock / 2 / brrVal);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <USARTSetBaudrate+0x40>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	0859      	lsrs	r1, r3, #1
 8001440:	887b      	ldrh	r3, [r7, #2]
 8001442:	fbb1 f3f3 	udiv	r3, r1, r3
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	609a      	str	r2, [r3, #8]
	}
	else{
		usart->BRR |= 0x8B;
	}
}
 800144c:	e005      	b.n	800145a <USARTSetBaudrate+0x36>
		usart->BRR |= 0x8B;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	f043 028b 	orr.w	r2, r3, #139	; 0x8b
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	609a      	str	r2, [r3, #8]
}
 800145a:	bf00      	nop
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	bc80      	pop	{r7}
 8001462:	4770      	bx	lr
 8001464:	20000034 	.word	0x20000034

08001468 <USARTRXOn>:
  * Desc.: enables the Receiver of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Receiver shall be activated
  * @return: none
  */
void USARTRXOn(USART_TypeDef* usart, USART_RX on_off){
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
 8001470:	460b      	mov	r3, r1
 8001472:	70fb      	strb	r3, [r7, #3]
	if(on_off == RECEIVER_ON){
 8001474:	78fb      	ldrb	r3, [r7, #3]
 8001476:	2b01      	cmp	r3, #1
 8001478:	d106      	bne.n	8001488 <USARTRXOn+0x20>
		usart->CR1 |= USART_CR1_RE;
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	68db      	ldr	r3, [r3, #12]
 800147e:	f043 0204 	orr.w	r2, r3, #4
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	60da      	str	r2, [r3, #12]
	}
	else{
		usart->CR1 &= USART_CR1_RE_Msk;
	}
}
 8001486:	e005      	b.n	8001494 <USARTRXOn+0x2c>
		usart->CR1 &= USART_CR1_RE_Msk;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0204 	and.w	r2, r3, #4
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	60da      	str	r2, [r3, #12]
}
 8001494:	bf00      	nop
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	bc80      	pop	{r7}
 800149c:	4770      	bx	lr

0800149e <USARTTXOn>:
  * Desc.: enables the Transmitter of the corresponding USART
  * @param: (USART_TypeDef*)usart: USART
  * @param: (USART_RX) on_off: indicates if the Transmitter shall be activated
  * @return: none
  */
void USARTTXOn(USART_TypeDef* usart, USART_TX on_off){
 800149e:	b480      	push	{r7}
 80014a0:	b083      	sub	sp, #12
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	6078      	str	r0, [r7, #4]
 80014a6:	460b      	mov	r3, r1
 80014a8:	70fb      	strb	r3, [r7, #3]
	if(on_off == TRANSMITTER_ON){
 80014aa:	78fb      	ldrb	r3, [r7, #3]
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d106      	bne.n	80014be <USARTTXOn+0x20>
			usart->CR1 |= USART_CR1_TE;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	f043 0208 	orr.w	r2, r3, #8
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= USART_CR1_TE_Msk;
		}
}
 80014bc:	e005      	b.n	80014ca <USARTTXOn+0x2c>
			usart->CR1 &= USART_CR1_TE_Msk;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	68db      	ldr	r3, [r3, #12]
 80014c2:	f003 0208 	and.w	r2, r3, #8
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60da      	str	r2, [r3, #12]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr

080014d4 <USARTIRQ>:
    									USART_IRQ_LBDIE,(LIN Break Detection Interrupt)
    									USART_IRQ_EIE(Error Interrupt)
  *  @param: (bool) enable_disable: determines if the interrupt shall be enabled or disabled
  * @return: none
  */
extern void USARTIRQ(USART_TypeDef* usart, USART_IRQ_TYPES irq_type, bool enable_disable){
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	70fb      	strb	r3, [r7, #3]
 80014e0:	4613      	mov	r3, r2
 80014e2:	70bb      	strb	r3, [r7, #2]
	switch(irq_type){
 80014e4:	78fb      	ldrb	r3, [r7, #3]
 80014e6:	2b07      	cmp	r3, #7
 80014e8:	f200 808b 	bhi.w	8001602 <USARTIRQ+0x12e>
 80014ec:	a201      	add	r2, pc, #4	; (adr r2, 80014f4 <USARTIRQ+0x20>)
 80014ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014f2:	bf00      	nop
 80014f4:	08001515 	.word	0x08001515
 80014f8:	08001537 	.word	0x08001537
 80014fc:	08001559 	.word	0x08001559
 8001500:	0800157b 	.word	0x0800157b
 8001504:	08001603 	.word	0x08001603
 8001508:	0800159d 	.word	0x0800159d
 800150c:	080015bf 	.word	0x080015bf
 8001510:	080015e1 	.word	0x080015e1
	case USART_IRQ_TXEIE:
		if(enable_disable){
 8001514:	78bb      	ldrb	r3, [r7, #2]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d006      	beq.n	8001528 <USARTIRQ+0x54>
			usart->CR1 |= USART_CR1_TXEIE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	68db      	ldr	r3, [r3, #12]
 800151e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
		}
		break;
 8001526:	e06d      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TXEIE_Msk;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	60da      	str	r2, [r3, #12]
		break;
 8001534:	e066      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_CTSIE:
		if(enable_disable){
 8001536:	78bb      	ldrb	r3, [r7, #2]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d006      	beq.n	800154a <USARTIRQ+0x76>
			usart->CR3 |= USART_CR3_CTSIE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
		}
		break;
 8001548:	e05c      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_CTSIE_Msk;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	695b      	ldr	r3, [r3, #20]
 800154e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	615a      	str	r2, [r3, #20]
		break;
 8001556:	e055      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_TCIE:
		if(enable_disable){
 8001558:	78bb      	ldrb	r3, [r7, #2]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <USARTIRQ+0x98>
			usart->CR1 |= USART_CR1_TCIE;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	68db      	ldr	r3, [r3, #12]
 8001562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
		}
		break;
 800156a:	e04b      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_TCIE_Msk;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	68db      	ldr	r3, [r3, #12]
 8001570:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	60da      	str	r2, [r3, #12]
		break;
 8001578:	e044      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_RXNEIE:
		if(enable_disable){
 800157a:	78bb      	ldrb	r3, [r7, #2]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d006      	beq.n	800158e <USARTIRQ+0xba>
			usart->CR1 |= USART_CR1_RXNEIE;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	f043 0220 	orr.w	r2, r3, #32
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
		}
		break;
 800158c:	e03a      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_RXNEIE_Msk;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f023 0220 	bic.w	r2, r3, #32
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60da      	str	r2, [r3, #12]
		break;
 800159a:	e033      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_PEIE:
		if(enable_disable){
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d006      	beq.n	80015b0 <USARTIRQ+0xdc>
			usart->CR1 |= USART_CR1_PEIE;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	60da      	str	r2, [r3, #12]
		}
		else{
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
		}
		break;
 80015ae:	e029      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR1 &= ~USART_CR1_PEIE_Msk;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	60da      	str	r2, [r3, #12]
		break;
 80015bc:	e022      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_LBDIE:
		if(enable_disable){
 80015be:	78bb      	ldrb	r3, [r7, #2]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d006      	beq.n	80015d2 <USARTIRQ+0xfe>
			usart->CR2 |= USART_CR2_LBDIE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	611a      	str	r2, [r3, #16]
		}
		else{
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
		}
		break;
 80015d0:	e018      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR2 &= ~USART_CR2_LBDIE_Msk;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	611a      	str	r2, [r3, #16]
		break;
 80015de:	e011      	b.n	8001604 <USARTIRQ+0x130>
	case USART_IRQ_EIE:
		if(enable_disable){
 80015e0:	78bb      	ldrb	r3, [r7, #2]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d006      	beq.n	80015f4 <USARTIRQ+0x120>
			usart->CR3 |= USART_CR3_EIE;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	695b      	ldr	r3, [r3, #20]
 80015ea:	f043 0201 	orr.w	r2, r3, #1
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	615a      	str	r2, [r3, #20]
		}
		else{
			usart->CR3 &= ~USART_CR3_EIE_Msk;
		}
		break;
 80015f2:	e007      	b.n	8001604 <USARTIRQ+0x130>
			usart->CR3 &= ~USART_CR3_EIE_Msk;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	695b      	ldr	r3, [r3, #20]
 80015f8:	f023 0201 	bic.w	r2, r3, #1
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	615a      	str	r2, [r3, #20]
		break;
 8001600:	e000      	b.n	8001604 <USARTIRQ+0x130>
	default:
		return;
 8001602:	bf00      	nop
	}
}
 8001604:	370c      	adds	r7, #12
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800160c:	b480      	push	{r7}
 800160e:	b083      	sub	sp, #12
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001612:	4b0e      	ldr	r3, [pc, #56]	; (800164c <HAL_MspInit+0x40>)
 8001614:	699b      	ldr	r3, [r3, #24]
 8001616:	4a0d      	ldr	r2, [pc, #52]	; (800164c <HAL_MspInit+0x40>)
 8001618:	f043 0301 	orr.w	r3, r3, #1
 800161c:	6193      	str	r3, [r2, #24]
 800161e:	4b0b      	ldr	r3, [pc, #44]	; (800164c <HAL_MspInit+0x40>)
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	f003 0301 	and.w	r3, r3, #1
 8001626:	607b      	str	r3, [r7, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800162a:	4b08      	ldr	r3, [pc, #32]	; (800164c <HAL_MspInit+0x40>)
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	4a07      	ldr	r2, [pc, #28]	; (800164c <HAL_MspInit+0x40>)
 8001630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001634:	61d3      	str	r3, [r2, #28]
 8001636:	4b05      	ldr	r3, [pc, #20]	; (800164c <HAL_MspInit+0x40>)
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001642:	bf00      	nop
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr
 800164c:	40021000 	.word	0x40021000

08001650 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <NMI_Handler+0x4>

08001656 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800165a:	e7fe      	b.n	800165a <HardFault_Handler+0x4>

0800165c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001660:	e7fe      	b.n	8001660 <MemManage_Handler+0x4>

08001662 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001666:	e7fe      	b.n	8001666 <BusFault_Handler+0x4>

08001668 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800166c:	e7fe      	b.n	800166c <UsageFault_Handler+0x4>

0800166e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800166e:	b480      	push	{r7}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	46bd      	mov	sp, r7
 8001676:	bc80      	pop	{r7}
 8001678:	4770      	bx	lr

0800167a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167e:	bf00      	nop
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800168a:	bf00      	nop
 800168c:	46bd      	mov	sp, r7
 800168e:	bc80      	pop	{r7}
 8001690:	4770      	bx	lr
	...

08001694 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001698:	4802      	ldr	r0, [pc, #8]	; (80016a4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 800169a:	f000 fabf 	bl	8001c1c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000ed0 	.word	0x20000ed0

080016a8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ac:	bf00      	nop
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bc80      	pop	{r7}
 80016b2:	4770      	bx	lr

080016b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016b4:	480c      	ldr	r0, [pc, #48]	; (80016e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016b6:	490d      	ldr	r1, [pc, #52]	; (80016ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016b8:	4a0d      	ldr	r2, [pc, #52]	; (80016f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016bc:	e002      	b.n	80016c4 <LoopCopyDataInit>

080016be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016c2:	3304      	adds	r3, #4

080016c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c8:	d3f9      	bcc.n	80016be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016ca:	4a0a      	ldr	r2, [pc, #40]	; (80016f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016cc:	4c0a      	ldr	r4, [pc, #40]	; (80016f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016d0:	e001      	b.n	80016d6 <LoopFillZerobss>

080016d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d4:	3204      	adds	r2, #4

080016d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d8:	d3fb      	bcc.n	80016d2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016da:	f7ff ffe5 	bl	80016a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016de:	f007 f8ab 	bl	8008838 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016e2:	f7fe fec1 	bl	8000468 <main>
  bx lr
 80016e6:	4770      	bx	lr
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	200001b0 	.word	0x200001b0
  ldr r2, =_sidata
 80016f0:	08008918 	.word	0x08008918
  ldr r2, =_sbss
 80016f4:	200001b0 	.word	0x200001b0
  ldr r4, =_ebss
 80016f8:	200013dc 	.word	0x200013dc

080016fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC1_2_IRQHandler>
	...

08001700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_Init+0x28>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_Init+0x28>)
 800170a:	f043 0310 	orr.w	r3, r3, #16
 800170e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001710:	2003      	movs	r0, #3
 8001712:	f000 f911 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001716:	200f      	movs	r0, #15
 8001718:	f000 f808 	bl	800172c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800171c:	f7ff ff76 	bl	800160c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001720:	2300      	movs	r3, #0
}
 8001722:	4618      	mov	r0, r3
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40022000 	.word	0x40022000

0800172c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x54>)
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4b12      	ldr	r3, [pc, #72]	; (8001784 <HAL_InitTick+0x58>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	4619      	mov	r1, r3
 800173e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001742:	fbb3 f3f1 	udiv	r3, r3, r1
 8001746:	fbb2 f3f3 	udiv	r3, r2, r3
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f929 	bl	80019a2 <HAL_SYSTICK_Config>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e00e      	b.n	8001778 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b0f      	cmp	r3, #15
 800175e:	d80a      	bhi.n	8001776 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001760:	2200      	movs	r2, #0
 8001762:	6879      	ldr	r1, [r7, #4]
 8001764:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001768:	f000 f8f1 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_InitTick+0x5c>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000034 	.word	0x20000034
 8001784:	2000003c 	.word	0x2000003c
 8001788:	20000038 	.word	0x20000038

0800178c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return uwTick;
 8001790:	4b02      	ldr	r3, [pc, #8]	; (800179c <HAL_GetTick+0x10>)
 8001792:	681b      	ldr	r3, [r3, #0]
}
 8001794:	4618      	mov	r0, r3
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	20000204 	.word	0x20000204

080017a0 <__NVIC_SetPriorityGrouping>:
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bc80      	pop	{r7}
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4906      	ldr	r1, [pc, #24]	; (8001838 <__NVIC_EnableIRQ+0x34>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	bc80      	pop	{r7}
 8001836:	4770      	bx	lr
 8001838:	e000e100 	.word	0xe000e100

0800183c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	4603      	mov	r3, r0
 8001844:	6039      	str	r1, [r7, #0]
 8001846:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001848:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184c:	2b00      	cmp	r3, #0
 800184e:	db0a      	blt.n	8001866 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	b2da      	uxtb	r2, r3
 8001854:	490c      	ldr	r1, [pc, #48]	; (8001888 <__NVIC_SetPriority+0x4c>)
 8001856:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001864:	e00a      	b.n	800187c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	b2da      	uxtb	r2, r3
 800186a:	4908      	ldr	r1, [pc, #32]	; (800188c <__NVIC_SetPriority+0x50>)
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	3b04      	subs	r3, #4
 8001874:	0112      	lsls	r2, r2, #4
 8001876:	b2d2      	uxtb	r2, r2
 8001878:	440b      	add	r3, r1
 800187a:	761a      	strb	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	bc80      	pop	{r7}
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	e000e100 	.word	0xe000e100
 800188c:	e000ed00 	.word	0xe000ed00

08001890 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	60f8      	str	r0, [r7, #12]
 8001898:	60b9      	str	r1, [r7, #8]
 800189a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	f1c3 0307 	rsb	r3, r3, #7
 80018aa:	2b04      	cmp	r3, #4
 80018ac:	bf28      	it	cs
 80018ae:	2304      	movcs	r3, #4
 80018b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	3304      	adds	r3, #4
 80018b6:	2b06      	cmp	r3, #6
 80018b8:	d902      	bls.n	80018c0 <NVIC_EncodePriority+0x30>
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	3b03      	subs	r3, #3
 80018be:	e000      	b.n	80018c2 <NVIC_EncodePriority+0x32>
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43da      	mvns	r2, r3
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	401a      	ands	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa01 f303 	lsl.w	r3, r1, r3
 80018e2:	43d9      	mvns	r1, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	4313      	orrs	r3, r2
         );
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3724      	adds	r7, #36	; 0x24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bc80      	pop	{r7}
 80018f2:	4770      	bx	lr

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001918:	f7ff ff90 	bl	800183c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff2d 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff42 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff90 	bl	8001890 <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5f 	bl	800183c <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff35 	bl	8001804 <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80019ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019bc:	b08b      	sub	sp, #44	; 0x2c
 80019be:	af06      	add	r7, sp, #24
 80019c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d101      	bne.n	80019cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e0fd      	b.n	8001bc8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d106      	bne.n	80019e6 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f006 fc7f 	bl	80082e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2203      	movs	r2, #3
 80019ea:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4618      	mov	r0, r3
 80019f4:	f002 f968 	bl	8003cc8 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	687e      	ldr	r6, [r7, #4]
 8001a00:	466d      	mov	r5, sp
 8001a02:	f106 0410 	add.w	r4, r6, #16
 8001a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a0a:	6823      	ldr	r3, [r4, #0]
 8001a0c:	602b      	str	r3, [r5, #0]
 8001a0e:	1d33      	adds	r3, r6, #4
 8001a10:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a12:	6838      	ldr	r0, [r7, #0]
 8001a14:	f002 f932 	bl	8003c7c <USB_CoreInit>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d005      	beq.n	8001a2a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	2202      	movs	r2, #2
 8001a22:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001a26:	2301      	movs	r3, #1
 8001a28:	e0ce      	b.n	8001bc8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	2100      	movs	r1, #0
 8001a30:	4618      	mov	r0, r3
 8001a32:	f002 f963 	bl	8003cfc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a36:	2300      	movs	r3, #0
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e04c      	b.n	8001ad6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	6879      	ldr	r1, [r7, #4]
 8001a40:	1c5a      	adds	r2, r3, #1
 8001a42:	4613      	mov	r3, r2
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	00db      	lsls	r3, r3, #3
 8001a4a:	440b      	add	r3, r1
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	2201      	movs	r2, #1
 8001a50:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	6879      	ldr	r1, [r7, #4]
 8001a56:	1c5a      	adds	r2, r3, #1
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	440b      	add	r3, r1
 8001a62:	7bfa      	ldrb	r2, [r7, #15]
 8001a64:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a66:	7bfa      	ldrb	r2, [r7, #15]
 8001a68:	7bfb      	ldrb	r3, [r7, #15]
 8001a6a:	b298      	uxth	r0, r3
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	009b      	lsls	r3, r3, #2
 8001a72:	4413      	add	r3, r2
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	440b      	add	r3, r1
 8001a78:	3336      	adds	r3, #54	; 0x36
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a7e:	7bfb      	ldrb	r3, [r7, #15]
 8001a80:	6879      	ldr	r1, [r7, #4]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	3303      	adds	r3, #3
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a94:	7bfa      	ldrb	r2, [r7, #15]
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	440b      	add	r3, r1
 8001aa2:	3338      	adds	r3, #56	; 0x38
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001aa8:	7bfa      	ldrb	r2, [r7, #15]
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	00db      	lsls	r3, r3, #3
 8001ab4:	440b      	add	r3, r1
 8001ab6:	333c      	adds	r3, #60	; 0x3c
 8001ab8:	2200      	movs	r2, #0
 8001aba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001abc:	7bfa      	ldrb	r2, [r7, #15]
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	4413      	add	r3, r2
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	440b      	add	r3, r1
 8001aca:	3340      	adds	r3, #64	; 0x40
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad0:	7bfb      	ldrb	r3, [r7, #15]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	73fb      	strb	r3, [r7, #15]
 8001ad6:	7bfa      	ldrb	r2, [r7, #15]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d3ad      	bcc.n	8001a3c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	73fb      	strb	r3, [r7, #15]
 8001ae4:	e044      	b.n	8001b70 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ae6:	7bfa      	ldrb	r2, [r7, #15]
 8001ae8:	6879      	ldr	r1, [r7, #4]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	440b      	add	r3, r1
 8001af4:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001afc:	7bfa      	ldrb	r2, [r7, #15]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	440b      	add	r3, r1
 8001b0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001b12:	7bfa      	ldrb	r2, [r7, #15]
 8001b14:	6879      	ldr	r1, [r7, #4]
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	00db      	lsls	r3, r3, #3
 8001b1e:	440b      	add	r3, r1
 8001b20:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001b24:	2200      	movs	r2, #0
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	440b      	add	r3, r1
 8001b36:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	6879      	ldr	r1, [r7, #4]
 8001b42:	4613      	mov	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	4413      	add	r3, r2
 8001b48:	00db      	lsls	r3, r3, #3
 8001b4a:	440b      	add	r3, r1
 8001b4c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	00db      	lsls	r3, r3, #3
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b6a:	7bfb      	ldrb	r3, [r7, #15]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	73fb      	strb	r3, [r7, #15]
 8001b70:	7bfa      	ldrb	r2, [r7, #15]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d3b5      	bcc.n	8001ae6 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	603b      	str	r3, [r7, #0]
 8001b80:	687e      	ldr	r6, [r7, #4]
 8001b82:	466d      	mov	r5, sp
 8001b84:	f106 0410 	add.w	r4, r6, #16
 8001b88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8c:	6823      	ldr	r3, [r4, #0]
 8001b8e:	602b      	str	r3, [r5, #0]
 8001b90:	1d33      	adds	r3, r6, #4
 8001b92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f002 f8bd 	bl	8003d14 <USB_DevInit>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2202      	movs	r2, #2
 8001ba4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	e00d      	b.n	8001bc8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f004 fd6f 	bl	80066a4 <USB_DevDisconnect>

  return HAL_OK;
 8001bc6:	2300      	movs	r3, #0
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bd0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_PCD_Start+0x16>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e016      	b.n	8001c14 <HAL_PCD_Start+0x44>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2201      	movs	r2, #1
 8001bea:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 f852 	bl	8003c9c <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f006 fde5 	bl	80087ca <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4618      	mov	r0, r3
 8001c06:	f004 fd43 	bl	8006690 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	3708      	adds	r7, #8
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b088      	sub	sp, #32
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f004 fd45 	bl	80066b8 <USB_ReadInterrupts>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c38:	d102      	bne.n	8001c40 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 fb5f 	bl	80022fe <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	4618      	mov	r0, r3
 8001c46:	f004 fd37 	bl	80066b8 <USB_ReadInterrupts>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c54:	d112      	bne.n	8001c7c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c68:	b292      	uxth	r2, r2
 8001c6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f006 fbb3 	bl	80083da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001c74:	2100      	movs	r1, #0
 8001c76:	6878      	ldr	r0, [r7, #4]
 8001c78:	f000 f923 	bl	8001ec2 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4618      	mov	r0, r3
 8001c82:	f004 fd19 	bl	80066b8 <USB_ReadInterrupts>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001c90:	d10b      	bne.n	8001caa <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c9a:	b29a      	uxth	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001ca4:	b292      	uxth	r2, r2
 8001ca6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f004 fd02 	bl	80066b8 <USB_ReadInterrupts>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cbe:	d10b      	bne.n	8001cd8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001cc8:	b29a      	uxth	r2, r3
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cd2:	b292      	uxth	r2, r2
 8001cd4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f004 fceb 	bl	80066b8 <USB_ReadInterrupts>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ce8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cec:	d126      	bne.n	8001d3c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f022 0204 	bic.w	r2, r2, #4
 8001d00:	b292      	uxth	r2, r2
 8001d02:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f022 0208 	bic.w	r2, r2, #8
 8001d18:	b292      	uxth	r2, r2
 8001d1a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	f006 fb94 	bl	800844c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d2c:	b29a      	uxth	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001d36:	b292      	uxth	r2, r2
 8001d38:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f004 fcb9 	bl	80066b8 <USB_ReadInterrupts>
 8001d46:	4603      	mov	r3, r0
 8001d48:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d50:	f040 8082 	bne.w	8001e58 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001d54:	2300      	movs	r3, #0
 8001d56:	77fb      	strb	r3, [r7, #31]
 8001d58:	e010      	b.n	8001d7c <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	461a      	mov	r2, r3
 8001d60:	7ffb      	ldrb	r3, [r7, #31]
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	441a      	add	r2, r3
 8001d66:	7ffb      	ldrb	r3, [r7, #31]
 8001d68:	8812      	ldrh	r2, [r2, #0]
 8001d6a:	b292      	uxth	r2, r2
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	3320      	adds	r3, #32
 8001d70:	443b      	add	r3, r7
 8001d72:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001d76:	7ffb      	ldrb	r3, [r7, #31]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	77fb      	strb	r3, [r7, #31]
 8001d7c:	7ffb      	ldrb	r3, [r7, #31]
 8001d7e:	2b07      	cmp	r3, #7
 8001d80:	d9eb      	bls.n	8001d5a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f042 0201 	orr.w	r2, r2, #1
 8001d94:	b292      	uxth	r2, r2
 8001d96:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f022 0201 	bic.w	r2, r2, #1
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001db2:	bf00      	nop
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d0f6      	beq.n	8001db4 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dd8:	b292      	uxth	r2, r2
 8001dda:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	77fb      	strb	r3, [r7, #31]
 8001de2:	e00f      	b.n	8001e04 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001de4:	7ffb      	ldrb	r3, [r7, #31]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	6812      	ldr	r2, [r2, #0]
 8001dea:	4611      	mov	r1, r2
 8001dec:	7ffa      	ldrb	r2, [r7, #31]
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	440a      	add	r2, r1
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	3320      	adds	r3, #32
 8001df6:	443b      	add	r3, r7
 8001df8:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001dfc:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	3301      	adds	r3, #1
 8001e02:	77fb      	strb	r3, [r7, #31]
 8001e04:	7ffb      	ldrb	r3, [r7, #31]
 8001e06:	2b07      	cmp	r3, #7
 8001e08:	d9ec      	bls.n	8001de4 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f042 0208 	orr.w	r2, r2, #8
 8001e1c:	b292      	uxth	r2, r2
 8001e1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e34:	b292      	uxth	r2, r2
 8001e36:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f042 0204 	orr.w	r2, r2, #4
 8001e4c:	b292      	uxth	r2, r2
 8001e4e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f006 fae0 	bl	8008418 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f004 fc2b 	bl	80066b8 <USB_ReadInterrupts>
 8001e62:	4603      	mov	r3, r0
 8001e64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d10e      	bne.n	8001e8c <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001e80:	b292      	uxth	r2, r2
 8001e82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f006 fa99 	bl	80083be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4618      	mov	r0, r3
 8001e92:	f004 fc11 	bl	80066b8 <USB_ReadInterrupts>
 8001e96:	4603      	mov	r3, r0
 8001e98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ea0:	d10b      	bne.n	8001eba <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001eba:	bf00      	nop
 8001ebc:	3720      	adds	r7, #32
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}

08001ec2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_SetAddress+0x1a>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e013      	b.n	8001f04 <HAL_PCD_SetAddress+0x42>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	78fa      	ldrb	r2, [r7, #3]
 8001ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	78fa      	ldrb	r2, [r7, #3]
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f004 fbb8 	bl	800666a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}

08001f0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b084      	sub	sp, #16
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	4608      	mov	r0, r1
 8001f16:	4611      	mov	r1, r2
 8001f18:	461a      	mov	r2, r3
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	70fb      	strb	r3, [r7, #3]
 8001f1e:	460b      	mov	r3, r1
 8001f20:	803b      	strh	r3, [r7, #0]
 8001f22:	4613      	mov	r3, r2
 8001f24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f26:	2300      	movs	r3, #0
 8001f28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	da0e      	bge.n	8001f50 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f32:	78fb      	ldrb	r3, [r7, #3]
 8001f34:	f003 0307 	and.w	r3, r3, #7
 8001f38:	1c5a      	adds	r2, r3, #1
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	4413      	add	r3, r2
 8001f40:	00db      	lsls	r3, r3, #3
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	705a      	strb	r2, [r3, #1]
 8001f4e:	e00e      	b.n	8001f6e <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f50:	78fb      	ldrb	r3, [r7, #3]
 8001f52:	f003 0207 	and.w	r2, r3, #7
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	00db      	lsls	r3, r3, #3
 8001f5e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	4413      	add	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001f6e:	78fb      	ldrb	r3, [r7, #3]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001f7a:	883a      	ldrh	r2, [r7, #0]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	78ba      	ldrb	r2, [r7, #2]
 8001f84:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	785b      	ldrb	r3, [r3, #1]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d004      	beq.n	8001f98 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001f98:	78bb      	ldrb	r3, [r7, #2]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d102      	bne.n	8001fa4 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d101      	bne.n	8001fb2 <HAL_PCD_EP_Open+0xa6>
 8001fae:	2302      	movs	r3, #2
 8001fb0:	e00e      	b.n	8001fd0 <HAL_PCD_EP_Open+0xc4>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68f9      	ldr	r1, [r7, #12]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f001 fec7 	bl	8003d54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2200      	movs	r2, #0
 8001fca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001fce:	7afb      	ldrb	r3, [r7, #11]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001fe4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	da0e      	bge.n	800200a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 0307 	and.w	r3, r3, #7
 8001ff2:	1c5a      	adds	r2, r3, #1
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	2201      	movs	r2, #1
 8002006:	705a      	strb	r2, [r3, #1]
 8002008:	e00e      	b.n	8002028 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	f003 0207 	and.w	r2, r3, #7
 8002010:	4613      	mov	r3, r2
 8002012:	009b      	lsls	r3, r3, #2
 8002014:	4413      	add	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	2200      	movs	r2, #0
 8002026:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002028:	78fb      	ldrb	r3, [r7, #3]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	b2da      	uxtb	r2, r3
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_PCD_EP_Close+0x6a>
 800203e:	2302      	movs	r3, #2
 8002040:	e00e      	b.n	8002060 <HAL_PCD_EP_Close+0x88>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2201      	movs	r2, #1
 8002046:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68f9      	ldr	r1, [r7, #12]
 8002050:	4618      	mov	r0, r3
 8002052:	f002 f9e9 	bl	8004428 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b086      	sub	sp, #24
 800206c:	af00      	add	r7, sp, #0
 800206e:	60f8      	str	r0, [r7, #12]
 8002070:	607a      	str	r2, [r7, #4]
 8002072:	603b      	str	r3, [r7, #0]
 8002074:	460b      	mov	r3, r1
 8002076:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002078:	7afb      	ldrb	r3, [r7, #11]
 800207a:	f003 0207 	and.w	r2, r3, #7
 800207e:	4613      	mov	r3, r2
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4413      	add	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4413      	add	r3, r2
 800208e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020a8:	7afb      	ldrb	r3, [r7, #11]
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80020b4:	7afb      	ldrb	r3, [r7, #11]
 80020b6:	f003 0307 	and.w	r3, r3, #7
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6979      	ldr	r1, [r7, #20]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fb9b 	bl	8004800 <USB_EPStartXfer>
 80020ca:	e005      	b.n	80020d8 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	6979      	ldr	r1, [r7, #20]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f002 fb94 	bl	8004800 <USB_EPStartXfer>
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3718      	adds	r7, #24
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}

080020e2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020e2:	b480      	push	{r7}
 80020e4:	b083      	sub	sp, #12
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
 80020ea:	460b      	mov	r3, r1
 80020ec:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80020ee:	78fb      	ldrb	r3, [r7, #3]
 80020f0:	f003 0207 	and.w	r2, r3, #7
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	4413      	add	r3, r2
 80020fc:	00db      	lsls	r3, r3, #3
 80020fe:	440b      	add	r3, r1
 8002100:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8002104:	681b      	ldr	r3, [r3, #0]
}
 8002106:	4618      	mov	r0, r3
 8002108:	370c      	adds	r7, #12
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b086      	sub	sp, #24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	607a      	str	r2, [r7, #4]
 800211a:	603b      	str	r3, [r7, #0]
 800211c:	460b      	mov	r3, r1
 800211e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002120:	7afb      	ldrb	r3, [r7, #11]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	1c5a      	adds	r2, r3, #1
 8002128:	4613      	mov	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	4413      	add	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	4413      	add	r3, r2
 8002134:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	2201      	movs	r2, #1
 8002146:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	2200      	movs	r2, #0
 8002154:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2201      	movs	r2, #1
 800215a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800215c:	7afb      	ldrb	r3, [r7, #11]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	b2da      	uxtb	r2, r3
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002168:	7afb      	ldrb	r3, [r7, #11]
 800216a:	f003 0307 	and.w	r3, r3, #7
 800216e:	2b00      	cmp	r3, #0
 8002170:	d106      	bne.n	8002180 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6979      	ldr	r1, [r7, #20]
 8002178:	4618      	mov	r0, r3
 800217a:	f002 fb41 	bl	8004800 <USB_EPStartXfer>
 800217e:	e005      	b.n	800218c <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6979      	ldr	r1, [r7, #20]
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fb3a 	bl	8004800 <USB_EPStartXfer>
  }

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3718      	adds	r7, #24
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
 800219e:	460b      	mov	r3, r1
 80021a0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	f003 0207 	and.w	r2, r3, #7
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d901      	bls.n	80021b4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e04c      	b.n	800224e <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80021b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0e      	bge.n	80021da <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	4413      	add	r3, r2
 80021d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2201      	movs	r2, #1
 80021d6:	705a      	strb	r2, [r3, #1]
 80021d8:	e00c      	b.n	80021f4 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	4613      	mov	r3, r2
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	4413      	add	r3, r2
 80021e2:	00db      	lsls	r3, r3, #3
 80021e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80021e8:	687a      	ldr	r2, [r7, #4]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	b2da      	uxtb	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_PCD_EP_SetStall+0x7e>
 8002210:	2302      	movs	r3, #2
 8002212:	e01c      	b.n	800224e <HAL_PCD_EP_SetStall+0xb8>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	68f9      	ldr	r1, [r7, #12]
 8002222:	4618      	mov	r0, r3
 8002224:	f004 f924 	bl	8006470 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	2b00      	cmp	r3, #0
 8002230:	d108      	bne.n	8002244 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 800223c:	4619      	mov	r1, r3
 800223e:	4610      	mov	r0, r2
 8002240:	f004 fa49 	bl	80066d6 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3710      	adds	r7, #16
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}

08002256 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af00      	add	r7, sp, #0
 800225c:	6078      	str	r0, [r7, #4]
 800225e:	460b      	mov	r3, r1
 8002260:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002262:	78fb      	ldrb	r3, [r7, #3]
 8002264:	f003 020f 	and.w	r2, r3, #15
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d901      	bls.n	8002274 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e040      	b.n	80022f6 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002274:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002278:	2b00      	cmp	r3, #0
 800227a:	da0e      	bge.n	800229a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	4613      	mov	r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	4413      	add	r3, r2
 800228a:	00db      	lsls	r3, r3, #3
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	4413      	add	r3, r2
 8002290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2201      	movs	r2, #1
 8002296:	705a      	strb	r2, [r3, #1]
 8002298:	e00e      	b.n	80022b8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800229a:	78fb      	ldrb	r3, [r7, #3]
 800229c:	f003 0207 	and.w	r2, r3, #7
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022ac:	687a      	ldr	r2, [r7, #4]
 80022ae:	4413      	add	r3, r2
 80022b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	f003 0307 	and.w	r3, r3, #7
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d101      	bne.n	80022d8 <HAL_PCD_EP_ClrStall+0x82>
 80022d4:	2302      	movs	r3, #2
 80022d6:	e00e      	b.n	80022f6 <HAL_PCD_EP_ClrStall+0xa0>
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68f9      	ldr	r1, [r7, #12]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f004 f912 	bl	8006510 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b08e      	sub	sp, #56	; 0x38
 8002302:	af00      	add	r7, sp, #0
 8002304:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002306:	e2ec      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002310:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002312:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002314:	b2db      	uxtb	r3, r3
 8002316:	f003 030f 	and.w	r3, r3, #15
 800231a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800231e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002322:	2b00      	cmp	r3, #0
 8002324:	f040 8161 	bne.w	80025ea <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002328:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800232a:	f003 0310 	and.w	r3, r3, #16
 800232e:	2b00      	cmp	r3, #0
 8002330:	d152      	bne.n	80023d8 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	81fb      	strh	r3, [r7, #14]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	89fb      	ldrh	r3, [r7, #14]
 800234a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800234e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002352:	b29b      	uxth	r3, r3
 8002354:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	3328      	adds	r3, #40	; 0x28
 800235a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002364:	b29b      	uxth	r3, r3
 8002366:	461a      	mov	r2, r3
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	3302      	adds	r3, #2
 8002372:	005b      	lsls	r3, r3, #1
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	6812      	ldr	r2, [r2, #0]
 8002378:	4413      	add	r3, r2
 800237a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800237e:	881b      	ldrh	r3, [r3, #0]
 8002380:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002386:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8002388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800238e:	69db      	ldr	r3, [r3, #28]
 8002390:	441a      	add	r2, r3
 8002392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002394:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f005 fff6 	bl	800838a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 829b 	beq.w	80028e2 <PCD_EP_ISR_Handler+0x5e4>
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	f040 8296 	bne.w	80028e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80023c2:	b2da      	uxtb	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b292      	uxth	r2, r2
 80023ca:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80023d6:	e284      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80023de:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	881b      	ldrh	r3, [r3, #0]
 80023e6:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80023e8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80023ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d034      	beq.n	800245c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	461a      	mov	r2, r3
 80023fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	00db      	lsls	r3, r3, #3
 8002404:	4413      	add	r3, r2
 8002406:	3306      	adds	r3, #6
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	687a      	ldr	r2, [r7, #4]
 800240c:	6812      	ldr	r2, [r2, #0]
 800240e:	4413      	add	r3, r2
 8002410:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002414:	881b      	ldrh	r3, [r3, #0]
 8002416:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800241a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800241c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6818      	ldr	r0, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002430:	b29b      	uxth	r3, r3
 8002432:	f004 f9a0 	bl	8006776 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	881b      	ldrh	r3, [r3, #0]
 800243c:	b29a      	uxth	r2, r3
 800243e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002442:	4013      	ands	r3, r2
 8002444:	823b      	strh	r3, [r7, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	8a3a      	ldrh	r2, [r7, #16]
 800244c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002450:	b292      	uxth	r2, r2
 8002452:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f005 ff6b 	bl	8008330 <HAL_PCD_SetupStageCallback>
 800245a:	e242      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800245c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002460:	2b00      	cmp	r3, #0
 8002462:	f280 823e 	bge.w	80028e2 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	881b      	ldrh	r3, [r3, #0]
 800246c:	b29a      	uxth	r2, r3
 800246e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002472:	4013      	ands	r3, r2
 8002474:	83bb      	strh	r3, [r7, #28]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	8bba      	ldrh	r2, [r7, #28]
 800247c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002480:	b292      	uxth	r2, r2
 8002482:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800248c:	b29b      	uxth	r3, r3
 800248e:	461a      	mov	r2, r3
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4413      	add	r3, r2
 8002498:	3306      	adds	r3, #6
 800249a:	005b      	lsls	r3, r3, #1
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6812      	ldr	r2, [r2, #0]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024a6:	881b      	ldrh	r3, [r3, #0]
 80024a8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ae:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b2:	69db      	ldr	r3, [r3, #28]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d019      	beq.n	80024ec <PCD_EP_ISR_Handler+0x1ee>
 80024b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d015      	beq.n	80024ec <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6818      	ldr	r0, [r3, #0]
 80024c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c6:	6959      	ldr	r1, [r3, #20]
 80024c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ca:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80024d0:	b29b      	uxth	r3, r3
 80024d2:	f004 f950 	bl	8006776 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	695a      	ldr	r2, [r3, #20]
 80024da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	441a      	add	r2, r3
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80024e4:	2100      	movs	r1, #0
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f005 ff34 	bl	8008354 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	881b      	ldrh	r3, [r3, #0]
 80024f2:	b29b      	uxth	r3, r3
 80024f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f040 81f2 	bne.w	80028e2 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800250c:	b29b      	uxth	r3, r3
 800250e:	461a      	mov	r2, r3
 8002510:	69bb      	ldr	r3, [r7, #24]
 8002512:	4413      	add	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800251c:	617b      	str	r3, [r7, #20]
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	691b      	ldr	r3, [r3, #16]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d112      	bne.n	800254c <PCD_EP_ISR_Handler+0x24e>
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	b29b      	uxth	r3, r3
 800252c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002530:	b29a      	uxth	r2, r3
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	801a      	strh	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	881b      	ldrh	r3, [r3, #0]
 800253a:	b29b      	uxth	r3, r3
 800253c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002540:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002544:	b29a      	uxth	r2, r3
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	801a      	strh	r2, [r3, #0]
 800254a:	e02f      	b.n	80025ac <PCD_EP_ISR_Handler+0x2ae>
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	2b3e      	cmp	r3, #62	; 0x3e
 8002552:	d813      	bhi.n	800257c <PCD_EP_ISR_Handler+0x27e>
 8002554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	085b      	lsrs	r3, r3, #1
 800255a:	633b      	str	r3, [r7, #48]	; 0x30
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d002      	beq.n	800256e <PCD_EP_ISR_Handler+0x270>
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	3301      	adds	r3, #1
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
 800256e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002570:	b29b      	uxth	r3, r3
 8002572:	029b      	lsls	r3, r3, #10
 8002574:	b29a      	uxth	r2, r3
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	801a      	strh	r2, [r3, #0]
 800257a:	e017      	b.n	80025ac <PCD_EP_ISR_Handler+0x2ae>
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	095b      	lsrs	r3, r3, #5
 8002582:	633b      	str	r3, [r7, #48]	; 0x30
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	691b      	ldr	r3, [r3, #16]
 8002588:	f003 031f 	and.w	r3, r3, #31
 800258c:	2b00      	cmp	r3, #0
 800258e:	d102      	bne.n	8002596 <PCD_EP_ISR_Handler+0x298>
 8002590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002592:	3b01      	subs	r3, #1
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
 8002596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002598:	b29b      	uxth	r3, r3
 800259a:	029b      	lsls	r3, r3, #10
 800259c:	b29b      	uxth	r3, r3
 800259e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025bc:	827b      	strh	r3, [r7, #18]
 80025be:	8a7b      	ldrh	r3, [r7, #18]
 80025c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80025c4:	827b      	strh	r3, [r7, #18]
 80025c6:	8a7b      	ldrh	r3, [r7, #18]
 80025c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025cc:	827b      	strh	r3, [r7, #18]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	8a7b      	ldrh	r3, [r7, #18]
 80025d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	8013      	strh	r3, [r2, #0]
 80025e8:	e17b      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	461a      	mov	r2, r3
 80025f0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4413      	add	r3, r2
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80025fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002600:	2b00      	cmp	r3, #0
 8002602:	f280 80ea 	bge.w	80027da <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	461a      	mov	r2, r3
 800260c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	4413      	add	r3, r2
 8002614:	881b      	ldrh	r3, [r3, #0]
 8002616:	b29a      	uxth	r2, r3
 8002618:	f640 738f 	movw	r3, #3983	; 0xf8f
 800261c:	4013      	ands	r3, r2
 800261e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	461a      	mov	r2, r3
 8002626:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	4413      	add	r3, r2
 800262e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002630:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002634:	b292      	uxth	r2, r2
 8002636:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002638:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800263c:	4613      	mov	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	00db      	lsls	r3, r3, #3
 8002644:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4413      	add	r3, r2
 800264c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	7b1b      	ldrb	r3, [r3, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d122      	bne.n	800269c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800265e:	b29b      	uxth	r3, r3
 8002660:	461a      	mov	r2, r3
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	00db      	lsls	r3, r3, #3
 8002668:	4413      	add	r3, r2
 800266a:	3306      	adds	r3, #6
 800266c:	005b      	lsls	r3, r3, #1
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	4413      	add	r3, r2
 8002674:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800267e:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8002680:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 8087 	beq.w	8002796 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6818      	ldr	r0, [r3, #0]
 800268c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268e:	6959      	ldr	r1, [r3, #20]
 8002690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002692:	88da      	ldrh	r2, [r3, #6]
 8002694:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002696:	f004 f86e 	bl	8006776 <USB_ReadPMA>
 800269a:	e07c      	b.n	8002796 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269e:	78db      	ldrb	r3, [r3, #3]
 80026a0:	2b02      	cmp	r3, #2
 80026a2:	d108      	bne.n	80026b6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026a4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80026a6:	461a      	mov	r2, r3
 80026a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 f927 	bl	80028fe <HAL_PCD_EP_DB_Receive>
 80026b0:	4603      	mov	r3, r0
 80026b2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80026b4:	e06f      	b.n	8002796 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	461a      	mov	r2, r3
 80026bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	881b      	ldrh	r3, [r3, #0]
 80026c6:	b29b      	uxth	r3, r3
 80026c8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80026cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	441a      	add	r2, r3
 80026e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80026e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80026ee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	4413      	add	r3, r2
 8002704:	881b      	ldrh	r3, [r3, #0]
 8002706:	b29b      	uxth	r3, r3
 8002708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d021      	beq.n	8002754 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002718:	b29b      	uxth	r3, r3
 800271a:	461a      	mov	r2, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	4413      	add	r3, r2
 8002724:	3302      	adds	r3, #2
 8002726:	005b      	lsls	r3, r3, #1
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	6812      	ldr	r2, [r2, #0]
 800272c:	4413      	add	r3, r2
 800272e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002732:	881b      	ldrh	r3, [r3, #0]
 8002734:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002738:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800273a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800273c:	2b00      	cmp	r3, #0
 800273e:	d02a      	beq.n	8002796 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6818      	ldr	r0, [r3, #0]
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	6959      	ldr	r1, [r3, #20]
 8002748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274a:	891a      	ldrh	r2, [r3, #8]
 800274c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800274e:	f004 f812 	bl	8006776 <USB_ReadPMA>
 8002752:	e020      	b.n	8002796 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800275c:	b29b      	uxth	r3, r3
 800275e:	461a      	mov	r2, r3
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	00db      	lsls	r3, r3, #3
 8002766:	4413      	add	r3, r2
 8002768:	3306      	adds	r3, #6
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	6812      	ldr	r2, [r2, #0]
 8002770:	4413      	add	r3, r2
 8002772:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800277c:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800277e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002780:	2b00      	cmp	r3, #0
 8002782:	d008      	beq.n	8002796 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6818      	ldr	r0, [r3, #0]
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	6959      	ldr	r1, [r3, #20]
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	895a      	ldrh	r2, [r3, #10]
 8002790:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002792:	f003 fff0 	bl	8006776 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002798:	69da      	ldr	r2, [r3, #28]
 800279a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800279c:	441a      	add	r2, r3
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80027a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80027a8:	441a      	add	r2, r3
 80027aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ac:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80027ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <PCD_EP_ISR_Handler+0x4c2>
 80027b6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	429a      	cmp	r2, r3
 80027be:	d206      	bcs.n	80027ce <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80027c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	4619      	mov	r1, r3
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f005 fdc4 	bl	8008354 <HAL_PCD_DataOutStageCallback>
 80027cc:	e005      	b.n	80027da <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d4:	4618      	mov	r0, r3
 80027d6:	f002 f813 	bl	8004800 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 80027da:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d07e      	beq.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 80027e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	4613      	mov	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	4413      	add	r3, r2
 80027f0:	00db      	lsls	r3, r3, #3
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	4413      	add	r3, r2
 80027f6:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	461a      	mov	r2, r3
 80027fe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	881b      	ldrh	r3, [r3, #0]
 8002808:	b29b      	uxth	r3, r3
 800280a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800280e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002812:	843b      	strh	r3, [r7, #32]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	461a      	mov	r2, r3
 800281a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	441a      	add	r2, r3
 8002822:	8c3b      	ldrh	r3, [r7, #32]
 8002824:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002828:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800282c:	b29b      	uxth	r3, r3
 800282e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002832:	78db      	ldrb	r3, [r3, #3]
 8002834:	2b03      	cmp	r3, #3
 8002836:	d00c      	beq.n	8002852 <PCD_EP_ISR_Handler+0x554>
 8002838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283a:	78db      	ldrb	r3, [r3, #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d008      	beq.n	8002852 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002844:	2b02      	cmp	r3, #2
 8002846:	d146      	bne.n	80028d6 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002848:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800284a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d141      	bne.n	80028d6 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800285a:	b29b      	uxth	r3, r3
 800285c:	461a      	mov	r2, r3
 800285e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	3302      	adds	r3, #2
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	6812      	ldr	r2, [r2, #0]
 800286e:	4413      	add	r3, r2
 8002870:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002874:	881b      	ldrh	r3, [r3, #0]
 8002876:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800287a:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 800287c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287e:	699a      	ldr	r2, [r3, #24]
 8002880:	8bfb      	ldrh	r3, [r7, #30]
 8002882:	429a      	cmp	r2, r3
 8002884:	d906      	bls.n	8002894 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 8002886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	8bfb      	ldrh	r3, [r7, #30]
 800288c:	1ad2      	subs	r2, r2, r3
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	619a      	str	r2, [r3, #24]
 8002892:	e002      	b.n	800289a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002896:	2200      	movs	r2, #0
 8002898:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d106      	bne.n	80028b0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	781b      	ldrb	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f005 fd6e 	bl	800838a <HAL_PCD_DataInStageCallback>
 80028ae:	e018      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	695a      	ldr	r2, [r3, #20]
 80028b4:	8bfb      	ldrh	r3, [r7, #30]
 80028b6:	441a      	add	r2, r3
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	69da      	ldr	r2, [r3, #28]
 80028c0:	8bfb      	ldrh	r3, [r7, #30]
 80028c2:	441a      	add	r2, r3
 80028c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028ce:	4618      	mov	r0, r3
 80028d0:	f001 ff96 	bl	8004800 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80028d4:	e005      	b.n	80028e2 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80028d6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80028d8:	461a      	mov	r2, r3
 80028da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f91b 	bl	8002b18 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b21b      	sxth	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	f6ff ad0a 	blt.w	8002308 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3738      	adds	r7, #56	; 0x38
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80028fe:	b580      	push	{r7, lr}
 8002900:	b088      	sub	sp, #32
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800290c:	88fb      	ldrh	r3, [r7, #6]
 800290e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d07e      	beq.n	8002a14 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800291e:	b29b      	uxth	r3, r3
 8002920:	461a      	mov	r2, r3
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	4413      	add	r3, r2
 800292a:	3302      	adds	r3, #2
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	6812      	ldr	r2, [r2, #0]
 8002932:	4413      	add	r3, r2
 8002934:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002938:	881b      	ldrh	r3, [r3, #0]
 800293a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800293e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	699a      	ldr	r2, [r3, #24]
 8002944:	8b7b      	ldrh	r3, [r7, #26]
 8002946:	429a      	cmp	r2, r3
 8002948:	d306      	bcc.n	8002958 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	699a      	ldr	r2, [r3, #24]
 800294e:	8b7b      	ldrh	r3, [r7, #26]
 8002950:	1ad2      	subs	r2, r2, r3
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	619a      	str	r2, [r3, #24]
 8002956:	e002      	b.n	800295e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	2200      	movs	r2, #0
 800295c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	699b      	ldr	r3, [r3, #24]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d123      	bne.n	80029ae <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	881b      	ldrh	r3, [r3, #0]
 8002976:	b29b      	uxth	r3, r3
 8002978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800297c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002980:	833b      	strh	r3, [r7, #24]
 8002982:	8b3b      	ldrh	r3, [r7, #24]
 8002984:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002988:	833b      	strh	r3, [r7, #24]
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	441a      	add	r2, r3
 8002998:	8b3b      	ldrh	r3, [r7, #24]
 800299a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800299e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029aa:	b29b      	uxth	r3, r3
 80029ac:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029ae:	88fb      	ldrh	r3, [r7, #6]
 80029b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01f      	beq.n	80029f8 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	461a      	mov	r2, r3
 80029be:	68bb      	ldr	r3, [r7, #8]
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	b29b      	uxth	r3, r3
 80029ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	82fb      	strh	r3, [r7, #22]
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	441a      	add	r2, r3
 80029e2:	8afb      	ldrh	r3, [r7, #22]
 80029e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80029ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80029f8:	8b7b      	ldrh	r3, [r7, #26]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	f000 8087 	beq.w	8002b0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6959      	ldr	r1, [r3, #20]
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	891a      	ldrh	r2, [r3, #8]
 8002a0c:	8b7b      	ldrh	r3, [r7, #26]
 8002a0e:	f003 feb2 	bl	8006776 <USB_ReadPMA>
 8002a12:	e07c      	b.n	8002b0e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a1c:	b29b      	uxth	r3, r3
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	00db      	lsls	r3, r3, #3
 8002a26:	4413      	add	r3, r2
 8002a28:	3306      	adds	r3, #6
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	6812      	ldr	r2, [r2, #0]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a36:	881b      	ldrh	r3, [r3, #0]
 8002a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a3c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	8b7b      	ldrh	r3, [r7, #26]
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d306      	bcc.n	8002a56 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	699a      	ldr	r2, [r3, #24]
 8002a4c:	8b7b      	ldrh	r3, [r7, #26]
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	619a      	str	r2, [r3, #24]
 8002a54:	e002      	b.n	8002a5c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d123      	bne.n	8002aac <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4413      	add	r3, r2
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002a7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7e:	83fb      	strh	r3, [r7, #30]
 8002a80:	8bfb      	ldrh	r3, [r7, #30]
 8002a82:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002a86:	83fb      	strh	r3, [r7, #30]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	781b      	ldrb	r3, [r3, #0]
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	441a      	add	r2, r3
 8002a96:	8bfb      	ldrh	r3, [r7, #30]
 8002a98:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a9c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa8:	b29b      	uxth	r3, r3
 8002aaa:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002aac:	88fb      	ldrh	r3, [r7, #6]
 8002aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d11f      	bne.n	8002af6 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	461a      	mov	r2, r3
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	881b      	ldrh	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ad0:	83bb      	strh	r3, [r7, #28]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	441a      	add	r2, r3
 8002ae0:	8bbb      	ldrh	r3, [r7, #28]
 8002ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002aea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002af6:	8b7b      	ldrh	r3, [r7, #26]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d008      	beq.n	8002b0e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6818      	ldr	r0, [r3, #0]
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	6959      	ldr	r1, [r3, #20]
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	895a      	ldrh	r2, [r3, #10]
 8002b08:	8b7b      	ldrh	r3, [r7, #26]
 8002b0a:	f003 fe34 	bl	8006776 <USB_ReadPMA>
    }
  }

  return count;
 8002b0e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	3720      	adds	r7, #32
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}

08002b18 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b0a2      	sub	sp, #136	; 0x88
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	4613      	mov	r3, r2
 8002b24:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b26:	88fb      	ldrh	r3, [r7, #6]
 8002b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 81c7 	beq.w	8002ec0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b3a:	b29b      	uxth	r3, r3
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	4413      	add	r3, r2
 8002b46:	3302      	adds	r3, #2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	6812      	ldr	r2, [r2, #0]
 8002b4e:	4413      	add	r3, r2
 8002b50:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002b5a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	699a      	ldr	r2, [r3, #24]
 8002b62:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d907      	bls.n	8002b7a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	699a      	ldr	r2, [r3, #24]
 8002b6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b72:	1ad2      	subs	r2, r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	619a      	str	r2, [r3, #24]
 8002b78:	e002      	b.n	8002b80 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 80b9 	bne.w	8002cfc <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	785b      	ldrb	r3, [r3, #1]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d126      	bne.n	8002be0 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ba6:	4413      	add	r3, r2
 8002ba8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	011a      	lsls	r2, r3, #4
 8002bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002bb8:	627b      	str	r3, [r7, #36]	; 0x24
 8002bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002bc4:	b29a      	uxth	r2, r3
 8002bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc8:	801a      	strh	r2, [r3, #0]
 8002bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bcc:	881b      	ldrh	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002bd4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	801a      	strh	r2, [r3, #0]
 8002bde:	e01a      	b.n	8002c16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	785b      	ldrb	r3, [r3, #1]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d116      	bne.n	8002c16 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	633b      	str	r3, [r7, #48]	; 0x30
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bfc:	4413      	add	r3, r2
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	011a      	lsls	r2, r3, #4
 8002c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c08:	4413      	add	r3, r2
 8002c0a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c12:	2200      	movs	r2, #0
 8002c14:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	623b      	str	r3, [r7, #32]
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	785b      	ldrb	r3, [r3, #1]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d126      	bne.n	8002c72 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	461a      	mov	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	4413      	add	r3, r2
 8002c3a:	61bb      	str	r3, [r7, #24]
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	011a      	lsls	r2, r3, #4
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	4413      	add	r3, r2
 8002c46:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	881b      	ldrh	r3, [r3, #0]
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	801a      	strh	r2, [r3, #0]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	881b      	ldrh	r3, [r3, #0]
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002c66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002c6a:	b29a      	uxth	r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	801a      	strh	r2, [r3, #0]
 8002c70:	e017      	b.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	785b      	ldrb	r3, [r3, #1]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d113      	bne.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	461a      	mov	r2, r3
 8002c86:	6a3b      	ldr	r3, [r7, #32]
 8002c88:	4413      	add	r3, r2
 8002c8a:	623b      	str	r3, [r7, #32]
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	011a      	lsls	r2, r3, #4
 8002c92:	6a3b      	ldr	r3, [r7, #32]
 8002c94:	4413      	add	r3, r2
 8002c96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002c9a:	61fb      	str	r3, [r7, #28]
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f005 fb6e 	bl	800838a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cae:	88fb      	ldrh	r3, [r7, #6]
 8002cb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 82d4 	beq.w	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cd4:	827b      	strh	r3, [r7, #18]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	461a      	mov	r2, r3
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	441a      	add	r2, r3
 8002ce4:	8a7b      	ldrh	r3, [r7, #18]
 8002ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002cee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	8013      	strh	r3, [r2, #0]
 8002cfa:	e2b2      	b.n	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002cfc:	88fb      	ldrh	r3, [r7, #6]
 8002cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d021      	beq.n	8002d4a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	781b      	ldrb	r3, [r3, #0]
 8002d10:	009b      	lsls	r3, r3, #2
 8002d12:	4413      	add	r3, r2
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d20:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	461a      	mov	r2, r3
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	441a      	add	r2, r3
 8002d32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002d36:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002d3a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	f040 8286 	bne.w	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	695a      	ldr	r2, [r3, #20]
 8002d5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d5e:	441a      	add	r2, r3
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	69da      	ldr	r2, [r3, #28]
 8002d68:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d6c:	441a      	add	r2, r3
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	6a1a      	ldr	r2, [r3, #32]
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	691b      	ldr	r3, [r3, #16]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d309      	bcc.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	6a1a      	ldr	r2, [r3, #32]
 8002d88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8a:	1ad2      	subs	r2, r2, r3
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	621a      	str	r2, [r3, #32]
 8002d90:	e015      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d107      	bne.n	8002daa <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002d9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d9e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002da0:	68bb      	ldr	r3, [r7, #8]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002da8:	e009      	b.n	8002dbe <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	2200      	movs	r2, #0
 8002dae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	785b      	ldrb	r3, [r3, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d155      	bne.n	8002e72 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002dda:	4413      	add	r3, r2
 8002ddc:	63bb      	str	r3, [r7, #56]	; 0x38
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	011a      	lsls	r2, r3, #4
 8002de4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de6:	4413      	add	r3, r2
 8002de8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002dec:	637b      	str	r3, [r7, #52]	; 0x34
 8002dee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d112      	bne.n	8002e1a <HAL_PCD_EP_DB_Transmit+0x302>
 8002df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002df6:	881b      	ldrh	r3, [r3, #0]
 8002df8:	b29b      	uxth	r3, r3
 8002dfa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfe:	b29a      	uxth	r2, r3
 8002e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e02:	801a      	strh	r2, [r3, #0]
 8002e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e06:	881b      	ldrh	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e16:	801a      	strh	r2, [r3, #0]
 8002e18:	e047      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x392>
 8002e1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e1c:	2b3e      	cmp	r3, #62	; 0x3e
 8002e1e:	d811      	bhi.n	8002e44 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002e20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d002      	beq.n	8002e36 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e32:	3301      	adds	r3, #1
 8002e34:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	029b      	lsls	r3, r3, #10
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e40:	801a      	strh	r2, [r3, #0]
 8002e42:	e032      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x392>
 8002e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e46:	095b      	lsrs	r3, r3, #5
 8002e48:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e4c:	f003 031f 	and.w	r3, r3, #31
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d102      	bne.n	8002e5a <HAL_PCD_EP_DB_Transmit+0x342>
 8002e54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e56:	3b01      	subs	r3, #1
 8002e58:	64bb      	str	r3, [r7, #72]	; 0x48
 8002e5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	029b      	lsls	r3, r3, #10
 8002e60:	b29b      	uxth	r3, r3
 8002e62:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e66:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	801a      	strh	r2, [r3, #0]
 8002e70:	e01b      	b.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x392>
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	785b      	ldrb	r3, [r3, #1]
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d117      	bne.n	8002eaa <HAL_PCD_EP_DB_Transmit+0x392>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	643b      	str	r3, [r7, #64]	; 0x40
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8e:	4413      	add	r3, r2
 8002e90:	643b      	str	r3, [r7, #64]	; 0x40
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	011a      	lsls	r2, r3, #4
 8002e98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ea2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ea8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	6959      	ldr	r1, [r3, #20]
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	891a      	ldrh	r2, [r3, #8]
 8002eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	f003 fc17 	bl	80066ec <USB_WritePMA>
 8002ebe:	e1d0      	b.n	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	00db      	lsls	r3, r3, #3
 8002ed2:	4413      	add	r3, r2
 8002ed4:	3306      	adds	r3, #6
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	68fa      	ldr	r2, [r7, #12]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002ee2:	881b      	ldrh	r3, [r3, #0]
 8002ee4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ee8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	699a      	ldr	r2, [r3, #24]
 8002ef0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	d307      	bcc.n	8002f08 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	699a      	ldr	r2, [r3, #24]
 8002efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f00:	1ad2      	subs	r2, r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	619a      	str	r2, [r3, #24]
 8002f06:	e002      	b.n	8002f0e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	f040 80c4 	bne.w	80030a0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	785b      	ldrb	r3, [r3, #1]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d126      	bne.n	8002f6e <HAL_PCD_EP_DB_Transmit+0x456>
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	461a      	mov	r2, r3
 8002f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f34:	4413      	add	r3, r2
 8002f36:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	011a      	lsls	r2, r3, #4
 8002f3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f40:	4413      	add	r3, r2
 8002f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f46:	66bb      	str	r3, [r7, #104]	; 0x68
 8002f48:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f4a:	881b      	ldrh	r3, [r3, #0]
 8002f4c:	b29b      	uxth	r3, r3
 8002f4e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f5a:	881b      	ldrh	r3, [r3, #0]
 8002f5c:	b29b      	uxth	r3, r3
 8002f5e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002f62:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f6a:	801a      	strh	r2, [r3, #0]
 8002f6c:	e01a      	b.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d116      	bne.n	8002fa4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	677b      	str	r3, [r7, #116]	; 0x74
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	461a      	mov	r2, r3
 8002f88:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f8a:	4413      	add	r3, r2
 8002f8c:	677b      	str	r3, [r7, #116]	; 0x74
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	011a      	lsls	r2, r3, #4
 8002f94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f96:	4413      	add	r3, r2
 8002f98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002f9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002f9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	785b      	ldrb	r3, [r3, #1]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d12f      	bne.n	8003012 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fca:	4413      	add	r3, r2
 8002fcc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	011a      	lsls	r2, r3, #4
 8002fd6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fda:	4413      	add	r3, r2
 8002fdc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002fe0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ff6:	801a      	strh	r2, [r3, #0]
 8002ff8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ffc:	881b      	ldrh	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003004:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003008:	b29a      	uxth	r2, r3
 800300a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800300e:	801a      	strh	r2, [r3, #0]
 8003010:	e017      	b.n	8003042 <HAL_PCD_EP_DB_Transmit+0x52a>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	785b      	ldrb	r3, [r3, #1]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d113      	bne.n	8003042 <HAL_PCD_EP_DB_Transmit+0x52a>
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003022:	b29b      	uxth	r3, r3
 8003024:	461a      	mov	r2, r3
 8003026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003028:	4413      	add	r3, r2
 800302a:	67bb      	str	r3, [r7, #120]	; 0x78
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	011a      	lsls	r2, r3, #4
 8003032:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003034:	4413      	add	r3, r2
 8003036:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800303a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800303c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800303e:	2200      	movs	r2, #0
 8003040:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003042:	68bb      	ldr	r3, [r7, #8]
 8003044:	781b      	ldrb	r3, [r3, #0]
 8003046:	4619      	mov	r1, r3
 8003048:	68f8      	ldr	r0, [r7, #12]
 800304a:	f005 f99e 	bl	800838a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800304e:	88fb      	ldrh	r3, [r7, #6]
 8003050:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003054:	2b00      	cmp	r3, #0
 8003056:	f040 8104 	bne.w	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	461a      	mov	r2, r3
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4413      	add	r3, r2
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003070:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003074:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	441a      	add	r2, r3
 8003086:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800308a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800308e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003092:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003096:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800309a:	b29b      	uxth	r3, r3
 800309c:	8013      	strh	r3, [r2, #0]
 800309e:	e0e0      	b.n	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80030a0:	88fb      	ldrh	r3, [r7, #6]
 80030a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d121      	bne.n	80030ee <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	461a      	mov	r2, r3
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	781b      	ldrb	r3, [r3, #0]
 80030b4:	009b      	lsls	r3, r3, #2
 80030b6:	4413      	add	r3, r2
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	461a      	mov	r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	781b      	ldrb	r3, [r3, #0]
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	441a      	add	r2, r3
 80030d6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80030da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80030de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80030e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80030e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	f040 80b4 	bne.w	8003262 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	695a      	ldr	r2, [r3, #20]
 80030fe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003102:	441a      	add	r2, r3
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003110:	441a      	add	r2, r3
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	6a1a      	ldr	r2, [r3, #32]
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	691b      	ldr	r3, [r3, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	d309      	bcc.n	8003136 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	6a1a      	ldr	r2, [r3, #32]
 800312c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800312e:	1ad2      	subs	r2, r2, r3
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	621a      	str	r2, [r3, #32]
 8003134:	e015      	b.n	8003162 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8003136:	68bb      	ldr	r3, [r7, #8]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d107      	bne.n	800314e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800313e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003142:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	2200      	movs	r2, #0
 8003148:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800314c:	e009      	b.n	8003162 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2200      	movs	r2, #0
 8003158:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2200      	movs	r2, #0
 800315e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	667b      	str	r3, [r7, #100]	; 0x64
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	785b      	ldrb	r3, [r3, #1]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d155      	bne.n	800321c <HAL_PCD_EP_DB_Transmit+0x704>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800317e:	b29b      	uxth	r3, r3
 8003180:	461a      	mov	r2, r3
 8003182:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003184:	4413      	add	r3, r2
 8003186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	781b      	ldrb	r3, [r3, #0]
 800318c:	011a      	lsls	r2, r3, #4
 800318e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003190:	4413      	add	r3, r2
 8003192:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003196:	65bb      	str	r3, [r7, #88]	; 0x58
 8003198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800319a:	2b00      	cmp	r3, #0
 800319c:	d112      	bne.n	80031c4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800319e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031a0:	881b      	ldrh	r3, [r3, #0]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ac:	801a      	strh	r2, [r3, #0]
 80031ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	b29b      	uxth	r3, r3
 80031b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031bc:	b29a      	uxth	r2, r3
 80031be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031c0:	801a      	strh	r2, [r3, #0]
 80031c2:	e044      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x736>
 80031c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031c6:	2b3e      	cmp	r3, #62	; 0x3e
 80031c8:	d811      	bhi.n	80031ee <HAL_PCD_EP_DB_Transmit+0x6d6>
 80031ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031cc:	085b      	lsrs	r3, r3, #1
 80031ce:	657b      	str	r3, [r7, #84]	; 0x54
 80031d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d002      	beq.n	80031e0 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80031da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031dc:	3301      	adds	r3, #1
 80031de:	657b      	str	r3, [r7, #84]	; 0x54
 80031e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	029b      	lsls	r3, r3, #10
 80031e6:	b29a      	uxth	r2, r3
 80031e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80031ea:	801a      	strh	r2, [r3, #0]
 80031ec:	e02f      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x736>
 80031ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f0:	095b      	lsrs	r3, r3, #5
 80031f2:	657b      	str	r3, [r7, #84]	; 0x54
 80031f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031f6:	f003 031f 	and.w	r3, r3, #31
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d102      	bne.n	8003204 <HAL_PCD_EP_DB_Transmit+0x6ec>
 80031fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003200:	3b01      	subs	r3, #1
 8003202:	657b      	str	r3, [r7, #84]	; 0x54
 8003204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003206:	b29b      	uxth	r3, r3
 8003208:	029b      	lsls	r3, r3, #10
 800320a:	b29b      	uxth	r3, r3
 800320c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003214:	b29a      	uxth	r2, r3
 8003216:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003218:	801a      	strh	r2, [r3, #0]
 800321a:	e018      	b.n	800324e <HAL_PCD_EP_DB_Transmit+0x736>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	785b      	ldrb	r3, [r3, #1]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d114      	bne.n	800324e <HAL_PCD_EP_DB_Transmit+0x736>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800322c:	b29b      	uxth	r3, r3
 800322e:	461a      	mov	r2, r3
 8003230:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003232:	4413      	add	r3, r2
 8003234:	667b      	str	r3, [r7, #100]	; 0x64
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	011a      	lsls	r2, r3, #4
 800323c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800323e:	4413      	add	r3, r2
 8003240:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003244:	663b      	str	r3, [r7, #96]	; 0x60
 8003246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003248:	b29a      	uxth	r2, r3
 800324a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800324c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6818      	ldr	r0, [r3, #0]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	6959      	ldr	r1, [r3, #20]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	895a      	ldrh	r2, [r3, #10]
 800325a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800325c:	b29b      	uxth	r3, r3
 800325e:	f003 fa45 	bl	80066ec <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	b29b      	uxth	r3, r3
 8003274:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003278:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800327c:	823b      	strh	r3, [r7, #16]
 800327e:	8a3b      	ldrh	r3, [r7, #16]
 8003280:	f083 0310 	eor.w	r3, r3, #16
 8003284:	823b      	strh	r3, [r7, #16]
 8003286:	8a3b      	ldrh	r3, [r7, #16]
 8003288:	f083 0320 	eor.w	r3, r3, #32
 800328c:	823b      	strh	r3, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	461a      	mov	r2, r3
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	441a      	add	r2, r3
 800329c:	8a3b      	ldrh	r3, [r7, #16]
 800329e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80032a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80032a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80032aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80032b2:	2300      	movs	r3, #0
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3788      	adds	r7, #136	; 0x88
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607b      	str	r3, [r7, #4]
 80032c6:	460b      	mov	r3, r1
 80032c8:	817b      	strh	r3, [r7, #10]
 80032ca:	4613      	mov	r3, r2
 80032cc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d00b      	beq.n	80032f2 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032da:	897b      	ldrh	r3, [r7, #10]
 80032dc:	f003 0307 	and.w	r3, r3, #7
 80032e0:	1c5a      	adds	r2, r3, #1
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	00db      	lsls	r3, r3, #3
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4413      	add	r3, r2
 80032ee:	617b      	str	r3, [r7, #20]
 80032f0:	e009      	b.n	8003306 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032f2:	897a      	ldrh	r2, [r7, #10]
 80032f4:	4613      	mov	r3, r2
 80032f6:	009b      	lsls	r3, r3, #2
 80032f8:	4413      	add	r3, r2
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	4413      	add	r3, r2
 8003304:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8003306:	893b      	ldrh	r3, [r7, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d107      	bne.n	800331c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	2200      	movs	r2, #0
 8003310:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	b29a      	uxth	r2, r3
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	80da      	strh	r2, [r3, #6]
 800331a:	e00b      	b.n	8003334 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2201      	movs	r2, #1
 8003320:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	b29a      	uxth	r2, r3
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	0c1b      	lsrs	r3, r3, #16
 800332e:	b29a      	uxth	r2, r3
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bc80      	pop	{r7}
 800333e:	4770      	bx	lr

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e272      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003360:	4b92      	ldr	r3, [pc, #584]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b04      	cmp	r3, #4
 800336a:	d00c      	beq.n	8003386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800336c:	4b8f      	ldr	r3, [pc, #572]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d112      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
 8003378:	4b8c      	ldr	r3, [pc, #560]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003384:	d10b      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d06c      	beq.n	800346c <HAL_RCC_OscConfig+0x12c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d168      	bne.n	800346c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e24c      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x76>
 80033a8:	4b80      	ldr	r3, [pc, #512]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7f      	ldr	r2, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e02e      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b7b      	ldr	r3, [pc, #492]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b78      	ldr	r3, [pc, #480]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a77      	ldr	r2, [pc, #476]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0xbc>
 80033e2:	4b72      	ldr	r3, [pc, #456]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a71      	ldr	r2, [pc, #452]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6e      	ldr	r2, [pc, #440]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033fc:	4b6b      	ldr	r3, [pc, #428]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6a      	ldr	r2, [pc, #424]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b68      	ldr	r3, [pc, #416]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a67      	ldr	r2, [pc, #412]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe f9b6 	bl	800178c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe f9b2 	bl	800178c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e200      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5d      	ldr	r3, [pc, #372]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xe4>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe f9a2 	bl	800178c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe f99e 	bl	800178c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	; 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1ec      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b53      	ldr	r3, [pc, #332]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x10c>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347a:	4b4c      	ldr	r3, [pc, #304]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003486:	4b49      	ldr	r3, [pc, #292]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b43      	ldr	r3, [pc, #268]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c0      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4939      	ldr	r1, [pc, #228]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b36      	ldr	r3, [pc, #216]	; (80035b0 <HAL_RCC_OscConfig+0x270>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe f957 	bl	800178c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe f953 	bl	800178c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a1      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2d      	ldr	r3, [pc, #180]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b2a      	ldr	r3, [pc, #168]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4927      	ldr	r1, [pc, #156]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b26      	ldr	r3, [pc, #152]	; (80035b0 <HAL_RCC_OscConfig+0x270>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe f936 	bl	800178c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe f932 	bl	800178c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e180      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1d      	ldr	r3, [pc, #116]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03a      	beq.n	80035c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b17      	ldr	r3, [pc, #92]	; (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe f916 	bl	800178c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe f912 	bl	800178c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e160      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0d      	ldr	r3, [pc, #52]	; (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f000 faa6 	bl	8003ad4 <RCC_Delay>
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358a:	4b0a      	ldr	r3, [pc, #40]	; (80035b4 <HAL_RCC_OscConfig+0x274>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe f8fc 	bl	800178c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003596:	e00f      	b.n	80035b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe f8f8 	bl	800178c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d908      	bls.n	80035b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e146      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	42420000 	.word	0x42420000
 80035b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b92      	ldr	r3, [pc, #584]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e9      	bne.n	8003598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a6 	beq.w	800371e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b8b      	ldr	r3, [pc, #556]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b88      	ldr	r3, [pc, #544]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a87      	ldr	r2, [pc, #540]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]
 80035ee:	4b85      	ldr	r3, [pc, #532]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b82      	ldr	r3, [pc, #520]	; (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b7f      	ldr	r3, [pc, #508]	; (8003808 <HAL_RCC_OscConfig+0x4c8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	; (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe f8b9 	bl	800178c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe f8b5 	bl	800178c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	; 0x64
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e103      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b75      	ldr	r3, [pc, #468]	; (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x312>
 8003644:	4b6f      	ldr	r3, [pc, #444]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a6e      	ldr	r2, [pc, #440]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e02d      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x334>
 800365a:	4b6a      	ldr	r3, [pc, #424]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a69      	ldr	r2, [pc, #420]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4b67      	ldr	r3, [pc, #412]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a66      	ldr	r2, [pc, #408]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e01c      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x356>
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a60      	ldr	r2, [pc, #384]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	4b5e      	ldr	r3, [pc, #376]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a5d      	ldr	r2, [pc, #372]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	e00b      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003696:	4b5b      	ldr	r3, [pc, #364]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	4b58      	ldr	r3, [pc, #352]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a57      	ldr	r2, [pc, #348]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d015      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7fe f869 	bl	800178c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe f865 	bl	800178c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b1      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	4b4b      	ldr	r3, [pc, #300]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <HAL_RCC_OscConfig+0x37e>
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe f853 	bl	800178c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe f84f 	bl	800178c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e09b      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	4b40      	ldr	r3, [pc, #256]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b3c      	ldr	r3, [pc, #240]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4a3b      	ldr	r2, [pc, #236]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003728:	4b36      	ldr	r3, [pc, #216]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d061      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d146      	bne.n	80037ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373c:	4b33      	ldr	r3, [pc, #204]	; (800380c <HAL_RCC_OscConfig+0x4cc>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe f823 	bl	800178c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe f81f 	bl	800178c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e06d      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	4b29      	ldr	r3, [pc, #164]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003770:	d108      	bne.n	8003784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003772:	4b24      	ldr	r3, [pc, #144]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4921      	ldr	r1, [pc, #132]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003784:	4b1f      	ldr	r3, [pc, #124]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a19      	ldr	r1, [r3, #32]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003794:	430b      	orrs	r3, r1
 8003796:	491b      	ldr	r1, [pc, #108]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4cc>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fd fff3 	bl	800178c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fd ffef 	bl	800178c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e03d      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	4b11      	ldr	r3, [pc, #68]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x46a>
 80037c8:	e035      	b.n	8003836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	; (800380c <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fd ffdc 	bl	800178c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fd ffd8 	bl	800178c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e026      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	; (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x498>
 80037f6:	e01e      	b.n	8003836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e019      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
 800380c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_OscConfig+0x500>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0d0      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b6a      	ldr	r3, [pc, #424]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b67      	ldr	r3, [pc, #412]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4965      	ldr	r1, [pc, #404]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b63      	ldr	r3, [pc, #396]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b8      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a0:	4b59      	ldr	r3, [pc, #356]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b8:	4b53      	ldr	r3, [pc, #332]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b50      	ldr	r3, [pc, #320]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	494d      	ldr	r1, [pc, #308]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d040      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e073      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3d      	ldr	r3, [pc, #244]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06b      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b39      	ldr	r3, [pc, #228]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4936      	ldr	r1, [pc, #216]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fd ff2a 	bl	800178c <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fd ff26 	bl	800178c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	; 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e053      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b27      	ldr	r3, [pc, #156]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d210      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4922      	ldr	r1, [pc, #136]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b20      	ldr	r3, [pc, #128]	; (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e032      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b19      	ldr	r3, [pc, #100]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4916      	ldr	r1, [pc, #88]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039be:	4b12      	ldr	r3, [pc, #72]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	490e      	ldr	r1, [pc, #56]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d2:	f000 f821 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	490a      	ldr	r1, [pc, #40]	; (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	5ccb      	ldrb	r3, [r1, r3]
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a09      	ldr	r2, [pc, #36]	; (8003a10 <HAL_RCC_ClockConfig+0x1cc>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ee:	4b09      	ldr	r3, [pc, #36]	; (8003a14 <HAL_RCC_ClockConfig+0x1d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd fe9a 	bl	800172c <HAL_InitTick>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	08008900 	.word	0x08008900
 8003a10:	20000034 	.word	0x20000034
 8003a14:	20000038 	.word	0x20000038

08003a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b490      	push	{r4, r7}
 8003a1a:	b08a      	sub	sp, #40	; 0x28
 8003a1c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_GetSysClockFreq+0xac>)
 8003a20:	1d3c      	adds	r4, r7, #4
 8003a22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a24:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a28:	f240 2301 	movw	r3, #513	; 0x201
 8003a2c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
 8003a32:	2300      	movs	r3, #0
 8003a34:	61bb      	str	r3, [r7, #24]
 8003a36:	2300      	movs	r3, #0
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a42:	4b21      	ldr	r3, [pc, #132]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	f003 030c 	and.w	r3, r3, #12
 8003a4e:	2b04      	cmp	r3, #4
 8003a50:	d002      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0x40>
 8003a52:	2b08      	cmp	r3, #8
 8003a54:	d003      	beq.n	8003a5e <HAL_RCC_GetSysClockFreq+0x46>
 8003a56:	e02b      	b.n	8003ab0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a58:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a5a:	623b      	str	r3, [r7, #32]
      break;
 8003a5c:	e02b      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	0c9b      	lsrs	r3, r3, #18
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	3328      	adds	r3, #40	; 0x28
 8003a68:	443b      	add	r3, r7
 8003a6a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a6e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a7a:	4b13      	ldr	r3, [pc, #76]	; (8003ac8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	0c5b      	lsrs	r3, r3, #17
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	3328      	adds	r3, #40	; 0x28
 8003a86:	443b      	add	r3, r7
 8003a88:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a8c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a0e      	ldr	r2, [pc, #56]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a92:	fb03 f202 	mul.w	r2, r3, r2
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a9c:	627b      	str	r3, [r7, #36]	; 0x24
 8003a9e:	e004      	b.n	8003aaa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	4a0b      	ldr	r2, [pc, #44]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aa4:	fb02 f303 	mul.w	r3, r2, r3
 8003aa8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aac:	623b      	str	r3, [r7, #32]
      break;
 8003aae:	e002      	b.n	8003ab6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab0:	4b06      	ldr	r3, [pc, #24]	; (8003acc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003ab2:	623b      	str	r3, [r7, #32]
      break;
 8003ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3728      	adds	r7, #40	; 0x28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bc90      	pop	{r4, r7}
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop
 8003ac4:	080088a8 	.word	0x080088a8
 8003ac8:	40021000 	.word	0x40021000
 8003acc:	007a1200 	.word	0x007a1200
 8003ad0:	003d0900 	.word	0x003d0900

08003ad4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b085      	sub	sp, #20
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003adc:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <RCC_Delay+0x34>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0a      	ldr	r2, [pc, #40]	; (8003b0c <RCC_Delay+0x38>)
 8003ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ae6:	0a5b      	lsrs	r3, r3, #9
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003af0:	bf00      	nop
  }
  while (Delay --);
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	1e5a      	subs	r2, r3, #1
 8003af6:	60fa      	str	r2, [r7, #12]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d1f9      	bne.n	8003af0 <RCC_Delay+0x1c>
}
 8003afc:	bf00      	nop
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bc80      	pop	{r7}
 8003b06:	4770      	bx	lr
 8003b08:	20000034 	.word	0x20000034
 8003b0c:	10624dd3 	.word	0x10624dd3

08003b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0301 	and.w	r3, r3, #1
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d07d      	beq.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b32:	69db      	ldr	r3, [r3, #28]
 8003b34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10d      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b3c:	4b4c      	ldr	r3, [pc, #304]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b3e:	69db      	ldr	r3, [r3, #28]
 8003b40:	4a4b      	ldr	r2, [pc, #300]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b46:	61d3      	str	r3, [r2, #28]
 8003b48:	4b49      	ldr	r3, [pc, #292]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b4a:	69db      	ldr	r3, [r3, #28]
 8003b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b50:	60bb      	str	r3, [r7, #8]
 8003b52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b46      	ldr	r3, [pc, #280]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d118      	bne.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b64:	4b43      	ldr	r3, [pc, #268]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a42      	ldr	r2, [pc, #264]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b70:	f7fd fe0c 	bl	800178c <HAL_GetTick>
 8003b74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b76:	e008      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b78:	f7fd fe08 	bl	800178c <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b64      	cmp	r3, #100	; 0x64
 8003b84:	d901      	bls.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8003b86:	2303      	movs	r3, #3
 8003b88:	e06d      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b8a:	4b3a      	ldr	r3, [pc, #232]	; (8003c74 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d0f0      	beq.n	8003b78 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b96:	4b36      	ldr	r3, [pc, #216]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b9e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d02e      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bae:	68fa      	ldr	r2, [r7, #12]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d027      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bb4:	4b2e      	ldr	r3, [pc, #184]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bbe:	4b2e      	ldr	r3, [pc, #184]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	; (8003c78 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003bca:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	f003 0301 	and.w	r3, r3, #1
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d014      	beq.n	8003c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bda:	f7fd fdd7 	bl	800178c <HAL_GetTick>
 8003bde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be0:	e00a      	b.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be2:	f7fd fdd3 	bl	800178c <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d901      	bls.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003bf4:	2303      	movs	r3, #3
 8003bf6:	e036      	b.n	8003c66 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf8:	4b1d      	ldr	r3, [pc, #116]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ee      	beq.n	8003be2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c04:	4b1a      	ldr	r3, [pc, #104]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	4917      	ldr	r1, [pc, #92]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c16:	7dfb      	ldrb	r3, [r7, #23]
 8003c18:	2b01      	cmp	r3, #1
 8003c1a:	d105      	bne.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c1c:	4b14      	ldr	r3, [pc, #80]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	4a13      	ldr	r2, [pc, #76]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c26:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d008      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c34:	4b0e      	ldr	r3, [pc, #56]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	490b      	ldr	r1, [pc, #44]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d008      	beq.n	8003c64 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c52:	4b07      	ldr	r3, [pc, #28]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	4904      	ldr	r1, [pc, #16]	; (8003c70 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
 8003c6e:	bf00      	nop
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40007000 	.word	0x40007000
 8003c78:	42420440 	.word	0x42420440

08003c7c <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003c7c:	b084      	sub	sp, #16
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	f107 0014 	add.w	r0, r7, #20
 8003c8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8003c8e:	2300      	movs	r3, #0
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	370c      	adds	r7, #12
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bc80      	pop	{r7}
 8003c98:	b004      	add	sp, #16
 8003c9a:	4770      	bx	lr

08003c9c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cac:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cb0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	b29a      	uxth	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cbc:	2300      	movs	r3, #0
}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3714      	adds	r7, #20
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bc80      	pop	{r7}
 8003cc6:	4770      	bx	lr

08003cc8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8003cd0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8003cd4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	43db      	mvns	r3, r3
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3714      	adds	r7, #20
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	370c      	adds	r7, #12
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr

08003d14 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8003d14:	b084      	sub	sp, #16
 8003d16:	b480      	push	{r7}
 8003d18:	b083      	sub	sp, #12
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
 8003d1e:	f107 0014 	add.w	r0, r7, #20
 8003d22:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2200      	movs	r2, #0
 8003d32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bc80      	pop	{r7}
 8003d50:	b004      	add	sp, #16
 8003d52:	4770      	bx	lr

08003d54 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b09b      	sub	sp, #108	; 0x6c
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	4413      	add	r3, r2
 8003d6e:	881b      	ldrh	r3, [r3, #0]
 8003d70:	b29b      	uxth	r3, r3
 8003d72:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8003d76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d7a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	78db      	ldrb	r3, [r3, #3]
 8003d82:	2b03      	cmp	r3, #3
 8003d84:	d81f      	bhi.n	8003dc6 <USB_ActivateEndpoint+0x72>
 8003d86:	a201      	add	r2, pc, #4	; (adr r2, 8003d8c <USB_ActivateEndpoint+0x38>)
 8003d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d8c:	08003d9d 	.word	0x08003d9d
 8003d90:	08003db9 	.word	0x08003db9
 8003d94:	08003dcf 	.word	0x08003dcf
 8003d98:	08003dab 	.word	0x08003dab
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8003d9c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003da4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003da8:	e012      	b.n	8003dd0 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8003daa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dae:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8003db2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003db6:	e00b      	b.n	8003dd0 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8003db8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dbc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dc0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8003dc4:	e004      	b.n	8003dd0 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8003dcc:	e000      	b.n	8003dd0 <USB_ActivateEndpoint+0x7c>
      break;
 8003dce:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	781b      	ldrb	r3, [r3, #0]
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	441a      	add	r2, r3
 8003dda:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8003dde:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003de2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003de6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dee:	b29b      	uxth	r3, r3
 8003df0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	781b      	ldrb	r3, [r3, #0]
 8003df8:	009b      	lsls	r3, r3, #2
 8003dfa:	4413      	add	r3, r2
 8003dfc:	881b      	ldrh	r3, [r3, #0]
 8003dfe:	b29b      	uxth	r3, r3
 8003e00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	4313      	orrs	r3, r2
 8003e12:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	781b      	ldrb	r3, [r3, #0]
 8003e1c:	009b      	lsls	r3, r3, #2
 8003e1e:	441a      	add	r2, r3
 8003e20:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003e24:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003e28:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003e2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	7b1b      	ldrb	r3, [r3, #12]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f040 8149 	bne.w	80040d4 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	f000 8084 	beq.w	8003f54 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	011a      	lsls	r2, r3, #4
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003e6e:	613b      	str	r3, [r7, #16]
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	88db      	ldrh	r3, [r3, #6]
 8003e74:	085b      	lsrs	r3, r3, #1
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	4413      	add	r3, r2
 8003e8a:	881b      	ldrh	r3, [r3, #0]
 8003e8c:	81fb      	strh	r3, [r7, #14]
 8003e8e:	89fb      	ldrh	r3, [r7, #14]
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01b      	beq.n	8003ed0 <USB_ActivateEndpoint+0x17c>
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	781b      	ldrb	r3, [r3, #0]
 8003e9e:	009b      	lsls	r3, r3, #2
 8003ea0:	4413      	add	r3, r2
 8003ea2:	881b      	ldrh	r3, [r3, #0]
 8003ea4:	b29b      	uxth	r3, r3
 8003ea6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eae:	81bb      	strh	r3, [r7, #12]
 8003eb0:	687a      	ldr	r2, [r7, #4]
 8003eb2:	683b      	ldr	r3, [r7, #0]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	009b      	lsls	r3, r3, #2
 8003eb8:	441a      	add	r2, r3
 8003eba:	89bb      	ldrh	r3, [r7, #12]
 8003ebc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003ec0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003ec4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ec8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8003ecc:	b29b      	uxth	r3, r3
 8003ece:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	78db      	ldrb	r3, [r3, #3]
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d020      	beq.n	8003f1a <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	4413      	add	r3, r2
 8003ee2:	881b      	ldrh	r3, [r3, #0]
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003eea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eee:	813b      	strh	r3, [r7, #8]
 8003ef0:	893b      	ldrh	r3, [r7, #8]
 8003ef2:	f083 0320 	eor.w	r3, r3, #32
 8003ef6:	813b      	strh	r3, [r7, #8]
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	009b      	lsls	r3, r3, #2
 8003f00:	441a      	add	r2, r3
 8003f02:	893b      	ldrh	r3, [r7, #8]
 8003f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	8013      	strh	r3, [r2, #0]
 8003f18:	e27f      	b.n	800441a <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	4413      	add	r3, r2
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f30:	817b      	strh	r3, [r7, #10]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	441a      	add	r2, r3
 8003f3c:	897b      	ldrh	r3, [r7, #10]
 8003f3e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003f42:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003f46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	8013      	strh	r3, [r2, #0]
 8003f52:	e262      	b.n	800441a <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	461a      	mov	r2, r3
 8003f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f64:	4413      	add	r3, r2
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	011a      	lsls	r2, r3, #4
 8003f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8003f76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	88db      	ldrh	r3, [r3, #6]
 8003f7c:	085b      	lsrs	r3, r3, #1
 8003f7e:	b29b      	uxth	r3, r3
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	b29a      	uxth	r2, r3
 8003f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f86:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	4413      	add	r3, r2
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	011a      	lsls	r2, r3, #4
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8003faa:	623b      	str	r3, [r7, #32]
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	691b      	ldr	r3, [r3, #16]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d112      	bne.n	8003fda <USB_ActivateEndpoint+0x286>
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	881b      	ldrh	r3, [r3, #0]
 8003fb8:	b29b      	uxth	r3, r3
 8003fba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	801a      	strh	r2, [r3, #0]
 8003fc4:	6a3b      	ldr	r3, [r7, #32]
 8003fc6:	881b      	ldrh	r3, [r3, #0]
 8003fc8:	b29b      	uxth	r3, r3
 8003fca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003fce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003fd2:	b29a      	uxth	r2, r3
 8003fd4:	6a3b      	ldr	r3, [r7, #32]
 8003fd6:	801a      	strh	r2, [r3, #0]
 8003fd8:	e02f      	b.n	800403a <USB_ActivateEndpoint+0x2e6>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	2b3e      	cmp	r3, #62	; 0x3e
 8003fe0:	d813      	bhi.n	800400a <USB_ActivateEndpoint+0x2b6>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	663b      	str	r3, [r7, #96]	; 0x60
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	691b      	ldr	r3, [r3, #16]
 8003fee:	f003 0301 	and.w	r3, r3, #1
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <USB_ActivateEndpoint+0x2a8>
 8003ff6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8003ffc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	029b      	lsls	r3, r3, #10
 8004002:	b29a      	uxth	r2, r3
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	801a      	strh	r2, [r3, #0]
 8004008:	e017      	b.n	800403a <USB_ActivateEndpoint+0x2e6>
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	095b      	lsrs	r3, r3, #5
 8004010:	663b      	str	r3, [r7, #96]	; 0x60
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 031f 	and.w	r3, r3, #31
 800401a:	2b00      	cmp	r3, #0
 800401c:	d102      	bne.n	8004024 <USB_ActivateEndpoint+0x2d0>
 800401e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004020:	3b01      	subs	r3, #1
 8004022:	663b      	str	r3, [r7, #96]	; 0x60
 8004024:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004026:	b29b      	uxth	r3, r3
 8004028:	029b      	lsls	r3, r3, #10
 800402a:	b29b      	uxth	r3, r3
 800402c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004030:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004034:	b29a      	uxth	r2, r3
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	009b      	lsls	r3, r3, #2
 8004042:	4413      	add	r3, r2
 8004044:	881b      	ldrh	r3, [r3, #0]
 8004046:	83fb      	strh	r3, [r7, #30]
 8004048:	8bfb      	ldrh	r3, [r7, #30]
 800404a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d01b      	beq.n	800408a <USB_ActivateEndpoint+0x336>
 8004052:	687a      	ldr	r2, [r7, #4]
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	009b      	lsls	r3, r3, #2
 800405a:	4413      	add	r3, r2
 800405c:	881b      	ldrh	r3, [r3, #0]
 800405e:	b29b      	uxth	r3, r3
 8004060:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	83bb      	strh	r3, [r7, #28]
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	441a      	add	r2, r3
 8004074:	8bbb      	ldrh	r3, [r7, #28]
 8004076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800407a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800407e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004086:	b29b      	uxth	r3, r3
 8004088:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	009b      	lsls	r3, r3, #2
 8004092:	4413      	add	r3, r2
 8004094:	881b      	ldrh	r3, [r3, #0]
 8004096:	b29b      	uxth	r3, r3
 8004098:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800409c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040a0:	837b      	strh	r3, [r7, #26]
 80040a2:	8b7b      	ldrh	r3, [r7, #26]
 80040a4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80040a8:	837b      	strh	r3, [r7, #26]
 80040aa:	8b7b      	ldrh	r3, [r7, #26]
 80040ac:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80040b0:	837b      	strh	r3, [r7, #26]
 80040b2:	687a      	ldr	r2, [r7, #4]
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	441a      	add	r2, r3
 80040bc:	8b7b      	ldrh	r3, [r7, #26]
 80040be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80040c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80040c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	8013      	strh	r3, [r2, #0]
 80040d2:	e1a2      	b.n	800441a <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	781b      	ldrb	r3, [r3, #0]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	881b      	ldrh	r3, [r3, #0]
 80040e0:	b29b      	uxth	r3, r3
 80040e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040ea:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	441a      	add	r2, r3
 80040f8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80040fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004100:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004104:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004108:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800410c:	b29b      	uxth	r3, r3
 800410e:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	65bb      	str	r3, [r7, #88]	; 0x58
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800411a:	b29b      	uxth	r3, r3
 800411c:	461a      	mov	r2, r3
 800411e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004120:	4413      	add	r3, r2
 8004122:	65bb      	str	r3, [r7, #88]	; 0x58
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	781b      	ldrb	r3, [r3, #0]
 8004128:	011a      	lsls	r2, r3, #4
 800412a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800412c:	4413      	add	r3, r2
 800412e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004132:	657b      	str	r3, [r7, #84]	; 0x54
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	891b      	ldrh	r3, [r3, #8]
 8004138:	085b      	lsrs	r3, r3, #1
 800413a:	b29b      	uxth	r3, r3
 800413c:	005b      	lsls	r3, r3, #1
 800413e:	b29a      	uxth	r2, r3
 8004140:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004142:	801a      	strh	r2, [r3, #0]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	653b      	str	r3, [r7, #80]	; 0x50
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800414e:	b29b      	uxth	r3, r3
 8004150:	461a      	mov	r2, r3
 8004152:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004154:	4413      	add	r3, r2
 8004156:	653b      	str	r3, [r7, #80]	; 0x50
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	781b      	ldrb	r3, [r3, #0]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004160:	4413      	add	r3, r2
 8004162:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	895b      	ldrh	r3, [r3, #10]
 800416c:	085b      	lsrs	r3, r3, #1
 800416e:	b29b      	uxth	r3, r3
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	b29a      	uxth	r2, r3
 8004174:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004176:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	785b      	ldrb	r3, [r3, #1]
 800417c:	2b00      	cmp	r3, #0
 800417e:	f040 8091 	bne.w	80042a4 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	009b      	lsls	r3, r3, #2
 800418a:	4413      	add	r3, r2
 800418c:	881b      	ldrh	r3, [r3, #0]
 800418e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004190:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d01b      	beq.n	80041d2 <USB_ActivateEndpoint+0x47e>
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	009b      	lsls	r3, r3, #2
 80041a2:	4413      	add	r3, r2
 80041a4:	881b      	ldrh	r3, [r3, #0]
 80041a6:	b29b      	uxth	r3, r3
 80041a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041b0:	877b      	strh	r3, [r7, #58]	; 0x3a
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	441a      	add	r2, r3
 80041bc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80041be:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80041c2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80041c6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80041ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80041ce:	b29b      	uxth	r3, r3
 80041d0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	873b      	strh	r3, [r7, #56]	; 0x38
 80041e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80041e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d01b      	beq.n	8004222 <USB_ActivateEndpoint+0x4ce>
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	009b      	lsls	r3, r3, #2
 80041f2:	4413      	add	r3, r2
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004200:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004202:	687a      	ldr	r2, [r7, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	009b      	lsls	r3, r3, #2
 800420a:	441a      	add	r2, r3
 800420c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800420e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004212:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800421a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800421e:	b29b      	uxth	r3, r3
 8004220:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	4413      	add	r3, r2
 800422c:	881b      	ldrh	r3, [r3, #0]
 800422e:	b29b      	uxth	r3, r3
 8004230:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004234:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004238:	86bb      	strh	r3, [r7, #52]	; 0x34
 800423a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800423c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004240:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004242:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004244:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004248:	86bb      	strh	r3, [r7, #52]	; 0x34
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	441a      	add	r2, r3
 8004254:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004256:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800425a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800425e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004262:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004266:	b29b      	uxth	r3, r3
 8004268:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	4413      	add	r3, r2
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	b29b      	uxth	r3, r3
 8004278:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800427c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004280:	867b      	strh	r3, [r7, #50]	; 0x32
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800428e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800429e:	b29b      	uxth	r3, r3
 80042a0:	8013      	strh	r3, [r2, #0]
 80042a2:	e0ba      	b.n	800441a <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80042a4:	687a      	ldr	r2, [r7, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	881b      	ldrh	r3, [r3, #0]
 80042b0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 80042b4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 80042b8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d01d      	beq.n	80042fc <USB_ActivateEndpoint+0x5a8>
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	009b      	lsls	r3, r3, #2
 80042c8:	4413      	add	r3, r2
 80042ca:	881b      	ldrh	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	441a      	add	r2, r3
 80042e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80042e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80042ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80042f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042fc:	687a      	ldr	r2, [r7, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800430c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004314:	2b00      	cmp	r3, #0
 8004316:	d01d      	beq.n	8004354 <USB_ActivateEndpoint+0x600>
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	4413      	add	r3, r2
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b29b      	uxth	r3, r3
 8004326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	441a      	add	r2, r3
 800433c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004340:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004344:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004348:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800434c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004350:	b29b      	uxth	r3, r3
 8004352:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	78db      	ldrb	r3, [r3, #3]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d024      	beq.n	80043a6 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	781b      	ldrb	r3, [r3, #0]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	881b      	ldrh	r3, [r3, #0]
 8004368:	b29b      	uxth	r3, r3
 800436a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800436e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004372:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800437a:	f083 0320 	eor.w	r3, r3, #32
 800437e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	441a      	add	r2, r3
 800438c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004390:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004394:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800439c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	8013      	strh	r3, [r2, #0]
 80043a4:	e01d      	b.n	80043e2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	4413      	add	r3, r2
 80043b0:	881b      	ldrh	r3, [r3, #0]
 80043b2:	b29b      	uxth	r3, r3
 80043b4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043bc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	009b      	lsls	r3, r3, #2
 80043c8:	441a      	add	r2, r3
 80043ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80043ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043de:	b29b      	uxth	r3, r3
 80043e0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4413      	add	r3, r2
 80043ec:	881b      	ldrh	r3, [r3, #0]
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80043f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	441a      	add	r2, r3
 8004404:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004406:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800440a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800440e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004416:	b29b      	uxth	r3, r3
 8004418:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 800441a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800441e:	4618      	mov	r0, r3
 8004420:	376c      	adds	r7, #108	; 0x6c
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr

08004428 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004428:	b480      	push	{r7}
 800442a:	b08d      	sub	sp, #52	; 0x34
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	7b1b      	ldrb	r3, [r3, #12]
 8004436:	2b00      	cmp	r3, #0
 8004438:	f040 808e 	bne.w	8004558 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	785b      	ldrb	r3, [r3, #1]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d044      	beq.n	80044ce <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004444:	687a      	ldr	r2, [r7, #4]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	4413      	add	r3, r2
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	81bb      	strh	r3, [r7, #12]
 8004452:	89bb      	ldrh	r3, [r7, #12]
 8004454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <USB_DeactivateEndpoint+0x6c>
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	4413      	add	r3, r2
 8004466:	881b      	ldrh	r3, [r3, #0]
 8004468:	b29b      	uxth	r3, r3
 800446a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800446e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004472:	817b      	strh	r3, [r7, #10]
 8004474:	687a      	ldr	r2, [r7, #4]
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	441a      	add	r2, r3
 800447e:	897b      	ldrh	r3, [r7, #10]
 8004480:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004484:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004488:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800448c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004490:	b29b      	uxth	r3, r3
 8004492:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	781b      	ldrb	r3, [r3, #0]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	4413      	add	r3, r2
 800449e:	881b      	ldrh	r3, [r3, #0]
 80044a0:	b29b      	uxth	r3, r3
 80044a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80044aa:	813b      	strh	r3, [r7, #8]
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	009b      	lsls	r3, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	893b      	ldrh	r3, [r7, #8]
 80044b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044c8:	b29b      	uxth	r3, r3
 80044ca:	8013      	strh	r3, [r2, #0]
 80044cc:	e192      	b.n	80047f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	009b      	lsls	r3, r3, #2
 80044d6:	4413      	add	r3, r2
 80044d8:	881b      	ldrh	r3, [r3, #0]
 80044da:	827b      	strh	r3, [r7, #18]
 80044dc:	8a7b      	ldrh	r3, [r7, #18]
 80044de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d01b      	beq.n	800451e <USB_DeactivateEndpoint+0xf6>
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	009b      	lsls	r3, r3, #2
 80044ee:	4413      	add	r3, r2
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fc:	823b      	strh	r3, [r7, #16]
 80044fe:	687a      	ldr	r2, [r7, #4]
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	441a      	add	r2, r3
 8004508:	8a3b      	ldrh	r3, [r7, #16]
 800450a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800450e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800451a:	b29b      	uxth	r3, r3
 800451c:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	4413      	add	r3, r2
 8004528:	881b      	ldrh	r3, [r3, #0]
 800452a:	b29b      	uxth	r3, r3
 800452c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	81fb      	strh	r3, [r7, #14]
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	009b      	lsls	r3, r3, #2
 800453e:	441a      	add	r2, r3
 8004540:	89fb      	ldrh	r3, [r7, #14]
 8004542:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004546:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800454a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	b29b      	uxth	r3, r3
 8004554:	8013      	strh	r3, [r2, #0]
 8004556:	e14d      	b.n	80047f4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	785b      	ldrb	r3, [r3, #1]
 800455c:	2b00      	cmp	r3, #0
 800455e:	f040 80a5 	bne.w	80046ac <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	009b      	lsls	r3, r3, #2
 800456a:	4413      	add	r3, r2
 800456c:	881b      	ldrh	r3, [r3, #0]
 800456e:	843b      	strh	r3, [r7, #32]
 8004570:	8c3b      	ldrh	r3, [r7, #32]
 8004572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004576:	2b00      	cmp	r3, #0
 8004578:	d01b      	beq.n	80045b2 <USB_DeactivateEndpoint+0x18a>
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	009b      	lsls	r3, r3, #2
 8004582:	4413      	add	r3, r2
 8004584:	881b      	ldrh	r3, [r3, #0]
 8004586:	b29b      	uxth	r3, r3
 8004588:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	83fb      	strh	r3, [r7, #30]
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	009b      	lsls	r3, r3, #2
 800459a:	441a      	add	r2, r3
 800459c:	8bfb      	ldrh	r3, [r7, #30]
 800459e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80045aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	009b      	lsls	r3, r3, #2
 80045ba:	4413      	add	r3, r2
 80045bc:	881b      	ldrh	r3, [r3, #0]
 80045be:	83bb      	strh	r3, [r7, #28]
 80045c0:	8bbb      	ldrh	r3, [r7, #28]
 80045c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d01b      	beq.n	8004602 <USB_DeactivateEndpoint+0x1da>
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	881b      	ldrh	r3, [r3, #0]
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80045dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045e0:	837b      	strh	r3, [r7, #26]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	441a      	add	r2, r3
 80045ec:	8b7b      	ldrh	r3, [r7, #26]
 80045ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80045f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045fa:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80045fe:	b29b      	uxth	r3, r3
 8004600:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	009b      	lsls	r3, r3, #2
 800460a:	4413      	add	r3, r2
 800460c:	881b      	ldrh	r3, [r3, #0]
 800460e:	b29b      	uxth	r3, r3
 8004610:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004614:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004618:	833b      	strh	r3, [r7, #24]
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	441a      	add	r2, r3
 8004624:	8b3b      	ldrh	r3, [r7, #24]
 8004626:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800462e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004632:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004636:	b29b      	uxth	r3, r3
 8004638:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	009b      	lsls	r3, r3, #2
 8004642:	4413      	add	r3, r2
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800464c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004650:	82fb      	strh	r3, [r7, #22]
 8004652:	687a      	ldr	r2, [r7, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	781b      	ldrb	r3, [r3, #0]
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	441a      	add	r2, r3
 800465c:	8afb      	ldrh	r3, [r7, #22]
 800465e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004662:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800466a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800466e:	b29b      	uxth	r3, r3
 8004670:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	781b      	ldrb	r3, [r3, #0]
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4413      	add	r3, r2
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	b29b      	uxth	r3, r3
 8004680:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004684:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004688:	82bb      	strh	r3, [r7, #20]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	441a      	add	r2, r3
 8004694:	8abb      	ldrh	r3, [r7, #20]
 8004696:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800469a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	8013      	strh	r3, [r2, #0]
 80046aa:	e0a3      	b.n	80047f4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	009b      	lsls	r3, r3, #2
 80046b4:	4413      	add	r3, r2
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80046ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80046bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d01b      	beq.n	80046fc <USB_DeactivateEndpoint+0x2d4>
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	781b      	ldrb	r3, [r3, #0]
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	4413      	add	r3, r2
 80046ce:	881b      	ldrh	r3, [r3, #0]
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046da:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	781b      	ldrb	r3, [r3, #0]
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	441a      	add	r2, r3
 80046e6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80046e8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046ec:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046f8:	b29b      	uxth	r3, r3
 80046fa:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80046fc:	687a      	ldr	r2, [r7, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	4413      	add	r3, r2
 8004706:	881b      	ldrh	r3, [r3, #0]
 8004708:	857b      	strh	r3, [r7, #42]	; 0x2a
 800470a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800470c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004710:	2b00      	cmp	r3, #0
 8004712:	d01b      	beq.n	800474c <USB_DeactivateEndpoint+0x324>
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	4413      	add	r3, r2
 800471e:	881b      	ldrh	r3, [r3, #0]
 8004720:	b29b      	uxth	r3, r3
 8004722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472a:	853b      	strh	r3, [r7, #40]	; 0x28
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	441a      	add	r2, r3
 8004736:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004738:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800473c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004740:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004744:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004748:	b29b      	uxth	r3, r3
 800474a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	781b      	ldrb	r3, [r3, #0]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4413      	add	r3, r2
 8004756:	881b      	ldrh	r3, [r3, #0]
 8004758:	b29b      	uxth	r3, r3
 800475a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800475e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004762:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	441a      	add	r2, r3
 800476e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004770:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004774:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004778:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800477c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004780:	b29b      	uxth	r3, r3
 8004782:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800479a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	441a      	add	r2, r3
 80047a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047b8:	b29b      	uxth	r3, r3
 80047ba:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	847b      	strh	r3, [r7, #34]	; 0x22
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3734      	adds	r7, #52	; 0x34
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bc80      	pop	{r7}
 80047fe:	4770      	bx	lr

08004800 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b0cc      	sub	sp, #304	; 0x130
 8004804:	af00      	add	r7, sp, #0
 8004806:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800480a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800480e:	6018      	str	r0, [r3, #0]
 8004810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004814:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004818:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800481a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800481e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	785b      	ldrb	r3, [r3, #1]
 8004826:	2b01      	cmp	r3, #1
 8004828:	f041 817d 	bne.w	8005b26 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800482c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004830:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	699a      	ldr	r2, [r3, #24]
 8004838:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800483c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	429a      	cmp	r2, r3
 8004846:	d908      	bls.n	800485a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004848:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800484c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004858:	e007      	b.n	800486a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 800485a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800485e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 800486a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800486e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	7b1b      	ldrb	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d152      	bne.n	8004920 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800487a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800487e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	6959      	ldr	r1, [r3, #20]
 8004886:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800488a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	88da      	ldrh	r2, [r3, #6]
 8004892:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004896:	b29b      	uxth	r3, r3
 8004898:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800489c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80048a0:	6800      	ldr	r0, [r0, #0]
 80048a2:	f001 ff23 	bl	80066ec <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80048a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048b2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80048b6:	6812      	ldr	r2, [r2, #0]
 80048b8:	601a      	str	r2, [r3, #0]
 80048ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	4619      	mov	r1, r3
 80048cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048d0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048d4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80048d8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80048dc:	6812      	ldr	r2, [r2, #0]
 80048de:	440a      	add	r2, r1
 80048e0:	601a      	str	r2, [r3, #0]
 80048e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	781b      	ldrb	r3, [r3, #0]
 80048ee:	011a      	lsls	r2, r3, #4
 80048f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80048f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004904:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004908:	601a      	str	r2, [r3, #0]
 800490a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800490e:	b29a      	uxth	r2, r3
 8004910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004914:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	801a      	strh	r2, [r3, #0]
 800491c:	f001 b8b5 	b.w	8005a8a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	78db      	ldrb	r3, [r3, #3]
 800492c:	2b02      	cmp	r3, #2
 800492e:	f040 84c6 	bne.w	80052be <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004932:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004936:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	6a1a      	ldr	r2, [r3, #32]
 800493e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	f240 8443 	bls.w	80051d6 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004954:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800495e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	009b      	lsls	r3, r3, #2
 8004968:	4413      	add	r3, r2
 800496a:	881b      	ldrh	r3, [r3, #0]
 800496c:	b29b      	uxth	r3, r3
 800496e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004976:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800497a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800497e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	441a      	add	r2, r3
 8004994:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004998:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80049a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80049ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049b0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	6a1a      	ldr	r2, [r3, #32]
 80049b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80049bc:	1ad2      	subs	r2, r2, r3
 80049be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80049ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049ce:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	009b      	lsls	r3, r3, #2
 80049e2:	4413      	add	r3, r2
 80049e4:	881b      	ldrh	r3, [r3, #0]
 80049e6:	b29b      	uxth	r3, r3
 80049e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 823e 	beq.w	8004e6e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80049f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80049f6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80049fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80049fe:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	785b      	ldrb	r3, [r3, #1]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f040 809a 	bne.w	8004b4c <USB_EPStartXfer+0x34c>
 8004a18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a1c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a20:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a24:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004a28:	6812      	ldr	r2, [r2, #0]
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	4619      	mov	r1, r3
 8004a3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a42:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004a4a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	440a      	add	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]
 8004a54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	781b      	ldrb	r3, [r3, #0]
 8004a60:	011a      	lsls	r2, r3, #4
 8004a62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a66:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004a72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a76:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a7a:	601a      	str	r2, [r3, #0]
 8004a7c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d122      	bne.n	8004aca <USB_EPStartXfer+0x2ca>
 8004a84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a88:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	b29b      	uxth	r3, r3
 8004a92:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004a9c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	801a      	strh	r2, [r3, #0]
 8004aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004aa8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004ab6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004aba:	b29a      	uxth	r2, r3
 8004abc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ac0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	801a      	strh	r2, [r3, #0]
 8004ac8:	e079      	b.n	8004bbe <USB_EPStartXfer+0x3be>
 8004aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ace:	2b3e      	cmp	r3, #62	; 0x3e
 8004ad0:	d81b      	bhi.n	8004b0a <USB_EPStartXfer+0x30a>
 8004ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ad6:	085b      	lsrs	r3, r3, #1
 8004ad8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004adc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ae0:	f003 0301 	and.w	r3, r3, #1
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d004      	beq.n	8004af2 <USB_EPStartXfer+0x2f2>
 8004ae8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004aec:	3301      	adds	r3, #1
 8004aee:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004af2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004af6:	b29b      	uxth	r3, r3
 8004af8:	029b      	lsls	r3, r3, #10
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b00:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	801a      	strh	r2, [r3, #0]
 8004b08:	e059      	b.n	8004bbe <USB_EPStartXfer+0x3be>
 8004b0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b0e:	095b      	lsrs	r3, r3, #5
 8004b10:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d104      	bne.n	8004b2a <USB_EPStartXfer+0x32a>
 8004b20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b24:	3b01      	subs	r3, #1
 8004b26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004b2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004b2e:	b29b      	uxth	r3, r3
 8004b30:	029b      	lsls	r3, r3, #10
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004b38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004b3c:	b29a      	uxth	r2, r3
 8004b3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b42:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	801a      	strh	r2, [r3, #0]
 8004b4a:	e038      	b.n	8004bbe <USB_EPStartXfer+0x3be>
 8004b4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d130      	bne.n	8004bbe <USB_EPStartXfer+0x3be>
 8004b5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b60:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	4619      	mov	r1, r3
 8004b6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b72:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b76:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004b7a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004b7e:	6812      	ldr	r2, [r2, #0]
 8004b80:	440a      	add	r2, r1
 8004b82:	601a      	str	r2, [r3, #0]
 8004b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	011a      	lsls	r2, r3, #4
 8004b92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004b96:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bb6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8004bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	895b      	ldrh	r3, [r3, #10]
 8004bca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004bce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	6959      	ldr	r1, [r3, #20]
 8004bda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004be4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004be8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f001 fd7d 	bl	80066ec <USB_WritePMA>
            ep->xfer_buff += len;
 8004bf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004bf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695a      	ldr	r2, [r3, #20]
 8004bfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c02:	441a      	add	r2, r3
 8004c04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8004c10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	6a1a      	ldr	r2, [r3, #32]
 8004c1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d90f      	bls.n	8004c4c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8004c2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c30:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6a1a      	ldr	r2, [r3, #32]
 8004c38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c42:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	621a      	str	r2, [r3, #32]
 8004c4a:	e00e      	b.n	8004c6a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8004c4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6a1b      	ldr	r3, [r3, #32]
 8004c58:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8004c5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	2200      	movs	r2, #0
 8004c68:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004c6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	785b      	ldrb	r3, [r3, #1]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	f040 809a 	bne.w	8004db0 <USB_EPStartXfer+0x5b0>
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004c84:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004c88:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004c8c:	6812      	ldr	r2, [r2, #0]
 8004c8e:	601a      	str	r2, [r3, #0]
 8004c90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004caa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004cae:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 8004cb2:	6812      	ldr	r2, [r2, #0]
 8004cb4:	440a      	add	r2, r1
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	011a      	lsls	r2, r3, #4
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cda:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d122      	bne.n	8004d2e <USB_EPStartXfer+0x52e>
 8004ce8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cec:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	881b      	ldrh	r3, [r3, #0]
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004cfa:	b29a      	uxth	r2, r3
 8004cfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d00:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	801a      	strh	r2, [r3, #0]
 8004d08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d0c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	881b      	ldrh	r3, [r3, #0]
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d1a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d24:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	801a      	strh	r2, [r3, #0]
 8004d2c:	e083      	b.n	8004e36 <USB_EPStartXfer+0x636>
 8004d2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d32:	2b3e      	cmp	r3, #62	; 0x3e
 8004d34:	d81b      	bhi.n	8004d6e <USB_EPStartXfer+0x56e>
 8004d36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d3a:	085b      	lsrs	r3, r3, #1
 8004d3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d004      	beq.n	8004d56 <USB_EPStartXfer+0x556>
 8004d4c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d50:	3301      	adds	r3, #1
 8004d52:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d56:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	029b      	lsls	r3, r3, #10
 8004d5e:	b29a      	uxth	r2, r3
 8004d60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d64:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	801a      	strh	r2, [r3, #0]
 8004d6c:	e063      	b.n	8004e36 <USB_EPStartXfer+0x636>
 8004d6e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d72:	095b      	lsrs	r3, r3, #5
 8004d74:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d78:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7c:	f003 031f 	and.w	r3, r3, #31
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <USB_EPStartXfer+0x58e>
 8004d84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8004d8e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	029b      	lsls	r3, r3, #10
 8004d96:	b29b      	uxth	r3, r3
 8004d98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004d9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	801a      	strh	r2, [r3, #0]
 8004dae:	e042      	b.n	8004e36 <USB_EPStartXfer+0x636>
 8004db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	785b      	ldrb	r3, [r3, #1]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d13a      	bne.n	8004e36 <USB_EPStartXfer+0x636>
 8004dc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dc8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004dcc:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004dd0:	6812      	ldr	r2, [r2, #0]
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dd8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	4619      	mov	r1, r3
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004dee:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004df2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	440a      	add	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	011a      	lsls	r2, r3, #4
 8004e0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e0e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4413      	add	r3, r2
 8004e16:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004e1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e28:	b29a      	uxth	r2, r3
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	891b      	ldrh	r3, [r3, #8]
 8004e42:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6959      	ldr	r1, [r3, #20]
 8004e52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004e5c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004e60:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004e64:	6800      	ldr	r0, [r0, #0]
 8004e66:	f001 fc41 	bl	80066ec <USB_WritePMA>
 8004e6a:	f000 be0e 	b.w	8005a8a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	785b      	ldrb	r3, [r3, #1]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d16d      	bne.n	8004f5a <USB_EPStartXfer+0x75a>
 8004e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004e98:	b29b      	uxth	r3, r3
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e9e:	4413      	add	r3, r2
 8004ea0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ea2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ea6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	011a      	lsls	r2, r3, #4
 8004eb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004eb8:	647b      	str	r3, [r7, #68]	; 0x44
 8004eba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d112      	bne.n	8004ee8 <USB_EPStartXfer+0x6e8>
 8004ec2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004ecc:	b29a      	uxth	r2, r3
 8004ece:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed0:	801a      	strh	r2, [r3, #0]
 8004ed2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ed4:	881b      	ldrh	r3, [r3, #0]
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004edc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ee4:	801a      	strh	r2, [r3, #0]
 8004ee6:	e063      	b.n	8004fb0 <USB_EPStartXfer+0x7b0>
 8004ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eec:	2b3e      	cmp	r3, #62	; 0x3e
 8004eee:	d817      	bhi.n	8004f20 <USB_EPStartXfer+0x720>
 8004ef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ef4:	085b      	lsrs	r3, r3, #1
 8004ef6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004efa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <USB_EPStartXfer+0x710>
 8004f06:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	029b      	lsls	r3, r3, #10
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f1c:	801a      	strh	r2, [r3, #0]
 8004f1e:	e047      	b.n	8004fb0 <USB_EPStartXfer+0x7b0>
 8004f20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f2e:	f003 031f 	and.w	r3, r3, #31
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d104      	bne.n	8004f40 <USB_EPStartXfer+0x740>
 8004f36:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8004f40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	029b      	lsls	r3, r3, #10
 8004f48:	b29b      	uxth	r3, r3
 8004f4a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f4e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f52:	b29a      	uxth	r2, r3
 8004f54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f56:	801a      	strh	r2, [r3, #0]
 8004f58:	e02a      	b.n	8004fb0 <USB_EPStartXfer+0x7b0>
 8004f5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	785b      	ldrb	r3, [r3, #1]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d122      	bne.n	8004fb0 <USB_EPStartXfer+0x7b0>
 8004f6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	653b      	str	r3, [r7, #80]	; 0x50
 8004f76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f7a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004f84:	b29b      	uxth	r3, r3
 8004f86:	461a      	mov	r2, r3
 8004f88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f8a:	4413      	add	r3, r2
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	011a      	lsls	r2, r3, #4
 8004f9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8004fa4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004faa:	b29a      	uxth	r2, r3
 8004fac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fae:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8004fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	891b      	ldrh	r3, [r3, #8]
 8004fbc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	6959      	ldr	r1, [r3, #20]
 8004fcc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8004fd6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004fda:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	f001 fb84 	bl	80066ec <USB_WritePMA>
            ep->xfer_buff += len;
 8004fe4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fe8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	695a      	ldr	r2, [r3, #20]
 8004ff0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004ff4:	441a      	add	r2, r3
 8004ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8005002:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005006:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a1a      	ldr	r2, [r3, #32]
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	429a      	cmp	r2, r3
 800501c:	d90f      	bls.n	800503e <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6a1a      	ldr	r2, [r3, #32]
 800502a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800502e:	1ad2      	subs	r2, r2, r3
 8005030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	621a      	str	r2, [r3, #32]
 800503c:	e00e      	b.n	800505c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800503e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005042:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	6a1b      	ldr	r3, [r3, #32]
 800504a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800504e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005052:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2200      	movs	r2, #0
 800505a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800505c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005060:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	643b      	str	r3, [r7, #64]	; 0x40
 8005068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800506c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	785b      	ldrb	r3, [r3, #1]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d16d      	bne.n	8005154 <USB_EPStartXfer+0x954>
 8005078:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
 8005084:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005088:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005092:	b29b      	uxth	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005098:	4413      	add	r3, r2
 800509a:	63bb      	str	r3, [r7, #56]	; 0x38
 800509c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	781b      	ldrb	r3, [r3, #0]
 80050a8:	011a      	lsls	r2, r3, #4
 80050aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ac:	4413      	add	r3, r2
 80050ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80050b2:	637b      	str	r3, [r7, #52]	; 0x34
 80050b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d112      	bne.n	80050e2 <USB_EPStartXfer+0x8e2>
 80050bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	b29b      	uxth	r3, r3
 80050c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	801a      	strh	r2, [r3, #0]
 80050cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	b29b      	uxth	r3, r3
 80050d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80050d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80050da:	b29a      	uxth	r2, r3
 80050dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050de:	801a      	strh	r2, [r3, #0]
 80050e0:	e05d      	b.n	800519e <USB_EPStartXfer+0x99e>
 80050e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050e6:	2b3e      	cmp	r3, #62	; 0x3e
 80050e8:	d817      	bhi.n	800511a <USB_EPStartXfer+0x91a>
 80050ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050ee:	085b      	lsrs	r3, r3, #1
 80050f0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80050f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050f8:	f003 0301 	and.w	r3, r3, #1
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d004      	beq.n	800510a <USB_EPStartXfer+0x90a>
 8005100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005104:	3301      	adds	r3, #1
 8005106:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800510a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800510e:	b29b      	uxth	r3, r3
 8005110:	029b      	lsls	r3, r3, #10
 8005112:	b29a      	uxth	r2, r3
 8005114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005116:	801a      	strh	r2, [r3, #0]
 8005118:	e041      	b.n	800519e <USB_EPStartXfer+0x99e>
 800511a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800511e:	095b      	lsrs	r3, r3, #5
 8005120:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005124:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005128:	f003 031f 	and.w	r3, r3, #31
 800512c:	2b00      	cmp	r3, #0
 800512e:	d104      	bne.n	800513a <USB_EPStartXfer+0x93a>
 8005130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005134:	3b01      	subs	r3, #1
 8005136:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800513a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800513e:	b29b      	uxth	r3, r3
 8005140:	029b      	lsls	r3, r3, #10
 8005142:	b29b      	uxth	r3, r3
 8005144:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005148:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800514c:	b29a      	uxth	r2, r3
 800514e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005150:	801a      	strh	r2, [r3, #0]
 8005152:	e024      	b.n	800519e <USB_EPStartXfer+0x99e>
 8005154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	785b      	ldrb	r3, [r3, #1]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d11c      	bne.n	800519e <USB_EPStartXfer+0x99e>
 8005164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005168:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005172:	b29b      	uxth	r3, r3
 8005174:	461a      	mov	r2, r3
 8005176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005178:	4413      	add	r3, r2
 800517a:	643b      	str	r3, [r7, #64]	; 0x40
 800517c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005180:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	011a      	lsls	r2, r3, #4
 800518a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800518c:	4413      	add	r3, r2
 800518e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005192:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005194:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005198:	b29a      	uxth	r2, r3
 800519a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800519c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800519e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	895b      	ldrh	r3, [r3, #10]
 80051aa:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80051ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	6959      	ldr	r1, [r3, #20]
 80051ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051be:	b29b      	uxth	r3, r3
 80051c0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80051c4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80051c8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80051cc:	6800      	ldr	r0, [r0, #0]
 80051ce:	f001 fa8d 	bl	80066ec <USB_WritePMA>
 80051d2:	f000 bc5a 	b.w	8005a8a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80051d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005208:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800520c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005214:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800521e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	441a      	add	r2, r3
 800522a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800522e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005232:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800523e:	b29b      	uxth	r3, r3
 8005240:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800524e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005252:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800525c:	b29b      	uxth	r3, r3
 800525e:	461a      	mov	r2, r3
 8005260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005262:	4413      	add	r3, r2
 8005264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005266:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	781b      	ldrb	r3, [r3, #0]
 8005272:	011a      	lsls	r2, r3, #4
 8005274:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005276:	4413      	add	r3, r2
 8005278:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800527c:	65bb      	str	r3, [r7, #88]	; 0x58
 800527e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005282:	b29a      	uxth	r2, r3
 8005284:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005286:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005288:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	891b      	ldrh	r3, [r3, #8]
 8005294:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005298:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6959      	ldr	r1, [r3, #20]
 80052a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052a8:	b29b      	uxth	r3, r3
 80052aa:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052ae:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052b2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052b6:	6800      	ldr	r0, [r0, #0]
 80052b8:	f001 fa18 	bl	80066ec <USB_WritePMA>
 80052bc:	e3e5      	b.n	8005a8a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80052be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	781b      	ldrb	r3, [r3, #0]
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	4413      	add	r3, r2
 80052d8:	881b      	ldrh	r3, [r3, #0]
 80052da:	b29b      	uxth	r3, r3
 80052dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052e4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 80052e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	441a      	add	r2, r3
 8005302:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005306:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800530a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800530e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005312:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005316:	b29b      	uxth	r3, r3
 8005318:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800531a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	6a1a      	ldr	r2, [r3, #32]
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	1ad2      	subs	r2, r2, r3
 800532c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005330:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800533c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	881b      	ldrh	r3, [r3, #0]
 8005354:	b29b      	uxth	r3, r3
 8005356:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800535a:	2b00      	cmp	r3, #0
 800535c:	f000 81bc 	beq.w	80056d8 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005364:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800536e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005372:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	785b      	ldrb	r3, [r3, #1]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d16d      	bne.n	800545a <USB_EPStartXfer+0xc5a>
 800537e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005382:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	67bb      	str	r3, [r7, #120]	; 0x78
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005398:	b29b      	uxth	r3, r3
 800539a:	461a      	mov	r2, r3
 800539c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800539e:	4413      	add	r3, r2
 80053a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80053a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	781b      	ldrb	r3, [r3, #0]
 80053ae:	011a      	lsls	r2, r3, #4
 80053b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053b2:	4413      	add	r3, r2
 80053b4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80053b8:	677b      	str	r3, [r7, #116]	; 0x74
 80053ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d112      	bne.n	80053e8 <USB_EPStartXfer+0xbe8>
 80053c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053c4:	881b      	ldrh	r3, [r3, #0]
 80053c6:	b29b      	uxth	r3, r3
 80053c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d0:	801a      	strh	r2, [r3, #0]
 80053d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053d4:	881b      	ldrh	r3, [r3, #0]
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053e0:	b29a      	uxth	r2, r3
 80053e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053e4:	801a      	strh	r2, [r3, #0]
 80053e6:	e060      	b.n	80054aa <USB_EPStartXfer+0xcaa>
 80053e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ec:	2b3e      	cmp	r3, #62	; 0x3e
 80053ee:	d817      	bhi.n	8005420 <USB_EPStartXfer+0xc20>
 80053f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053f4:	085b      	lsrs	r3, r3, #1
 80053f6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80053fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d004      	beq.n	8005410 <USB_EPStartXfer+0xc10>
 8005406:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800540a:	3301      	adds	r3, #1
 800540c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005410:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005414:	b29b      	uxth	r3, r3
 8005416:	029b      	lsls	r3, r3, #10
 8005418:	b29a      	uxth	r2, r3
 800541a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800541c:	801a      	strh	r2, [r3, #0]
 800541e:	e044      	b.n	80054aa <USB_EPStartXfer+0xcaa>
 8005420:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005424:	095b      	lsrs	r3, r3, #5
 8005426:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800542a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800542e:	f003 031f 	and.w	r3, r3, #31
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <USB_EPStartXfer+0xc40>
 8005436:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800543a:	3b01      	subs	r3, #1
 800543c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005440:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005444:	b29b      	uxth	r3, r3
 8005446:	029b      	lsls	r3, r3, #10
 8005448:	b29b      	uxth	r3, r3
 800544a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800544e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005452:	b29a      	uxth	r2, r3
 8005454:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005456:	801a      	strh	r2, [r3, #0]
 8005458:	e027      	b.n	80054aa <USB_EPStartXfer+0xcaa>
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	785b      	ldrb	r3, [r3, #1]
 8005466:	2b01      	cmp	r3, #1
 8005468:	d11f      	bne.n	80054aa <USB_EPStartXfer+0xcaa>
 800546a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005478:	b29b      	uxth	r3, r3
 800547a:	461a      	mov	r2, r3
 800547c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005480:	4413      	add	r3, r2
 8005482:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	011a      	lsls	r2, r3, #4
 8005494:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005498:	4413      	add	r3, r2
 800549a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80054a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054a4:	b29a      	uxth	r2, r3
 80054a6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80054a8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80054aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	895b      	ldrh	r3, [r3, #10]
 80054b6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6959      	ldr	r1, [r3, #20]
 80054c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80054d0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80054d4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80054d8:	6800      	ldr	r0, [r0, #0]
 80054da:	f001 f907 	bl	80066ec <USB_WritePMA>
          ep->xfer_buff += len;
 80054de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	695a      	ldr	r2, [r3, #20]
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	441a      	add	r2, r3
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80054fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005500:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	6a1a      	ldr	r2, [r3, #32]
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691b      	ldr	r3, [r3, #16]
 8005514:	429a      	cmp	r2, r3
 8005516:	d90f      	bls.n	8005538 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	6a1a      	ldr	r2, [r3, #32]
 8005524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005528:	1ad2      	subs	r2, r2, r3
 800552a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800552e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	621a      	str	r2, [r3, #32]
 8005536:	e00e      	b.n	8005556 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005538:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800553c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	6a1b      	ldr	r3, [r3, #32]
 8005544:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005548:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800554c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	2200      	movs	r2, #0
 8005554:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8295 	beq.w	8005a8a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005560:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005564:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	785b      	ldrb	r3, [r3, #1]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d16d      	bne.n	800564c <USB_EPStartXfer+0xe4c>
 8005570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005574:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	66bb      	str	r3, [r7, #104]	; 0x68
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800558a:	b29b      	uxth	r3, r3
 800558c:	461a      	mov	r2, r3
 800558e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005590:	4413      	add	r3, r2
 8005592:	66bb      	str	r3, [r7, #104]	; 0x68
 8005594:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005598:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	781b      	ldrb	r3, [r3, #0]
 80055a0:	011a      	lsls	r2, r3, #4
 80055a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80055a4:	4413      	add	r3, r2
 80055a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055aa:	667b      	str	r3, [r7, #100]	; 0x64
 80055ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d112      	bne.n	80055da <USB_EPStartXfer+0xdda>
 80055b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055b6:	881b      	ldrh	r3, [r3, #0]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055be:	b29a      	uxth	r2, r3
 80055c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c2:	801a      	strh	r2, [r3, #0]
 80055c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055c6:	881b      	ldrh	r3, [r3, #0]
 80055c8:	b29b      	uxth	r3, r3
 80055ca:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055ce:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055d2:	b29a      	uxth	r2, r3
 80055d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80055d6:	801a      	strh	r2, [r3, #0]
 80055d8:	e063      	b.n	80056a2 <USB_EPStartXfer+0xea2>
 80055da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055de:	2b3e      	cmp	r3, #62	; 0x3e
 80055e0:	d817      	bhi.n	8005612 <USB_EPStartXfer+0xe12>
 80055e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055e6:	085b      	lsrs	r3, r3, #1
 80055e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 80055ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d004      	beq.n	8005602 <USB_EPStartXfer+0xe02>
 80055f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80055fc:	3301      	adds	r3, #1
 80055fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005602:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005606:	b29b      	uxth	r3, r3
 8005608:	029b      	lsls	r3, r3, #10
 800560a:	b29a      	uxth	r2, r3
 800560c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800560e:	801a      	strh	r2, [r3, #0]
 8005610:	e047      	b.n	80056a2 <USB_EPStartXfer+0xea2>
 8005612:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005616:	095b      	lsrs	r3, r3, #5
 8005618:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800561c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005620:	f003 031f 	and.w	r3, r3, #31
 8005624:	2b00      	cmp	r3, #0
 8005626:	d104      	bne.n	8005632 <USB_EPStartXfer+0xe32>
 8005628:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800562c:	3b01      	subs	r3, #1
 800562e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005636:	b29b      	uxth	r3, r3
 8005638:	029b      	lsls	r3, r3, #10
 800563a:	b29b      	uxth	r3, r3
 800563c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005640:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005644:	b29a      	uxth	r2, r3
 8005646:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005648:	801a      	strh	r2, [r3, #0]
 800564a:	e02a      	b.n	80056a2 <USB_EPStartXfer+0xea2>
 800564c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	785b      	ldrb	r3, [r3, #1]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d122      	bne.n	80056a2 <USB_EPStartXfer+0xea2>
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	673b      	str	r3, [r7, #112]	; 0x70
 8005668:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800566c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005676:	b29b      	uxth	r3, r3
 8005678:	461a      	mov	r2, r3
 800567a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800567c:	4413      	add	r3, r2
 800567e:	673b      	str	r3, [r7, #112]	; 0x70
 8005680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	781b      	ldrb	r3, [r3, #0]
 800568c:	011a      	lsls	r2, r3, #4
 800568e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005690:	4413      	add	r3, r2
 8005692:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005696:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800569c:	b29a      	uxth	r2, r3
 800569e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	891b      	ldrh	r3, [r3, #8]
 80056ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	6959      	ldr	r1, [r3, #20]
 80056be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80056cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80056d0:	6800      	ldr	r0, [r0, #0]
 80056d2:	f001 f80b 	bl	80066ec <USB_WritePMA>
 80056d6:	e1d8      	b.n	8005a8a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80056d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	785b      	ldrb	r3, [r3, #1]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d178      	bne.n	80057da <USB_EPStartXfer+0xfda>
 80056e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005704:	b29b      	uxth	r3, r3
 8005706:	461a      	mov	r2, r3
 8005708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800570c:	4413      	add	r3, r2
 800570e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	781b      	ldrb	r3, [r3, #0]
 800571e:	011a      	lsls	r2, r3, #4
 8005720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005724:	4413      	add	r3, r2
 8005726:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800572a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800572e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d116      	bne.n	8005764 <USB_EPStartXfer+0xf64>
 8005736:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800573a:	881b      	ldrh	r3, [r3, #0]
 800573c:	b29b      	uxth	r3, r3
 800573e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005742:	b29a      	uxth	r2, r3
 8005744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005748:	801a      	strh	r2, [r3, #0]
 800574a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800574e:	881b      	ldrh	r3, [r3, #0]
 8005750:	b29b      	uxth	r3, r3
 8005752:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005756:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800575a:	b29a      	uxth	r2, r3
 800575c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005760:	801a      	strh	r2, [r3, #0]
 8005762:	e06b      	b.n	800583c <USB_EPStartXfer+0x103c>
 8005764:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005768:	2b3e      	cmp	r3, #62	; 0x3e
 800576a:	d818      	bhi.n	800579e <USB_EPStartXfer+0xf9e>
 800576c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005770:	085b      	lsrs	r3, r3, #1
 8005772:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005776:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800577a:	f003 0301 	and.w	r3, r3, #1
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <USB_EPStartXfer+0xf8c>
 8005782:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005786:	3301      	adds	r3, #1
 8005788:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800578c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005790:	b29b      	uxth	r3, r3
 8005792:	029b      	lsls	r3, r3, #10
 8005794:	b29a      	uxth	r2, r3
 8005796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800579a:	801a      	strh	r2, [r3, #0]
 800579c:	e04e      	b.n	800583c <USB_EPStartXfer+0x103c>
 800579e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057a2:	095b      	lsrs	r3, r3, #5
 80057a4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ac:	f003 031f 	and.w	r3, r3, #31
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d104      	bne.n	80057be <USB_EPStartXfer+0xfbe>
 80057b4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057b8:	3b01      	subs	r3, #1
 80057ba:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 80057be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	029b      	lsls	r3, r3, #10
 80057c6:	b29b      	uxth	r3, r3
 80057c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80057d6:	801a      	strh	r2, [r3, #0]
 80057d8:	e030      	b.n	800583c <USB_EPStartXfer+0x103c>
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d128      	bne.n	800583c <USB_EPStartXfer+0x103c>
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80057f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005806:	b29b      	uxth	r3, r3
 8005808:	461a      	mov	r2, r3
 800580a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800580e:	4413      	add	r3, r2
 8005810:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	781b      	ldrb	r3, [r3, #0]
 8005820:	011a      	lsls	r2, r3, #4
 8005822:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005826:	4413      	add	r3, r2
 8005828:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800582c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005830:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005834:	b29a      	uxth	r2, r3
 8005836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800583a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800583c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	891b      	ldrh	r3, [r3, #8]
 8005848:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	6959      	ldr	r1, [r3, #20]
 8005858:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800585c:	b29b      	uxth	r3, r3
 800585e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005862:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005866:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800586a:	6800      	ldr	r0, [r0, #0]
 800586c:	f000 ff3e 	bl	80066ec <USB_WritePMA>
          ep->xfer_buff += len;
 8005870:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005874:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	695a      	ldr	r2, [r3, #20]
 800587c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005880:	441a      	add	r2, r3
 8005882:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005886:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800588e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005892:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	6a1a      	ldr	r2, [r3, #32]
 800589a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800589e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d90f      	bls.n	80058ca <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80058aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	6a1a      	ldr	r2, [r3, #32]
 80058b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ba:	1ad2      	subs	r2, r2, r3
 80058bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	621a      	str	r2, [r3, #32]
 80058c8:	e00e      	b.n	80058e8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80058ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	6a1b      	ldr	r3, [r3, #32]
 80058d6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80058da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	2200      	movs	r2, #0
 80058e6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 80cc 	beq.w	8005a8a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d178      	bne.n	8005a02 <USB_EPStartXfer+0x1202>
 8005910:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005914:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800591e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005922:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800592c:	b29b      	uxth	r3, r3
 800592e:	461a      	mov	r2, r3
 8005930:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005934:	4413      	add	r3, r2
 8005936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800593a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800593e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	011a      	lsls	r2, r3, #4
 8005948:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800594c:	4413      	add	r3, r2
 800594e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <USB_EPStartXfer+0x118c>
 800595e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005962:	881b      	ldrh	r3, [r3, #0]
 8005964:	b29b      	uxth	r3, r3
 8005966:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800596a:	b29a      	uxth	r2, r3
 800596c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005970:	801a      	strh	r2, [r3, #0]
 8005972:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005976:	881b      	ldrh	r3, [r3, #0]
 8005978:	b29b      	uxth	r3, r3
 800597a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800597e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005982:	b29a      	uxth	r2, r3
 8005984:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005988:	801a      	strh	r2, [r3, #0]
 800598a:	e064      	b.n	8005a56 <USB_EPStartXfer+0x1256>
 800598c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005990:	2b3e      	cmp	r3, #62	; 0x3e
 8005992:	d818      	bhi.n	80059c6 <USB_EPStartXfer+0x11c6>
 8005994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005998:	085b      	lsrs	r3, r3, #1
 800599a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800599e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059a2:	f003 0301 	and.w	r3, r3, #1
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d004      	beq.n	80059b4 <USB_EPStartXfer+0x11b4>
 80059aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ae:	3301      	adds	r3, #1
 80059b0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	029b      	lsls	r3, r3, #10
 80059bc:	b29a      	uxth	r2, r3
 80059be:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c2:	801a      	strh	r2, [r3, #0]
 80059c4:	e047      	b.n	8005a56 <USB_EPStartXfer+0x1256>
 80059c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ca:	095b      	lsrs	r3, r3, #5
 80059cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059d4:	f003 031f 	and.w	r3, r3, #31
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d104      	bne.n	80059e6 <USB_EPStartXfer+0x11e6>
 80059dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059e0:	3b01      	subs	r3, #1
 80059e2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80059e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80059ea:	b29b      	uxth	r3, r3
 80059ec:	029b      	lsls	r3, r3, #10
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059fe:	801a      	strh	r2, [r3, #0]
 8005a00:	e029      	b.n	8005a56 <USB_EPStartXfer+0x1256>
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d121      	bne.n	8005a56 <USB_EPStartXfer+0x1256>
 8005a12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	461a      	mov	r2, r3
 8005a24:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a28:	4413      	add	r3, r2
 8005a2a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005a2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	781b      	ldrb	r3, [r3, #0]
 8005a3a:	011a      	lsls	r2, r3, #4
 8005a3c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005a40:	4413      	add	r3, r2
 8005a42:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005a4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4e:	b29a      	uxth	r2, r3
 8005a50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a54:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005a56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	895b      	ldrh	r3, [r3, #10]
 8005a62:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	6959      	ldr	r1, [r3, #20]
 8005a72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005a7c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005a80:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005a84:	6800      	ldr	r0, [r0, #0]
 8005a86:	f000 fe31 	bl	80066ec <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005a8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	009b      	lsls	r3, r3, #2
 8005aa2:	4413      	add	r3, r2
 8005aa4:	881b      	ldrh	r3, [r3, #0]
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005aac:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ab0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ab4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ab8:	8013      	strh	r3, [r2, #0]
 8005aba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abe:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ac2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ac6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005aca:	8812      	ldrh	r2, [r2, #0]
 8005acc:	f082 0210 	eor.w	r2, r2, #16
 8005ad0:	801a      	strh	r2, [r3, #0]
 8005ad2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005ada:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005ade:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005ae2:	8812      	ldrh	r2, [r2, #0]
 8005ae4:	f082 0220 	eor.w	r2, r2, #32
 8005ae8:	801a      	strh	r2, [r3, #0]
 8005aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	441a      	add	r2, r3
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005b0c:	881b      	ldrh	r3, [r3, #0]
 8005b0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b1e:	b29b      	uxth	r3, r3
 8005b20:	8013      	strh	r3, [r2, #0]
 8005b22:	f000 bc9f 	b.w	8006464 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005b26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b2a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	7b1b      	ldrb	r3, [r3, #12]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f040 80ae 	bne.w	8005c94 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005b38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699a      	ldr	r2, [r3, #24]
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	691b      	ldr	r3, [r3, #16]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d917      	bls.n	8005b84 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005b64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b74:	1ad2      	subs	r2, r2, r3
 8005b76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	619a      	str	r2, [r3, #24]
 8005b82:	e00e      	b.n	8005ba2 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005b84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b88:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005b94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005ba2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ba6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bb4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005bcc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bd0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	781b      	ldrb	r3, [r3, #0]
 8005bd8:	011a      	lsls	r2, r3, #4
 8005bda:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005bde:	4413      	add	r3, r2
 8005be0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005be4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005be8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d116      	bne.n	8005c1e <USB_EPStartXfer+0x141e>
 8005bf0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005bf4:	881b      	ldrh	r3, [r3, #0]
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c02:	801a      	strh	r2, [r3, #0]
 8005c04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c08:	881b      	ldrh	r3, [r3, #0]
 8005c0a:	b29b      	uxth	r3, r3
 8005c0c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c10:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c14:	b29a      	uxth	r2, r3
 8005c16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c1a:	801a      	strh	r2, [r3, #0]
 8005c1c:	e3e8      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
 8005c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c22:	2b3e      	cmp	r3, #62	; 0x3e
 8005c24:	d818      	bhi.n	8005c58 <USB_EPStartXfer+0x1458>
 8005c26:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c2a:	085b      	lsrs	r3, r3, #1
 8005c2c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <USB_EPStartXfer+0x1446>
 8005c3c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c40:	3301      	adds	r3, #1
 8005c42:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c46:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	029b      	lsls	r3, r3, #10
 8005c4e:	b29a      	uxth	r2, r3
 8005c50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c54:	801a      	strh	r2, [r3, #0]
 8005c56:	e3cb      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
 8005c58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c5c:	095b      	lsrs	r3, r3, #5
 8005c5e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c62:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c66:	f003 031f 	and.w	r3, r3, #31
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d104      	bne.n	8005c78 <USB_EPStartXfer+0x1478>
 8005c6e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c72:	3b01      	subs	r3, #1
 8005c74:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005c78:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005c7c:	b29b      	uxth	r3, r3
 8005c7e:	029b      	lsls	r3, r3, #10
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c86:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c8a:	b29a      	uxth	r2, r3
 8005c8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005c90:	801a      	strh	r2, [r3, #0]
 8005c92:	e3ad      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8005c94:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c98:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	78db      	ldrb	r3, [r3, #3]
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	f040 8200 	bne.w	80060a6 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8005ca6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005caa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	785b      	ldrb	r3, [r3, #1]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	f040 8091 	bne.w	8005dda <USB_EPStartXfer+0x15da>
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cdc:	4413      	add	r3, r2
 8005cde:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005ce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	781b      	ldrb	r3, [r3, #0]
 8005cee:	011a      	lsls	r2, r3, #4
 8005cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005cf4:	4413      	add	r3, r2
 8005cf6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005cfa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005cfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d116      	bne.n	8005d3c <USB_EPStartXfer+0x153c>
 8005d0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d12:	881b      	ldrh	r3, [r3, #0]
 8005d14:	b29b      	uxth	r3, r3
 8005d16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005d1a:	b29a      	uxth	r2, r3
 8005d1c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d20:	801a      	strh	r2, [r3, #0]
 8005d22:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d26:	881b      	ldrh	r3, [r3, #0]
 8005d28:	b29b      	uxth	r3, r3
 8005d2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d38:	801a      	strh	r2, [r3, #0]
 8005d3a:	e083      	b.n	8005e44 <USB_EPStartXfer+0x1644>
 8005d3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d40:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b3e      	cmp	r3, #62	; 0x3e
 8005d4a:	d820      	bhi.n	8005d8e <USB_EPStartXfer+0x158e>
 8005d4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	085b      	lsrs	r3, r3, #1
 8005d5a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	f003 0301 	and.w	r3, r3, #1
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d004      	beq.n	8005d7c <USB_EPStartXfer+0x157c>
 8005d72:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d76:	3301      	adds	r3, #1
 8005d78:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d80:	b29b      	uxth	r3, r3
 8005d82:	029b      	lsls	r3, r3, #10
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d8a:	801a      	strh	r2, [r3, #0]
 8005d8c:	e05a      	b.n	8005e44 <USB_EPStartXfer+0x1644>
 8005d8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	095b      	lsrs	r3, r3, #5
 8005d9c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005da0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005da4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	691b      	ldr	r3, [r3, #16]
 8005dac:	f003 031f 	and.w	r3, r3, #31
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <USB_EPStartXfer+0x15be>
 8005db4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005db8:	3b01      	subs	r3, #1
 8005dba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005dbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	029b      	lsls	r3, r3, #10
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dcc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005dd6:	801a      	strh	r2, [r3, #0]
 8005dd8:	e034      	b.n	8005e44 <USB_EPStartXfer+0x1644>
 8005dda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	785b      	ldrb	r3, [r3, #1]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d12c      	bne.n	8005e44 <USB_EPStartXfer+0x1644>
 8005dea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005df8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005dfc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	461a      	mov	r2, r3
 8005e0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e0e:	4413      	add	r3, r2
 8005e10:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8005e14:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e18:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	011a      	lsls	r2, r3, #4
 8005e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005e26:	4413      	add	r3, r2
 8005e28:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005e30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	b29a      	uxth	r2, r3
 8005e3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005e42:	801a      	strh	r2, [r3, #0]
 8005e44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e48:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005e52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e56:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	785b      	ldrb	r3, [r3, #1]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	f040 8091 	bne.w	8005f86 <USB_EPStartXfer+0x1786>
 8005e64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e80:	b29b      	uxth	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005e88:	4413      	add	r3, r2
 8005e8a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8005e8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	011a      	lsls	r2, r3, #4
 8005e9c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ea0:	4413      	add	r3, r2
 8005ea2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005ea6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	691b      	ldr	r3, [r3, #16]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d116      	bne.n	8005ee8 <USB_EPStartXfer+0x16e8>
 8005eba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ebe:	881b      	ldrh	r3, [r3, #0]
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005ec6:	b29a      	uxth	r2, r3
 8005ec8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ecc:	801a      	strh	r2, [r3, #0]
 8005ece:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ed2:	881b      	ldrh	r3, [r3, #0]
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005eda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ede:	b29a      	uxth	r2, r3
 8005ee0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005ee4:	801a      	strh	r2, [r3, #0]
 8005ee6:	e07c      	b.n	8005fe2 <USB_EPStartXfer+0x17e2>
 8005ee8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005eec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	691b      	ldr	r3, [r3, #16]
 8005ef4:	2b3e      	cmp	r3, #62	; 0x3e
 8005ef6:	d820      	bhi.n	8005f3a <USB_EPStartXfer+0x173a>
 8005ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	691b      	ldr	r3, [r3, #16]
 8005f04:	085b      	lsrs	r3, r3, #1
 8005f06:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f0a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f0e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	691b      	ldr	r3, [r3, #16]
 8005f16:	f003 0301 	and.w	r3, r3, #1
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d004      	beq.n	8005f28 <USB_EPStartXfer+0x1728>
 8005f1e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f22:	3301      	adds	r3, #1
 8005f24:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f28:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	029b      	lsls	r3, r3, #10
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f36:	801a      	strh	r2, [r3, #0]
 8005f38:	e053      	b.n	8005fe2 <USB_EPStartXfer+0x17e2>
 8005f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691b      	ldr	r3, [r3, #16]
 8005f46:	095b      	lsrs	r3, r3, #5
 8005f48:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	f003 031f 	and.w	r3, r3, #31
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d104      	bne.n	8005f6a <USB_EPStartXfer+0x176a>
 8005f60:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f64:	3b01      	subs	r3, #1
 8005f66:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8005f6a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	029b      	lsls	r3, r3, #10
 8005f72:	b29b      	uxth	r3, r3
 8005f74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005f82:	801a      	strh	r2, [r3, #0]
 8005f84:	e02d      	b.n	8005fe2 <USB_EPStartXfer+0x17e2>
 8005f86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	785b      	ldrb	r3, [r3, #1]
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d125      	bne.n	8005fe2 <USB_EPStartXfer+0x17e2>
 8005f96:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f9a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fac:	4413      	add	r3, r2
 8005fae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005fb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	011a      	lsls	r2, r3, #4
 8005fc0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005fca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005fce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005fe0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69db      	ldr	r3, [r3, #28]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 81fe 	beq.w	80063f0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8005ff4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ffc:	681a      	ldr	r2, [r3, #0]
 8005ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	4413      	add	r3, r2
 800600e:	881b      	ldrh	r3, [r3, #0]
 8006010:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006014:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <USB_EPStartXfer+0x182c>
 8006020:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006028:	2b00      	cmp	r3, #0
 800602a:	d10d      	bne.n	8006048 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800602c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006030:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006034:	2b00      	cmp	r3, #0
 8006036:	f040 81db 	bne.w	80063f0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800603a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800603e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 81d4 	bne.w	80063f0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800604c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006056:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	4413      	add	r3, r2
 8006062:	881b      	ldrh	r3, [r3, #0]
 8006064:	b29b      	uxth	r3, r3
 8006066:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 8006072:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006076:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800607a:	681a      	ldr	r2, [r3, #0]
 800607c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	441a      	add	r2, r3
 800608c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 8006090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006098:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800609c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	8013      	strh	r3, [r2, #0]
 80060a4:	e1a4      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80060a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	78db      	ldrb	r3, [r3, #3]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	f040 819a 	bne.w	80063ec <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80060b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	699a      	ldr	r2, [r3, #24]
 80060c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d917      	bls.n	8006104 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80060d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 80060e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699a      	ldr	r2, [r3, #24]
 80060f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060f4:	1ad2      	subs	r2, r2, r3
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	619a      	str	r2, [r3, #24]
 8006102:	e00e      	b.n	8006122 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006104:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006108:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	2200      	movs	r2, #0
 8006120:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8006122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006126:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	785b      	ldrb	r3, [r3, #1]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d178      	bne.n	8006224 <USB_EPStartXfer+0x1a24>
 8006132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006136:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006140:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006144:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800614e:	b29b      	uxth	r3, r3
 8006150:	461a      	mov	r2, r3
 8006152:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006156:	4413      	add	r3, r2
 8006158:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800615c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	011a      	lsls	r2, r3, #4
 800616a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800616e:	4413      	add	r3, r2
 8006170:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006174:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800617c:	2b00      	cmp	r3, #0
 800617e:	d116      	bne.n	80061ae <USB_EPStartXfer+0x19ae>
 8006180:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006184:	881b      	ldrh	r3, [r3, #0]
 8006186:	b29b      	uxth	r3, r3
 8006188:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800618c:	b29a      	uxth	r2, r3
 800618e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006192:	801a      	strh	r2, [r3, #0]
 8006194:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006198:	881b      	ldrh	r3, [r3, #0]
 800619a:	b29b      	uxth	r3, r3
 800619c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061aa:	801a      	strh	r2, [r3, #0]
 80061ac:	e06b      	b.n	8006286 <USB_EPStartXfer+0x1a86>
 80061ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b2:	2b3e      	cmp	r3, #62	; 0x3e
 80061b4:	d818      	bhi.n	80061e8 <USB_EPStartXfer+0x19e8>
 80061b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ba:	085b      	lsrs	r3, r3, #1
 80061bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061c4:	f003 0301 	and.w	r3, r3, #1
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d004      	beq.n	80061d6 <USB_EPStartXfer+0x19d6>
 80061cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d0:	3301      	adds	r3, #1
 80061d2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061da:	b29b      	uxth	r3, r3
 80061dc:	029b      	lsls	r3, r3, #10
 80061de:	b29a      	uxth	r2, r3
 80061e0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80061e4:	801a      	strh	r2, [r3, #0]
 80061e6:	e04e      	b.n	8006286 <USB_EPStartXfer+0x1a86>
 80061e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ec:	095b      	lsrs	r3, r3, #5
 80061ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80061f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f6:	f003 031f 	and.w	r3, r3, #31
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d104      	bne.n	8006208 <USB_EPStartXfer+0x1a08>
 80061fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006202:	3b01      	subs	r3, #1
 8006204:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006208:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800620c:	b29b      	uxth	r3, r3
 800620e:	029b      	lsls	r3, r3, #10
 8006210:	b29b      	uxth	r3, r3
 8006212:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006216:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800621a:	b29a      	uxth	r2, r3
 800621c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006220:	801a      	strh	r2, [r3, #0]
 8006222:	e030      	b.n	8006286 <USB_EPStartXfer+0x1a86>
 8006224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	785b      	ldrb	r3, [r3, #1]
 8006230:	2b01      	cmp	r3, #1
 8006232:	d128      	bne.n	8006286 <USB_EPStartXfer+0x1a86>
 8006234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006238:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006242:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006246:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006250:	b29b      	uxth	r3, r3
 8006252:	461a      	mov	r2, r3
 8006254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006258:	4413      	add	r3, r2
 800625a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800625e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	011a      	lsls	r2, r3, #4
 800626c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006270:	4413      	add	r3, r2
 8006272:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006276:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800627a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800627e:	b29a      	uxth	r2, r3
 8006280:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006284:	801a      	strh	r2, [r3, #0]
 8006286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800628a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006294:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006298:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	785b      	ldrb	r3, [r3, #1]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d178      	bne.n	8006396 <USB_EPStartXfer+0x1b96>
 80062a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	461a      	mov	r2, r3
 80062c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062c8:	4413      	add	r3, r2
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80062ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	011a      	lsls	r2, r3, #4
 80062dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062e0:	4413      	add	r3, r2
 80062e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80062e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80062ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d116      	bne.n	8006320 <USB_EPStartXfer+0x1b20>
 80062f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062f6:	881b      	ldrh	r3, [r3, #0]
 80062f8:	b29b      	uxth	r3, r3
 80062fa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80062fe:	b29a      	uxth	r2, r3
 8006300:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800630a:	881b      	ldrh	r3, [r3, #0]
 800630c:	b29b      	uxth	r3, r3
 800630e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006312:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006316:	b29a      	uxth	r2, r3
 8006318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800631c:	801a      	strh	r2, [r3, #0]
 800631e:	e067      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
 8006320:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006324:	2b3e      	cmp	r3, #62	; 0x3e
 8006326:	d818      	bhi.n	800635a <USB_EPStartXfer+0x1b5a>
 8006328:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800632c:	085b      	lsrs	r3, r3, #1
 800632e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006332:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <USB_EPStartXfer+0x1b48>
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006342:	3301      	adds	r3, #1
 8006344:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006348:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800634c:	b29b      	uxth	r3, r3
 800634e:	029b      	lsls	r3, r3, #10
 8006350:	b29a      	uxth	r2, r3
 8006352:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006356:	801a      	strh	r2, [r3, #0]
 8006358:	e04a      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
 800635a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800635e:	095b      	lsrs	r3, r3, #5
 8006360:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006364:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006368:	f003 031f 	and.w	r3, r3, #31
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <USB_EPStartXfer+0x1b7a>
 8006370:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006374:	3b01      	subs	r3, #1
 8006376:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800637a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800637e:	b29b      	uxth	r3, r3
 8006380:	029b      	lsls	r3, r3, #10
 8006382:	b29b      	uxth	r3, r3
 8006384:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006388:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800638c:	b29a      	uxth	r2, r3
 800638e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006392:	801a      	strh	r2, [r3, #0]
 8006394:	e02c      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
 8006396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800639a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	785b      	ldrb	r3, [r3, #1]
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d124      	bne.n	80063f0 <USB_EPStartXfer+0x1bf0>
 80063a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063b4:	b29b      	uxth	r3, r3
 80063b6:	461a      	mov	r2, r3
 80063b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063bc:	4413      	add	r3, r2
 80063be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	011a      	lsls	r2, r3, #4
 80063d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d4:	4413      	add	r3, r2
 80063d6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80063da:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80063e2:	b29a      	uxth	r2, r3
 80063e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e8:	801a      	strh	r2, [r3, #0]
 80063ea:	e001      	b.n	80063f0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e03a      	b.n	8006466 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80063f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063f8:	681a      	ldr	r2, [r3, #0]
 80063fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	781b      	ldrb	r3, [r3, #0]
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4413      	add	r3, r2
 800640a:	881b      	ldrh	r3, [r3, #0]
 800640c:	b29b      	uxth	r3, r3
 800640e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800641a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800641e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006422:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006426:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800642a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800642e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006432:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006436:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006440:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	441a      	add	r2, r3
 800644c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006450:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006454:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006458:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800645c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006460:	b29b      	uxth	r3, r3
 8006462:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	785b      	ldrb	r3, [r3, #1]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d020      	beq.n	80064c4 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	4413      	add	r3, r2
 800648c:	881b      	ldrh	r3, [r3, #0]
 800648e:	b29b      	uxth	r3, r3
 8006490:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006498:	81bb      	strh	r3, [r7, #12]
 800649a:	89bb      	ldrh	r3, [r7, #12]
 800649c:	f083 0310 	eor.w	r3, r3, #16
 80064a0:	81bb      	strh	r3, [r7, #12]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	781b      	ldrb	r3, [r3, #0]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	441a      	add	r2, r3
 80064ac:	89bb      	ldrh	r3, [r7, #12]
 80064ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064be:	b29b      	uxth	r3, r3
 80064c0:	8013      	strh	r3, [r2, #0]
 80064c2:	e01f      	b.n	8006504 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	81fb      	strh	r3, [r7, #14]
 80064dc:	89fb      	ldrh	r3, [r7, #14]
 80064de:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80064e2:	81fb      	strh	r3, [r7, #14]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	781b      	ldrb	r3, [r3, #0]
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	441a      	add	r2, r3
 80064ee:	89fb      	ldrh	r3, [r7, #14]
 80064f0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006500:	b29b      	uxth	r3, r3
 8006502:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3714      	adds	r7, #20
 800650a:	46bd      	mov	sp, r7
 800650c:	bc80      	pop	{r7}
 800650e:	4770      	bx	lr

08006510 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006510:	b480      	push	{r7}
 8006512:	b087      	sub	sp, #28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	7b1b      	ldrb	r3, [r3, #12]
 800651e:	2b00      	cmp	r3, #0
 8006520:	f040 809d 	bne.w	800665e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	785b      	ldrb	r3, [r3, #1]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d04c      	beq.n	80065c6 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800652c:	687a      	ldr	r2, [r7, #4]
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	881b      	ldrh	r3, [r3, #0]
 8006538:	823b      	strh	r3, [r7, #16]
 800653a:	8a3b      	ldrh	r3, [r7, #16]
 800653c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006540:	2b00      	cmp	r3, #0
 8006542:	d01b      	beq.n	800657c <USB_EPClearStall+0x6c>
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	781b      	ldrb	r3, [r3, #0]
 800654a:	009b      	lsls	r3, r3, #2
 800654c:	4413      	add	r3, r2
 800654e:	881b      	ldrh	r3, [r3, #0]
 8006550:	b29b      	uxth	r3, r3
 8006552:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800655a:	81fb      	strh	r3, [r7, #14]
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	441a      	add	r2, r3
 8006566:	89fb      	ldrh	r3, [r7, #14]
 8006568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800656c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006570:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006574:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006578:	b29b      	uxth	r3, r3
 800657a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	78db      	ldrb	r3, [r3, #3]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d06c      	beq.n	800665e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	683b      	ldr	r3, [r7, #0]
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	881b      	ldrh	r3, [r3, #0]
 8006590:	b29b      	uxth	r3, r3
 8006592:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006596:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800659a:	81bb      	strh	r3, [r7, #12]
 800659c:	89bb      	ldrh	r3, [r7, #12]
 800659e:	f083 0320 	eor.w	r3, r3, #32
 80065a2:	81bb      	strh	r3, [r7, #12]
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	441a      	add	r2, r3
 80065ae:	89bb      	ldrh	r3, [r7, #12]
 80065b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	8013      	strh	r3, [r2, #0]
 80065c4:	e04b      	b.n	800665e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	781b      	ldrb	r3, [r3, #0]
 80065cc:	009b      	lsls	r3, r3, #2
 80065ce:	4413      	add	r3, r2
 80065d0:	881b      	ldrh	r3, [r3, #0]
 80065d2:	82fb      	strh	r3, [r7, #22]
 80065d4:	8afb      	ldrh	r3, [r7, #22]
 80065d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d01b      	beq.n	8006616 <USB_EPClearStall+0x106>
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	009b      	lsls	r3, r3, #2
 80065e6:	4413      	add	r3, r2
 80065e8:	881b      	ldrh	r3, [r3, #0]
 80065ea:	b29b      	uxth	r3, r3
 80065ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065f4:	82bb      	strh	r3, [r7, #20]
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	009b      	lsls	r3, r3, #2
 80065fe:	441a      	add	r2, r3
 8006600:	8abb      	ldrh	r3, [r7, #20]
 8006602:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006606:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800660e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006612:	b29b      	uxth	r3, r3
 8006614:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006616:	687a      	ldr	r2, [r7, #4]
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4413      	add	r3, r2
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662c:	827b      	strh	r3, [r7, #18]
 800662e:	8a7b      	ldrh	r3, [r7, #18]
 8006630:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006634:	827b      	strh	r3, [r7, #18]
 8006636:	8a7b      	ldrh	r3, [r7, #18]
 8006638:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800663c:	827b      	strh	r3, [r7, #18]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	441a      	add	r2, r3
 8006648:	8a7b      	ldrh	r3, [r7, #18]
 800664a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800664e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006652:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006656:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800665a:	b29b      	uxth	r3, r3
 800665c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	371c      	adds	r7, #28
 8006664:	46bd      	mov	sp, r7
 8006666:	bc80      	pop	{r7}
 8006668:	4770      	bx	lr

0800666a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800666a:	b480      	push	{r7}
 800666c:	b083      	sub	sp, #12
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	460b      	mov	r3, r1
 8006674:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d103      	bne.n	8006684 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2280      	movs	r2, #128	; 0x80
 8006680:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	370c      	adds	r7, #12
 800668a:	46bd      	mov	sp, r7
 800668c:	bc80      	pop	{r7}
 800668e:	4770      	bx	lr

08006690 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006698:	2300      	movs	r3, #0
}
 800669a:	4618      	mov	r0, r3
 800669c:	370c      	adds	r7, #12
 800669e:	46bd      	mov	sp, r7
 80066a0:	bc80      	pop	{r7}
 80066a2:	4770      	bx	lr

080066a4 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b083      	sub	sp, #12
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80066ac:	2300      	movs	r3, #0
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bc80      	pop	{r7}
 80066b6:	4770      	bx	lr

080066b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066c6:	b29b      	uxth	r3, r3
 80066c8:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 80066ca:	68fb      	ldr	r3, [r7, #12]
}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3714      	adds	r7, #20
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bc80      	pop	{r7}
 80066d4:	4770      	bx	lr

080066d6 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 80066d6:	b480      	push	{r7}
 80066d8:	b083      	sub	sp, #12
 80066da:	af00      	add	r7, sp, #0
 80066dc:	6078      	str	r0, [r7, #4]
 80066de:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 80066e0:	2300      	movs	r3, #0
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	370c      	adds	r7, #12
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bc80      	pop	{r7}
 80066ea:	4770      	bx	lr

080066ec <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b08d      	sub	sp, #52	; 0x34
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	60f8      	str	r0, [r7, #12]
 80066f4:	60b9      	str	r1, [r7, #8]
 80066f6:	4611      	mov	r1, r2
 80066f8:	461a      	mov	r2, r3
 80066fa:	460b      	mov	r3, r1
 80066fc:	80fb      	strh	r3, [r7, #6]
 80066fe:	4613      	mov	r3, r2
 8006700:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006702:	88bb      	ldrh	r3, [r7, #4]
 8006704:	3301      	adds	r3, #1
 8006706:	085b      	lsrs	r3, r3, #1
 8006708:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	005a      	lsls	r2, r3, #1
 8006716:	69fb      	ldr	r3, [r7, #28]
 8006718:	4413      	add	r3, r2
 800671a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800671e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006720:	6a3b      	ldr	r3, [r7, #32]
 8006722:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006724:	e01e      	b.n	8006764 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800672c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800672e:	3301      	adds	r3, #1
 8006730:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	b29b      	uxth	r3, r3
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	b29b      	uxth	r3, r3
 800673c:	461a      	mov	r2, r3
 800673e:	69bb      	ldr	r3, [r7, #24]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	b29a      	uxth	r2, r3
 8006748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800674c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800674e:	3302      	adds	r3, #2
 8006750:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	3302      	adds	r3, #2
 8006756:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800675a:	3301      	adds	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800675e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006760:	3b01      	subs	r3, #1
 8006762:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1dd      	bne.n	8006726 <USB_WritePMA+0x3a>
  }
}
 800676a:	bf00      	nop
 800676c:	bf00      	nop
 800676e:	3734      	adds	r7, #52	; 0x34
 8006770:	46bd      	mov	sp, r7
 8006772:	bc80      	pop	{r7}
 8006774:	4770      	bx	lr

08006776 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006776:	b480      	push	{r7}
 8006778:	b08b      	sub	sp, #44	; 0x2c
 800677a:	af00      	add	r7, sp, #0
 800677c:	60f8      	str	r0, [r7, #12]
 800677e:	60b9      	str	r1, [r7, #8]
 8006780:	4611      	mov	r1, r2
 8006782:	461a      	mov	r2, r3
 8006784:	460b      	mov	r3, r1
 8006786:	80fb      	strh	r3, [r7, #6]
 8006788:	4613      	mov	r3, r2
 800678a:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800678c:	88bb      	ldrh	r3, [r7, #4]
 800678e:	085b      	lsrs	r3, r3, #1
 8006790:	b29b      	uxth	r3, r3
 8006792:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800679c:	88fb      	ldrh	r3, [r7, #6]
 800679e:	005a      	lsls	r2, r3, #1
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a8:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 80067aa:	69bb      	ldr	r3, [r7, #24]
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
 80067ae:	e01b      	b.n	80067e8 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 80067b0:	6a3b      	ldr	r3, [r7, #32]
 80067b2:	881b      	ldrh	r3, [r3, #0]
 80067b4:	b29b      	uxth	r3, r3
 80067b6:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80067b8:	6a3b      	ldr	r3, [r7, #32]
 80067ba:	3302      	adds	r3, #2
 80067bc:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	b2da      	uxtb	r2, r3
 80067c2:	69fb      	ldr	r3, [r7, #28]
 80067c4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3301      	adds	r3, #1
 80067ca:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	0a1b      	lsrs	r3, r3, #8
 80067d0:	b2da      	uxtb	r2, r3
 80067d2:	69fb      	ldr	r3, [r7, #28]
 80067d4:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80067d6:	69fb      	ldr	r3, [r7, #28]
 80067d8:	3301      	adds	r3, #1
 80067da:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	3302      	adds	r3, #2
 80067e0:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 80067e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067e4:	3b01      	subs	r3, #1
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
 80067e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d1e0      	bne.n	80067b0 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80067ee:	88bb      	ldrh	r3, [r7, #4]
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d007      	beq.n	800680a <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	881b      	ldrh	r3, [r3, #0]
 80067fe:	b29b      	uxth	r3, r3
 8006800:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	b2da      	uxtb	r2, r3
 8006806:	69fb      	ldr	r3, [r7, #28]
 8006808:	701a      	strb	r2, [r3, #0]
  }
}
 800680a:	bf00      	nop
 800680c:	372c      	adds	r7, #44	; 0x2c
 800680e:	46bd      	mov	sp, r7
 8006810:	bc80      	pop	{r7}
 8006812:	4770      	bx	lr

08006814 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	7c1b      	ldrb	r3, [r3, #16]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d115      	bne.n	8006858 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800682c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006830:	2202      	movs	r2, #2
 8006832:	2181      	movs	r1, #129	; 0x81
 8006834:	6878      	ldr	r0, [r7, #4]
 8006836:	f001 fe8c 	bl	8008552 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8006840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006844:	2202      	movs	r2, #2
 8006846:	2101      	movs	r1, #1
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f001 fe82 	bl	8008552 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8006856:	e012      	b.n	800687e <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8006858:	2340      	movs	r3, #64	; 0x40
 800685a:	2202      	movs	r2, #2
 800685c:	2181      	movs	r1, #129	; 0x81
 800685e:	6878      	ldr	r0, [r7, #4]
 8006860:	f001 fe77 	bl	8008552 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2201      	movs	r2, #1
 8006868:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	2202      	movs	r2, #2
 800686e:	2101      	movs	r1, #1
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f001 fe6e 	bl	8008552 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2201      	movs	r2, #1
 800687a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800687e:	2308      	movs	r3, #8
 8006880:	2203      	movs	r2, #3
 8006882:	2182      	movs	r1, #130	; 0x82
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f001 fe64 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2201      	movs	r2, #1
 800688e:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006890:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006894:	f001 ff84 	bl	80087a0 <USBD_static_malloc>
 8006898:	4602      	mov	r2, r0
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d102      	bne.n	80068b0 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80068aa:	2301      	movs	r3, #1
 80068ac:	73fb      	strb	r3, [r7, #15]
 80068ae:	e026      	b.n	80068fe <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068b6:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	7c1b      	ldrb	r3, [r3, #16]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d109      	bne.n	80068ee <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80068e4:	2101      	movs	r1, #1
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f001 ff24 	bl	8008734 <USBD_LL_PrepareReceive>
 80068ec:	e007      	b.n	80068fe <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80068ee:	68bb      	ldr	r3, [r7, #8]
 80068f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80068f4:	2340      	movs	r3, #64	; 0x40
 80068f6:	2101      	movs	r1, #1
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	f001 ff1b 	bl	8008734 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80068fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3710      	adds	r7, #16
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	460b      	mov	r3, r1
 8006912:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8006914:	2300      	movs	r3, #0
 8006916:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8006918:	2181      	movs	r1, #129	; 0x81
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f001 fe3f 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2200      	movs	r2, #0
 8006924:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8006926:	2101      	movs	r1, #1
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f001 fe38 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8006936:	2182      	movs	r1, #130	; 0x82
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fe30 	bl	800859e <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2200      	movs	r2, #0
 8006942:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694a:	2b00      	cmp	r3, #0
 800694c:	d00e      	beq.n	800696c <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800695e:	4618      	mov	r0, r3
 8006960:	f001 ff2a 	bl	80087b8 <USBD_static_free>
    pdev->pClassData = NULL;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2200      	movs	r2, #0
 8006968:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 800696c:	7bfb      	ldrb	r3, [r7, #15]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3710      	adds	r7, #16
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b086      	sub	sp, #24
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006986:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800698c:	2300      	movs	r3, #0
 800698e:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 8006990:	2300      	movs	r3, #0
 8006992:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800699c:	2b00      	cmp	r3, #0
 800699e:	d039      	beq.n	8006a14 <USBD_CDC_Setup+0x9e>
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d17f      	bne.n	8006aa4 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	88db      	ldrh	r3, [r3, #6]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d029      	beq.n	8006a00 <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	b25b      	sxtb	r3, r3
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da11      	bge.n	80069da <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	683a      	ldr	r2, [r7, #0]
 80069c0:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80069c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80069c4:	683a      	ldr	r2, [r7, #0]
 80069c6:	88d2      	ldrh	r2, [r2, #6]
 80069c8:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069ca:	6939      	ldr	r1, [r7, #16]
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	88db      	ldrh	r3, [r3, #6]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fa09 	bl	8007dea <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80069d8:	e06b      	b.n	8006ab2 <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	785a      	ldrb	r2, [r3, #1]
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	88db      	ldrh	r3, [r3, #6]
 80069e8:	b2da      	uxtb	r2, r3
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80069f0:	6939      	ldr	r1, [r7, #16]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	88db      	ldrh	r3, [r3, #6]
 80069f6:	461a      	mov	r2, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f001 fa24 	bl	8007e46 <USBD_CtlPrepareRx>
      break;
 80069fe:	e058      	b.n	8006ab2 <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	683a      	ldr	r2, [r7, #0]
 8006a0a:	7850      	ldrb	r0, [r2, #1]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	6839      	ldr	r1, [r7, #0]
 8006a10:	4798      	blx	r3
      break;
 8006a12:	e04e      	b.n	8006ab2 <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	785b      	ldrb	r3, [r3, #1]
 8006a18:	2b0b      	cmp	r3, #11
 8006a1a:	d02e      	beq.n	8006a7a <USBD_CDC_Setup+0x104>
 8006a1c:	2b0b      	cmp	r3, #11
 8006a1e:	dc38      	bgt.n	8006a92 <USBD_CDC_Setup+0x11c>
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d002      	beq.n	8006a2a <USBD_CDC_Setup+0xb4>
 8006a24:	2b0a      	cmp	r3, #10
 8006a26:	d014      	beq.n	8006a52 <USBD_CDC_Setup+0xdc>
 8006a28:	e033      	b.n	8006a92 <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a30:	2b03      	cmp	r3, #3
 8006a32:	d107      	bne.n	8006a44 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006a34:	f107 030c 	add.w	r3, r7, #12
 8006a38:	2202      	movs	r2, #2
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f001 f9d4 	bl	8007dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a42:	e02e      	b.n	8006aa2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f001 f965 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	75fb      	strb	r3, [r7, #23]
          break;
 8006a50:	e027      	b.n	8006aa2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a58:	2b03      	cmp	r3, #3
 8006a5a:	d107      	bne.n	8006a6c <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8006a5c:	f107 030f 	add.w	r3, r7, #15
 8006a60:	2201      	movs	r2, #1
 8006a62:	4619      	mov	r1, r3
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f001 f9c0 	bl	8007dea <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a6a:	e01a      	b.n	8006aa2 <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8006a6c:	6839      	ldr	r1, [r7, #0]
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f001 f951 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a74:	2302      	movs	r3, #2
 8006a76:	75fb      	strb	r3, [r7, #23]
          break;
 8006a78:	e013      	b.n	8006aa2 <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	2b03      	cmp	r3, #3
 8006a82:	d00d      	beq.n	8006aa0 <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f001 f945 	bl	8007d16 <USBD_CtlError>
            ret = USBD_FAIL;
 8006a8c:	2302      	movs	r3, #2
 8006a8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8006a90:	e006      	b.n	8006aa0 <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f001 f93e 	bl	8007d16 <USBD_CtlError>
          ret = USBD_FAIL;
 8006a9a:	2302      	movs	r3, #2
 8006a9c:	75fb      	strb	r3, [r7, #23]
          break;
 8006a9e:	e000      	b.n	8006aa2 <USBD_CDC_Setup+0x12c>
          break;
 8006aa0:	bf00      	nop
      }
      break;
 8006aa2:	e006      	b.n	8006ab2 <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8006aa4:	6839      	ldr	r1, [r7, #0]
 8006aa6:	6878      	ldr	r0, [r7, #4]
 8006aa8:	f001 f935 	bl	8007d16 <USBD_CtlError>
      ret = USBD_FAIL;
 8006aac:	2302      	movs	r3, #2
 8006aae:	75fb      	strb	r3, [r7, #23]
      break;
 8006ab0:	bf00      	nop
  }

  return ret;
 8006ab2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}

08006abc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b084      	sub	sp, #16
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ace:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006ad6:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d03a      	beq.n	8006b58 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8006ae2:	78fa      	ldrb	r2, [r7, #3]
 8006ae4:	6879      	ldr	r1, [r7, #4]
 8006ae6:	4613      	mov	r3, r2
 8006ae8:	009b      	lsls	r3, r3, #2
 8006aea:	4413      	add	r3, r2
 8006aec:	009b      	lsls	r3, r3, #2
 8006aee:	440b      	add	r3, r1
 8006af0:	331c      	adds	r3, #28
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d029      	beq.n	8006b4c <USBD_CDC_DataIn+0x90>
 8006af8:	78fa      	ldrb	r2, [r7, #3]
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	4613      	mov	r3, r2
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	4413      	add	r3, r2
 8006b02:	009b      	lsls	r3, r3, #2
 8006b04:	440b      	add	r3, r1
 8006b06:	331c      	adds	r3, #28
 8006b08:	681a      	ldr	r2, [r3, #0]
 8006b0a:	78f9      	ldrb	r1, [r7, #3]
 8006b0c:	68b8      	ldr	r0, [r7, #8]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	440b      	add	r3, r1
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4403      	add	r3, r0
 8006b18:	3338      	adds	r3, #56	; 0x38
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	fbb2 f1f3 	udiv	r1, r2, r3
 8006b20:	fb01 f303 	mul.w	r3, r1, r3
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d110      	bne.n	8006b4c <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8006b2a:	78fa      	ldrb	r2, [r7, #3]
 8006b2c:	6879      	ldr	r1, [r7, #4]
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	440b      	add	r3, r1
 8006b38:	331c      	adds	r3, #28
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8006b3e:	78f9      	ldrb	r1, [r7, #3]
 8006b40:	2300      	movs	r3, #0
 8006b42:	2200      	movs	r2, #0
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 fdd2 	bl	80086ee <USBD_LL_Transmit>
 8006b4a:	e003      	b.n	8006b54 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8006b54:	2300      	movs	r3, #0
 8006b56:	e000      	b.n	8006b5a <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8006b58:	2302      	movs	r3, #2
  }
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}

08006b62 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006b62:	b580      	push	{r7, lr}
 8006b64:	b084      	sub	sp, #16
 8006b66:	af00      	add	r7, sp, #0
 8006b68:	6078      	str	r0, [r7, #4]
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b74:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f001 fdfd 	bl	800877a <USBD_LL_GetRxDataSize>
 8006b80:	4602      	mov	r2, r0
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d00d      	beq.n	8006bae <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b98:	68db      	ldr	r3, [r3, #12]
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4798      	blx	r3

    return USBD_OK;
 8006baa:	2300      	movs	r3, #0
 8006bac:	e000      	b.n	8006bb0 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 8006bae:	2302      	movs	r3, #2
  }
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bc6:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d015      	beq.n	8006bfe <USBD_CDC_EP0_RxReady+0x46>
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8006bd8:	2bff      	cmp	r3, #255	; 0xff
 8006bda:	d010      	beq.n	8006bfe <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	68fa      	ldr	r2, [r7, #12]
 8006be6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8006bea:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8006bf2:	b292      	uxth	r2, r2
 8006bf4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	22ff      	movs	r2, #255	; 0xff
 8006bfa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 8006bfe:	2300      	movs	r3, #0
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	3710      	adds	r7, #16
 8006c04:	46bd      	mov	sp, r7
 8006c06:	bd80      	pop	{r7, pc}

08006c08 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2243      	movs	r2, #67	; 0x43
 8006c14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8006c16:	4b03      	ldr	r3, [pc, #12]	; (8006c24 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8006c18:	4618      	mov	r0, r3
 8006c1a:	370c      	adds	r7, #12
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bc80      	pop	{r7}
 8006c20:	4770      	bx	lr
 8006c22:	bf00      	nop
 8006c24:	200000c8 	.word	0x200000c8

08006c28 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2243      	movs	r2, #67	; 0x43
 8006c34:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8006c36:	4b03      	ldr	r3, [pc, #12]	; (8006c44 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	370c      	adds	r7, #12
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bc80      	pop	{r7}
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	20000084 	.word	0x20000084

08006c48 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2243      	movs	r2, #67	; 0x43
 8006c54:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8006c56:	4b03      	ldr	r3, [pc, #12]	; (8006c64 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bc80      	pop	{r7}
 8006c60:	4770      	bx	lr
 8006c62:	bf00      	nop
 8006c64:	2000010c 	.word	0x2000010c

08006c68 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b083      	sub	sp, #12
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	220a      	movs	r2, #10
 8006c74:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8006c76:	4b03      	ldr	r3, [pc, #12]	; (8006c84 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	370c      	adds	r7, #12
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bc80      	pop	{r7}
 8006c80:	4770      	bx	lr
 8006c82:	bf00      	nop
 8006c84:	20000040 	.word	0x20000040

08006c88 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b085      	sub	sp, #20
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8006c92:	2302      	movs	r3, #2
 8006c94:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d005      	beq.n	8006ca8 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3714      	adds	r7, #20
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bc80      	pop	{r7}
 8006cb2:	4770      	bx	lr

08006cb4 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b087      	sub	sp, #28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	4613      	mov	r3, r2
 8006cc0:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8006cca:	697b      	ldr	r3, [r7, #20]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8006cd2:	88fa      	ldrh	r2, [r7, #6]
 8006cd4:	697b      	ldr	r3, [r7, #20]
 8006cd6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 8006cda:	2300      	movs	r3, #0
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	371c      	adds	r7, #28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bc80      	pop	{r7}
 8006ce4:	4770      	bx	lr

08006ce6 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b085      	sub	sp, #20
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cf6:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 8006d00:	2300      	movs	r3, #0
}
 8006d02:	4618      	mov	r0, r3
 8006d04:	3714      	adds	r7, #20
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bc80      	pop	{r7}
 8006d0a:	4770      	bx	lr

08006d0c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b084      	sub	sp, #16
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d1a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d01c      	beq.n	8006d60 <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d115      	bne.n	8006d5c <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2201      	movs	r2, #1
 8006d34:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	2181      	movs	r1, #129	; 0x81
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f001 fccb 	bl	80086ee <USBD_LL_Transmit>

      return USBD_OK;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	e002      	b.n	8006d62 <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e000      	b.n	8006d62 <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 8006d60:	2302      	movs	r3, #2
  }
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d6a:	b580      	push	{r7, lr}
 8006d6c:	b084      	sub	sp, #16
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d78:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d017      	beq.n	8006db4 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	7c1b      	ldrb	r3, [r3, #16]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d109      	bne.n	8006da0 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006d92:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006d96:	2101      	movs	r1, #1
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f001 fccb 	bl	8008734 <USBD_LL_PrepareReceive>
 8006d9e:	e007      	b.n	8006db0 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006da6:	2340      	movs	r3, #64	; 0x40
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f001 fcc2 	bl	8008734 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	e000      	b.n	8006db6 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 8006db4:	2302      	movs	r3, #2
  }
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3710      	adds	r7, #16
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}

08006dbe <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006dbe:	b580      	push	{r7, lr}
 8006dc0:	b084      	sub	sp, #16
 8006dc2:	af00      	add	r7, sp, #0
 8006dc4:	60f8      	str	r0, [r7, #12]
 8006dc6:	60b9      	str	r1, [r7, #8]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006dd2:	2302      	movs	r3, #2
 8006dd4:	e01a      	b.n	8006e0c <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d003      	beq.n	8006de8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006de8:	68bb      	ldr	r3, [r7, #8]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	79fa      	ldrb	r2, [r7, #7]
 8006e02:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f001 fb2f 	bl	8008468 <USBD_LL_Init>

  return USBD_OK;
 8006e0a:	2300      	movs	r3, #0
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d006      	beq.n	8006e36 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	683a      	ldr	r2, [r7, #0]
 8006e2c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73fb      	strb	r3, [r7, #15]
 8006e34:	e001      	b.n	8006e3a <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006e36:	2302      	movs	r3, #2
 8006e38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3714      	adds	r7, #20
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bc80      	pop	{r7}
 8006e44:	4770      	bx	lr

08006e46 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f001 fb64 	bl	800851c <USBD_LL_Start>

  return USBD_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3708      	adds	r7, #8
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006e5e:	b480      	push	{r7}
 8006e60:	b083      	sub	sp, #12
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006e66:	2300      	movs	r3, #0
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	370c      	adds	r7, #12
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bc80      	pop	{r7}
 8006e70:	4770      	bx	lr

08006e72 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006e72:	b580      	push	{r7, lr}
 8006e74:	b084      	sub	sp, #16
 8006e76:	af00      	add	r7, sp, #0
 8006e78:	6078      	str	r0, [r7, #4]
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006e7e:	2302      	movs	r3, #2
 8006e80:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d00c      	beq.n	8006ea6 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	78fa      	ldrb	r2, [r7, #3]
 8006e96:	4611      	mov	r1, r2
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	4798      	blx	r3
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006ea6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	3710      	adds	r7, #16
 8006eac:	46bd      	mov	sp, r7
 8006eae:	bd80      	pop	{r7, pc}

08006eb0 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b082      	sub	sp, #8
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	6078      	str	r0, [r7, #4]
 8006eb8:	460b      	mov	r3, r1
 8006eba:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	78fa      	ldrb	r2, [r7, #3]
 8006ec6:	4611      	mov	r1, r2
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	4798      	blx	r3

  return USBD_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3708      	adds	r7, #8
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}

08006ed6 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ed6:	b580      	push	{r7, lr}
 8006ed8:	b082      	sub	sp, #8
 8006eda:	af00      	add	r7, sp, #0
 8006edc:	6078      	str	r0, [r7, #4]
 8006ede:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006ee6:	6839      	ldr	r1, [r7, #0]
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f000 fed8 	bl	8007c9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f0a:	f003 031f 	and.w	r3, r3, #31
 8006f0e:	2b02      	cmp	r3, #2
 8006f10:	d016      	beq.n	8006f40 <USBD_LL_SetupStage+0x6a>
 8006f12:	2b02      	cmp	r3, #2
 8006f14:	d81c      	bhi.n	8006f50 <USBD_LL_SetupStage+0x7a>
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d002      	beq.n	8006f20 <USBD_LL_SetupStage+0x4a>
 8006f1a:	2b01      	cmp	r3, #1
 8006f1c:	d008      	beq.n	8006f30 <USBD_LL_SetupStage+0x5a>
 8006f1e:	e017      	b.n	8006f50 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f26:	4619      	mov	r1, r3
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f000 f9cb 	bl	80072c4 <USBD_StdDevReq>
      break;
 8006f2e:	e01a      	b.n	8006f66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f36:	4619      	mov	r1, r3
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f000 fa2d 	bl	8007398 <USBD_StdItfReq>
      break;
 8006f3e:	e012      	b.n	8006f66 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006f46:	4619      	mov	r1, r3
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa6d 	bl	8007428 <USBD_StdEPReq>
      break;
 8006f4e:	e00a      	b.n	8006f66 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006f56:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006f5a:	b2db      	uxtb	r3, r3
 8006f5c:	4619      	mov	r1, r3
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f001 fb3c 	bl	80085dc <USBD_LL_StallEP>
      break;
 8006f64:	bf00      	nop
  }

  return USBD_OK;
 8006f66:	2300      	movs	r3, #0
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3708      	adds	r7, #8
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b086      	sub	sp, #24
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	460b      	mov	r3, r1
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006f7e:	7afb      	ldrb	r3, [r7, #11]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14b      	bne.n	800701c <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006f8a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006f92:	2b03      	cmp	r3, #3
 8006f94:	d134      	bne.n	8007000 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	68da      	ldr	r2, [r3, #12]
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	429a      	cmp	r2, r3
 8006fa0:	d919      	bls.n	8006fd6 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	68da      	ldr	r2, [r3, #12]
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	1ad2      	subs	r2, r2, r3
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fb0:	697b      	ldr	r3, [r7, #20]
 8006fb2:	68da      	ldr	r2, [r3, #12]
 8006fb4:	697b      	ldr	r3, [r7, #20]
 8006fb6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d203      	bcs.n	8006fc4 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	e002      	b.n	8006fca <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006fc8:	b29b      	uxth	r3, r3
 8006fca:	461a      	mov	r2, r3
 8006fcc:	6879      	ldr	r1, [r7, #4]
 8006fce:	68f8      	ldr	r0, [r7, #12]
 8006fd0:	f000 ff57 	bl	8007e82 <USBD_CtlContinueRx>
 8006fd4:	e038      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d00a      	beq.n	8006ff8 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006fe8:	2b03      	cmp	r3, #3
 8006fea:	d105      	bne.n	8006ff8 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006ff8:	68f8      	ldr	r0, [r7, #12]
 8006ffa:	f000 ff54 	bl	8007ea6 <USBD_CtlSendStatus>
 8006ffe:	e023      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007006:	2b05      	cmp	r3, #5
 8007008:	d11e      	bne.n	8007048 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8007012:	2100      	movs	r1, #0
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f001 fae1 	bl	80085dc <USBD_LL_StallEP>
 800701a:	e015      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007022:	699b      	ldr	r3, [r3, #24]
 8007024:	2b00      	cmp	r3, #0
 8007026:	d00d      	beq.n	8007044 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800702e:	2b03      	cmp	r3, #3
 8007030:	d108      	bne.n	8007044 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	7afa      	ldrb	r2, [r7, #11]
 800703c:	4611      	mov	r1, r2
 800703e:	68f8      	ldr	r0, [r7, #12]
 8007040:	4798      	blx	r3
 8007042:	e001      	b.n	8007048 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007044:	2302      	movs	r3, #2
 8007046:	e000      	b.n	800704a <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3718      	adds	r7, #24
 800704e:	46bd      	mov	sp, r7
 8007050:	bd80      	pop	{r7, pc}

08007052 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007052:	b580      	push	{r7, lr}
 8007054:	b086      	sub	sp, #24
 8007056:	af00      	add	r7, sp, #0
 8007058:	60f8      	str	r0, [r7, #12]
 800705a:	460b      	mov	r3, r1
 800705c:	607a      	str	r2, [r7, #4]
 800705e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d17f      	bne.n	8007166 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	3314      	adds	r3, #20
 800706a:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007072:	2b02      	cmp	r3, #2
 8007074:	d15c      	bne.n	8007130 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007076:	697b      	ldr	r3, [r7, #20]
 8007078:	68da      	ldr	r2, [r3, #12]
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	429a      	cmp	r2, r3
 8007080:	d915      	bls.n	80070ae <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8007082:	697b      	ldr	r3, [r7, #20]
 8007084:	68da      	ldr	r2, [r3, #12]
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	1ad2      	subs	r2, r2, r3
 800708c:	697b      	ldr	r3, [r7, #20]
 800708e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	68db      	ldr	r3, [r3, #12]
 8007094:	b29b      	uxth	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	6879      	ldr	r1, [r7, #4]
 800709a:	68f8      	ldr	r0, [r7, #12]
 800709c:	f000 fec1 	bl	8007e22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070a0:	2300      	movs	r3, #0
 80070a2:	2200      	movs	r2, #0
 80070a4:	2100      	movs	r1, #0
 80070a6:	68f8      	ldr	r0, [r7, #12]
 80070a8:	f001 fb44 	bl	8008734 <USBD_LL_PrepareReceive>
 80070ac:	e04e      	b.n	800714c <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	697a      	ldr	r2, [r7, #20]
 80070b4:	6912      	ldr	r2, [r2, #16]
 80070b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80070ba:	fb01 f202 	mul.w	r2, r1, r2
 80070be:	1a9b      	subs	r3, r3, r2
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d11c      	bne.n	80070fe <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d316      	bcc.n	80070fe <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	689a      	ldr	r2, [r3, #8]
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80070da:	429a      	cmp	r2, r3
 80070dc:	d20f      	bcs.n	80070fe <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80070de:	2200      	movs	r2, #0
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f000 fe9d 	bl	8007e22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070f0:	2300      	movs	r3, #0
 80070f2:	2200      	movs	r2, #0
 80070f4:	2100      	movs	r1, #0
 80070f6:	68f8      	ldr	r0, [r7, #12]
 80070f8:	f001 fb1c 	bl	8008734 <USBD_LL_PrepareReceive>
 80070fc:	e026      	b.n	800714c <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00a      	beq.n	8007120 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007110:	2b03      	cmp	r3, #3
 8007112:	d105      	bne.n	8007120 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	68f8      	ldr	r0, [r7, #12]
 800711e:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8007120:	2180      	movs	r1, #128	; 0x80
 8007122:	68f8      	ldr	r0, [r7, #12]
 8007124:	f001 fa5a 	bl	80085dc <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007128:	68f8      	ldr	r0, [r7, #12]
 800712a:	f000 fecf 	bl	8007ecc <USBD_CtlReceiveStatus>
 800712e:	e00d      	b.n	800714c <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007136:	2b04      	cmp	r3, #4
 8007138:	d004      	beq.n	8007144 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8007140:	2b00      	cmp	r3, #0
 8007142:	d103      	bne.n	800714c <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007144:	2180      	movs	r1, #128	; 0x80
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fa48 	bl	80085dc <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007152:	2b01      	cmp	r3, #1
 8007154:	d11d      	bne.n	8007192 <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f7ff fe81 	bl	8006e5e <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2200      	movs	r2, #0
 8007160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007164:	e015      	b.n	8007192 <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800716c:	695b      	ldr	r3, [r3, #20]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007178:	2b03      	cmp	r3, #3
 800717a:	d108      	bne.n	800718e <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007182:	695b      	ldr	r3, [r3, #20]
 8007184:	7afa      	ldrb	r2, [r7, #11]
 8007186:	4611      	mov	r1, r2
 8007188:	68f8      	ldr	r0, [r7, #12]
 800718a:	4798      	blx	r3
 800718c:	e001      	b.n	8007192 <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800718e:	2302      	movs	r3, #2
 8007190:	e000      	b.n	8007194 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3718      	adds	r7, #24
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071a4:	2340      	movs	r3, #64	; 0x40
 80071a6:	2200      	movs	r2, #0
 80071a8:	2100      	movs	r1, #0
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f001 f9d1 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2201      	movs	r2, #1
 80071b4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2240      	movs	r2, #64	; 0x40
 80071bc:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80071c0:	2340      	movs	r3, #64	; 0x40
 80071c2:	2200      	movs	r2, #0
 80071c4:	2180      	movs	r1, #128	; 0x80
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f001 f9c3 	bl	8008552 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2240      	movs	r2, #64	; 0x40
 80071d6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2200      	movs	r2, #0
 80071e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2200      	movs	r2, #0
 80071f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d009      	beq.n	8007214 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007206:	685b      	ldr	r3, [r3, #4]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	6852      	ldr	r2, [r2, #4]
 800720c:	b2d2      	uxtb	r2, r2
 800720e:	4611      	mov	r1, r2
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	4798      	blx	r3
  }

  return USBD_OK;
 8007214:	2300      	movs	r3, #0
}
 8007216:	4618      	mov	r0, r3
 8007218:	3708      	adds	r7, #8
 800721a:	46bd      	mov	sp, r7
 800721c:	bd80      	pop	{r7, pc}

0800721e <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	460b      	mov	r3, r1
 8007228:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	78fa      	ldrb	r2, [r7, #3]
 800722e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	370c      	adds	r7, #12
 8007236:	46bd      	mov	sp, r7
 8007238:	bc80      	pop	{r7}
 800723a:	4770      	bx	lr

0800723c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2204      	movs	r2, #4
 8007254:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	370c      	adds	r7, #12
 800725e:	46bd      	mov	sp, r7
 8007260:	bc80      	pop	{r7}
 8007262:	4770      	bx	lr

08007264 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007272:	2b04      	cmp	r3, #4
 8007274:	d105      	bne.n	8007282 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	bc80      	pop	{r7}
 800728c:	4770      	bx	lr

0800728e <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b082      	sub	sp, #8
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	2b03      	cmp	r3, #3
 800729e:	d10b      	bne.n	80072b8 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d005      	beq.n	80072b8 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80072b8:	2300      	movs	r3, #0
}
 80072ba:	4618      	mov	r0, r3
 80072bc:	3708      	adds	r7, #8
 80072be:	46bd      	mov	sp, r7
 80072c0:	bd80      	pop	{r7, pc}
	...

080072c4 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b084      	sub	sp, #16
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
 80072cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80072ce:	2300      	movs	r3, #0
 80072d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	781b      	ldrb	r3, [r3, #0]
 80072d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80072da:	2b40      	cmp	r3, #64	; 0x40
 80072dc:	d005      	beq.n	80072ea <USBD_StdDevReq+0x26>
 80072de:	2b40      	cmp	r3, #64	; 0x40
 80072e0:	d84f      	bhi.n	8007382 <USBD_StdDevReq+0xbe>
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d009      	beq.n	80072fa <USBD_StdDevReq+0x36>
 80072e6:	2b20      	cmp	r3, #32
 80072e8:	d14b      	bne.n	8007382 <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	6839      	ldr	r1, [r7, #0]
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	4798      	blx	r3
      break;
 80072f8:	e048      	b.n	800738c <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	785b      	ldrb	r3, [r3, #1]
 80072fe:	2b09      	cmp	r3, #9
 8007300:	d839      	bhi.n	8007376 <USBD_StdDevReq+0xb2>
 8007302:	a201      	add	r2, pc, #4	; (adr r2, 8007308 <USBD_StdDevReq+0x44>)
 8007304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007308:	08007359 	.word	0x08007359
 800730c:	0800736d 	.word	0x0800736d
 8007310:	08007377 	.word	0x08007377
 8007314:	08007363 	.word	0x08007363
 8007318:	08007377 	.word	0x08007377
 800731c:	0800733b 	.word	0x0800733b
 8007320:	08007331 	.word	0x08007331
 8007324:	08007377 	.word	0x08007377
 8007328:	0800734f 	.word	0x0800734f
 800732c:	08007345 	.word	0x08007345
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f9dc 	bl	80076f0 <USBD_GetDescriptor>
          break;
 8007338:	e022      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800733a:	6839      	ldr	r1, [r7, #0]
 800733c:	6878      	ldr	r0, [r7, #4]
 800733e:	f000 fb3f 	bl	80079c0 <USBD_SetAddress>
          break;
 8007342:	e01d      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007344:	6839      	ldr	r1, [r7, #0]
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fb7e 	bl	8007a48 <USBD_SetConfig>
          break;
 800734c:	e018      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 fc07 	bl	8007b64 <USBD_GetConfig>
          break;
 8007356:	e013      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007358:	6839      	ldr	r1, [r7, #0]
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 fc37 	bl	8007bce <USBD_GetStatus>
          break;
 8007360:	e00e      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007362:	6839      	ldr	r1, [r7, #0]
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fc65 	bl	8007c34 <USBD_SetFeature>
          break;
 800736a:	e009      	b.n	8007380 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800736c:	6839      	ldr	r1, [r7, #0]
 800736e:	6878      	ldr	r0, [r7, #4]
 8007370:	f000 fc74 	bl	8007c5c <USBD_ClrFeature>
          break;
 8007374:	e004      	b.n	8007380 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fccc 	bl	8007d16 <USBD_CtlError>
          break;
 800737e:	bf00      	nop
      }
      break;
 8007380:	e004      	b.n	800738c <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007382:	6839      	ldr	r1, [r7, #0]
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fcc6 	bl	8007d16 <USBD_CtlError>
      break;
 800738a:	bf00      	nop
  }

  return ret;
 800738c:	7bfb      	ldrb	r3, [r7, #15]
}
 800738e:	4618      	mov	r0, r3
 8007390:	3710      	adds	r7, #16
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
 8007396:	bf00      	nop

08007398 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b084      	sub	sp, #16
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
 80073a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80073ae:	2b40      	cmp	r3, #64	; 0x40
 80073b0:	d005      	beq.n	80073be <USBD_StdItfReq+0x26>
 80073b2:	2b40      	cmp	r3, #64	; 0x40
 80073b4:	d82e      	bhi.n	8007414 <USBD_StdItfReq+0x7c>
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d001      	beq.n	80073be <USBD_StdItfReq+0x26>
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d12a      	bne.n	8007414 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	3b01      	subs	r3, #1
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d81d      	bhi.n	8007406 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	889b      	ldrh	r3, [r3, #4]
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d813      	bhi.n	80073fc <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073da:	689b      	ldr	r3, [r3, #8]
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	4798      	blx	r3
 80073e2:	4603      	mov	r3, r0
 80073e4:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	88db      	ldrh	r3, [r3, #6]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d110      	bne.n	8007410 <USBD_StdItfReq+0x78>
 80073ee:	7bfb      	ldrb	r3, [r7, #15]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10d      	bne.n	8007410 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f000 fd56 	bl	8007ea6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80073fa:	e009      	b.n	8007410 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	6878      	ldr	r0, [r7, #4]
 8007400:	f000 fc89 	bl	8007d16 <USBD_CtlError>
          break;
 8007404:	e004      	b.n	8007410 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007406:	6839      	ldr	r1, [r7, #0]
 8007408:	6878      	ldr	r0, [r7, #4]
 800740a:	f000 fc84 	bl	8007d16 <USBD_CtlError>
          break;
 800740e:	e000      	b.n	8007412 <USBD_StdItfReq+0x7a>
          break;
 8007410:	bf00      	nop
      }
      break;
 8007412:	e004      	b.n	800741e <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007414:	6839      	ldr	r1, [r7, #0]
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 fc7d 	bl	8007d16 <USBD_CtlError>
      break;
 800741c:	bf00      	nop
  }

  return USBD_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bd80      	pop	{r7, pc}

08007428 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b084      	sub	sp, #16
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007432:	2300      	movs	r3, #0
 8007434:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	889b      	ldrh	r3, [r3, #4]
 800743a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007444:	2b40      	cmp	r3, #64	; 0x40
 8007446:	d007      	beq.n	8007458 <USBD_StdEPReq+0x30>
 8007448:	2b40      	cmp	r3, #64	; 0x40
 800744a:	f200 8146 	bhi.w	80076da <USBD_StdEPReq+0x2b2>
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00a      	beq.n	8007468 <USBD_StdEPReq+0x40>
 8007452:	2b20      	cmp	r3, #32
 8007454:	f040 8141 	bne.w	80076da <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800745e:	689b      	ldr	r3, [r3, #8]
 8007460:	6839      	ldr	r1, [r7, #0]
 8007462:	6878      	ldr	r0, [r7, #4]
 8007464:	4798      	blx	r3
      break;
 8007466:	e13d      	b.n	80076e4 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	781b      	ldrb	r3, [r3, #0]
 800746c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007470:	2b20      	cmp	r3, #32
 8007472:	d10a      	bne.n	800748a <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	6839      	ldr	r1, [r7, #0]
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	4798      	blx	r3
 8007482:	4603      	mov	r3, r0
 8007484:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007486:	7bfb      	ldrb	r3, [r7, #15]
 8007488:	e12d      	b.n	80076e6 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	785b      	ldrb	r3, [r3, #1]
 800748e:	2b03      	cmp	r3, #3
 8007490:	d007      	beq.n	80074a2 <USBD_StdEPReq+0x7a>
 8007492:	2b03      	cmp	r3, #3
 8007494:	f300 811b 	bgt.w	80076ce <USBD_StdEPReq+0x2a6>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d072      	beq.n	8007582 <USBD_StdEPReq+0x15a>
 800749c:	2b01      	cmp	r3, #1
 800749e:	d03a      	beq.n	8007516 <USBD_StdEPReq+0xee>
 80074a0:	e115      	b.n	80076ce <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074a8:	2b02      	cmp	r3, #2
 80074aa:	d002      	beq.n	80074b2 <USBD_StdEPReq+0x8a>
 80074ac:	2b03      	cmp	r3, #3
 80074ae:	d015      	beq.n	80074dc <USBD_StdEPReq+0xb4>
 80074b0:	e02b      	b.n	800750a <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80074b2:	7bbb      	ldrb	r3, [r7, #14]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d00c      	beq.n	80074d2 <USBD_StdEPReq+0xaa>
 80074b8:	7bbb      	ldrb	r3, [r7, #14]
 80074ba:	2b80      	cmp	r3, #128	; 0x80
 80074bc:	d009      	beq.n	80074d2 <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80074be:	7bbb      	ldrb	r3, [r7, #14]
 80074c0:	4619      	mov	r1, r3
 80074c2:	6878      	ldr	r0, [r7, #4]
 80074c4:	f001 f88a 	bl	80085dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80074c8:	2180      	movs	r1, #128	; 0x80
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 f886 	bl	80085dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80074d0:	e020      	b.n	8007514 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80074d2:	6839      	ldr	r1, [r7, #0]
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f000 fc1e 	bl	8007d16 <USBD_CtlError>
              break;
 80074da:	e01b      	b.n	8007514 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	885b      	ldrh	r3, [r3, #2]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d10e      	bne.n	8007502 <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80074e4:	7bbb      	ldrb	r3, [r7, #14]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00b      	beq.n	8007502 <USBD_StdEPReq+0xda>
 80074ea:	7bbb      	ldrb	r3, [r7, #14]
 80074ec:	2b80      	cmp	r3, #128	; 0x80
 80074ee:	d008      	beq.n	8007502 <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	88db      	ldrh	r3, [r3, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d104      	bne.n	8007502 <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80074f8:	7bbb      	ldrb	r3, [r7, #14]
 80074fa:	4619      	mov	r1, r3
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f001 f86d 	bl	80085dc <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fccf 	bl	8007ea6 <USBD_CtlSendStatus>

              break;
 8007508:	e004      	b.n	8007514 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f000 fc02 	bl	8007d16 <USBD_CtlError>
              break;
 8007512:	bf00      	nop
          }
          break;
 8007514:	e0e0      	b.n	80076d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800751c:	2b02      	cmp	r3, #2
 800751e:	d002      	beq.n	8007526 <USBD_StdEPReq+0xfe>
 8007520:	2b03      	cmp	r3, #3
 8007522:	d015      	beq.n	8007550 <USBD_StdEPReq+0x128>
 8007524:	e026      	b.n	8007574 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007526:	7bbb      	ldrb	r3, [r7, #14]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00c      	beq.n	8007546 <USBD_StdEPReq+0x11e>
 800752c:	7bbb      	ldrb	r3, [r7, #14]
 800752e:	2b80      	cmp	r3, #128	; 0x80
 8007530:	d009      	beq.n	8007546 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007532:	7bbb      	ldrb	r3, [r7, #14]
 8007534:	4619      	mov	r1, r3
 8007536:	6878      	ldr	r0, [r7, #4]
 8007538:	f001 f850 	bl	80085dc <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 800753c:	2180      	movs	r1, #128	; 0x80
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f001 f84c 	bl	80085dc <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007544:	e01c      	b.n	8007580 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007546:	6839      	ldr	r1, [r7, #0]
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fbe4 	bl	8007d16 <USBD_CtlError>
              break;
 800754e:	e017      	b.n	8007580 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	885b      	ldrh	r3, [r3, #2]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d112      	bne.n	800757e <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007558:	7bbb      	ldrb	r3, [r7, #14]
 800755a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800755e:	2b00      	cmp	r3, #0
 8007560:	d004      	beq.n	800756c <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007562:	7bbb      	ldrb	r3, [r7, #14]
 8007564:	4619      	mov	r1, r3
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f001 f857 	bl	800861a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fc9a 	bl	8007ea6 <USBD_CtlSendStatus>
              }
              break;
 8007572:	e004      	b.n	800757e <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fbcd 	bl	8007d16 <USBD_CtlError>
              break;
 800757c:	e000      	b.n	8007580 <USBD_StdEPReq+0x158>
              break;
 800757e:	bf00      	nop
          }
          break;
 8007580:	e0aa      	b.n	80076d8 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007588:	2b02      	cmp	r3, #2
 800758a:	d002      	beq.n	8007592 <USBD_StdEPReq+0x16a>
 800758c:	2b03      	cmp	r3, #3
 800758e:	d032      	beq.n	80075f6 <USBD_StdEPReq+0x1ce>
 8007590:	e097      	b.n	80076c2 <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007592:	7bbb      	ldrb	r3, [r7, #14]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d007      	beq.n	80075a8 <USBD_StdEPReq+0x180>
 8007598:	7bbb      	ldrb	r3, [r7, #14]
 800759a:	2b80      	cmp	r3, #128	; 0x80
 800759c:	d004      	beq.n	80075a8 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 800759e:	6839      	ldr	r1, [r7, #0]
 80075a0:	6878      	ldr	r0, [r7, #4]
 80075a2:	f000 fbb8 	bl	8007d16 <USBD_CtlError>
                break;
 80075a6:	e091      	b.n	80076cc <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	da0b      	bge.n	80075c8 <USBD_StdEPReq+0x1a0>
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80075b6:	4613      	mov	r3, r2
 80075b8:	009b      	lsls	r3, r3, #2
 80075ba:	4413      	add	r3, r2
 80075bc:	009b      	lsls	r3, r3, #2
 80075be:	3310      	adds	r3, #16
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	3304      	adds	r3, #4
 80075c6:	e00b      	b.n	80075e0 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80075c8:	7bbb      	ldrb	r3, [r7, #14]
 80075ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80075ce:	4613      	mov	r3, r2
 80075d0:	009b      	lsls	r3, r3, #2
 80075d2:	4413      	add	r3, r2
 80075d4:	009b      	lsls	r3, r3, #2
 80075d6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	3304      	adds	r3, #4
 80075e0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	2200      	movs	r2, #0
 80075e6:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2202      	movs	r2, #2
 80075ec:	4619      	mov	r1, r3
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fbfb 	bl	8007dea <USBD_CtlSendData>
              break;
 80075f4:	e06a      	b.n	80076cc <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80075f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	da11      	bge.n	8007622 <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80075fe:	7bbb      	ldrb	r3, [r7, #14]
 8007600:	f003 020f 	and.w	r2, r3, #15
 8007604:	6879      	ldr	r1, [r7, #4]
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	440b      	add	r3, r1
 8007610:	3318      	adds	r3, #24
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d117      	bne.n	8007648 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007618:	6839      	ldr	r1, [r7, #0]
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 fb7b 	bl	8007d16 <USBD_CtlError>
                  break;
 8007620:	e054      	b.n	80076cc <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007622:	7bbb      	ldrb	r3, [r7, #14]
 8007624:	f003 020f 	and.w	r2, r3, #15
 8007628:	6879      	ldr	r1, [r7, #4]
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	440b      	add	r3, r1
 8007634:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d104      	bne.n	8007648 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 800763e:	6839      	ldr	r1, [r7, #0]
 8007640:	6878      	ldr	r0, [r7, #4]
 8007642:	f000 fb68 	bl	8007d16 <USBD_CtlError>
                  break;
 8007646:	e041      	b.n	80076cc <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007648:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800764c:	2b00      	cmp	r3, #0
 800764e:	da0b      	bge.n	8007668 <USBD_StdEPReq+0x240>
 8007650:	7bbb      	ldrb	r3, [r7, #14]
 8007652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007656:	4613      	mov	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	4413      	add	r3, r2
 800765c:	009b      	lsls	r3, r3, #2
 800765e:	3310      	adds	r3, #16
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	4413      	add	r3, r2
 8007664:	3304      	adds	r3, #4
 8007666:	e00b      	b.n	8007680 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007668:	7bbb      	ldrb	r3, [r7, #14]
 800766a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800766e:	4613      	mov	r3, r2
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800767a:	687a      	ldr	r2, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	3304      	adds	r3, #4
 8007680:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007682:	7bbb      	ldrb	r3, [r7, #14]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <USBD_StdEPReq+0x266>
 8007688:	7bbb      	ldrb	r3, [r7, #14]
 800768a:	2b80      	cmp	r3, #128	; 0x80
 800768c:	d103      	bne.n	8007696 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 800768e:	68bb      	ldr	r3, [r7, #8]
 8007690:	2200      	movs	r2, #0
 8007692:	601a      	str	r2, [r3, #0]
 8007694:	e00e      	b.n	80076b4 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007696:	7bbb      	ldrb	r3, [r7, #14]
 8007698:	4619      	mov	r1, r3
 800769a:	6878      	ldr	r0, [r7, #4]
 800769c:	f000 ffdc 	bl	8008658 <USBD_LL_IsStallEP>
 80076a0:	4603      	mov	r3, r0
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	2201      	movs	r2, #1
 80076aa:	601a      	str	r2, [r3, #0]
 80076ac:	e002      	b.n	80076b4 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	2200      	movs	r2, #0
 80076b2:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	2202      	movs	r2, #2
 80076b8:	4619      	mov	r1, r3
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f000 fb95 	bl	8007dea <USBD_CtlSendData>
              break;
 80076c0:	e004      	b.n	80076cc <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80076c2:	6839      	ldr	r1, [r7, #0]
 80076c4:	6878      	ldr	r0, [r7, #4]
 80076c6:	f000 fb26 	bl	8007d16 <USBD_CtlError>
              break;
 80076ca:	bf00      	nop
          }
          break;
 80076cc:	e004      	b.n	80076d8 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80076ce:	6839      	ldr	r1, [r7, #0]
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fb20 	bl	8007d16 <USBD_CtlError>
          break;
 80076d6:	bf00      	nop
      }
      break;
 80076d8:	e004      	b.n	80076e4 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80076da:	6839      	ldr	r1, [r7, #0]
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fb1a 	bl	8007d16 <USBD_CtlError>
      break;
 80076e2:	bf00      	nop
  }

  return ret;
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3710      	adds	r7, #16
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b084      	sub	sp, #16
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80076fa:	2300      	movs	r3, #0
 80076fc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007702:	2300      	movs	r3, #0
 8007704:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	885b      	ldrh	r3, [r3, #2]
 800770a:	0a1b      	lsrs	r3, r3, #8
 800770c:	b29b      	uxth	r3, r3
 800770e:	3b01      	subs	r3, #1
 8007710:	2b06      	cmp	r3, #6
 8007712:	f200 8128 	bhi.w	8007966 <USBD_GetDescriptor+0x276>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <USBD_GetDescriptor+0x2c>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007739 	.word	0x08007739
 8007720:	08007751 	.word	0x08007751
 8007724:	08007791 	.word	0x08007791
 8007728:	08007967 	.word	0x08007967
 800772c:	08007967 	.word	0x08007967
 8007730:	08007907 	.word	0x08007907
 8007734:	08007933 	.word	0x08007933
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	687a      	ldr	r2, [r7, #4]
 8007742:	7c12      	ldrb	r2, [r2, #16]
 8007744:	f107 0108 	add.w	r1, r7, #8
 8007748:	4610      	mov	r0, r2
 800774a:	4798      	blx	r3
 800774c:	60f8      	str	r0, [r7, #12]
      break;
 800774e:	e112      	b.n	8007976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	7c1b      	ldrb	r3, [r3, #16]
 8007754:	2b00      	cmp	r3, #0
 8007756:	d10d      	bne.n	8007774 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800775e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007760:	f107 0208 	add.w	r2, r7, #8
 8007764:	4610      	mov	r0, r2
 8007766:	4798      	blx	r3
 8007768:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	3301      	adds	r3, #1
 800776e:	2202      	movs	r2, #2
 8007770:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007772:	e100      	b.n	8007976 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800777a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800777c:	f107 0208 	add.w	r2, r7, #8
 8007780:	4610      	mov	r0, r2
 8007782:	4798      	blx	r3
 8007784:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	3301      	adds	r3, #1
 800778a:	2202      	movs	r2, #2
 800778c:	701a      	strb	r2, [r3, #0]
      break;
 800778e:	e0f2      	b.n	8007976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	885b      	ldrh	r3, [r3, #2]
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b05      	cmp	r3, #5
 8007798:	f200 80ac 	bhi.w	80078f4 <USBD_GetDescriptor+0x204>
 800779c:	a201      	add	r2, pc, #4	; (adr r2, 80077a4 <USBD_GetDescriptor+0xb4>)
 800779e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a2:	bf00      	nop
 80077a4:	080077bd 	.word	0x080077bd
 80077a8:	080077f1 	.word	0x080077f1
 80077ac:	08007825 	.word	0x08007825
 80077b0:	08007859 	.word	0x08007859
 80077b4:	0800788d 	.word	0x0800788d
 80077b8:	080078c1 	.word	0x080078c1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00b      	beq.n	80077e0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	7c12      	ldrb	r2, [r2, #16]
 80077d4:	f107 0108 	add.w	r1, r7, #8
 80077d8:	4610      	mov	r0, r2
 80077da:	4798      	blx	r3
 80077dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80077de:	e091      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80077e0:	6839      	ldr	r1, [r7, #0]
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fa97 	bl	8007d16 <USBD_CtlError>
            err++;
 80077e8:	7afb      	ldrb	r3, [r7, #11]
 80077ea:	3301      	adds	r3, #1
 80077ec:	72fb      	strb	r3, [r7, #11]
          break;
 80077ee:	e089      	b.n	8007904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80077f6:	689b      	ldr	r3, [r3, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d00b      	beq.n	8007814 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	7c12      	ldrb	r2, [r2, #16]
 8007808:	f107 0108 	add.w	r1, r7, #8
 800780c:	4610      	mov	r0, r2
 800780e:	4798      	blx	r3
 8007810:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007812:	e077      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007814:	6839      	ldr	r1, [r7, #0]
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f000 fa7d 	bl	8007d16 <USBD_CtlError>
            err++;
 800781c:	7afb      	ldrb	r3, [r7, #11]
 800781e:	3301      	adds	r3, #1
 8007820:	72fb      	strb	r3, [r7, #11]
          break;
 8007822:	e06f      	b.n	8007904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00b      	beq.n	8007848 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007836:	68db      	ldr	r3, [r3, #12]
 8007838:	687a      	ldr	r2, [r7, #4]
 800783a:	7c12      	ldrb	r2, [r2, #16]
 800783c:	f107 0108 	add.w	r1, r7, #8
 8007840:	4610      	mov	r0, r2
 8007842:	4798      	blx	r3
 8007844:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007846:	e05d      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007848:	6839      	ldr	r1, [r7, #0]
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f000 fa63 	bl	8007d16 <USBD_CtlError>
            err++;
 8007850:	7afb      	ldrb	r3, [r7, #11]
 8007852:	3301      	adds	r3, #1
 8007854:	72fb      	strb	r3, [r7, #11]
          break;
 8007856:	e055      	b.n	8007904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800785e:	691b      	ldr	r3, [r3, #16]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d00b      	beq.n	800787c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800786a:	691b      	ldr	r3, [r3, #16]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	7c12      	ldrb	r2, [r2, #16]
 8007870:	f107 0108 	add.w	r1, r7, #8
 8007874:	4610      	mov	r0, r2
 8007876:	4798      	blx	r3
 8007878:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800787a:	e043      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800787c:	6839      	ldr	r1, [r7, #0]
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa49 	bl	8007d16 <USBD_CtlError>
            err++;
 8007884:	7afb      	ldrb	r3, [r7, #11]
 8007886:	3301      	adds	r3, #1
 8007888:	72fb      	strb	r3, [r7, #11]
          break;
 800788a:	e03b      	b.n	8007904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007892:	695b      	ldr	r3, [r3, #20]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00b      	beq.n	80078b0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	687a      	ldr	r2, [r7, #4]
 80078a2:	7c12      	ldrb	r2, [r2, #16]
 80078a4:	f107 0108 	add.w	r1, r7, #8
 80078a8:	4610      	mov	r0, r2
 80078aa:	4798      	blx	r3
 80078ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078ae:	e029      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fa2f 	bl	8007d16 <USBD_CtlError>
            err++;
 80078b8:	7afb      	ldrb	r3, [r7, #11]
 80078ba:	3301      	adds	r3, #1
 80078bc:	72fb      	strb	r3, [r7, #11]
          break;
 80078be:	e021      	b.n	8007904 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078c6:	699b      	ldr	r3, [r3, #24]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d00b      	beq.n	80078e4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	687a      	ldr	r2, [r7, #4]
 80078d6:	7c12      	ldrb	r2, [r2, #16]
 80078d8:	f107 0108 	add.w	r1, r7, #8
 80078dc:	4610      	mov	r0, r2
 80078de:	4798      	blx	r3
 80078e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80078e2:	e00f      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fa15 	bl	8007d16 <USBD_CtlError>
            err++;
 80078ec:	7afb      	ldrb	r3, [r7, #11]
 80078ee:	3301      	adds	r3, #1
 80078f0:	72fb      	strb	r3, [r7, #11]
          break;
 80078f2:	e007      	b.n	8007904 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80078f4:	6839      	ldr	r1, [r7, #0]
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 fa0d 	bl	8007d16 <USBD_CtlError>
          err++;
 80078fc:	7afb      	ldrb	r3, [r7, #11]
 80078fe:	3301      	adds	r3, #1
 8007900:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8007902:	e038      	b.n	8007976 <USBD_GetDescriptor+0x286>
 8007904:	e037      	b.n	8007976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	7c1b      	ldrb	r3, [r3, #16]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d109      	bne.n	8007922 <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	f107 0208 	add.w	r2, r7, #8
 800791a:	4610      	mov	r0, r2
 800791c:	4798      	blx	r3
 800791e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007920:	e029      	b.n	8007976 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007922:	6839      	ldr	r1, [r7, #0]
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 f9f6 	bl	8007d16 <USBD_CtlError>
        err++;
 800792a:	7afb      	ldrb	r3, [r7, #11]
 800792c:	3301      	adds	r3, #1
 800792e:	72fb      	strb	r3, [r7, #11]
      break;
 8007930:	e021      	b.n	8007976 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	7c1b      	ldrb	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d10d      	bne.n	8007956 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007942:	f107 0208 	add.w	r2, r7, #8
 8007946:	4610      	mov	r0, r2
 8007948:	4798      	blx	r3
 800794a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	3301      	adds	r3, #1
 8007950:	2207      	movs	r2, #7
 8007952:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007954:	e00f      	b.n	8007976 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007956:	6839      	ldr	r1, [r7, #0]
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f000 f9dc 	bl	8007d16 <USBD_CtlError>
        err++;
 800795e:	7afb      	ldrb	r3, [r7, #11]
 8007960:	3301      	adds	r3, #1
 8007962:	72fb      	strb	r3, [r7, #11]
      break;
 8007964:	e007      	b.n	8007976 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007966:	6839      	ldr	r1, [r7, #0]
 8007968:	6878      	ldr	r0, [r7, #4]
 800796a:	f000 f9d4 	bl	8007d16 <USBD_CtlError>
      err++;
 800796e:	7afb      	ldrb	r3, [r7, #11]
 8007970:	3301      	adds	r3, #1
 8007972:	72fb      	strb	r3, [r7, #11]
      break;
 8007974:	bf00      	nop
  }

  if (err != 0U)
 8007976:	7afb      	ldrb	r3, [r7, #11]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d11c      	bne.n	80079b6 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 800797c:	893b      	ldrh	r3, [r7, #8]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d011      	beq.n	80079a6 <USBD_GetDescriptor+0x2b6>
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	88db      	ldrh	r3, [r3, #6]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00d      	beq.n	80079a6 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	88da      	ldrh	r2, [r3, #6]
 800798e:	893b      	ldrh	r3, [r7, #8]
 8007990:	4293      	cmp	r3, r2
 8007992:	bf28      	it	cs
 8007994:	4613      	movcs	r3, r2
 8007996:	b29b      	uxth	r3, r3
 8007998:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800799a:	893b      	ldrh	r3, [r7, #8]
 800799c:	461a      	mov	r2, r3
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f000 fa22 	bl	8007dea <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80079a6:	683b      	ldr	r3, [r7, #0]
 80079a8:	88db      	ldrh	r3, [r3, #6]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f000 fa79 	bl	8007ea6 <USBD_CtlSendStatus>
 80079b4:	e000      	b.n	80079b8 <USBD_GetDescriptor+0x2c8>
    return;
 80079b6:	bf00      	nop
    }
  }
}
 80079b8:	3710      	adds	r7, #16
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop

080079c0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
 80079c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	889b      	ldrh	r3, [r3, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d130      	bne.n	8007a34 <USBD_SetAddress+0x74>
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	88db      	ldrh	r3, [r3, #6]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d12c      	bne.n	8007a34 <USBD_SetAddress+0x74>
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	885b      	ldrh	r3, [r3, #2]
 80079de:	2b7f      	cmp	r3, #127	; 0x7f
 80079e0:	d828      	bhi.n	8007a34 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	885b      	ldrh	r3, [r3, #2]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80079f4:	2b03      	cmp	r3, #3
 80079f6:	d104      	bne.n	8007a02 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80079f8:	6839      	ldr	r1, [r7, #0]
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 f98b 	bl	8007d16 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a00:	e01d      	b.n	8007a3e <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	7bfa      	ldrb	r2, [r7, #15]
 8007a06:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007a0a:	7bfb      	ldrb	r3, [r7, #15]
 8007a0c:	4619      	mov	r1, r3
 8007a0e:	6878      	ldr	r0, [r7, #4]
 8007a10:	f000 fe4e 	bl	80086b0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8007a14:	6878      	ldr	r0, [r7, #4]
 8007a16:	f000 fa46 	bl	8007ea6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d004      	beq.n	8007a2a <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2202      	movs	r2, #2
 8007a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a28:	e009      	b.n	8007a3e <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2201      	movs	r2, #1
 8007a2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a32:	e004      	b.n	8007a3e <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007a34:	6839      	ldr	r1, [r7, #0]
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f96d 	bl	8007d16 <USBD_CtlError>
  }
}
 8007a3c:	bf00      	nop
 8007a3e:	bf00      	nop
 8007a40:	3710      	adds	r7, #16
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
	...

08007a48 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	885b      	ldrh	r3, [r3, #2]
 8007a56:	b2da      	uxtb	r2, r3
 8007a58:	4b41      	ldr	r3, [pc, #260]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a5a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007a5c:	4b40      	ldr	r3, [pc, #256]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	2b01      	cmp	r3, #1
 8007a62:	d904      	bls.n	8007a6e <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8007a64:	6839      	ldr	r1, [r7, #0]
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f000 f955 	bl	8007d16 <USBD_CtlError>
 8007a6c:	e075      	b.n	8007b5a <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a74:	2b02      	cmp	r3, #2
 8007a76:	d002      	beq.n	8007a7e <USBD_SetConfig+0x36>
 8007a78:	2b03      	cmp	r3, #3
 8007a7a:	d023      	beq.n	8007ac4 <USBD_SetConfig+0x7c>
 8007a7c:	e062      	b.n	8007b44 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007a7e:	4b38      	ldr	r3, [pc, #224]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a80:	781b      	ldrb	r3, [r3, #0]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d01a      	beq.n	8007abc <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8007a86:	4b36      	ldr	r3, [pc, #216]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	461a      	mov	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2203      	movs	r2, #3
 8007a94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007a98:	4b31      	ldr	r3, [pc, #196]	; (8007b60 <USBD_SetConfig+0x118>)
 8007a9a:	781b      	ldrb	r3, [r3, #0]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f7ff f9e7 	bl	8006e72 <USBD_SetClassConfig>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b02      	cmp	r3, #2
 8007aa8:	d104      	bne.n	8007ab4 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8007aaa:	6839      	ldr	r1, [r7, #0]
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f932 	bl	8007d16 <USBD_CtlError>
            return;
 8007ab2:	e052      	b.n	8007b5a <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 f9f6 	bl	8007ea6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007aba:	e04e      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 f9f2 	bl	8007ea6 <USBD_CtlSendStatus>
        break;
 8007ac2:	e04a      	b.n	8007b5a <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8007ac4:	4b26      	ldr	r3, [pc, #152]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d112      	bne.n	8007af2 <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8007ad4:	4b22      	ldr	r3, [pc, #136]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ad6:	781b      	ldrb	r3, [r3, #0]
 8007ad8:	461a      	mov	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8007ade:	4b20      	ldr	r3, [pc, #128]	; (8007b60 <USBD_SetConfig+0x118>)
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	4619      	mov	r1, r3
 8007ae4:	6878      	ldr	r0, [r7, #4]
 8007ae6:	f7ff f9e3 	bl	8006eb0 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8007aea:	6878      	ldr	r0, [r7, #4]
 8007aec:	f000 f9db 	bl	8007ea6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8007af0:	e033      	b.n	8007b5a <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8007af2:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <USBD_SetConfig+0x118>)
 8007af4:	781b      	ldrb	r3, [r3, #0]
 8007af6:	461a      	mov	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	429a      	cmp	r2, r3
 8007afe:	d01d      	beq.n	8007b3c <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	685b      	ldr	r3, [r3, #4]
 8007b04:	b2db      	uxtb	r3, r3
 8007b06:	4619      	mov	r1, r3
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff f9d1 	bl	8006eb0 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007b0e:	4b14      	ldr	r3, [pc, #80]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b10:	781b      	ldrb	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007b18:	4b11      	ldr	r3, [pc, #68]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b1a:	781b      	ldrb	r3, [r3, #0]
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7ff f9a7 	bl	8006e72 <USBD_SetClassConfig>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b02      	cmp	r3, #2
 8007b28:	d104      	bne.n	8007b34 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007b2a:	6839      	ldr	r1, [r7, #0]
 8007b2c:	6878      	ldr	r0, [r7, #4]
 8007b2e:	f000 f8f2 	bl	8007d16 <USBD_CtlError>
            return;
 8007b32:	e012      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f000 f9b6 	bl	8007ea6 <USBD_CtlSendStatus>
        break;
 8007b3a:	e00e      	b.n	8007b5a <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 f9b2 	bl	8007ea6 <USBD_CtlSendStatus>
        break;
 8007b42:	e00a      	b.n	8007b5a <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8007b44:	6839      	ldr	r1, [r7, #0]
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 f8e5 	bl	8007d16 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007b4c:	4b04      	ldr	r3, [pc, #16]	; (8007b60 <USBD_SetConfig+0x118>)
 8007b4e:	781b      	ldrb	r3, [r3, #0]
 8007b50:	4619      	mov	r1, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff f9ac 	bl	8006eb0 <USBD_ClrClassConfig>
        break;
 8007b58:	bf00      	nop
    }
  }
}
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000208 	.word	0x20000208

08007b64 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
 8007b6c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	88db      	ldrh	r3, [r3, #6]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d004      	beq.n	8007b80 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007b76:	6839      	ldr	r1, [r7, #0]
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 f8cc 	bl	8007d16 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007b7e:	e022      	b.n	8007bc6 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	dc02      	bgt.n	8007b90 <USBD_GetConfig+0x2c>
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	dc03      	bgt.n	8007b96 <USBD_GetConfig+0x32>
 8007b8e:	e015      	b.n	8007bbc <USBD_GetConfig+0x58>
 8007b90:	2b03      	cmp	r3, #3
 8007b92:	d00b      	beq.n	8007bac <USBD_GetConfig+0x48>
 8007b94:	e012      	b.n	8007bbc <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3308      	adds	r3, #8
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	4619      	mov	r1, r3
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f000 f920 	bl	8007dea <USBD_CtlSendData>
        break;
 8007baa:	e00c      	b.n	8007bc6 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	3304      	adds	r3, #4
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	6878      	ldr	r0, [r7, #4]
 8007bb6:	f000 f918 	bl	8007dea <USBD_CtlSendData>
        break;
 8007bba:	e004      	b.n	8007bc6 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8007bbc:	6839      	ldr	r1, [r7, #0]
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 f8a9 	bl	8007d16 <USBD_CtlError>
        break;
 8007bc4:	bf00      	nop
}
 8007bc6:	bf00      	nop
 8007bc8:	3708      	adds	r7, #8
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}

08007bce <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b082      	sub	sp, #8
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bde:	3b01      	subs	r3, #1
 8007be0:	2b02      	cmp	r3, #2
 8007be2:	d81e      	bhi.n	8007c22 <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	88db      	ldrh	r3, [r3, #6]
 8007be8:	2b02      	cmp	r3, #2
 8007bea:	d004      	beq.n	8007bf6 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 f891 	bl	8007d16 <USBD_CtlError>
        break;
 8007bf4:	e01a      	b.n	8007c2c <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d005      	beq.n	8007c12 <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	f043 0202 	orr.w	r2, r3, #2
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	330c      	adds	r3, #12
 8007c16:	2202      	movs	r2, #2
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f8e5 	bl	8007dea <USBD_CtlSendData>
      break;
 8007c20:	e004      	b.n	8007c2c <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 f876 	bl	8007d16 <USBD_CtlError>
      break;
 8007c2a:	bf00      	nop
  }
}
 8007c2c:	bf00      	nop
 8007c2e:	3708      	adds	r7, #8
 8007c30:	46bd      	mov	sp, r7
 8007c32:	bd80      	pop	{r7, pc}

08007c34 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c34:	b580      	push	{r7, lr}
 8007c36:	b082      	sub	sp, #8
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
 8007c3c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d106      	bne.n	8007c54 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2201      	movs	r2, #1
 8007c4a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f929 	bl	8007ea6 <USBD_CtlSendStatus>
  }
}
 8007c54:	bf00      	nop
 8007c56:	3708      	adds	r7, #8
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	bd80      	pop	{r7, pc}

08007c5c <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	b082      	sub	sp, #8
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c6c:	3b01      	subs	r3, #1
 8007c6e:	2b02      	cmp	r3, #2
 8007c70:	d80b      	bhi.n	8007c8a <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	885b      	ldrh	r3, [r3, #2]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d10c      	bne.n	8007c94 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f90f 	bl	8007ea6 <USBD_CtlSendStatus>
      }
      break;
 8007c88:	e004      	b.n	8007c94 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 f842 	bl	8007d16 <USBD_CtlError>
      break;
 8007c92:	e000      	b.n	8007c96 <USBD_ClrFeature+0x3a>
      break;
 8007c94:	bf00      	nop
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	781a      	ldrb	r2, [r3, #0]
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	785a      	ldrb	r2, [r3, #1]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8007cb8:	683b      	ldr	r3, [r7, #0]
 8007cba:	3302      	adds	r3, #2
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	b29a      	uxth	r2, r3
 8007cc0:	683b      	ldr	r3, [r7, #0]
 8007cc2:	3303      	adds	r3, #3
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	4413      	add	r3, r2
 8007cce:	b29a      	uxth	r2, r3
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	3304      	adds	r3, #4
 8007cd8:	781b      	ldrb	r3, [r3, #0]
 8007cda:	b29a      	uxth	r2, r3
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	3305      	adds	r3, #5
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	b29b      	uxth	r3, r3
 8007ce4:	021b      	lsls	r3, r3, #8
 8007ce6:	b29b      	uxth	r3, r3
 8007ce8:	4413      	add	r3, r2
 8007cea:	b29a      	uxth	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8007cf0:	683b      	ldr	r3, [r7, #0]
 8007cf2:	3306      	adds	r3, #6
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	b29a      	uxth	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	3307      	adds	r3, #7
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	021b      	lsls	r3, r3, #8
 8007d02:	b29b      	uxth	r3, r3
 8007d04:	4413      	add	r3, r2
 8007d06:	b29a      	uxth	r2, r3
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	80da      	strh	r2, [r3, #6]

}
 8007d0c:	bf00      	nop
 8007d0e:	370c      	adds	r7, #12
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bc80      	pop	{r7}
 8007d14:	4770      	bx	lr

08007d16 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b082      	sub	sp, #8
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 fc5a 	bl	80085dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc56 	bl	80085dc <USBD_LL_StallEP>
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d032      	beq.n	8007db4 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 f834 	bl	8007dbc <USBD_GetLen>
 8007d54:	4603      	mov	r3, r0
 8007d56:	3301      	adds	r3, #1
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	005b      	lsls	r3, r3, #1
 8007d5c:	b29a      	uxth	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007d62:	7dfb      	ldrb	r3, [r7, #23]
 8007d64:	1c5a      	adds	r2, r3, #1
 8007d66:	75fa      	strb	r2, [r7, #23]
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007d74:	7dfb      	ldrb	r3, [r7, #23]
 8007d76:	1c5a      	adds	r2, r3, #1
 8007d78:	75fa      	strb	r2, [r7, #23]
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	4413      	add	r3, r2
 8007d80:	2203      	movs	r2, #3
 8007d82:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007d84:	e012      	b.n	8007dac <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	1c5a      	adds	r2, r3, #1
 8007d8a:	60fa      	str	r2, [r7, #12]
 8007d8c:	7dfa      	ldrb	r2, [r7, #23]
 8007d8e:	1c51      	adds	r1, r2, #1
 8007d90:	75f9      	strb	r1, [r7, #23]
 8007d92:	4611      	mov	r1, r2
 8007d94:	68ba      	ldr	r2, [r7, #8]
 8007d96:	440a      	add	r2, r1
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007d9c:	7dfb      	ldrb	r3, [r7, #23]
 8007d9e:	1c5a      	adds	r2, r3, #1
 8007da0:	75fa      	strb	r2, [r7, #23]
 8007da2:	461a      	mov	r2, r3
 8007da4:	68bb      	ldr	r3, [r7, #8]
 8007da6:	4413      	add	r3, r2
 8007da8:	2200      	movs	r2, #0
 8007daa:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	781b      	ldrb	r3, [r3, #0]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d1e8      	bne.n	8007d86 <USBD_GetString+0x4e>
    }
  }
}
 8007db4:	bf00      	nop
 8007db6:	3718      	adds	r7, #24
 8007db8:	46bd      	mov	sp, r7
 8007dba:	bd80      	pop	{r7, pc}

08007dbc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b085      	sub	sp, #20
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007dc8:	e005      	b.n	8007dd6 <USBD_GetLen+0x1a>
  {
    len++;
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	3301      	adds	r3, #1
 8007dce:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d1f5      	bne.n	8007dca <USBD_GetLen+0xe>
  }

  return len;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3714      	adds	r7, #20
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bc80      	pop	{r7}
 8007de8:	4770      	bx	lr

08007dea <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007dea:	b580      	push	{r7, lr}
 8007dec:	b084      	sub	sp, #16
 8007dee:	af00      	add	r7, sp, #0
 8007df0:	60f8      	str	r0, [r7, #12]
 8007df2:	60b9      	str	r1, [r7, #8]
 8007df4:	4613      	mov	r3, r2
 8007df6:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	2202      	movs	r2, #2
 8007dfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e00:	88fa      	ldrh	r2, [r7, #6]
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e06:	88fa      	ldrh	r2, [r7, #6]
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e0c:	88fb      	ldrh	r3, [r7, #6]
 8007e0e:	68ba      	ldr	r2, [r7, #8]
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 fc6b 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007e18:	2300      	movs	r3, #0
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	60f8      	str	r0, [r7, #12]
 8007e2a:	60b9      	str	r1, [r7, #8]
 8007e2c:	4613      	mov	r3, r2
 8007e2e:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e30:	88fb      	ldrh	r3, [r7, #6]
 8007e32:	68ba      	ldr	r2, [r7, #8]
 8007e34:	2100      	movs	r1, #0
 8007e36:	68f8      	ldr	r0, [r7, #12]
 8007e38:	f000 fc59 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007e3c:	2300      	movs	r3, #0
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3710      	adds	r7, #16
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}

08007e46 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8007e46:	b580      	push	{r7, lr}
 8007e48:	b084      	sub	sp, #16
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	60f8      	str	r0, [r7, #12]
 8007e4e:	60b9      	str	r1, [r7, #8]
 8007e50:	4613      	mov	r3, r2
 8007e52:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2203      	movs	r2, #3
 8007e58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007e5c:	88fa      	ldrh	r2, [r7, #6]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8007e64:	88fa      	ldrh	r2, [r7, #6]
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e6c:	88fb      	ldrh	r3, [r7, #6]
 8007e6e:	68ba      	ldr	r2, [r7, #8]
 8007e70:	2100      	movs	r1, #0
 8007e72:	68f8      	ldr	r0, [r7, #12]
 8007e74:	f000 fc5e 	bl	8008734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e78:	2300      	movs	r3, #0
}
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	3710      	adds	r7, #16
 8007e7e:	46bd      	mov	sp, r7
 8007e80:	bd80      	pop	{r7, pc}

08007e82 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e82:	b580      	push	{r7, lr}
 8007e84:	b084      	sub	sp, #16
 8007e86:	af00      	add	r7, sp, #0
 8007e88:	60f8      	str	r0, [r7, #12]
 8007e8a:	60b9      	str	r1, [r7, #8]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e90:	88fb      	ldrh	r3, [r7, #6]
 8007e92:	68ba      	ldr	r2, [r7, #8]
 8007e94:	2100      	movs	r1, #0
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	f000 fc4c 	bl	8008734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007ea6:	b580      	push	{r7, lr}
 8007ea8:	b082      	sub	sp, #8
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2204      	movs	r2, #4
 8007eb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	2200      	movs	r2, #0
 8007eba:	2100      	movs	r1, #0
 8007ebc:	6878      	ldr	r0, [r7, #4]
 8007ebe:	f000 fc16 	bl	80086ee <USBD_LL_Transmit>

  return USBD_OK;
 8007ec2:	2300      	movs	r3, #0
}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3708      	adds	r7, #8
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b082      	sub	sp, #8
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007edc:	2300      	movs	r3, #0
 8007ede:	2200      	movs	r2, #0
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 fc26 	bl	8008734 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ee8:	2300      	movs	r3, #0
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3708      	adds	r7, #8
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}
	...

08007ef4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ef8:	2200      	movs	r2, #0
 8007efa:	4912      	ldr	r1, [pc, #72]	; (8007f44 <MX_USB_DEVICE_Init+0x50>)
 8007efc:	4812      	ldr	r0, [pc, #72]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007efe:	f7fe ff5e 	bl	8006dbe <USBD_Init>
 8007f02:	4603      	mov	r3, r0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d001      	beq.n	8007f0c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007f08:	f7f8 fb3a 	bl	8000580 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007f0c:	490f      	ldr	r1, [pc, #60]	; (8007f4c <MX_USB_DEVICE_Init+0x58>)
 8007f0e:	480e      	ldr	r0, [pc, #56]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f10:	f7fe ff80 	bl	8006e14 <USBD_RegisterClass>
 8007f14:	4603      	mov	r3, r0
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d001      	beq.n	8007f1e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f1a:	f7f8 fb31 	bl	8000580 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007f1e:	490c      	ldr	r1, [pc, #48]	; (8007f50 <MX_USB_DEVICE_Init+0x5c>)
 8007f20:	4809      	ldr	r0, [pc, #36]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f22:	f7fe feb1 	bl	8006c88 <USBD_CDC_RegisterInterface>
 8007f26:	4603      	mov	r3, r0
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d001      	beq.n	8007f30 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007f2c:	f7f8 fb28 	bl	8000580 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f30:	4805      	ldr	r0, [pc, #20]	; (8007f48 <MX_USB_DEVICE_Init+0x54>)
 8007f32:	f7fe ff88 	bl	8006e46 <USBD_Start>
 8007f36:	4603      	mov	r3, r0
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007f3c:	f7f8 fb20 	bl	8000580 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f40:	bf00      	nop
 8007f42:	bd80      	pop	{r7, pc}
 8007f44:	20000160 	.word	0x20000160
 8007f48:	2000020c 	.word	0x2000020c
 8007f4c:	2000004c 	.word	0x2000004c
 8007f50:	20000150 	.word	0x20000150

08007f54 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007f58:	2200      	movs	r2, #0
 8007f5a:	4905      	ldr	r1, [pc, #20]	; (8007f70 <CDC_Init_FS+0x1c>)
 8007f5c:	4805      	ldr	r0, [pc, #20]	; (8007f74 <CDC_Init_FS+0x20>)
 8007f5e:	f7fe fea9 	bl	8006cb4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007f62:	4905      	ldr	r1, [pc, #20]	; (8007f78 <CDC_Init_FS+0x24>)
 8007f64:	4803      	ldr	r0, [pc, #12]	; (8007f74 <CDC_Init_FS+0x20>)
 8007f66:	f7fe febe 	bl	8006ce6 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007f6a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	200008d0 	.word	0x200008d0
 8007f74:	2000020c 	.word	0x2000020c
 8007f78:	200004d0 	.word	0x200004d0

08007f7c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007f80:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bc80      	pop	{r7}
 8007f88:	4770      	bx	lr
	...

08007f8c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007f8c:	b480      	push	{r7}
 8007f8e:	b083      	sub	sp, #12
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	4603      	mov	r3, r0
 8007f94:	6039      	str	r1, [r7, #0]
 8007f96:	71fb      	strb	r3, [r7, #7]
 8007f98:	4613      	mov	r3, r2
 8007f9a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */

  switch(cmd)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	2b23      	cmp	r3, #35	; 0x23
 8007fa0:	d84a      	bhi.n	8008038 <CDC_Control_FS+0xac>
 8007fa2:	a201      	add	r2, pc, #4	; (adr r2, 8007fa8 <CDC_Control_FS+0x1c>)
 8007fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa8:	08008039 	.word	0x08008039
 8007fac:	08008039 	.word	0x08008039
 8007fb0:	08008039 	.word	0x08008039
 8007fb4:	08008039 	.word	0x08008039
 8007fb8:	08008039 	.word	0x08008039
 8007fbc:	08008039 	.word	0x08008039
 8007fc0:	08008039 	.word	0x08008039
 8007fc4:	08008039 	.word	0x08008039
 8007fc8:	08008039 	.word	0x08008039
 8007fcc:	08008039 	.word	0x08008039
 8007fd0:	08008039 	.word	0x08008039
 8007fd4:	08008039 	.word	0x08008039
 8007fd8:	08008039 	.word	0x08008039
 8007fdc:	08008039 	.word	0x08008039
 8007fe0:	08008039 	.word	0x08008039
 8007fe4:	08008039 	.word	0x08008039
 8007fe8:	08008039 	.word	0x08008039
 8007fec:	08008039 	.word	0x08008039
 8007ff0:	08008039 	.word	0x08008039
 8007ff4:	08008039 	.word	0x08008039
 8007ff8:	08008039 	.word	0x08008039
 8007ffc:	08008039 	.word	0x08008039
 8008000:	08008039 	.word	0x08008039
 8008004:	08008039 	.word	0x08008039
 8008008:	08008039 	.word	0x08008039
 800800c:	08008039 	.word	0x08008039
 8008010:	08008039 	.word	0x08008039
 8008014:	08008039 	.word	0x08008039
 8008018:	08008039 	.word	0x08008039
 800801c:	08008039 	.word	0x08008039
 8008020:	08008039 	.word	0x08008039
 8008024:	08008039 	.word	0x08008039
 8008028:	08008039 	.word	0x08008039
 800802c:	08008039 	.word	0x08008039
 8008030:	08008039 	.word	0x08008039
 8008034:	08008039 	.word	0x08008039
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008038:	bf00      	nop
  }

  return (USBD_OK);
 800803a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800803c:	4618      	mov	r0, r3
 800803e:	370c      	adds	r7, #12
 8008040:	46bd      	mov	sp, r7
 8008042:	bc80      	pop	{r7}
 8008044:	4770      	bx	lr
 8008046:	bf00      	nop

08008048 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008048:	b580      	push	{r7, lr}
 800804a:	b082      	sub	sp, #8
 800804c:	af00      	add	r7, sp, #0
 800804e:	6078      	str	r0, [r7, #4]
 8008050:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008052:	6879      	ldr	r1, [r7, #4]
 8008054:	4808      	ldr	r0, [pc, #32]	; (8008078 <CDC_Receive_FS+0x30>)
 8008056:	f7fe fe46 	bl	8006ce6 <USBD_CDC_SetRxBuffer>
	  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800805a:	4807      	ldr	r0, [pc, #28]	; (8008078 <CDC_Receive_FS+0x30>)
 800805c:	f7fe fe85 	bl	8006d6a <USBD_CDC_ReceivePacket>
	  CDC_Transmit_FS(Buf,*Len);
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	b29b      	uxth	r3, r3
 8008066:	4619      	mov	r1, r3
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 f807 	bl	800807c <CDC_Transmit_FS>
	  return (USBD_OK);
 800806e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008070:	4618      	mov	r0, r3
 8008072:	3708      	adds	r7, #8
 8008074:	46bd      	mov	sp, r7
 8008076:	bd80      	pop	{r7, pc}
 8008078:	2000020c 	.word	0x2000020c

0800807c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800807c:	b580      	push	{r7, lr}
 800807e:	b084      	sub	sp, #16
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	460b      	mov	r3, r1
 8008086:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800808c:	4b0d      	ldr	r3, [pc, #52]	; (80080c4 <CDC_Transmit_FS+0x48>)
 800808e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008092:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800809e:	2301      	movs	r3, #1
 80080a0:	e00b      	b.n	80080ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80080a2:	887b      	ldrh	r3, [r7, #2]
 80080a4:	461a      	mov	r2, r3
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4806      	ldr	r0, [pc, #24]	; (80080c4 <CDC_Transmit_FS+0x48>)
 80080aa:	f7fe fe03 	bl	8006cb4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80080ae:	4805      	ldr	r0, [pc, #20]	; (80080c4 <CDC_Transmit_FS+0x48>)
 80080b0:	f7fe fe2c 	bl	8006d0c <USBD_CDC_TransmitPacket>
 80080b4:	4603      	mov	r3, r0
 80080b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80080b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80080ba:	4618      	mov	r0, r3
 80080bc:	3710      	adds	r7, #16
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}
 80080c2:	bf00      	nop
 80080c4:	2000020c 	.word	0x2000020c

080080c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b083      	sub	sp, #12
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	4603      	mov	r3, r0
 80080d0:	6039      	str	r1, [r7, #0]
 80080d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	2212      	movs	r2, #18
 80080d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80080da:	4b03      	ldr	r3, [pc, #12]	; (80080e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80080dc:	4618      	mov	r0, r3
 80080de:	370c      	adds	r7, #12
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bc80      	pop	{r7}
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	2000017c 	.word	0x2000017c

080080ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b083      	sub	sp, #12
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	4603      	mov	r3, r0
 80080f4:	6039      	str	r1, [r7, #0]
 80080f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80080f8:	683b      	ldr	r3, [r7, #0]
 80080fa:	2204      	movs	r2, #4
 80080fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80080fe:	4b03      	ldr	r3, [pc, #12]	; (800810c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008100:	4618      	mov	r0, r3
 8008102:	370c      	adds	r7, #12
 8008104:	46bd      	mov	sp, r7
 8008106:	bc80      	pop	{r7}
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	20000190 	.word	0x20000190

08008110 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	4603      	mov	r3, r0
 8008118:	6039      	str	r1, [r7, #0]
 800811a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800811c:	79fb      	ldrb	r3, [r7, #7]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d105      	bne.n	800812e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008122:	683a      	ldr	r2, [r7, #0]
 8008124:	4907      	ldr	r1, [pc, #28]	; (8008144 <USBD_FS_ProductStrDescriptor+0x34>)
 8008126:	4808      	ldr	r0, [pc, #32]	; (8008148 <USBD_FS_ProductStrDescriptor+0x38>)
 8008128:	f7ff fe06 	bl	8007d38 <USBD_GetString>
 800812c:	e004      	b.n	8008138 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800812e:	683a      	ldr	r2, [r7, #0]
 8008130:	4904      	ldr	r1, [pc, #16]	; (8008144 <USBD_FS_ProductStrDescriptor+0x34>)
 8008132:	4805      	ldr	r0, [pc, #20]	; (8008148 <USBD_FS_ProductStrDescriptor+0x38>)
 8008134:	f7ff fe00 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008138:	4b02      	ldr	r3, [pc, #8]	; (8008144 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800813a:	4618      	mov	r0, r3
 800813c:	3708      	adds	r7, #8
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	20000cd0 	.word	0x20000cd0
 8008148:	080088b8 	.word	0x080088b8

0800814c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800814c:	b580      	push	{r7, lr}
 800814e:	b082      	sub	sp, #8
 8008150:	af00      	add	r7, sp, #0
 8008152:	4603      	mov	r3, r0
 8008154:	6039      	str	r1, [r7, #0]
 8008156:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008158:	683a      	ldr	r2, [r7, #0]
 800815a:	4904      	ldr	r1, [pc, #16]	; (800816c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800815c:	4804      	ldr	r0, [pc, #16]	; (8008170 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800815e:	f7ff fdeb 	bl	8007d38 <USBD_GetString>
  return USBD_StrDesc;
 8008162:	4b02      	ldr	r3, [pc, #8]	; (800816c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008164:	4618      	mov	r0, r3
 8008166:	3708      	adds	r7, #8
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	20000cd0 	.word	0x20000cd0
 8008170:	080088d0 	.word	0x080088d0

08008174 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	4603      	mov	r3, r0
 800817c:	6039      	str	r1, [r7, #0]
 800817e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	221a      	movs	r2, #26
 8008184:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008186:	f000 f843 	bl	8008210 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800818a:	4b02      	ldr	r3, [pc, #8]	; (8008194 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800818c:	4618      	mov	r0, r3
 800818e:	3708      	adds	r7, #8
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}
 8008194:	20000194 	.word	0x20000194

08008198 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	4603      	mov	r3, r0
 80081a0:	6039      	str	r1, [r7, #0]
 80081a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80081a4:	79fb      	ldrb	r3, [r7, #7]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d105      	bne.n	80081b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081aa:	683a      	ldr	r2, [r7, #0]
 80081ac:	4907      	ldr	r1, [pc, #28]	; (80081cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ae:	4808      	ldr	r0, [pc, #32]	; (80081d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081b0:	f7ff fdc2 	bl	8007d38 <USBD_GetString>
 80081b4:	e004      	b.n	80081c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80081ba:	4805      	ldr	r0, [pc, #20]	; (80081d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80081bc:	f7ff fdbc 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081c0:	4b02      	ldr	r3, [pc, #8]	; (80081cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3708      	adds	r7, #8
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}
 80081ca:	bf00      	nop
 80081cc:	20000cd0 	.word	0x20000cd0
 80081d0:	080088e4 	.word	0x080088e4

080081d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b082      	sub	sp, #8
 80081d8:	af00      	add	r7, sp, #0
 80081da:	4603      	mov	r3, r0
 80081dc:	6039      	str	r1, [r7, #0]
 80081de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80081e0:	79fb      	ldrb	r3, [r7, #7]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d105      	bne.n	80081f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081e6:	683a      	ldr	r2, [r7, #0]
 80081e8:	4907      	ldr	r1, [pc, #28]	; (8008208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081ea:	4808      	ldr	r0, [pc, #32]	; (800820c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081ec:	f7ff fda4 	bl	8007d38 <USBD_GetString>
 80081f0:	e004      	b.n	80081fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80081f2:	683a      	ldr	r2, [r7, #0]
 80081f4:	4904      	ldr	r1, [pc, #16]	; (8008208 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80081f6:	4805      	ldr	r0, [pc, #20]	; (800820c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80081f8:	f7ff fd9e 	bl	8007d38 <USBD_GetString>
  }
  return USBD_StrDesc;
 80081fc:	4b02      	ldr	r3, [pc, #8]	; (8008208 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80081fe:	4618      	mov	r0, r3
 8008200:	3708      	adds	r7, #8
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000cd0 	.word	0x20000cd0
 800820c:	080088f0 	.word	0x080088f0

08008210 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008216:	4b0f      	ldr	r3, [pc, #60]	; (8008254 <Get_SerialNum+0x44>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800821c:	4b0e      	ldr	r3, [pc, #56]	; (8008258 <Get_SerialNum+0x48>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008222:	4b0e      	ldr	r3, [pc, #56]	; (800825c <Get_SerialNum+0x4c>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008228:	68fa      	ldr	r2, [r7, #12]
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4413      	add	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2b00      	cmp	r3, #0
 8008234:	d009      	beq.n	800824a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008236:	2208      	movs	r2, #8
 8008238:	4909      	ldr	r1, [pc, #36]	; (8008260 <Get_SerialNum+0x50>)
 800823a:	68f8      	ldr	r0, [r7, #12]
 800823c:	f000 f814 	bl	8008268 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008240:	2204      	movs	r2, #4
 8008242:	4908      	ldr	r1, [pc, #32]	; (8008264 <Get_SerialNum+0x54>)
 8008244:	68b8      	ldr	r0, [r7, #8]
 8008246:	f000 f80f 	bl	8008268 <IntToUnicode>
  }
}
 800824a:	bf00      	nop
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	1ffff7e8 	.word	0x1ffff7e8
 8008258:	1ffff7ec 	.word	0x1ffff7ec
 800825c:	1ffff7f0 	.word	0x1ffff7f0
 8008260:	20000196 	.word	0x20000196
 8008264:	200001a6 	.word	0x200001a6

08008268 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008268:	b480      	push	{r7}
 800826a:	b087      	sub	sp, #28
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	4613      	mov	r3, r2
 8008274:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008276:	2300      	movs	r3, #0
 8008278:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800827a:	2300      	movs	r3, #0
 800827c:	75fb      	strb	r3, [r7, #23]
 800827e:	e027      	b.n	80082d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	0f1b      	lsrs	r3, r3, #28
 8008284:	2b09      	cmp	r3, #9
 8008286:	d80b      	bhi.n	80082a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	0f1b      	lsrs	r3, r3, #28
 800828c:	b2da      	uxtb	r2, r3
 800828e:	7dfb      	ldrb	r3, [r7, #23]
 8008290:	005b      	lsls	r3, r3, #1
 8008292:	4619      	mov	r1, r3
 8008294:	68bb      	ldr	r3, [r7, #8]
 8008296:	440b      	add	r3, r1
 8008298:	3230      	adds	r2, #48	; 0x30
 800829a:	b2d2      	uxtb	r2, r2
 800829c:	701a      	strb	r2, [r3, #0]
 800829e:	e00a      	b.n	80082b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	0f1b      	lsrs	r3, r3, #28
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	7dfb      	ldrb	r3, [r7, #23]
 80082a8:	005b      	lsls	r3, r3, #1
 80082aa:	4619      	mov	r1, r3
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	440b      	add	r3, r1
 80082b0:	3237      	adds	r2, #55	; 0x37
 80082b2:	b2d2      	uxtb	r2, r2
 80082b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	011b      	lsls	r3, r3, #4
 80082ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80082bc:	7dfb      	ldrb	r3, [r7, #23]
 80082be:	005b      	lsls	r3, r3, #1
 80082c0:	3301      	adds	r3, #1
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	4413      	add	r3, r2
 80082c6:	2200      	movs	r2, #0
 80082c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80082ca:	7dfb      	ldrb	r3, [r7, #23]
 80082cc:	3301      	adds	r3, #1
 80082ce:	75fb      	strb	r3, [r7, #23]
 80082d0:	7dfa      	ldrb	r2, [r7, #23]
 80082d2:	79fb      	ldrb	r3, [r7, #7]
 80082d4:	429a      	cmp	r2, r3
 80082d6:	d3d3      	bcc.n	8008280 <IntToUnicode+0x18>
  }
}
 80082d8:	bf00      	nop
 80082da:	bf00      	nop
 80082dc:	371c      	adds	r7, #28
 80082de:	46bd      	mov	sp, r7
 80082e0:	bc80      	pop	{r7}
 80082e2:	4770      	bx	lr

080082e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	b084      	sub	sp, #16
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a0d      	ldr	r2, [pc, #52]	; (8008328 <HAL_PCD_MspInit+0x44>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80082f6:	4b0d      	ldr	r3, [pc, #52]	; (800832c <HAL_PCD_MspInit+0x48>)
 80082f8:	69db      	ldr	r3, [r3, #28]
 80082fa:	4a0c      	ldr	r2, [pc, #48]	; (800832c <HAL_PCD_MspInit+0x48>)
 80082fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008300:	61d3      	str	r3, [r2, #28]
 8008302:	4b0a      	ldr	r3, [pc, #40]	; (800832c <HAL_PCD_MspInit+0x48>)
 8008304:	69db      	ldr	r3, [r3, #28]
 8008306:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800830a:	60fb      	str	r3, [r7, #12]
 800830c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800830e:	2200      	movs	r2, #0
 8008310:	2100      	movs	r1, #0
 8008312:	2014      	movs	r0, #20
 8008314:	f7f9 fb1b 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008318:	2014      	movs	r0, #20
 800831a:	f7f9 fb34 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
 8008326:	bf00      	nop
 8008328:	40005c00 	.word	0x40005c00
 800832c:	40021000 	.word	0x40021000

08008330 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b082      	sub	sp, #8
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008344:	4619      	mov	r1, r3
 8008346:	4610      	mov	r0, r2
 8008348:	f7fe fdc5 	bl	8006ed6 <USBD_LL_SetupStage>
}
 800834c:	bf00      	nop
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	460b      	mov	r3, r1
 800835e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008366:	78fa      	ldrb	r2, [r7, #3]
 8008368:	6879      	ldr	r1, [r7, #4]
 800836a:	4613      	mov	r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4413      	add	r3, r2
 8008370:	00db      	lsls	r3, r3, #3
 8008372:	440b      	add	r3, r1
 8008374:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008378:	681a      	ldr	r2, [r3, #0]
 800837a:	78fb      	ldrb	r3, [r7, #3]
 800837c:	4619      	mov	r1, r3
 800837e:	f7fe fdf7 	bl	8006f70 <USBD_LL_DataOutStage>
}
 8008382:	bf00      	nop
 8008384:	3708      	adds	r7, #8
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}

0800838a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800838a:	b580      	push	{r7, lr}
 800838c:	b082      	sub	sp, #8
 800838e:	af00      	add	r7, sp, #0
 8008390:	6078      	str	r0, [r7, #4]
 8008392:	460b      	mov	r3, r1
 8008394:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	440b      	add	r3, r1
 80083aa:	333c      	adds	r3, #60	; 0x3c
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	78fb      	ldrb	r3, [r7, #3]
 80083b0:	4619      	mov	r1, r3
 80083b2:	f7fe fe4e 	bl	8007052 <USBD_LL_DataInStage>
}
 80083b6:	bf00      	nop
 80083b8:	3708      	adds	r7, #8
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083cc:	4618      	mov	r0, r3
 80083ce:	f7fe ff5e 	bl	800728e <USBD_LL_SOF>
}
 80083d2:	bf00      	nop
 80083d4:	3708      	adds	r7, #8
 80083d6:	46bd      	mov	sp, r7
 80083d8:	bd80      	pop	{r7, pc}

080083da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80083da:	b580      	push	{r7, lr}
 80083dc:	b084      	sub	sp, #16
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80083e2:	2301      	movs	r3, #1
 80083e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	689b      	ldr	r3, [r3, #8]
 80083ea:	2b02      	cmp	r3, #2
 80083ec:	d001      	beq.n	80083f2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80083ee:	f7f8 f8c7 	bl	8000580 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80083f8:	7bfa      	ldrb	r2, [r7, #15]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7fe ff0e 	bl	800721e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008408:	4618      	mov	r0, r3
 800840a:	f7fe fec7 	bl	800719c <USBD_LL_Reset>
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b082      	sub	sp, #8
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008426:	4618      	mov	r0, r3
 8008428:	f7fe ff08 	bl	800723c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	699b      	ldr	r3, [r3, #24]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d005      	beq.n	8008440 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008434:	4b04      	ldr	r3, [pc, #16]	; (8008448 <HAL_PCD_SuspendCallback+0x30>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	4a03      	ldr	r2, [pc, #12]	; (8008448 <HAL_PCD_SuspendCallback+0x30>)
 800843a:	f043 0306 	orr.w	r3, r3, #6
 800843e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008440:	bf00      	nop
 8008442:	3708      	adds	r7, #8
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	e000ed00 	.word	0xe000ed00

0800844c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800844c:	b580      	push	{r7, lr}
 800844e:	b082      	sub	sp, #8
 8008450:	af00      	add	r7, sp, #0
 8008452:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800845a:	4618      	mov	r0, r3
 800845c:	f7fe ff02 	bl	8007264 <USBD_LL_Resume>
}
 8008460:	bf00      	nop
 8008462:	3708      	adds	r7, #8
 8008464:	46bd      	mov	sp, r7
 8008466:	bd80      	pop	{r7, pc}

08008468 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008468:	b580      	push	{r7, lr}
 800846a:	b082      	sub	sp, #8
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008470:	4a28      	ldr	r2, [pc, #160]	; (8008514 <USBD_LL_Init+0xac>)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a26      	ldr	r2, [pc, #152]	; (8008514 <USBD_LL_Init+0xac>)
 800847c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008480:	4b24      	ldr	r3, [pc, #144]	; (8008514 <USBD_LL_Init+0xac>)
 8008482:	4a25      	ldr	r2, [pc, #148]	; (8008518 <USBD_LL_Init+0xb0>)
 8008484:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008486:	4b23      	ldr	r3, [pc, #140]	; (8008514 <USBD_LL_Init+0xac>)
 8008488:	2208      	movs	r2, #8
 800848a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800848c:	4b21      	ldr	r3, [pc, #132]	; (8008514 <USBD_LL_Init+0xac>)
 800848e:	2202      	movs	r2, #2
 8008490:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008492:	4b20      	ldr	r3, [pc, #128]	; (8008514 <USBD_LL_Init+0xac>)
 8008494:	2200      	movs	r2, #0
 8008496:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008498:	4b1e      	ldr	r3, [pc, #120]	; (8008514 <USBD_LL_Init+0xac>)
 800849a:	2200      	movs	r2, #0
 800849c:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 800849e:	4b1d      	ldr	r3, [pc, #116]	; (8008514 <USBD_LL_Init+0xac>)
 80084a0:	2200      	movs	r2, #0
 80084a2:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80084a4:	481b      	ldr	r0, [pc, #108]	; (8008514 <USBD_LL_Init+0xac>)
 80084a6:	f7f9 fa88 	bl	80019ba <HAL_PCD_Init>
 80084aa:	4603      	mov	r3, r0
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d001      	beq.n	80084b4 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80084b0:	f7f8 f866 	bl	8000580 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ba:	2318      	movs	r3, #24
 80084bc:	2200      	movs	r2, #0
 80084be:	2100      	movs	r1, #0
 80084c0:	f7fa fefc 	bl	80032bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ca:	2358      	movs	r3, #88	; 0x58
 80084cc:	2200      	movs	r2, #0
 80084ce:	2180      	movs	r1, #128	; 0x80
 80084d0:	f7fa fef4 	bl	80032bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084da:	23c0      	movs	r3, #192	; 0xc0
 80084dc:	2200      	movs	r2, #0
 80084de:	2181      	movs	r1, #129	; 0x81
 80084e0:	f7fa feec 	bl	80032bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084ea:	f44f 7388 	mov.w	r3, #272	; 0x110
 80084ee:	2200      	movs	r2, #0
 80084f0:	2101      	movs	r1, #1
 80084f2:	f7fa fee3 	bl	80032bc <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80084fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008500:	2200      	movs	r2, #0
 8008502:	2182      	movs	r1, #130	; 0x82
 8008504:	f7fa feda 	bl	80032bc <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008508:	2300      	movs	r3, #0
}
 800850a:	4618      	mov	r0, r3
 800850c:	3708      	adds	r7, #8
 800850e:	46bd      	mov	sp, r7
 8008510:	bd80      	pop	{r7, pc}
 8008512:	bf00      	nop
 8008514:	20000ed0 	.word	0x20000ed0
 8008518:	40005c00 	.word	0x40005c00

0800851c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008524:	2300      	movs	r3, #0
 8008526:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008528:	2300      	movs	r3, #0
 800852a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008532:	4618      	mov	r0, r3
 8008534:	f7f9 fb4c 	bl	8001bd0 <HAL_PCD_Start>
 8008538:	4603      	mov	r3, r0
 800853a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800853c:	7bfb      	ldrb	r3, [r7, #15]
 800853e:	4618      	mov	r0, r3
 8008540:	f000 f94e 	bl	80087e0 <USBD_Get_USB_Status>
 8008544:	4603      	mov	r3, r0
 8008546:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008548:	7bbb      	ldrb	r3, [r7, #14]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3710      	adds	r7, #16
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}

08008552 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	b084      	sub	sp, #16
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
 800855a:	4608      	mov	r0, r1
 800855c:	4611      	mov	r1, r2
 800855e:	461a      	mov	r2, r3
 8008560:	4603      	mov	r3, r0
 8008562:	70fb      	strb	r3, [r7, #3]
 8008564:	460b      	mov	r3, r1
 8008566:	70bb      	strb	r3, [r7, #2]
 8008568:	4613      	mov	r3, r2
 800856a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800856c:	2300      	movs	r3, #0
 800856e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008570:	2300      	movs	r3, #0
 8008572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800857a:	78bb      	ldrb	r3, [r7, #2]
 800857c:	883a      	ldrh	r2, [r7, #0]
 800857e:	78f9      	ldrb	r1, [r7, #3]
 8008580:	f7f9 fcc4 	bl	8001f0c <HAL_PCD_EP_Open>
 8008584:	4603      	mov	r3, r0
 8008586:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	4618      	mov	r0, r3
 800858c:	f000 f928 	bl	80087e0 <USBD_Get_USB_Status>
 8008590:	4603      	mov	r3, r0
 8008592:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008594:	7bbb      	ldrb	r3, [r7, #14]
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}

0800859e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800859e:	b580      	push	{r7, lr}
 80085a0:	b084      	sub	sp, #16
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
 80085a6:	460b      	mov	r3, r1
 80085a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085aa:	2300      	movs	r3, #0
 80085ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085b8:	78fa      	ldrb	r2, [r7, #3]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4618      	mov	r0, r3
 80085be:	f7f9 fd0b 	bl	8001fd8 <HAL_PCD_EP_Close>
 80085c2:	4603      	mov	r3, r0
 80085c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f000 f909 	bl	80087e0 <USBD_Get_USB_Status>
 80085ce:	4603      	mov	r3, r0
 80085d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80085d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3710      	adds	r7, #16
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	460b      	mov	r3, r1
 80085e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085e8:	2300      	movs	r3, #0
 80085ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80085ec:	2300      	movs	r3, #0
 80085ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80085f6:	78fa      	ldrb	r2, [r7, #3]
 80085f8:	4611      	mov	r1, r2
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f9 fdcb 	bl	8002196 <HAL_PCD_EP_SetStall>
 8008600:	4603      	mov	r3, r0
 8008602:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	4618      	mov	r0, r3
 8008608:	f000 f8ea 	bl	80087e0 <USBD_Get_USB_Status>
 800860c:	4603      	mov	r3, r0
 800860e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008610:	7bbb      	ldrb	r3, [r7, #14]
}
 8008612:	4618      	mov	r0, r3
 8008614:	3710      	adds	r7, #16
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}

0800861a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800861a:	b580      	push	{r7, lr}
 800861c:	b084      	sub	sp, #16
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	460b      	mov	r3, r1
 8008624:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	4611      	mov	r1, r2
 8008638:	4618      	mov	r0, r3
 800863a:	f7f9 fe0c 	bl	8002256 <HAL_PCD_EP_ClrStall>
 800863e:	4603      	mov	r3, r0
 8008640:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 f8cb 	bl	80087e0 <USBD_Get_USB_Status>
 800864a:	4603      	mov	r3, r0
 800864c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3710      	adds	r7, #16
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008658:	b480      	push	{r7}
 800865a:	b085      	sub	sp, #20
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	460b      	mov	r3, r1
 8008662:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800866a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800866c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008670:	2b00      	cmp	r3, #0
 8008672:	da0c      	bge.n	800868e <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800867a:	68f9      	ldr	r1, [r7, #12]
 800867c:	1c5a      	adds	r2, r3, #1
 800867e:	4613      	mov	r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	4413      	add	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	440b      	add	r3, r1
 8008688:	3302      	adds	r3, #2
 800868a:	781b      	ldrb	r3, [r3, #0]
 800868c:	e00b      	b.n	80086a6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800868e:	78fb      	ldrb	r3, [r7, #3]
 8008690:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008694:	68f9      	ldr	r1, [r7, #12]
 8008696:	4613      	mov	r3, r2
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	00db      	lsls	r3, r3, #3
 800869e:	440b      	add	r3, r1
 80086a0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80086a4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bc80      	pop	{r7}
 80086ae:	4770      	bx	lr

080086b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	460b      	mov	r3, r1
 80086ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80086c0:	2300      	movs	r3, #0
 80086c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80086ca:	78fa      	ldrb	r2, [r7, #3]
 80086cc:	4611      	mov	r1, r2
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7f9 fbf7 	bl	8001ec2 <HAL_PCD_SetAddress>
 80086d4:	4603      	mov	r3, r0
 80086d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80086d8:	7bfb      	ldrb	r3, [r7, #15]
 80086da:	4618      	mov	r0, r3
 80086dc:	f000 f880 	bl	80087e0 <USBD_Get_USB_Status>
 80086e0:	4603      	mov	r3, r0
 80086e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 80086ee:	b580      	push	{r7, lr}
 80086f0:	b086      	sub	sp, #24
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	60f8      	str	r0, [r7, #12]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	461a      	mov	r2, r3
 80086fa:	460b      	mov	r3, r1
 80086fc:	72fb      	strb	r3, [r7, #11]
 80086fe:	4613      	mov	r3, r2
 8008700:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008702:	2300      	movs	r3, #0
 8008704:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008706:	2300      	movs	r3, #0
 8008708:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008710:	893b      	ldrh	r3, [r7, #8]
 8008712:	7af9      	ldrb	r1, [r7, #11]
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	f7f9 fcfb 	bl	8002110 <HAL_PCD_EP_Transmit>
 800871a:	4603      	mov	r3, r0
 800871c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800871e:	7dfb      	ldrb	r3, [r7, #23]
 8008720:	4618      	mov	r0, r3
 8008722:	f000 f85d 	bl	80087e0 <USBD_Get_USB_Status>
 8008726:	4603      	mov	r3, r0
 8008728:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800872a:	7dbb      	ldrb	r3, [r7, #22]
}
 800872c:	4618      	mov	r0, r3
 800872e:	3718      	adds	r7, #24
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	60f8      	str	r0, [r7, #12]
 800873c:	607a      	str	r2, [r7, #4]
 800873e:	461a      	mov	r2, r3
 8008740:	460b      	mov	r3, r1
 8008742:	72fb      	strb	r3, [r7, #11]
 8008744:	4613      	mov	r3, r2
 8008746:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008748:	2300      	movs	r3, #0
 800874a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800874c:	2300      	movs	r3, #0
 800874e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008756:	893b      	ldrh	r3, [r7, #8]
 8008758:	7af9      	ldrb	r1, [r7, #11]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	f7f9 fc84 	bl	8002068 <HAL_PCD_EP_Receive>
 8008760:	4603      	mov	r3, r0
 8008762:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008764:	7dfb      	ldrb	r3, [r7, #23]
 8008766:	4618      	mov	r0, r3
 8008768:	f000 f83a 	bl	80087e0 <USBD_Get_USB_Status>
 800876c:	4603      	mov	r3, r0
 800876e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008770:	7dbb      	ldrb	r3, [r7, #22]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3718      	adds	r7, #24
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}

0800877a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800877a:	b580      	push	{r7, lr}
 800877c:	b082      	sub	sp, #8
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	460b      	mov	r3, r1
 8008784:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800878c:	78fa      	ldrb	r2, [r7, #3]
 800878e:	4611      	mov	r1, r2
 8008790:	4618      	mov	r0, r3
 8008792:	f7f9 fca6 	bl	80020e2 <HAL_PCD_EP_GetRxCount>
 8008796:	4603      	mov	r3, r0
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80087a8:	4b02      	ldr	r3, [pc, #8]	; (80087b4 <USBD_static_malloc+0x14>)
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	370c      	adds	r7, #12
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bc80      	pop	{r7}
 80087b2:	4770      	bx	lr
 80087b4:	200011bc 	.word	0x200011bc

080087b8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80087b8:	b480      	push	{r7}
 80087ba:	b083      	sub	sp, #12
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]

}
 80087c0:	bf00      	nop
 80087c2:	370c      	adds	r7, #12
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bc80      	pop	{r7}
 80087c8:	4770      	bx	lr

080087ca <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ca:	b480      	push	{r7}
 80087cc:	b083      	sub	sp, #12
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
 80087d2:	460b      	mov	r3, r1
 80087d4:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80087d6:	bf00      	nop
 80087d8:	370c      	adds	r7, #12
 80087da:	46bd      	mov	sp, r7
 80087dc:	bc80      	pop	{r7}
 80087de:	4770      	bx	lr

080087e0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80087e0:	b480      	push	{r7}
 80087e2:	b085      	sub	sp, #20
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	4603      	mov	r3, r0
 80087e8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80087ea:	2300      	movs	r3, #0
 80087ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80087ee:	79fb      	ldrb	r3, [r7, #7]
 80087f0:	2b03      	cmp	r3, #3
 80087f2:	d817      	bhi.n	8008824 <USBD_Get_USB_Status+0x44>
 80087f4:	a201      	add	r2, pc, #4	; (adr r2, 80087fc <USBD_Get_USB_Status+0x1c>)
 80087f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087fa:	bf00      	nop
 80087fc:	0800880d 	.word	0x0800880d
 8008800:	08008813 	.word	0x08008813
 8008804:	08008819 	.word	0x08008819
 8008808:	0800881f 	.word	0x0800881f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800880c:	2300      	movs	r3, #0
 800880e:	73fb      	strb	r3, [r7, #15]
    break;
 8008810:	e00b      	b.n	800882a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008812:	2302      	movs	r3, #2
 8008814:	73fb      	strb	r3, [r7, #15]
    break;
 8008816:	e008      	b.n	800882a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008818:	2301      	movs	r3, #1
 800881a:	73fb      	strb	r3, [r7, #15]
    break;
 800881c:	e005      	b.n	800882a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800881e:	2302      	movs	r3, #2
 8008820:	73fb      	strb	r3, [r7, #15]
    break;
 8008822:	e002      	b.n	800882a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008824:	2302      	movs	r3, #2
 8008826:	73fb      	strb	r3, [r7, #15]
    break;
 8008828:	bf00      	nop
  }
  return usb_status;
 800882a:	7bfb      	ldrb	r3, [r7, #15]
}
 800882c:	4618      	mov	r0, r3
 800882e:	3714      	adds	r7, #20
 8008830:	46bd      	mov	sp, r7
 8008832:	bc80      	pop	{r7}
 8008834:	4770      	bx	lr
 8008836:	bf00      	nop

08008838 <__libc_init_array>:
 8008838:	b570      	push	{r4, r5, r6, lr}
 800883a:	2600      	movs	r6, #0
 800883c:	4d0c      	ldr	r5, [pc, #48]	; (8008870 <__libc_init_array+0x38>)
 800883e:	4c0d      	ldr	r4, [pc, #52]	; (8008874 <__libc_init_array+0x3c>)
 8008840:	1b64      	subs	r4, r4, r5
 8008842:	10a4      	asrs	r4, r4, #2
 8008844:	42a6      	cmp	r6, r4
 8008846:	d109      	bne.n	800885c <__libc_init_array+0x24>
 8008848:	f000 f822 	bl	8008890 <_init>
 800884c:	2600      	movs	r6, #0
 800884e:	4d0a      	ldr	r5, [pc, #40]	; (8008878 <__libc_init_array+0x40>)
 8008850:	4c0a      	ldr	r4, [pc, #40]	; (800887c <__libc_init_array+0x44>)
 8008852:	1b64      	subs	r4, r4, r5
 8008854:	10a4      	asrs	r4, r4, #2
 8008856:	42a6      	cmp	r6, r4
 8008858:	d105      	bne.n	8008866 <__libc_init_array+0x2e>
 800885a:	bd70      	pop	{r4, r5, r6, pc}
 800885c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008860:	4798      	blx	r3
 8008862:	3601      	adds	r6, #1
 8008864:	e7ee      	b.n	8008844 <__libc_init_array+0xc>
 8008866:	f855 3b04 	ldr.w	r3, [r5], #4
 800886a:	4798      	blx	r3
 800886c:	3601      	adds	r6, #1
 800886e:	e7f2      	b.n	8008856 <__libc_init_array+0x1e>
 8008870:	08008910 	.word	0x08008910
 8008874:	08008910 	.word	0x08008910
 8008878:	08008910 	.word	0x08008910
 800887c:	08008914 	.word	0x08008914

08008880 <memset>:
 8008880:	4603      	mov	r3, r0
 8008882:	4402      	add	r2, r0
 8008884:	4293      	cmp	r3, r2
 8008886:	d100      	bne.n	800888a <memset+0xa>
 8008888:	4770      	bx	lr
 800888a:	f803 1b01 	strb.w	r1, [r3], #1
 800888e:	e7f9      	b.n	8008884 <memset+0x4>

08008890 <_init>:
 8008890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008892:	bf00      	nop
 8008894:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008896:	bc08      	pop	{r3}
 8008898:	469e      	mov	lr, r3
 800889a:	4770      	bx	lr

0800889c <_fini>:
 800889c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800889e:	bf00      	nop
 80088a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80088a2:	bc08      	pop	{r3}
 80088a4:	469e      	mov	lr, r3
 80088a6:	4770      	bx	lr
